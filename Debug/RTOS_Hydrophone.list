
RTOS_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108bc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013280  08010b70  08010b70  00020b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023df0  08023df0  00033df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023df8  08023df8  00033df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023dfc  08023dfc  00033dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08023e00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0004ec40  2400007c  08023e7c  0004007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2404ecbc  08023e7c  0004ecbc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f9c5  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000523a  00000000  00000000  0006fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  00074cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c70  00000000  00000000  00076b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000541d  00000000  00000000  00078770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026436  00000000  00000000  0007db8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160a5e  00000000  00000000  000a3fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c5  00000000  00000000  00204a21  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008234  00000000  00000000  00204ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000038ec  00000000  00000000  0020cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010b54 	.word	0x08010b54

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08010b54 	.word	0x08010b54

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 f8be 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f88c 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 faa2 	bl	8000b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fa78 	bl	8000af8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fa6e 	bl	8000ae8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060c:	f000 f8fa 	bl	8000804 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 fa1e 	bl	8000a50 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000614:	f000 f970 	bl	80008f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000618:	482b      	ldr	r0, [pc, #172]	; (80006c8 <main+0xd4>)
 800061a:	f009 f881 	bl	8009720 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <main+0xd4>)
 8000622:	f009 f9c7 	bl	80099b4 <HAL_TIM_OC_Start>

  float32_t maxValue;

  // Initialize RFFT
  arm_rfft_fast_init_f32(&fft_handler, adc_buff_size);
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4828      	ldr	r0, [pc, #160]	; (80006cc <main+0xd8>)
 800062c:	f00f fa12 	bl	800fa54 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000630:	f00b fe9c 	bl	800c36c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AudioCapSem01 */
  AudioCapSem01Handle = osSemaphoreNew(1, 1, &AudioCapSem01_attributes);
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <main+0xdc>)
 8000636:	2101      	movs	r1, #1
 8000638:	2001      	movs	r0, #1
 800063a:	f00b ff73 	bl	800c524 <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <main+0xe0>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of FFTSem02 */
  FFTSem02Handle = osSemaphoreNew(1, 1, &FFTSem02_attributes);
 8000644:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <main+0xe4>)
 8000646:	2101      	movs	r1, #1
 8000648:	2001      	movs	r0, #1
 800064a:	f00b ff6b 	bl	800c524 <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a22      	ldr	r2, [pc, #136]	; (80006dc <main+0xe8>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of SendDataSem03 */
  SendDataSem03Handle = osSemaphoreNew(1, 1, &SendDataSem03_attributes);
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <main+0xec>)
 8000656:	2101      	movs	r1, #1
 8000658:	2001      	movs	r0, #1
 800065a:	f00b ff63 	bl	800c524 <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <main+0xf0>)
 8000662:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  // Initialize Sem values other than AudioCap to 0 before starting code
  osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <main+0xe8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f04f 31ff 	mov.w	r1, #4294967295
 800066c:	4618      	mov	r0, r3
 800066e:	f00b ffe3 	bl	800c638 <osSemaphoreAcquire>
  osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <main+0xf0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f04f 31ff 	mov.w	r1, #4294967295
 800067a:	4618      	mov	r0, r3
 800067c:	f00b ffdc 	bl	800c638 <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000680:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <main+0xf4>)
 8000682:	2100      	movs	r1, #0
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <main+0xf8>)
 8000686:	f00b febb 	bl	800c400 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <main+0xfc>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of AudioCapTask */
  AudioCapTaskHandle = osThreadNew(StartAudioCapTask, NULL, &AudioCapTask_attributes);
 8000690:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <main+0x100>)
 8000692:	2100      	movs	r1, #0
 8000694:	4818      	ldr	r0, [pc, #96]	; (80006f8 <main+0x104>)
 8000696:	f00b feb3 	bl	800c400 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <main+0x108>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <main+0x10c>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4817      	ldr	r0, [pc, #92]	; (8000704 <main+0x110>)
 80006a6:	f00b feab 	bl	800c400 <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a16      	ldr	r2, [pc, #88]	; (8000708 <main+0x114>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of SendDataTask */
  SendDataTaskHandle = osThreadNew(StartSendDataTask, NULL, &SendDataTask_attributes);
 80006b0:	4a16      	ldr	r2, [pc, #88]	; (800070c <main+0x118>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4816      	ldr	r0, [pc, #88]	; (8000710 <main+0x11c>)
 80006b6:	f00b fea3 	bl	800c400 <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <main+0x120>)
 80006be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c0:	f00b fe78 	bl	800c3b4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0xd0>
 80006c6:	bf00      	nop
 80006c8:	24000174 	.word	0x24000174
 80006cc:	2404a304 	.word	0x2404a304
 80006d0:	08010c78 	.word	0x08010c78
 80006d4:	240002dc 	.word	0x240002dc
 80006d8:	08010c88 	.word	0x08010c88
 80006dc:	240002e0 	.word	0x240002e0
 80006e0:	08010c98 	.word	0x08010c98
 80006e4:	240002e4 	.word	0x240002e4
 80006e8:	08010be8 	.word	0x08010be8
 80006ec:	08000f6d 	.word	0x08000f6d
 80006f0:	240002cc 	.word	0x240002cc
 80006f4:	08010c0c 	.word	0x08010c0c
 80006f8:	08000f79 	.word	0x08000f79
 80006fc:	240002d0 	.word	0x240002d0
 8000700:	08010c30 	.word	0x08010c30
 8000704:	08001075 	.word	0x08001075
 8000708:	240002d4 	.word	0x240002d4
 800070c:	08010c54 	.word	0x08010c54
 8000710:	080010d5 	.word	0x080010d5
 8000714:	240002d8 	.word	0x240002d8

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f010 f95a 	bl	80109e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f010 f954 	bl	80109e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <SystemClock_Config+0xe4>)
 800073a:	f04f 32ff 	mov.w	r2, #4294967295
 800073e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000742:	2004      	movs	r0, #4
 8000744:	f005 fb30 	bl	8005da8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <SystemClock_Config+0xe8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <SystemClock_Config+0xe8>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0xe8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000764:	bf00      	nop
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <SystemClock_Config+0xe8>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000772:	d1f8      	bne.n	8000766 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000774:	2321      	movs	r3, #33	; 0x21
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000778:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800077e:	2301      	movs	r3, #1
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800078e:	2318      	movs	r3, #24
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 fb54 	bl	8005e5c <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ba:	f000 fcd8 	bl	800116e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	233f      	movs	r3, #63	; 0x3f
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ce:	2340      	movs	r3, #64	; 0x40
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2102      	movs	r1, #2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f005 ff6b 	bl	80066c0 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007f0:	f000 fcbd 	bl	800116e <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3770      	adds	r7, #112	; 0x70
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	58024400 	.word	0x58024400
 8000800:	58024800 	.word	0x58024800

08000804 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000828:	4b30      	ldr	r3, [pc, #192]	; (80008ec <MX_ADC1_Init+0xe8>)
 800082a:	4a31      	ldr	r2, [pc, #196]	; (80008f0 <MX_ADC1_Init+0xec>)
 800082c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000834:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <MX_ADC1_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000842:	2204      	movs	r2, #4
 8000844:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_ADC1_Init+0xe8>)
 800084e:	2200      	movs	r2, #0
 8000850:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000854:	2201      	movs	r2, #1
 8000856:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <MX_ADC1_Init+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000860:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000868:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000870:	2201      	movs	r2, #1
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC1_Init+0xe8>)
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC1_Init+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000888:	4818      	ldr	r0, [pc, #96]	; (80008ec <MX_ADC1_Init+0xe8>)
 800088a:	f001 fa09 	bl	8001ca0 <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000894:	f000 fc6b 	bl	800116e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <MX_ADC1_Init+0xe8>)
 80008a4:	f002 fa86 	bl	8002db4 <HAL_ADCEx_MultiModeConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008ae:	f000 fc5e 	bl	800116e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_ADC1_Init+0xf0>)
 80008b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b6:	2306      	movs	r3, #6
 80008b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c4:	2304      	movs	r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0xe8>)
 80008d6:	f001 fc67 	bl	80021a8 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80008e0:	f000 fc45 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000098 	.word	0x24000098
 80008f0:	40022000 	.word	0x40022000
 80008f4:	3ef08000 	.word	0x3ef08000

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09c      	sub	sp, #112	; 0x70
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000918:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2234      	movs	r2, #52	; 0x34
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f010 f854 	bl	80109e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000938:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <MX_TIM1_Init+0x150>)
 800093a:	4a44      	ldr	r2, [pc, #272]	; (8000a4c <MX_TIM1_Init+0x154>)
 800093c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800093e:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <MX_TIM1_Init+0x150>)
 800094c:	f241 726f 	movw	r2, #5999	; 0x176f
 8000950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000958:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <MX_TIM1_Init+0x150>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000964:	4838      	ldr	r0, [pc, #224]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000966:	f008 fe83 	bl	8009670 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 fbfd 	bl	800116e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800097e:	4619      	mov	r1, r3
 8000980:	4831      	ldr	r0, [pc, #196]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000982:	f009 fabf 	bl	8009f04 <HAL_TIM_ConfigClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800098c:	f000 fbef 	bl	800116e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000990:	482d      	ldr	r0, [pc, #180]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000992:	f008 ffad 	bl	80098f0 <HAL_TIM_OC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800099c:	f000 fbe7 	bl	800116e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009a0:	2320      	movs	r3, #32
 80009a2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b0:	4619      	mov	r1, r3
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_TIM1_Init+0x150>)
 80009b4:	f009 fffa 	bl	800a9ac <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009be:	f000 fbd6 	bl	800116e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009c2:	2330      	movs	r3, #48	; 0x30
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ce:	2300      	movs	r3, #0
 80009d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_TIM1_Init+0x150>)
 80009e8:	f009 fa12 	bl	8009e10 <HAL_TIM_OC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009f2:	f000 fbbc 	bl	800116e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000a2c:	f00a f84c 	bl	800aac8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a36:	f000 fb9a 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000a3c:	f000 fc82 	bl	8001344 <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3770      	adds	r7, #112	; 0x70
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000174 	.word	0x24000174
 8000a4c:	40010000 	.word	0x40010000

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <MX_USART3_UART_Init+0x94>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a9a:	f00a f8d3 	bl	800ac44 <HAL_UART_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 fb63 	bl	800116e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000aac:	f00b fb50 	bl	800c150 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 fb5a 	bl	800116e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000abe:	f00b fb85 	bl	800c1cc <HAL_UARTEx_SetRxFifoThreshold>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac8:	f000 fb51 	bl	800116e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f00b fb06 	bl	800c0de <HAL_UARTEx_DisableFifoMode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 fb49 	bl	800116e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	240001c0 	.word	0x240001c0
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_DMA_Init+0x4c>)
 8000b00:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b04:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <MX_DMA_Init+0x4c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_DMA_Init+0x4c>)
 8000b10:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2105      	movs	r1, #5
 8000b20:	200b      	movs	r0, #11
 8000b22:	f002 fa9b 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b26:	200b      	movs	r0, #11
 8000b28:	f002 fab2 	bl	8003090 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2105      	movs	r1, #5
 8000b30:	200c      	movs	r0, #12
 8000b32:	f002 fa93 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b36:	200c      	movs	r0, #12
 8000b38:	f002 faaa 	bl	8003090 <HAL_NVIC_EnableIRQ>

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58024400 	.word	0x58024400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b80      	ldr	r3, [pc, #512]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	4a7e      	ldr	r2, [pc, #504]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6e:	4b7c      	ldr	r3, [pc, #496]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	623b      	str	r3, [r7, #32]
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7c:	4b78      	ldr	r3, [pc, #480]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b82:	4a77      	ldr	r2, [pc, #476]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8c:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	f003 0320 	and.w	r3, r3, #32
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	4b71      	ldr	r3, [pc, #452]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba0:	4a6f      	ldr	r2, [pc, #444]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000baa:	4b6d      	ldr	r3, [pc, #436]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bbe:	4a68      	ldr	r2, [pc, #416]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc8:	4b65      	ldr	r3, [pc, #404]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b62      	ldr	r3, [pc, #392]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bdc:	4a60      	ldr	r2, [pc, #384]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be6:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf4:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	4a59      	ldr	r2, [pc, #356]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c18:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c22:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000c24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c30:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c36:	4a4a      	ldr	r2, [pc, #296]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c40:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <MX_GPIO_Init+0x218>)
 8000c42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	4843      	ldr	r0, [pc, #268]	; (8000d64 <MX_GPIO_Init+0x21c>)
 8000c56:	f005 f873 	bl	8005d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c60:	4841      	ldr	r0, [pc, #260]	; (8000d68 <MX_GPIO_Init+0x220>)
 8000c62:	f005 f86d 	bl	8005d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4840      	ldr	r0, [pc, #256]	; (8000d6c <MX_GPIO_Init+0x224>)
 8000c6c:	f005 f868 	bl	8005d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	483a      	ldr	r0, [pc, #232]	; (8000d70 <MX_GPIO_Init+0x228>)
 8000c86:	f004 feab 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4830      	ldr	r0, [pc, #192]	; (8000d64 <MX_GPIO_Init+0x21c>)
 8000ca4:	f004 fe9c 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ca8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4829      	ldr	r0, [pc, #164]	; (8000d68 <MX_GPIO_Init+0x220>)
 8000cc2:	f004 fe8d 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4826      	ldr	r0, [pc, #152]	; (8000d74 <MX_GPIO_Init+0x22c>)
 8000cdc:	f004 fe80 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4820      	ldr	r0, [pc, #128]	; (8000d78 <MX_GPIO_Init+0x230>)
 8000cf6:	f004 fe73 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <MX_GPIO_Init+0x230>)
 8000d18:	f004 fe62 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4810      	ldr	r0, [pc, #64]	; (8000d78 <MX_GPIO_Init+0x230>)
 8000d36:	f004 fe53 	bl	80059e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_GPIO_Init+0x224>)
 8000d52:	f004 fe45 	bl	80059e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3738      	adds	r7, #56	; 0x38
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58021400 	.word	0x58021400
 8000d68:	58020400 	.word	0x58020400
 8000d6c:	58021000 	.word	0x58021000
 8000d70:	58020800 	.word	0x58020800
 8000d74:	58021800 	.word	0x58021800
 8000d78:	58020000 	.word	0x58020000

08000d7c <FrequencyDetected>:
 * @brief Function detects frequencies between (0 - 8kHz) and returns boolean
 * @param
 * @retval boolean true or false
 */
bool FrequencyDetected(float32_t data[adc_buff_size])
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	// Process the data through the RFFT module. Will output elements that are Real and Imaginary
	// in fft_bufer as a single array same size as data[].
	//arm_rfft_fast_f32(&fft_handler, (float32_t *) data, fft_buffer, ifftFlag);
	arm_rfft_fast_f32(&fft_handler, adc_buffer_float, fft_buffer, ifftFlag);
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <FrequencyDetected+0x100>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4a3d      	ldr	r2, [pc, #244]	; (8000e80 <FrequencyDetected+0x104>)
 8000d8c:	493d      	ldr	r1, [pc, #244]	; (8000e84 <FrequencyDetected+0x108>)
 8000d8e:	483e      	ldr	r0, [pc, #248]	; (8000e88 <FrequencyDetected+0x10c>)
 8000d90:	f00e ff46 	bl	800fc20 <arm_rfft_fast_f32>

	// Reset bin value and offset
	bin_point = 0;
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <FrequencyDetected+0x110>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]

	// Calculate magnitude for each bin using real and Imaginary numbers from fft_buffer output
	 for (int i=0; i< adc_buff_size; i=i+2) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e02b      	b.n	8000df8 <FrequencyDetected+0x7c>

		bin[bin_point] =((Magnitude(fft_buffer[i], fft_buffer[i+1])))-offset;
 8000da0:	4a37      	ldr	r2, [pc, #220]	; (8000e80 <FrequencyDetected+0x104>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <FrequencyDetected+0x104>)
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	ed93 7a00 	vldr	s14, [r3]
 8000dba:	eef0 0a47 	vmov.f32	s1, s14
 8000dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc2:	f000 f86f 	bl	8000ea4 <Magnitude>
 8000dc6:	eeb0 7a40 	vmov.f32	s14, s0
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <FrequencyDetected+0x114>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <FrequencyDetected+0x110>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dde:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <FrequencyDetected+0x118>)
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	edc3 7a00 	vstr	s15, [r3]
		{
			bin[bin_point]=0;
		}
		*/

		bin_point++;
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <FrequencyDetected+0x110>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <FrequencyDetected+0x110>)
 8000df0:	6013      	str	r3, [r2, #0]
	 for (int i=0; i< adc_buff_size; i=i+2) {
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3302      	adds	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dfe:	dbcf      	blt.n	8000da0 <FrequencyDetected+0x24>

	 }
	// Negate DC value
	bin[0] = 0;
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <FrequencyDetected+0x118>)
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

	// Check highest magnitude in bins
	arm_max_f32(bin, FFT_SIZE, &maxValue, &maxIndex);
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <FrequencyDetected+0x11c>)
 8000e0a:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <FrequencyDetected+0x120>)
 8000e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e10:	4820      	ldr	r0, [pc, #128]	; (8000e94 <FrequencyDetected+0x118>)
 8000e12:	f00e fceb 	bl	800f7ec <arm_max_f32>

	// Correct index
	maxIndex += 1;
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <FrequencyDetected+0x11c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <FrequencyDetected+0x11c>)
 8000e1e:	6013      	str	r3, [r2, #0]

	bool threshold_crossed = false;
 8000e20:	2300      	movs	r3, #0
 8000e22:	74fb      	strb	r3, [r7, #19]

	// Going through bin array, checking if a magnitude crosses threshold of 40
	for(int j=1; j < (adc_buff_size/2); j++){
 8000e24:	2301      	movs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	e012      	b.n	8000e50 <FrequencyDetected+0xd4>

		if(bin[j] >= 40)
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <FrequencyDetected+0x118>)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ea0 <FrequencyDetected+0x124>
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	db02      	blt.n	8000e4a <FrequencyDetected+0xce>
		{
			threshold_crossed = true;
 8000e44:	2301      	movs	r3, #1
 8000e46:	74fb      	strb	r3, [r7, #19]
			break;
 8000e48:	e006      	b.n	8000e58 <FrequencyDetected+0xdc>
	for(int j=1; j < (adc_buff_size/2); j++){
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e56:	dbe8      	blt.n	8000e2a <FrequencyDetected+0xae>
		}
	}

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(threshold_crossed == true)
 8000e58:	7cfb      	ldrb	r3, [r7, #19]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <FrequencyDetected+0xe6>
	{
		   return true;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e007      	b.n	8000e72 <FrequencyDetected+0xf6>
	}
	// if highest magnitude is at desired bin (wanted frequency) return true
	else if(threshold_crossed == false)
 8000e62:	7cfb      	ldrb	r3, [r7, #19]
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <FrequencyDetected+0xf6>
		{
			return false;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e7ff      	b.n	8000e72 <FrequencyDetected+0xf6>
		}
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2404a2f8 	.word	0x2404a2f8
 8000e80:	240442ec 	.word	0x240442ec
 8000e84:	240042e8 	.word	0x240042e8
 8000e88:	2404a304 	.word	0x2404a304
 8000e8c:	2404a2ec 	.word	0x2404a2ec
 8000e90:	24000000 	.word	0x24000000
 8000e94:	240482ec 	.word	0x240482ec
 8000e98:	2404a2f4 	.word	0x2404a2f4
 8000e9c:	2404a2f0 	.word	0x2404a2f0
 8000ea0:	42200000 	.word	0x42200000

08000ea4 <Magnitude>:
 * @brief Returns magnitude of FFT buffer outputs
 * @param Real & Complex elements of FFT output
 * @retval Magnitude at specific frequency
 */
float32_t Magnitude(float32_t real, float32_t compl)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eae:	edc7 0a00 	vstr	s1, [r7]

	float32_t sqrt_input = (real*real + compl*compl);
 8000eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eba:	edd7 7a00 	vldr	s15, [r7]
 8000ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t sqrt_output = 0;
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
	float32_t magnitude = 0;
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
	float32_t log_output = 0;
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000ee6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	db09      	blt.n	8000f08 <Magnitude+0x64>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8000ef4:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ef8:	f00f fde0 	bl	8010abc <sqrtf>
 8000efc:	eef0 7a40 	vmov.f32	s15, s0
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000f06:	e004      	b.n	8000f12 <Magnitude+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f10:	bf00      	nop

	arm_sqrt_f32(sqrt_input, &sqrt_output);
	log_output = logf(sqrt_output);
 8000f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	f00f fd69 	bl	80109f0 <logf>
 8000f1e:	ed87 0a05 	vstr	s0, [r7, #20]
	magnitude = 20* (log_output);
 8000f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f26:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2e:	edc7 7a06 	vstr	s15, [r7, #24]
	return magnitude;
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	ee07 3a90 	vmov	s15, r3
}
 8000f38:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_ADC_ConvCpltCallback>:
 * @brief This function executes when adc buffer is full setting flag true
 * @param
 * @retval
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f52:	f004 ff0e 	bl	8005d72 <HAL_GPIO_TogglePin>
	flag_value = true;			// Set buffer conversion complete flag
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, adc_buff_size);
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58020800 	.word	0x58020800
 8000f68:	240442e9 	.word	0x240442e9

08000f6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000f74:	e7fe      	b.n	8000f74 <StartDefaultTask+0x8>
	...

08000f78 <StartAudioCapTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioCapTask */
void StartAudioCapTask(void *argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioCapTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(AudioCapSem01Handle, osWaitForever);
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <StartAudioCapTask+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00b fb55 	bl	800c638 <osSemaphoreAcquire>
	  // osDelay(500);

	  // Start ADC

	  // ADC captures data for sending data
	  if (recording_mode)
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <StartAudioCapTask+0xd8>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <StartAudioCapTask+0x2c>
		  HAL_ADC_Start_DMA(&hadc1, send_buffer, send_buff_size);
 8000f96:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000f9a:	492e      	ldr	r1, [pc, #184]	; (8001054 <StartAudioCapTask+0xdc>)
 8000f9c:	482e      	ldr	r0, [pc, #184]	; (8001058 <StartAudioCapTask+0xe0>)
 8000f9e:	f000 ffd9 	bl	8001f54 <HAL_ADC_Start_DMA>
 8000fa2:	e005      	b.n	8000fb0 <StartAudioCapTask+0x38>
	  // ADC captures data for FFT
	  else
		  HAL_ADC_Start_DMA(&hadc1, adc_buffer, adc_buff_size);
 8000fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa8:	492c      	ldr	r1, [pc, #176]	; (800105c <StartAudioCapTask+0xe4>)
 8000faa:	482b      	ldr	r0, [pc, #172]	; (8001058 <StartAudioCapTask+0xe0>)
 8000fac:	f000 ffd2 	bl	8001f54 <HAL_ADC_Start_DMA>

	  // Wait for adc_buffer to fill
	  while(flag_value != true);
 8000fb0:	bf00      	nop
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <StartAudioCapTask+0xe8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f8      	bne.n	8000fb2 <StartAudioCapTask+0x3a>
	  flag_value = false;
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <StartAudioCapTask+0xe8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]

	  // Stop ADC
	  HAL_ADC_Stop_DMA(&hadc1);
 8000fc6:	4824      	ldr	r0, [pc, #144]	; (8001058 <StartAudioCapTask+0xe0>)
 8000fc8:	f001 f878 	bl	80020bc <HAL_ADC_Stop_DMA>

	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

	  if(recording_mode)
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <StartAudioCapTask+0xd8>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01d      	beq.n	8001010 <StartAudioCapTask+0x98>
	  {
		  // Call FFT function to detect frequencies
		  for(int i = 0; i < send_buff_size; i++){
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e010      	b.n	8000ffc <StartAudioCapTask+0x84>
			  send_buffer_float[i] = send_buffer[i];
 8000fda:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <StartAudioCapTask+0xdc>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fea:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <StartAudioCapTask+0xec>)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < send_buff_size; i++){
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8001002:	dbea      	blt.n	8000fda <StartAudioCapTask+0x62>
		  }
		  // Send data task semaphore
		  osSemaphoreRelease(SendDataSem03Handle);
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <StartAudioCapTask+0xf0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f00b fb67 	bl	800c6dc <osSemaphoreRelease>
 800100e:	e7b7      	b.n	8000f80 <StartAudioCapTask+0x8>
	  }
	  else
	  {
		  // Call FFT function to detect frequencies
		  for(int i = 0; i < adc_buff_size; i++){
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	e010      	b.n	8001038 <StartAudioCapTask+0xc0>
			  adc_buffer_float[i] = adc_buffer[i];
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <StartAudioCapTask+0xe4>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <StartAudioCapTask+0xf4>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < adc_buff_size; i++){
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800103e:	dbea      	blt.n	8001016 <StartAudioCapTask+0x9e>
		  }
		  // Check if data is whale or not
		  osSemaphoreRelease(FFTSem02Handle);
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <StartAudioCapTask+0xf8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f00b fb49 	bl	800c6dc <osSemaphoreRelease>
	  osSemaphoreAcquire(AudioCapSem01Handle, osWaitForever);
 800104a:	e799      	b.n	8000f80 <StartAudioCapTask+0x8>
 800104c:	240002dc 	.word	0x240002dc
 8001050:	240442e8 	.word	0x240442e8
 8001054:	240082e8 	.word	0x240082e8
 8001058:	24000098 	.word	0x24000098
 800105c:	240002e8 	.word	0x240002e8
 8001060:	240442e9 	.word	0x240442e9
 8001064:	240262e8 	.word	0x240262e8
 8001068:	240002e4 	.word	0x240002e4
 800106c:	240042e8 	.word	0x240042e8
 8001070:	240002e0 	.word	0x240002e0

08001074 <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFTTask */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <StartFFTTask+0x48>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	4618      	mov	r0, r3
 8001086:	f00b fad7 	bl	800c638 <osSemaphoreAcquire>
	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800108a:	2102      	movs	r1, #2
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <StartFFTTask+0x4c>)
 800108e:	f004 fe70 	bl	8005d72 <HAL_GPIO_TogglePin>

	 /* Reset frequency_detected bool */
	 //frequency_detected = false;

	 /* Call FFT function that returns true if freqs between 0-8kHz are detected */
	 frequency_detected = FrequencyDetected(adc_buffer_float);
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <StartFFTTask+0x50>)
 8001094:	f7ff fe72 	bl	8000d7c <FrequencyDetected>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <StartFFTTask+0x54>)
 800109e:	701a      	strb	r2, [r3, #0]
		 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
		 // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	 }


	 if(frequency_detected == true){
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <StartFFTTask+0x54>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <StartFFTTask+0x3a>
		 recording_mode = true;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <StartFFTTask+0x58>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
		 // release semaphore for record task
	 }

	 osSemaphoreRelease(AudioCapSem01Handle);
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <StartFFTTask+0x5c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00b fb12 	bl	800c6dc <osSemaphoreRelease>
	 osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 80010b8:	e7e0      	b.n	800107c <StartFFTTask+0x8>
 80010ba:	bf00      	nop
 80010bc:	240002e0 	.word	0x240002e0
 80010c0:	58021000 	.word	0x58021000
 80010c4:	240042e8 	.word	0x240042e8
 80010c8:	2404a2fc 	.word	0x2404a2fc
 80010cc:	240442e8 	.word	0x240442e8
 80010d0:	240002dc 	.word	0x240002dc

080010d4 <StartSendDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendDataTask */
void StartSendDataTask(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendDataTask */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <StartSendDataTask+0x60>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00b faa7 	bl	800c638 <osSemaphoreAcquire>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80010ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <StartSendDataTask+0x64>)
 80010f0:	f004 fe3f 	bl	8005d72 <HAL_GPIO_TogglePin>
	// Sending data via UART
	HAL_UART_Transmit_DMA(&huart3, send_buffer_float, send_buff_size);
 80010f4:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80010f8:	4910      	ldr	r1, [pc, #64]	; (800113c <StartSendDataTask+0x68>)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <StartSendDataTask+0x6c>)
 80010fc:	f009 fdf2 	bl	800ace4 <HAL_UART_Transmit_DMA>



	counter++;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <StartSendDataTask+0x70>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <StartSendDataTask+0x70>)
 8001108:	6013      	str	r3, [r2, #0]
	if (counter == 8)
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <StartSendDataTask+0x70>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b08      	cmp	r3, #8
 8001110:	d109      	bne.n	8001126 <StartSendDataTask+0x52>
	{
		counter = 0;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <StartSendDataTask+0x70>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
		recording_mode = false;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <StartSendDataTask+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800111e:	2101      	movs	r1, #1
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <StartSendDataTask+0x64>)
 8001122:	f004 fe26 	bl	8005d72 <HAL_GPIO_TogglePin>
	}
	osSemaphoreRelease(AudioCapSem01Handle);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <StartSendDataTask+0x78>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f00b fad6 	bl	800c6dc <osSemaphoreRelease>
	osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 8001130:	e7d4      	b.n	80010dc <StartSendDataTask+0x8>
 8001132:	bf00      	nop
 8001134:	240002e4 	.word	0x240002e4
 8001138:	58020400 	.word	0x58020400
 800113c:	240262e8 	.word	0x240262e8
 8001140:	240001c0 	.word	0x240001c0
 8001144:	2404a300 	.word	0x2404a300
 8001148:	240442e8 	.word	0x240442e8
 800114c:	240002dc 	.word	0x240002dc

08001150 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d101      	bne.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001162:	f000 fb45 	bl	80017f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001172:	b672      	cpsid	i
}
 8001174:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001176:	e7fe      	b.n	8001176 <Error_Handler+0x8>

08001178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_MspInit+0x38>)
 8001180:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_MspInit+0x38>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_MspInit+0x38>)
 8001190:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	210f      	movs	r1, #15
 80011a0:	f06f 0001 	mvn.w	r0, #1
 80011a4:	f001 ff5a 	bl	800305c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58024400 	.word	0x58024400

080011b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ba      	sub	sp, #232	; 0xe8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	22c0      	movs	r2, #192	; 0xc0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00f fc03 	bl	80109e0 <memset>
  if(hadc->Instance==ADC1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a43      	ldr	r2, [pc, #268]	; (80012ec <HAL_ADC_MspInit+0x138>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d17e      	bne.n	80012e2 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80011f4:	2310      	movs	r3, #16
 80011f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001204:	23c0      	movs	r3, #192	; 0xc0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f005 fe1e 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001226:	f7ff ffa2 	bl	800116e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HAL_ADC_MspInit+0x13c>)
 800122c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001230:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <HAL_ADC_MspInit+0x13c>)
 8001232:	f043 0320 	orr.w	r3, r3, #32
 8001236:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_ADC_MspInit+0x13c>)
 800123c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_ADC_MspInit+0x13c>)
 800124a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <HAL_ADC_MspInit+0x13c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_ADC_MspInit+0x13c>)
 800125a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001266:	2308      	movs	r3, #8
 8001268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126c:	2303      	movs	r3, #3
 800126e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800127c:	4619      	mov	r1, r3
 800127e:	481d      	ldr	r0, [pc, #116]	; (80012f4 <HAL_ADC_MspInit+0x140>)
 8001280:	f004 fbae 	bl	80059e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_ADC_MspInit+0x148>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 800128c:	2209      	movs	r2, #9
 800128e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 800129e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c6:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012c8:	f001 fef0 	bl	80030ac <HAL_DMA_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 80012d2:	f7ff ff4c 	bl	800116e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012da:	64da      	str	r2, [r3, #76]	; 0x4c
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_ADC_MspInit+0x144>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	37e8      	adds	r7, #232	; 0xe8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40022000 	.word	0x40022000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020000 	.word	0x58020000
 80012f8:	240000fc 	.word	0x240000fc
 80012fc:	40020010 	.word	0x40020010

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_TIM_Base_MspInit+0x3c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10e      	bne.n	8001330 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_TIM_Base_MspInit+0x40>)
 8001314:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001318:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_TIM_Base_MspInit+0x40>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_TIM_Base_MspInit+0x40>)
 8001324:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40010000 	.word	0x40010000
 8001340:	58024400 	.word	0x58024400

08001344 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <HAL_TIM_MspPostInit+0x6c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d11f      	bne.n	80013a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_TIM_MspPostInit+0x70>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_TIM_MspPostInit+0x70>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_TIM_MspPostInit+0x70>)
 8001378:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001388:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001396:	2301      	movs	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_TIM_MspPostInit+0x74>)
 80013a2:	f004 fb1d 	bl	80059e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40010000 	.word	0x40010000
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58021000 	.word	0x58021000

080013bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0ba      	sub	sp, #232	; 0xe8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	22c0      	movs	r2, #192	; 0xc0
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00f faff 	bl	80109e0 <memset>
  if(huart->Instance==USART3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <HAL_UART_MspInit+0x128>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d176      	bne.n	80014da <HAL_UART_MspInit+0x11e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013ec:	f04f 0202 	mov.w	r2, #2
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4618      	mov	r0, r3
 8001404:	f005 fd2a 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800140e:	f7ff feae 	bl	800116e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <HAL_UART_MspInit+0x12c>)
 8001414:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001418:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <HAL_UART_MspInit+0x12c>)
 800141a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <HAL_UART_MspInit+0x12c>)
 8001424:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_UART_MspInit+0x12c>)
 8001432:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001436:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <HAL_UART_MspInit+0x12c>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_UART_MspInit+0x12c>)
 8001442:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800144e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001468:	2307      	movs	r3, #7
 800146a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001472:	4619      	mov	r1, r3
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <HAL_UART_MspInit+0x130>)
 8001476:	f004 fab3 	bl	80059e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_UART_MspInit+0x134>)
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_UART_MspInit+0x138>)
 800147e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0x134>)
 8001482:	222e      	movs	r2, #46	; 0x2e
 8001484:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_UART_MspInit+0x134>)
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_UART_MspInit+0x134>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_UART_MspInit+0x134>)
 8001494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_UART_MspInit+0x134>)
 800149c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_UART_MspInit+0x134>)
 80014a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_UART_MspInit+0x134>)
 80014ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_UART_MspInit+0x134>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_UART_MspInit+0x134>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <HAL_UART_MspInit+0x134>)
 80014c0:	f001 fdf4 	bl	80030ac <HAL_DMA_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80014ca:	f7ff fe50 	bl	800116e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_UART_MspInit+0x134>)
 80014d2:	67da      	str	r2, [r3, #124]	; 0x7c
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_UART_MspInit+0x134>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	37e8      	adds	r7, #232	; 0xe8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004800 	.word	0x40004800
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58020c00 	.word	0x58020c00
 80014f0:	24000254 	.word	0x24000254
 80014f4:	40020028 	.word	0x40020028

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	d827      	bhi.n	8001556 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8001506:	2200      	movs	r2, #0
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	201c      	movs	r0, #28
 800150c:	f001 fda6 	bl	800305c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001510:	201c      	movs	r0, #28
 8001512:	f001 fdbd 	bl	8003090 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001516:	4a29      	ldr	r2, [pc, #164]	; (80015bc <HAL_InitTick+0xc4>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_InitTick+0xc8>)
 800151e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_InitTick+0xc8>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_InitTick+0xc8>)
 800152e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800153a:	f107 0210 	add.w	r2, r7, #16
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f005 fc47 	bl	8006dd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800154e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <HAL_InitTick+0x6a>
 8001554:	e001      	b.n	800155a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e02c      	b.n	80015b4 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800155a:	f005 fc11 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 800155e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001560:	e004      	b.n	800156c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001562:	f005 fc0d 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_InitTick+0xcc>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9b      	lsrs	r3, r3, #18
 8001576:	3b01      	subs	r3, #1
 8001578:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_InitTick+0xd0>)
 800157c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001580:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_InitTick+0xd0>)
 8001584:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001588:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <HAL_InitTick+0xd0>)
 800158c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_InitTick+0xd0>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_InitTick+0xd0>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <HAL_InitTick+0xd0>)
 800159e:	f008 f867 	bl	8009670 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <HAL_InitTick+0xd0>)
 80015aa:	f008 f929 	bl	8009800 <HAL_TIM_Base_Start_IT>
 80015ae:	4603      	mov	r3, r0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3740      	adds	r7, #64	; 0x40
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2400000c 	.word	0x2400000c
 80015c0:	58024400 	.word	0x58024400
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	2404a31c 	.word	0x2404a31c

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <DMA1_Stream0_IRQHandler+0x10>)
 80015fe:	f002 fe6d 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	240000fc 	.word	0x240000fc

0800160c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Stream1_IRQHandler+0x10>)
 8001612:	f002 fe63 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	24000254 	.word	0x24000254

08001620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <TIM2_IRQHandler+0x10>)
 8001626:	f008 fad3 	bl	8009bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2404a31c 	.word	0x2404a31c

08001634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <SystemInit+0xd0>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a31      	ldr	r2, [pc, #196]	; (8001704 <SystemInit+0xd0>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <SystemInit+0xd4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	2b02      	cmp	r3, #2
 8001652:	d807      	bhi.n	8001664 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <SystemInit+0xd4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 030f 	bic.w	r3, r3, #15
 800165c:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <SystemInit+0xd4>)
 800165e:	f043 0303 	orr.w	r3, r3, #3
 8001662:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <SystemInit+0xd8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <SystemInit+0xd8>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <SystemInit+0xd8>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <SystemInit+0xd8>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4924      	ldr	r1, [pc, #144]	; (800170c <SystemInit+0xd8>)
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <SystemInit+0xdc>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <SystemInit+0xd4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <SystemInit+0xd4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 030f 	bic.w	r3, r3, #15
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <SystemInit+0xd4>)
 8001698:	f043 0303 	orr.w	r3, r3, #3
 800169c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <SystemInit+0xd8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <SystemInit+0xd8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <SystemInit+0xd8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <SystemInit+0xd8>)
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <SystemInit+0xe0>)
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <SystemInit+0xd8>)
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <SystemInit+0xe4>)
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <SystemInit+0xd8>)
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <SystemInit+0xe8>)
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <SystemInit+0xd8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <SystemInit+0xd8>)
 80016ca:	4a14      	ldr	r2, [pc, #80]	; (800171c <SystemInit+0xe8>)
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <SystemInit+0xd8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <SystemInit+0xd8>)
 80016d6:	4a11      	ldr	r2, [pc, #68]	; (800171c <SystemInit+0xe8>)
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <SystemInit+0xd8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <SystemInit+0xd8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <SystemInit+0xd8>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <SystemInit+0xd8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <SystemInit+0xec>)
 80016f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	52002000 	.word	0x52002000
 800170c:	58024400 	.word	0x58024400
 8001710:	eaf6ed7f 	.word	0xeaf6ed7f
 8001714:	02020200 	.word	0x02020200
 8001718:	01ff0000 	.word	0x01ff0000
 800171c:	01010280 	.word	0x01010280
 8001720:	52004000 	.word	0x52004000

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001728:	f7ff ff84 	bl	8001634 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800172e:	490d      	ldr	r1, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001744:	4c0a      	ldr	r4, [pc, #40]	; (8001770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001752:	f00f f913 	bl	801097c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7fe ff4d 	bl	80005f4 <main>
  bx  lr
 800175a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001760:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001764:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001768:	08023e00 	.word	0x08023e00
  ldr r2, =_sbss
 800176c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001770:	2404ecbc 	.word	0x2404ecbc

08001774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC_IRQHandler>
	...

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177e:	2003      	movs	r0, #3
 8001780:	f001 fc61 	bl	8003046 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001784:	f005 f952 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 8001788:	4602      	mov	r2, r0
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_Init+0x68>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	4913      	ldr	r1, [pc, #76]	; (80017e4 <HAL_Init+0x6c>)
 8001796:	5ccb      	ldrb	r3, [r1, r3]
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_Init+0x68>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_Init+0x6c>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_Init+0x70>)
 80017ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_Init+0x74>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c2:	200f      	movs	r0, #15
 80017c4:	f7ff fe98 	bl	80014f8 <HAL_InitTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e002      	b.n	80017d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017d2:	f7ff fcd1 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	58024400 	.word	0x58024400
 80017e4:	08010ca8 	.word	0x08010ca8
 80017e8:	24000008 	.word	0x24000008
 80017ec:	24000004 	.word	0x24000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	24000010 	.word	0x24000010
 8001814:	2404a368 	.word	0x2404a368

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2404a368 	.word	0x2404a368

08001830 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3360      	adds	r3, #96	; 0x60
 80018aa:	461a      	mov	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	431a      	orrs	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	611a      	str	r2, [r3, #16]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800190a:	b480      	push	{r7}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3360      	adds	r3, #96	; 0x60
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	431a      	orrs	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]
  }
}
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001966:	b480      	push	{r7}
 8001968:	b087      	sub	sp, #28
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3330      	adds	r3, #48	; 0x30
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	211f      	movs	r1, #31
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	f003 011f 	and.w	r1, r3, #31
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 031f 	and.w	r3, r3, #31
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f023 0203 	bic.w	r2, r3, #3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3314      	adds	r3, #20
 80019f4:	461a      	mov	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0e5b      	lsrs	r3, r3, #25
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2107      	movs	r1, #7
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0d1b      	lsrs	r3, r3, #20
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0318 	and.w	r3, r3, #24
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a60:	40d9      	lsrs	r1, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	400b      	ands	r3, r1
 8001a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	000fffff 	.word	0x000fffff

08001a84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 031f 	and.w	r3, r3, #31
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6093      	str	r3, [r2, #8]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	5fffffc0 	.word	0x5fffffc0

08001ac4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ad8:	d101      	bne.n	8001ade <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <LL_ADC_EnableInternalRegulator+0x24>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	6fffffc0 	.word	0x6fffffc0

08001b14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b28:	d101      	bne.n	8001b2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_ADC_Enable+0x24>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	7fffffc0 	.word	0x7fffffc0

08001b64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <LL_ADC_Disable+0x24>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	f043 0202 	orr.w	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	7fffffc0 	.word	0x7fffffc0

08001b8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <LL_ADC_IsEnabled+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_ADC_IsEnabled+0x1a>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d101      	bne.n	8001bca <LL_ADC_IsDisableOngoing+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_ADC_IsDisableOngoing+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <LL_ADC_REG_StartConversion+0x24>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	f043 0204 	orr.w	r2, r3, #4
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	7fffffc0 	.word	0x7fffffc0

08001c00 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <LL_ADC_REG_StopConversion+0x24>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	f043 0210 	orr.w	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	7fffffc0 	.word	0x7fffffc0

08001c28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d101      	bne.n	8001c40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <LL_ADC_INJ_StopConversion+0x24>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	f043 0220 	orr.w	r2, r3, #32
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	7fffffc0 	.word	0x7fffffc0

08001c78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e138      	b.n	8001f2c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fa73 	bl	80011b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff feef 	bl	8001ac4 <LL_ADC_IsDeepPowerDownEnabled>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fed5 	bl	8001aa0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff0a 	bl	8001b14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d114      	bne.n	8001d30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff feee 	bl	8001aec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d10:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <HAL_ADC_Init+0x294>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	099b      	lsrs	r3, r3, #6
 8001d16:	4a88      	ldr	r2, [pc, #544]	; (8001f38 <HAL_ADC_Init+0x298>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d22:	e002      	b.n	8001d2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f9      	bne.n	8001d24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff feed 	bl	8001b14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f043 0210 	orr.w	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff61 	bl	8001c28 <LL_ADC_REG_IsConversionOngoing>
 8001d66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 80d2 	bne.w	8001f1a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 80ce 	bne.w	8001f1a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fefa 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d110      	bne.n	8001dc0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d9e:	4867      	ldr	r0, [pc, #412]	; (8001f3c <HAL_ADC_Init+0x29c>)
 8001da0:	f7ff fef4 	bl	8001b8c <LL_ADC_IsEnabled>
 8001da4:	4604      	mov	r4, r0
 8001da6:	4866      	ldr	r0, [pc, #408]	; (8001f40 <HAL_ADC_Init+0x2a0>)
 8001da8:	f7ff fef0 	bl	8001b8c <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4619      	mov	r1, r3
 8001dba:	4862      	ldr	r0, [pc, #392]	; (8001f44 <HAL_ADC_Init+0x2a4>)
 8001dbc:	f7ff fd38 	bl	8001830 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7d5b      	ldrb	r3, [r3, #21]
 8001dc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dca:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001dd0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7f1b      	ldrb	r3, [r3, #28]
 8001dd6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7f1b      	ldrb	r3, [r3, #28]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	045b      	lsls	r3, r3, #17
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_ADC_Init+0x2a8>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fefe 	bl	8001c28 <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff20 	bl	8001c78 <LL_ADC_INJ_IsConversionOngoing>
 8001e38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d14a      	bne.n	8001ed6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d147      	bne.n	8001ed6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7d1b      	ldrb	r3, [r3, #20]
 8001e4a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <HAL_ADC_Init+0x2ac>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d11b      	bne.n	8001eaa <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_ADC_Init+0x2b0>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e86:	3a01      	subs	r2, #1
 8001e88:	0411      	lsls	r1, r2, #16
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	e007      	b.n	8001eba <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fe7b 	bl	8002bcc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10c      	bne.n	8001ef8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f023 010f 	bic.w	r1, r3, #15
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef6:	e007      	b.n	8001f08 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020f 	bic.w	r2, r2, #15
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f023 0303 	bic.w	r3, r3, #3
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
 8001f18:	e007      	b.n	8001f2a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3724      	adds	r7, #36	; 0x24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}
 8001f34:	24000004 	.word	0x24000004
 8001f38:	053e2d63 	.word	0x053e2d63
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40022100 	.word	0x40022100
 8001f44:	40022300 	.word	0x40022300
 8001f48:	fff0c003 	.word	0xfff0c003
 8001f4c:	ffffbffc 	.word	0xffffbffc
 8001f50:	fc00f81e 	.word	0xfc00f81e

08001f54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f60:	484f      	ldr	r0, [pc, #316]	; (80020a0 <HAL_ADC_Start_DMA+0x14c>)
 8001f62:	f7ff fd8f 	bl	8001a84 <LL_ADC_GetMultimode>
 8001f66:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fe5b 	bl	8001c28 <LL_ADC_REG_IsConversionOngoing>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 808c 	bne.w	8002092 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x34>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e087      	b.n	8002098 <HAL_ADC_Start_DMA+0x144>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d002      	beq.n	8001fa2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b09      	cmp	r3, #9
 8001fa0:	d170      	bne.n	8002084 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fca2 	bl	80028ec <ADC_Enable>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d163      	bne.n	800207a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_ADC_Start_DMA+0x150>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <HAL_ADC_Start_DMA+0x154>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d002      	beq.n	8001fd2 <HAL_ADC_Start_DMA+0x7e>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e000      	b.n	8001fd4 <HAL_ADC_Start_DMA+0x80>
 8001fd2:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_ADC_Start_DMA+0x158>)
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d002      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f023 0206 	bic.w	r2, r3, #6
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
 8002006:	e002      	b.n	800200e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_ADC_Start_DMA+0x15c>)
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <HAL_ADC_Start_DMA+0x160>)
 800201c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <HAL_ADC_Start_DMA+0x164>)
 8002024:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	221c      	movs	r2, #28
 800202c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0210 	orr.w	r2, r2, #16
 8002044:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fcb4 	bl	80019be <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3340      	adds	r3, #64	; 0x40
 8002060:	4619      	mov	r1, r3
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f001 fbb1 	bl	80037cc <HAL_DMA_Start_IT>
 800206a:	4603      	mov	r3, r0
 800206c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fdb0 	bl	8001bd8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002078:	e00d      	b.n	8002096 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002082:	e008      	b.n	8002096 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002090:	e001      	b.n	8002096 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022300 	.word	0x40022300
 80020a4:	fffff0fe 	.word	0xfffff0fe
 80020a8:	40022100 	.word	0x40022100
 80020ac:	40022000 	.word	0x40022000
 80020b0:	08002aa3 	.word	0x08002aa3
 80020b4:	08002b7b 	.word	0x08002b7b
 80020b8:	08002b97 	.word	0x08002b97

080020bc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_Stop_DMA+0x16>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e04f      	b.n	8002172 <HAL_ADC_Stop_DMA+0xb6>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80020da:	2103      	movs	r1, #3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fb49 	bl	8002774 <ADC_ConversionStop>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d13d      	bne.n	8002168 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0203 	bic.w	r2, r2, #3
 80020fa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d10f      	bne.n	800212a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	4618      	mov	r0, r3
 8002110:	f001 fdc6 	bl	8003ca0 <HAL_DMA_Abort>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0210 	bic.w	r2, r2, #16
 8002138:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fc4f 	bl	80029e4 <ADC_Disable>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e002      	b.n	8002152 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fc49 	bl	80029e4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <HAL_ADC_Stop_DMA+0xc0>)
 800215e:	4013      	ands	r3, r2
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	ffffeefe 	.word	0xffffeefe

08002180 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b0a1      	sub	sp, #132	; 0x84
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a9a      	ldr	r2, [pc, #616]	; (800242c <HAL_ADC_ConfigChannel+0x284>)
 80021c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x2a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e2bc      	b.n	800274c <HAL_ADC_ConfigChannel+0x5a4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fd22 	bl	8001c28 <LL_ADC_REG_IsConversionOngoing>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 82a1 	bne.w	800272e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <HAL_ADC_ConfigChannel+0x62>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2201      	movs	r2, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	e016      	b.n	8002238 <HAL_ADC_ConfigChannel+0x90>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800221a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800221c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e003      	b.n	800222e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	2201      	movs	r2, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	69d1      	ldr	r1, [r2, #28]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	430b      	orrs	r3, r1
 8002244:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	f7ff fb87 	bl	8001966 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fce3 	bl	8001c28 <LL_ADC_REG_IsConversionOngoing>
 8002262:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fd05 	bl	8001c78 <LL_ADC_INJ_IsConversionOngoing>
 800226e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 80a0 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 809c 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	461a      	mov	r2, r3
 800228e:	f7ff fba9 	bl	80019e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x110>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	e00a      	b.n	80022ce <HAL_ADC_ConfigChannel+0x126>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d027      	beq.n	8002328 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6919      	ldr	r1, [r3, #16]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e6:	f7ff fad7 	bl	8001898 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	7e5b      	ldrb	r3, [r3, #25]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x158>
 80022fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022fe:	e000      	b.n	8002302 <HAL_ADC_ConfigChannel+0x15a>
 8002300:	2300      	movs	r3, #0
 8002302:	461a      	mov	r2, r3
 8002304:	f7ff fb01 	bl	800190a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6919      	ldr	r1, [r3, #16]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7e1b      	ldrb	r3, [r3, #24]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_ADC_ConfigChannel+0x176>
 8002318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800231c:	e000      	b.n	8002320 <HAL_ADC_ConfigChannel+0x178>
 800231e:	2300      	movs	r3, #0
 8002320:	461a      	mov	r2, r3
 8002322:	f7ff fad9 	bl	80018d8 <LL_ADC_SetDataRightShift>
 8002326:	e047      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	069b      	lsls	r3, r3, #26
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800234a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	069b      	lsls	r3, r3, #26
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800236e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002376:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	069b      	lsls	r3, r3, #26
 8002380:	429a      	cmp	r2, r3
 8002382:	d107      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002392:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	069b      	lsls	r3, r3, #26
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fbe5 	bl	8001b8c <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 81bb 	bne.w	8002740 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f7ff fb30 	bl	8001a3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_ADC_ConfigChannel+0x284>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	f040 8130 	bne.w	8002648 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x268>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2b09      	cmp	r3, #9
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e01b      	b.n	8002448 <HAL_ADC_ConfigChannel+0x2a0>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e005      	b.n	8002438 <HAL_ADC_ConfigChannel+0x290>
 800242c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2b09      	cmp	r3, #9
 8002440:	bf94      	ite	ls
 8002442:	2301      	movls	r3, #1
 8002444:	2300      	movhi	r3, #0
 8002446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002448:	2b00      	cmp	r3, #0
 800244a:	d079      	beq.n	8002540 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x2c0>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	069b      	lsls	r3, r3, #26
 8002462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002466:	e015      	b.n	8002494 <HAL_ADC_ConfigChannel+0x2ec>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002478:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800247a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e003      	b.n	800248c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x30c>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	e017      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x33c>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	ea42 0103 	orr.w	r1, r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_ADC_ConfigChannel+0x362>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	3301      	adds	r3, #1
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4613      	mov	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	051b      	lsls	r3, r3, #20
 8002508:	e018      	b.n	800253c <HAL_ADC_ConfigChannel+0x394>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e003      	b.n	800252e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253c:	430b      	orrs	r3, r1
 800253e:	e07e      	b.n	800263e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x3b4>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	069b      	lsls	r3, r3, #26
 8002556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255a:	e015      	b.n	8002588 <HAL_ADC_ConfigChannel+0x3e0>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x400>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	e017      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x430>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	61bb      	str	r3, [r7, #24]
  return result;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x45c>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	3b1e      	subs	r3, #30
 80025fc:	051b      	lsls	r3, r3, #20
 80025fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002602:	e01b      	b.n	800263c <HAL_ADC_ConfigChannel+0x494>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	60fb      	str	r3, [r7, #12]
  return result;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e003      	b.n	8002628 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f003 021f 	and.w	r2, r3, #31
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	3b1e      	subs	r3, #30
 8002636:	051b      	lsls	r3, r3, #20
 8002638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263c:	430b      	orrs	r3, r1
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	4619      	mov	r1, r3
 8002644:	f7ff f9ce 	bl	80019e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	da77      	bge.n	8002740 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002650:	4840      	ldr	r0, [pc, #256]	; (8002754 <HAL_ADC_ConfigChannel+0x5ac>)
 8002652:	f7ff f913 	bl	800187c <LL_ADC_GetCommonPathInternalCh>
 8002656:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002658:	483f      	ldr	r0, [pc, #252]	; (8002758 <HAL_ADC_ConfigChannel+0x5b0>)
 800265a:	f7ff fa97 	bl	8001b8c <LL_ADC_IsEnabled>
 800265e:	4604      	mov	r4, r0
 8002660:	483e      	ldr	r0, [pc, #248]	; (800275c <HAL_ADC_ConfigChannel+0x5b4>)
 8002662:	f7ff fa93 	bl	8001b8c <LL_ADC_IsEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	4323      	orrs	r3, r4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d155      	bne.n	800271a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <HAL_ADC_ConfigChannel+0x5b8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d122      	bne.n	80026be <HAL_ADC_ConfigChannel+0x516>
 8002678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d11d      	bne.n	80026be <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a35      	ldr	r2, [pc, #212]	; (800275c <HAL_ADC_ConfigChannel+0x5b4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d159      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002692:	4619      	mov	r1, r3
 8002694:	482f      	ldr	r0, [pc, #188]	; (8002754 <HAL_ADC_ConfigChannel+0x5ac>)
 8002696:	f7ff f8de 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269a:	4b32      	ldr	r3, [pc, #200]	; (8002764 <HAL_ADC_ConfigChannel+0x5bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	4a31      	ldr	r2, [pc, #196]	; (8002768 <HAL_ADC_ConfigChannel+0x5c0>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	3301      	adds	r3, #1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026ae:	e002      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f9      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026bc:	e040      	b.n	8002740 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2a      	ldr	r2, [pc, #168]	; (800276c <HAL_ADC_ConfigChannel+0x5c4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d111      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x544>
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <HAL_ADC_ConfigChannel+0x5b4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d131      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e2:	4619      	mov	r1, r3
 80026e4:	481b      	ldr	r0, [pc, #108]	; (8002754 <HAL_ADC_ConfigChannel+0x5ac>)
 80026e6:	f7ff f8b6 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ea:	e029      	b.n	8002740 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <HAL_ADC_ConfigChannel+0x5c8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d124      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x598>
 80026f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11f      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_ADC_ConfigChannel+0x5b4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d11a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002710:	4619      	mov	r1, r3
 8002712:	4810      	ldr	r0, [pc, #64]	; (8002754 <HAL_ADC_ConfigChannel+0x5ac>)
 8002714:	f7ff f89f 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
 8002718:	e012      	b.n	8002740 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800272c:	e008      	b.n	8002740 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0220 	orr.w	r2, r3, #32
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002748:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800274c:	4618      	mov	r0, r3
 800274e:	3784      	adds	r7, #132	; 0x84
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	40022300 	.word	0x40022300
 8002758:	40022000 	.word	0x40022000
 800275c:	40022100 	.word	0x40022100
 8002760:	cb840000 	.word	0xcb840000
 8002764:	24000004 	.word	0x24000004
 8002768:	053e2d63 	.word	0x053e2d63
 800276c:	bac04000 	.word	0xbac04000
 8002770:	cfb80000 	.word	0xcfb80000

08002774 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fa4c 	bl	8001c28 <LL_ADC_REG_IsConversionOngoing>
 8002790:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fa6e 	bl	8001c78 <LL_ADC_INJ_IsConversionOngoing>
 800279c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8098 	beq.w	80028dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02a      	beq.n	8002810 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7d5b      	ldrb	r3, [r3, #21]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d126      	bne.n	8002810 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7d1b      	ldrb	r3, [r3, #20]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d122      	bne.n	8002810 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027ce:	e014      	b.n	80027fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4a45      	ldr	r2, [pc, #276]	; (80028e8 <ADC_ConversionStop+0x174>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d90d      	bls.n	80027f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e074      	b.n	80028de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3301      	adds	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d1e3      	bne.n	80027d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d014      	beq.n	8002840 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fa04 	bl	8001c28 <LL_ADC_REG_IsConversionOngoing>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f9c1 	bl	8001bb2 <LL_ADC_IsDisableOngoing>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f9e0 	bl	8001c00 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d014      	beq.n	8002870 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fa14 	bl	8001c78 <LL_ADC_INJ_IsConversionOngoing>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00c      	beq.n	8002870 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f9a9 	bl	8001bb2 <LL_ADC_IsDisableOngoing>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f9f0 	bl	8001c50 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d005      	beq.n	8002882 <ADC_ConversionStop+0x10e>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d105      	bne.n	8002888 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800287c:	230c      	movs	r3, #12
 800287e:	617b      	str	r3, [r7, #20]
        break;
 8002880:	e005      	b.n	800288e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002882:	2308      	movs	r3, #8
 8002884:	617b      	str	r3, [r7, #20]
        break;
 8002886:	e002      	b.n	800288e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002888:	2304      	movs	r3, #4
 800288a:	617b      	str	r3, [r7, #20]
        break;
 800288c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800288e:	f7fe ffc3 	bl	8001818 <HAL_GetTick>
 8002892:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002894:	e01b      	b.n	80028ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002896:	f7fe ffbf 	bl	8001818 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d914      	bls.n	80028ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1dc      	bne.n	8002896 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	000cdbff 	.word	0x000cdbff

080028ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f947 	bl	8001b8c <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d161      	bne.n	80029c8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <ADC_Enable+0xe8>)
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f043 0210 	orr.w	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e04d      	b.n	80029ca <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f902 	bl	8001b3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002938:	f7fe ff6e 	bl	8001818 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800293e:	4826      	ldr	r0, [pc, #152]	; (80029d8 <ADC_Enable+0xec>)
 8002940:	f7ff f8a0 	bl	8001a84 <LL_ADC_GetMultimode>
 8002944:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a24      	ldr	r2, [pc, #144]	; (80029dc <ADC_Enable+0xf0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d002      	beq.n	8002956 <ADC_Enable+0x6a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	e000      	b.n	8002958 <ADC_Enable+0x6c>
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <ADC_Enable+0xf4>)
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4293      	cmp	r3, r2
 800295e:	d02c      	beq.n	80029ba <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d130      	bne.n	80029c8 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002966:	e028      	b.n	80029ba <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff f90d 	bl	8001b8c <LL_ADC_IsEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f8dd 	bl	8001b3c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002982:	f7fe ff49 	bl	8001818 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d914      	bls.n	80029ba <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d00d      	beq.n	80029ba <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e007      	b.n	80029ca <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d1cf      	bne.n	8002968 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	8000003f 	.word	0x8000003f
 80029d8:	40022300 	.word	0x40022300
 80029dc:	40022100 	.word	0x40022100
 80029e0:	40022000 	.word	0x40022000

080029e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f8de 	bl	8001bb2 <LL_ADC_IsDisableOngoing>
 80029f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f8c5 	bl	8001b8c <LL_ADC_IsEnabled>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d047      	beq.n	8002a98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d144      	bne.n	8002a98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030d 	and.w	r3, r3, #13
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10c      	bne.n	8002a36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff f89f 	bl	8001b64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fef3 	bl	8001818 <HAL_GetTick>
 8002a32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a34:	e029      	b.n	8002a8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e023      	b.n	8002a9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a52:	f7fe fee1 	bl	8001818 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d914      	bls.n	8002a8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e007      	b.n	8002a9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1dc      	bne.n	8002a52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d14b      	bne.n	8002b54 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d021      	beq.n	8002b1a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe ff30 	bl	8001940 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d032      	beq.n	8002b4c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d12b      	bne.n	8002b4c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11f      	bne.n	8002b4c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
 8002b18:	e018      	b.n	8002b4c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7fe f9f9 	bl	8000f44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b52:	e00e      	b.n	8002b72 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7ff fb17 	bl	8002194 <HAL_ADC_ErrorCallback>
}
 8002b66:	e004      	b.n	8002b72 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff faf9 	bl	8002180 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fae9 	bl	8002194 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002bd4:	4b60      	ldr	r3, [pc, #384]	; (8002d58 <ADC_ConfigureBoostMode+0x18c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01c      	beq.n	8002c1a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002be0:	f004 f89e 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8002be4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bee:	d010      	beq.n	8002c12 <ADC_ConfigureBoostMode+0x46>
 8002bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bf4:	d873      	bhi.n	8002cde <ADC_ConfigureBoostMode+0x112>
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d002      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x36>
 8002bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c00:	d16d      	bne.n	8002cde <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
        break;
 8002c10:	e068      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	60fb      	str	r3, [r7, #12]
        break;
 8002c18:	e064      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	f005 fad9 	bl	80081d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c30:	d051      	beq.n	8002cd6 <ADC_ConfigureBoostMode+0x10a>
 8002c32:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c36:	d854      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c38:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c3c:	d047      	beq.n	8002cce <ADC_ConfigureBoostMode+0x102>
 8002c3e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c42:	d84e      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c44:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c48:	d03d      	beq.n	8002cc6 <ADC_ConfigureBoostMode+0xfa>
 8002c4a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c4e:	d848      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c54:	d033      	beq.n	8002cbe <ADC_ConfigureBoostMode+0xf2>
 8002c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5a:	d842      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c5c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c60:	d029      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0xea>
 8002c62:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c66:	d83c      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c68:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c6c:	d01a      	beq.n	8002ca4 <ADC_ConfigureBoostMode+0xd8>
 8002c6e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c72:	d836      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c74:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c78:	d014      	beq.n	8002ca4 <ADC_ConfigureBoostMode+0xd8>
 8002c7a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c7e:	d830      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c84:	d00e      	beq.n	8002ca4 <ADC_ConfigureBoostMode+0xd8>
 8002c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8a:	d82a      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c90:	d008      	beq.n	8002ca4 <ADC_ConfigureBoostMode+0xd8>
 8002c92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c96:	d824      	bhi.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
 8002c98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c9c:	d002      	beq.n	8002ca4 <ADC_ConfigureBoostMode+0xd8>
 8002c9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ca2:	d11e      	bne.n	8002ce2 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c9b      	lsrs	r3, r3, #18
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
        break;
 8002cb4:	e016      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
        break;
 8002cbc:	e012      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	60fb      	str	r3, [r7, #12]
        break;
 8002cc4:	e00e      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	60fb      	str	r3, [r7, #12]
        break;
 8002ccc:	e00a      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	09db      	lsrs	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
        break;
 8002cd4:	e006      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	60fb      	str	r3, [r7, #12]
        break;
 8002cdc:	e002      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
        break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002ce2:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <ADC_ConfigureBoostMode+0x190>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d808      	bhi.n	8002d04 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d00:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d02:	e025      	b.n	8002d50 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <ADC_ConfigureBoostMode+0x194>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d80a      	bhi.n	8002d22 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	e016      	b.n	8002d50 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <ADC_ConfigureBoostMode+0x198>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d80a      	bhi.n	8002d40 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	e007      	b.n	8002d50 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40022300 	.word	0x40022300
 8002d5c:	005f5e10 	.word	0x005f5e10
 8002d60:	00bebc20 	.word	0x00bebc20
 8002d64:	017d7840 	.word	0x017d7840

08002d68 <LL_ADC_IsEnabled>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <LL_ADC_IsEnabled+0x18>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <LL_ADC_IsEnabled+0x1a>
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d101      	bne.n	8002da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b09f      	sub	sp, #124	; 0x7c
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e080      	b.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3d      	ldr	r2, [pc, #244]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d102      	bne.n	8002df2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002dec:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	e001      	b.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e05f      	b.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ffb9 	bl	8002d8e <LL_ADC_REG_IsConversionOngoing>
 8002e1c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ffb3 	bl	8002d8e <LL_ADC_REG_IsConversionOngoing>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d141      	bne.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d13e      	bne.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002e36:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e52:	4822      	ldr	r0, [pc, #136]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e54:	f7ff ff88 	bl	8002d68 <LL_ADC_IsEnabled>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	4821      	ldr	r0, [pc, #132]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e5c:	f7ff ff84 	bl	8002d68 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4323      	orrs	r3, r4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d12e      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	6811      	ldr	r1, [r2, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e80:	e021      	b.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8e:	4813      	ldr	r0, [pc, #76]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e90:	f7ff ff6a 	bl	8002d68 <LL_ADC_IsEnabled>
 8002e94:	4604      	mov	r4, r0
 8002e96:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e98:	f7ff ff66 	bl	8002d68 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d110      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002eae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb0:	e009      	b.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ec4:	e000      	b.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ed0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	377c      	adds	r7, #124	; 0x7c
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022100 	.word	0x40022100
 8002ee4:	40022300 	.word	0x40022300
 8002ee8:	fffff0e0 	.word	0xfffff0e0

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00
 8002f30:	05fa0000 	.word	0x05fa0000

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff4c 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306a:	f7ff ff63 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 800306e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	6978      	ldr	r0, [r7, #20]
 8003076:	f7ff ffb3 	bl	8002fe0 <NVIC_EncodePriority>
 800307a:	4602      	mov	r2, r0
 800307c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff82 	bl	8002f8c <__NVIC_SetPriority>
}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff56 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7fe fbb0 	bl	8001818 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e37f      	b.n	80037c4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a66      	ldr	r2, [pc, #408]	; (8003264 <HAL_DMA_Init+0x1b8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d04a      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a65      	ldr	r2, [pc, #404]	; (8003268 <HAL_DMA_Init+0x1bc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d045      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a63      	ldr	r2, [pc, #396]	; (800326c <HAL_DMA_Init+0x1c0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d040      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a62      	ldr	r2, [pc, #392]	; (8003270 <HAL_DMA_Init+0x1c4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a60      	ldr	r2, [pc, #384]	; (8003274 <HAL_DMA_Init+0x1c8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d036      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5f      	ldr	r2, [pc, #380]	; (8003278 <HAL_DMA_Init+0x1cc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d031      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5d      	ldr	r2, [pc, #372]	; (800327c <HAL_DMA_Init+0x1d0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02c      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5c      	ldr	r2, [pc, #368]	; (8003280 <HAL_DMA_Init+0x1d4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d027      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5a      	ldr	r2, [pc, #360]	; (8003284 <HAL_DMA_Init+0x1d8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a59      	ldr	r2, [pc, #356]	; (8003288 <HAL_DMA_Init+0x1dc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a57      	ldr	r2, [pc, #348]	; (800328c <HAL_DMA_Init+0x1e0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_DMA_Init+0x1e4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_DMA_Init+0x1e8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a53      	ldr	r2, [pc, #332]	; (8003298 <HAL_DMA_Init+0x1ec>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a51      	ldr	r2, [pc, #324]	; (800329c <HAL_DMA_Init+0x1f0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_DMA_Init+0xb8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <HAL_DMA_Init+0x1f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0xbc>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_DMA_Init+0xbe>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 813c 	beq.w	80033e8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a37      	ldr	r2, [pc, #220]	; (8003264 <HAL_DMA_Init+0x1b8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04a      	beq.n	8003220 <HAL_DMA_Init+0x174>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a36      	ldr	r2, [pc, #216]	; (8003268 <HAL_DMA_Init+0x1bc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d045      	beq.n	8003220 <HAL_DMA_Init+0x174>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a34      	ldr	r2, [pc, #208]	; (800326c <HAL_DMA_Init+0x1c0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d040      	beq.n	8003220 <HAL_DMA_Init+0x174>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a33      	ldr	r2, [pc, #204]	; (8003270 <HAL_DMA_Init+0x1c4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d03b      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a31      	ldr	r2, [pc, #196]	; (8003274 <HAL_DMA_Init+0x1c8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d036      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a30      	ldr	r2, [pc, #192]	; (8003278 <HAL_DMA_Init+0x1cc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d031      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2e      	ldr	r2, [pc, #184]	; (800327c <HAL_DMA_Init+0x1d0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d02c      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2d      	ldr	r2, [pc, #180]	; (8003280 <HAL_DMA_Init+0x1d4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d027      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <HAL_DMA_Init+0x1d8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d022      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_DMA_Init+0x1dc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d01d      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_DMA_Init+0x1e0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d018      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a27      	ldr	r2, [pc, #156]	; (8003290 <HAL_DMA_Init+0x1e4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <HAL_DMA_Init+0x174>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a25      	ldr	r2, [pc, #148]	; (8003294 <HAL_DMA_Init+0x1e8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00e      	beq.n	8003220 <HAL_DMA_Init+0x174>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a24      	ldr	r2, [pc, #144]	; (8003298 <HAL_DMA_Init+0x1ec>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_DMA_Init+0x174>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_DMA_Init+0x1f0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_DMA_Init+0x174>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <HAL_DMA_Init+0x1f4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d108      	bne.n	8003232 <HAL_DMA_Init+0x186>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e007      	b.n	8003242 <HAL_DMA_Init+0x196>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003242:	e02f      	b.n	80032a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003244:	f7fe fae8 	bl	8001818 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b05      	cmp	r3, #5
 8003250:	d928      	bls.n	80032a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2203      	movs	r2, #3
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e2af      	b.n	80037c4 <HAL_DMA_Init+0x718>
 8003264:	40020010 	.word	0x40020010
 8003268:	40020028 	.word	0x40020028
 800326c:	40020040 	.word	0x40020040
 8003270:	40020058 	.word	0x40020058
 8003274:	40020070 	.word	0x40020070
 8003278:	40020088 	.word	0x40020088
 800327c:	400200a0 	.word	0x400200a0
 8003280:	400200b8 	.word	0x400200b8
 8003284:	40020410 	.word	0x40020410
 8003288:	40020428 	.word	0x40020428
 800328c:	40020440 	.word	0x40020440
 8003290:	40020458 	.word	0x40020458
 8003294:	40020470 	.word	0x40020470
 8003298:	40020488 	.word	0x40020488
 800329c:	400204a0 	.word	0x400204a0
 80032a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1c8      	bne.n	8003244 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_DMA_Init+0x3e0>)
 80032be:	4013      	ands	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4313      	orrs	r3, r2
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b28      	cmp	r3, #40	; 0x28
 800330e:	d903      	bls.n	8003318 <HAL_DMA_Init+0x26c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b2e      	cmp	r3, #46	; 0x2e
 8003316:	d91f      	bls.n	8003358 <HAL_DMA_Init+0x2ac>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b3e      	cmp	r3, #62	; 0x3e
 800331e:	d903      	bls.n	8003328 <HAL_DMA_Init+0x27c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b42      	cmp	r3, #66	; 0x42
 8003326:	d917      	bls.n	8003358 <HAL_DMA_Init+0x2ac>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b46      	cmp	r3, #70	; 0x46
 800332e:	d903      	bls.n	8003338 <HAL_DMA_Init+0x28c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b48      	cmp	r3, #72	; 0x48
 8003336:	d90f      	bls.n	8003358 <HAL_DMA_Init+0x2ac>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b4e      	cmp	r3, #78	; 0x4e
 800333e:	d903      	bls.n	8003348 <HAL_DMA_Init+0x29c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b52      	cmp	r3, #82	; 0x52
 8003346:	d907      	bls.n	8003358 <HAL_DMA_Init+0x2ac>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b73      	cmp	r3, #115	; 0x73
 800334e:	d905      	bls.n	800335c <HAL_DMA_Init+0x2b0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b77      	cmp	r3, #119	; 0x77
 8003356:	d801      	bhi.n	800335c <HAL_DMA_Init+0x2b0>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_DMA_Init+0x2b2>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003368:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0307 	bic.w	r3, r3, #7
 8003380:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2b04      	cmp	r3, #4
 8003392:	d117      	bne.n	80033c4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f002 f990 	bl	80056cc <DMA_CheckFifoParam>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e1ff      	b.n	80037c4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f002 f8cb 	bl	8005568 <DMA_CalcBaseAndBitshift>
 80033d2:	4603      	mov	r3, r0
 80033d4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	223f      	movs	r2, #63	; 0x3f
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	e0fe      	b.n	80035e6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a28      	ldr	r2, [pc, #160]	; (8003490 <HAL_DMA_Init+0x3e4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d04a      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a27      	ldr	r2, [pc, #156]	; (8003494 <HAL_DMA_Init+0x3e8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d045      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a25      	ldr	r2, [pc, #148]	; (8003498 <HAL_DMA_Init+0x3ec>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d040      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a24      	ldr	r2, [pc, #144]	; (800349c <HAL_DMA_Init+0x3f0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d03b      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <HAL_DMA_Init+0x3f4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d036      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_DMA_Init+0x3f8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d031      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <HAL_DMA_Init+0x3fc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d02c      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_DMA_Init+0x400>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d027      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_DMA_Init+0x404>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d022      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_DMA_Init+0x408>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01d      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <HAL_DMA_Init+0x40c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_DMA_Init+0x410>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <HAL_DMA_Init+0x414>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <HAL_DMA_Init+0x418>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <HAL_DMA_Init+0x41c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_DMA_Init+0x3dc>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_DMA_Init+0x420>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d123      	bne.n	80034d0 <HAL_DMA_Init+0x424>
 8003488:	2301      	movs	r3, #1
 800348a:	e022      	b.n	80034d2 <HAL_DMA_Init+0x426>
 800348c:	fe10803f 	.word	0xfe10803f
 8003490:	48022c08 	.word	0x48022c08
 8003494:	48022c1c 	.word	0x48022c1c
 8003498:	48022c30 	.word	0x48022c30
 800349c:	48022c44 	.word	0x48022c44
 80034a0:	48022c58 	.word	0x48022c58
 80034a4:	48022c6c 	.word	0x48022c6c
 80034a8:	48022c80 	.word	0x48022c80
 80034ac:	48022c94 	.word	0x48022c94
 80034b0:	58025408 	.word	0x58025408
 80034b4:	5802541c 	.word	0x5802541c
 80034b8:	58025430 	.word	0x58025430
 80034bc:	58025444 	.word	0x58025444
 80034c0:	58025458 	.word	0x58025458
 80034c4:	5802546c 	.word	0x5802546c
 80034c8:	58025480 	.word	0x58025480
 80034cc:	58025494 	.word	0x58025494
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d07e      	beq.n	80035d4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a80      	ldr	r2, [pc, #512]	; (80036dc <HAL_DMA_Init+0x630>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d021      	beq.n	8003524 <HAL_DMA_Init+0x478>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7e      	ldr	r2, [pc, #504]	; (80036e0 <HAL_DMA_Init+0x634>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01c      	beq.n	8003524 <HAL_DMA_Init+0x478>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7d      	ldr	r2, [pc, #500]	; (80036e4 <HAL_DMA_Init+0x638>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d017      	beq.n	8003524 <HAL_DMA_Init+0x478>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7b      	ldr	r2, [pc, #492]	; (80036e8 <HAL_DMA_Init+0x63c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d012      	beq.n	8003524 <HAL_DMA_Init+0x478>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7a      	ldr	r2, [pc, #488]	; (80036ec <HAL_DMA_Init+0x640>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00d      	beq.n	8003524 <HAL_DMA_Init+0x478>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a78      	ldr	r2, [pc, #480]	; (80036f0 <HAL_DMA_Init+0x644>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d008      	beq.n	8003524 <HAL_DMA_Init+0x478>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a77      	ldr	r2, [pc, #476]	; (80036f4 <HAL_DMA_Init+0x648>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <HAL_DMA_Init+0x478>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a75      	ldr	r2, [pc, #468]	; (80036f8 <HAL_DMA_Init+0x64c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4b6e      	ldr	r3, [pc, #440]	; (80036fc <HAL_DMA_Init+0x650>)
 8003542:	4013      	ands	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d008      	beq.n	8003560 <HAL_DMA_Init+0x4b4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d102      	bne.n	800355c <HAL_DMA_Init+0x4b0>
 8003556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800355a:	e002      	b.n	8003562 <HAL_DMA_Init+0x4b6>
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_DMA_Init+0x4b6>
 8003560:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68d2      	ldr	r2, [r2, #12]
 8003566:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003590:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b56      	ldr	r3, [pc, #344]	; (8003700 <HAL_DMA_Init+0x654>)
 80035a8:	4413      	add	r3, r2
 80035aa:	4a56      	ldr	r2, [pc, #344]	; (8003704 <HAL_DMA_Init+0x658>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f001 ffd5 	bl	8005568 <DMA_CalcBaseAndBitshift>
 80035be:	4603      	mov	r3, r0
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	e008      	b.n	80035e6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0ee      	b.n	80037c4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a47      	ldr	r2, [pc, #284]	; (8003708 <HAL_DMA_Init+0x65c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d072      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a45      	ldr	r2, [pc, #276]	; (800370c <HAL_DMA_Init+0x660>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d06d      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a44      	ldr	r2, [pc, #272]	; (8003710 <HAL_DMA_Init+0x664>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d068      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a42      	ldr	r2, [pc, #264]	; (8003714 <HAL_DMA_Init+0x668>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d063      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a41      	ldr	r2, [pc, #260]	; (8003718 <HAL_DMA_Init+0x66c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d05e      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3f      	ldr	r2, [pc, #252]	; (800371c <HAL_DMA_Init+0x670>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d059      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3e      	ldr	r2, [pc, #248]	; (8003720 <HAL_DMA_Init+0x674>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d054      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3c      	ldr	r2, [pc, #240]	; (8003724 <HAL_DMA_Init+0x678>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04f      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <HAL_DMA_Init+0x67c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d04a      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a39      	ldr	r2, [pc, #228]	; (800372c <HAL_DMA_Init+0x680>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d045      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a38      	ldr	r2, [pc, #224]	; (8003730 <HAL_DMA_Init+0x684>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d040      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a36      	ldr	r2, [pc, #216]	; (8003734 <HAL_DMA_Init+0x688>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d03b      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a35      	ldr	r2, [pc, #212]	; (8003738 <HAL_DMA_Init+0x68c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d036      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a33      	ldr	r2, [pc, #204]	; (800373c <HAL_DMA_Init+0x690>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d031      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a32      	ldr	r2, [pc, #200]	; (8003740 <HAL_DMA_Init+0x694>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d02c      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a30      	ldr	r2, [pc, #192]	; (8003744 <HAL_DMA_Init+0x698>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d027      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_DMA_Init+0x630>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_DMA_Init+0x634>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01d      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_DMA_Init+0x638>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_DMA_Init+0x63c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <HAL_DMA_Init+0x640>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <HAL_DMA_Init+0x644>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <HAL_DMA_Init+0x648>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_DMA_Init+0x62a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <HAL_DMA_Init+0x64c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d138      	bne.n	8003748 <HAL_DMA_Init+0x69c>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e037      	b.n	800374a <HAL_DMA_Init+0x69e>
 80036da:	bf00      	nop
 80036dc:	58025408 	.word	0x58025408
 80036e0:	5802541c 	.word	0x5802541c
 80036e4:	58025430 	.word	0x58025430
 80036e8:	58025444 	.word	0x58025444
 80036ec:	58025458 	.word	0x58025458
 80036f0:	5802546c 	.word	0x5802546c
 80036f4:	58025480 	.word	0x58025480
 80036f8:	58025494 	.word	0x58025494
 80036fc:	fffe000f 	.word	0xfffe000f
 8003700:	a7fdabf8 	.word	0xa7fdabf8
 8003704:	cccccccd 	.word	0xcccccccd
 8003708:	40020010 	.word	0x40020010
 800370c:	40020028 	.word	0x40020028
 8003710:	40020040 	.word	0x40020040
 8003714:	40020058 	.word	0x40020058
 8003718:	40020070 	.word	0x40020070
 800371c:	40020088 	.word	0x40020088
 8003720:	400200a0 	.word	0x400200a0
 8003724:	400200b8 	.word	0x400200b8
 8003728:	40020410 	.word	0x40020410
 800372c:	40020428 	.word	0x40020428
 8003730:	40020440 	.word	0x40020440
 8003734:	40020458 	.word	0x40020458
 8003738:	40020470 	.word	0x40020470
 800373c:	40020488 	.word	0x40020488
 8003740:	400204a0 	.word	0x400204a0
 8003744:	400204b8 	.word	0x400204b8
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d032      	beq.n	80037b4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f002 f838 	bl	80057c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b80      	cmp	r3, #128	; 0x80
 800375a:	d102      	bne.n	8003762 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003776:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <HAL_DMA_Init+0x6f6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d80c      	bhi.n	80037a2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f002 f8b5 	bl	80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	e008      	b.n	80037b4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e226      	b.n	8003c36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_DMA_Start_IT+0x2a>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e21f      	b.n	8003c36 <HAL_DMA_Start_IT+0x46a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 820a 	bne.w	8003c20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a68      	ldr	r2, [pc, #416]	; (80039c0 <HAL_DMA_Start_IT+0x1f4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d04a      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a66      	ldr	r2, [pc, #408]	; (80039c4 <HAL_DMA_Start_IT+0x1f8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d045      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_DMA_Start_IT+0x1fc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d040      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a63      	ldr	r2, [pc, #396]	; (80039cc <HAL_DMA_Start_IT+0x200>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d03b      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a62      	ldr	r2, [pc, #392]	; (80039d0 <HAL_DMA_Start_IT+0x204>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d036      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a60      	ldr	r2, [pc, #384]	; (80039d4 <HAL_DMA_Start_IT+0x208>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d031      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5f      	ldr	r2, [pc, #380]	; (80039d8 <HAL_DMA_Start_IT+0x20c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d02c      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5d      	ldr	r2, [pc, #372]	; (80039dc <HAL_DMA_Start_IT+0x210>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d027      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5c      	ldr	r2, [pc, #368]	; (80039e0 <HAL_DMA_Start_IT+0x214>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5a      	ldr	r2, [pc, #360]	; (80039e4 <HAL_DMA_Start_IT+0x218>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01d      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a59      	ldr	r2, [pc, #356]	; (80039e8 <HAL_DMA_Start_IT+0x21c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a57      	ldr	r2, [pc, #348]	; (80039ec <HAL_DMA_Start_IT+0x220>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a56      	ldr	r2, [pc, #344]	; (80039f0 <HAL_DMA_Start_IT+0x224>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a54      	ldr	r2, [pc, #336]	; (80039f4 <HAL_DMA_Start_IT+0x228>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a53      	ldr	r2, [pc, #332]	; (80039f8 <HAL_DMA_Start_IT+0x22c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_DMA_Start_IT+0xee>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a51      	ldr	r2, [pc, #324]	; (80039fc <HAL_DMA_Start_IT+0x230>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <HAL_DMA_Start_IT+0x100>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e007      	b.n	80038dc <HAL_DMA_Start_IT+0x110>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f001 fc5c 	bl	80051a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_DMA_Start_IT+0x1f4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d04a      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <HAL_DMA_Start_IT+0x1f8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d045      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a31      	ldr	r2, [pc, #196]	; (80039c8 <HAL_DMA_Start_IT+0x1fc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d040      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a30      	ldr	r2, [pc, #192]	; (80039cc <HAL_DMA_Start_IT+0x200>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d03b      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <HAL_DMA_Start_IT+0x204>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d036      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <HAL_DMA_Start_IT+0x208>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d031      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2b      	ldr	r2, [pc, #172]	; (80039d8 <HAL_DMA_Start_IT+0x20c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02c      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <HAL_DMA_Start_IT+0x210>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d027      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a28      	ldr	r2, [pc, #160]	; (80039e0 <HAL_DMA_Start_IT+0x214>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <HAL_DMA_Start_IT+0x218>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d01d      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <HAL_DMA_Start_IT+0x21c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a24      	ldr	r2, [pc, #144]	; (80039ec <HAL_DMA_Start_IT+0x220>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <HAL_DMA_Start_IT+0x224>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <HAL_DMA_Start_IT+0x228>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <HAL_DMA_Start_IT+0x22c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_DMA_Start_IT+0x1bc>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_DMA_Start_IT+0x230>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_DMA_Start_IT+0x1c0>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_DMA_Start_IT+0x1c2>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d036      	beq.n	8003a00 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 021e 	bic.w	r2, r3, #30
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0216 	orr.w	r2, r2, #22
 80039a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d03e      	beq.n	8003a2c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0208 	orr.w	r2, r2, #8
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e035      	b.n	8003a2c <HAL_DMA_Start_IT+0x260>
 80039c0:	40020010 	.word	0x40020010
 80039c4:	40020028 	.word	0x40020028
 80039c8:	40020040 	.word	0x40020040
 80039cc:	40020058 	.word	0x40020058
 80039d0:	40020070 	.word	0x40020070
 80039d4:	40020088 	.word	0x40020088
 80039d8:	400200a0 	.word	0x400200a0
 80039dc:	400200b8 	.word	0x400200b8
 80039e0:	40020410 	.word	0x40020410
 80039e4:	40020428 	.word	0x40020428
 80039e8:	40020440 	.word	0x40020440
 80039ec:	40020458 	.word	0x40020458
 80039f0:	40020470 	.word	0x40020470
 80039f4:	40020488 	.word	0x40020488
 80039f8:	400204a0 	.word	0x400204a0
 80039fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 020e 	bic.w	r2, r3, #14
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 020a 	orr.w	r2, r2, #10
 8003a12:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0204 	orr.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a83      	ldr	r2, [pc, #524]	; (8003c40 <HAL_DMA_Start_IT+0x474>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d072      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a82      	ldr	r2, [pc, #520]	; (8003c44 <HAL_DMA_Start_IT+0x478>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d06d      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a80      	ldr	r2, [pc, #512]	; (8003c48 <HAL_DMA_Start_IT+0x47c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d068      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <HAL_DMA_Start_IT+0x480>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d063      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7d      	ldr	r2, [pc, #500]	; (8003c50 <HAL_DMA_Start_IT+0x484>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d05e      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <HAL_DMA_Start_IT+0x488>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d059      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7a      	ldr	r2, [pc, #488]	; (8003c58 <HAL_DMA_Start_IT+0x48c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d054      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <HAL_DMA_Start_IT+0x490>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04f      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a77      	ldr	r2, [pc, #476]	; (8003c60 <HAL_DMA_Start_IT+0x494>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d04a      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a76      	ldr	r2, [pc, #472]	; (8003c64 <HAL_DMA_Start_IT+0x498>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d045      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a74      	ldr	r2, [pc, #464]	; (8003c68 <HAL_DMA_Start_IT+0x49c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d040      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <HAL_DMA_Start_IT+0x4a0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d03b      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a71      	ldr	r2, [pc, #452]	; (8003c70 <HAL_DMA_Start_IT+0x4a4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d036      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a70      	ldr	r2, [pc, #448]	; (8003c74 <HAL_DMA_Start_IT+0x4a8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d031      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6e      	ldr	r2, [pc, #440]	; (8003c78 <HAL_DMA_Start_IT+0x4ac>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02c      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6d      	ldr	r2, [pc, #436]	; (8003c7c <HAL_DMA_Start_IT+0x4b0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d027      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6b      	ldr	r2, [pc, #428]	; (8003c80 <HAL_DMA_Start_IT+0x4b4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6a      	ldr	r2, [pc, #424]	; (8003c84 <HAL_DMA_Start_IT+0x4b8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01d      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a68      	ldr	r2, [pc, #416]	; (8003c88 <HAL_DMA_Start_IT+0x4bc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a67      	ldr	r2, [pc, #412]	; (8003c8c <HAL_DMA_Start_IT+0x4c0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <HAL_DMA_Start_IT+0x4c4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a64      	ldr	r2, [pc, #400]	; (8003c94 <HAL_DMA_Start_IT+0x4c8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a62      	ldr	r2, [pc, #392]	; (8003c98 <HAL_DMA_Start_IT+0x4cc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_DMA_Start_IT+0x350>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <HAL_DMA_Start_IT+0x4d0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Start_IT+0x354>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_Start_IT+0x356>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01a      	beq.n	8003b5c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b42:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <HAL_DMA_Start_IT+0x474>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d04a      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a36      	ldr	r2, [pc, #216]	; (8003c44 <HAL_DMA_Start_IT+0x478>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d045      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a34      	ldr	r2, [pc, #208]	; (8003c48 <HAL_DMA_Start_IT+0x47c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d040      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a33      	ldr	r2, [pc, #204]	; (8003c4c <HAL_DMA_Start_IT+0x480>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d03b      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a31      	ldr	r2, [pc, #196]	; (8003c50 <HAL_DMA_Start_IT+0x484>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d036      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <HAL_DMA_Start_IT+0x488>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d031      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <HAL_DMA_Start_IT+0x48c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d02c      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2d      	ldr	r2, [pc, #180]	; (8003c5c <HAL_DMA_Start_IT+0x490>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d027      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <HAL_DMA_Start_IT+0x494>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <HAL_DMA_Start_IT+0x498>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01d      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <HAL_DMA_Start_IT+0x49c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <HAL_DMA_Start_IT+0x4a0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <HAL_DMA_Start_IT+0x4a4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a24      	ldr	r2, [pc, #144]	; (8003c74 <HAL_DMA_Start_IT+0x4a8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <HAL_DMA_Start_IT+0x4ac>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_DMA_Start_IT+0x430>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <HAL_DMA_Start_IT+0x4b0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d108      	bne.n	8003c0e <HAL_DMA_Start_IT+0x442>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e012      	b.n	8003c34 <HAL_DMA_Start_IT+0x468>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e009      	b.n	8003c34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40020010 	.word	0x40020010
 8003c44:	40020028 	.word	0x40020028
 8003c48:	40020040 	.word	0x40020040
 8003c4c:	40020058 	.word	0x40020058
 8003c50:	40020070 	.word	0x40020070
 8003c54:	40020088 	.word	0x40020088
 8003c58:	400200a0 	.word	0x400200a0
 8003c5c:	400200b8 	.word	0x400200b8
 8003c60:	40020410 	.word	0x40020410
 8003c64:	40020428 	.word	0x40020428
 8003c68:	40020440 	.word	0x40020440
 8003c6c:	40020458 	.word	0x40020458
 8003c70:	40020470 	.word	0x40020470
 8003c74:	40020488 	.word	0x40020488
 8003c78:	400204a0 	.word	0x400204a0
 8003c7c:	400204b8 	.word	0x400204b8
 8003c80:	58025408 	.word	0x58025408
 8003c84:	5802541c 	.word	0x5802541c
 8003c88:	58025430 	.word	0x58025430
 8003c8c:	58025444 	.word	0x58025444
 8003c90:	58025458 	.word	0x58025458
 8003c94:	5802546c 	.word	0x5802546c
 8003c98:	58025480 	.word	0x58025480
 8003c9c:	58025494 	.word	0x58025494

08003ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ca8:	f7fd fdb6 	bl	8001818 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e2dc      	b.n	8004272 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d008      	beq.n	8003cd6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e2cd      	b.n	8004272 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a76      	ldr	r2, [pc, #472]	; (8003eb4 <HAL_DMA_Abort+0x214>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d04a      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a74      	ldr	r2, [pc, #464]	; (8003eb8 <HAL_DMA_Abort+0x218>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d045      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a73      	ldr	r2, [pc, #460]	; (8003ebc <HAL_DMA_Abort+0x21c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d040      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a71      	ldr	r2, [pc, #452]	; (8003ec0 <HAL_DMA_Abort+0x220>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d03b      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a70      	ldr	r2, [pc, #448]	; (8003ec4 <HAL_DMA_Abort+0x224>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d036      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6e      	ldr	r2, [pc, #440]	; (8003ec8 <HAL_DMA_Abort+0x228>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d031      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6d      	ldr	r2, [pc, #436]	; (8003ecc <HAL_DMA_Abort+0x22c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d02c      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6b      	ldr	r2, [pc, #428]	; (8003ed0 <HAL_DMA_Abort+0x230>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d027      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6a      	ldr	r2, [pc, #424]	; (8003ed4 <HAL_DMA_Abort+0x234>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a68      	ldr	r2, [pc, #416]	; (8003ed8 <HAL_DMA_Abort+0x238>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01d      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a67      	ldr	r2, [pc, #412]	; (8003edc <HAL_DMA_Abort+0x23c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a65      	ldr	r2, [pc, #404]	; (8003ee0 <HAL_DMA_Abort+0x240>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a64      	ldr	r2, [pc, #400]	; (8003ee4 <HAL_DMA_Abort+0x244>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a62      	ldr	r2, [pc, #392]	; (8003ee8 <HAL_DMA_Abort+0x248>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a61      	ldr	r2, [pc, #388]	; (8003eec <HAL_DMA_Abort+0x24c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_DMA_Abort+0xd6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a5f      	ldr	r2, [pc, #380]	; (8003ef0 <HAL_DMA_Abort+0x250>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <HAL_DMA_Abort+0xda>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_DMA_Abort+0xdc>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 021e 	bic.w	r2, r2, #30
 8003d8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e00a      	b.n	8003dbe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020e 	bic.w	r2, r2, #14
 8003db6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a3c      	ldr	r2, [pc, #240]	; (8003eb4 <HAL_DMA_Abort+0x214>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d072      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <HAL_DMA_Abort+0x218>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d06d      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a39      	ldr	r2, [pc, #228]	; (8003ebc <HAL_DMA_Abort+0x21c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d068      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a37      	ldr	r2, [pc, #220]	; (8003ec0 <HAL_DMA_Abort+0x220>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d063      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a36      	ldr	r2, [pc, #216]	; (8003ec4 <HAL_DMA_Abort+0x224>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d05e      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a34      	ldr	r2, [pc, #208]	; (8003ec8 <HAL_DMA_Abort+0x228>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d059      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a33      	ldr	r2, [pc, #204]	; (8003ecc <HAL_DMA_Abort+0x22c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d054      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a31      	ldr	r2, [pc, #196]	; (8003ed0 <HAL_DMA_Abort+0x230>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04f      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a30      	ldr	r2, [pc, #192]	; (8003ed4 <HAL_DMA_Abort+0x234>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d04a      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2e      	ldr	r2, [pc, #184]	; (8003ed8 <HAL_DMA_Abort+0x238>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d045      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2d      	ldr	r2, [pc, #180]	; (8003edc <HAL_DMA_Abort+0x23c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d040      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <HAL_DMA_Abort+0x240>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d03b      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <HAL_DMA_Abort+0x244>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d036      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a28      	ldr	r2, [pc, #160]	; (8003ee8 <HAL_DMA_Abort+0x248>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d031      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a27      	ldr	r2, [pc, #156]	; (8003eec <HAL_DMA_Abort+0x24c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d02c      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <HAL_DMA_Abort+0x250>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d027      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_DMA_Abort+0x254>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <HAL_DMA_Abort+0x258>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01d      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a21      	ldr	r2, [pc, #132]	; (8003efc <HAL_DMA_Abort+0x25c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_DMA_Abort+0x260>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_DMA_Abort+0x264>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_DMA_Abort+0x268>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_DMA_Abort+0x26c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_DMA_Abort+0x20e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_DMA_Abort+0x270>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d132      	bne.n	8003f14 <HAL_DMA_Abort+0x274>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e031      	b.n	8003f16 <HAL_DMA_Abort+0x276>
 8003eb2:	bf00      	nop
 8003eb4:	40020010 	.word	0x40020010
 8003eb8:	40020028 	.word	0x40020028
 8003ebc:	40020040 	.word	0x40020040
 8003ec0:	40020058 	.word	0x40020058
 8003ec4:	40020070 	.word	0x40020070
 8003ec8:	40020088 	.word	0x40020088
 8003ecc:	400200a0 	.word	0x400200a0
 8003ed0:	400200b8 	.word	0x400200b8
 8003ed4:	40020410 	.word	0x40020410
 8003ed8:	40020428 	.word	0x40020428
 8003edc:	40020440 	.word	0x40020440
 8003ee0:	40020458 	.word	0x40020458
 8003ee4:	40020470 	.word	0x40020470
 8003ee8:	40020488 	.word	0x40020488
 8003eec:	400204a0 	.word	0x400204a0
 8003ef0:	400204b8 	.word	0x400204b8
 8003ef4:	58025408 	.word	0x58025408
 8003ef8:	5802541c 	.word	0x5802541c
 8003efc:	58025430 	.word	0x58025430
 8003f00:	58025444 	.word	0x58025444
 8003f04:	58025458 	.word	0x58025458
 8003f08:	5802546c 	.word	0x5802546c
 8003f0c:	58025480 	.word	0x58025480
 8003f10:	58025494 	.word	0x58025494
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a6d      	ldr	r2, [pc, #436]	; (80040e4 <HAL_DMA_Abort+0x444>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04a      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6b      	ldr	r2, [pc, #428]	; (80040e8 <HAL_DMA_Abort+0x448>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d045      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6a      	ldr	r2, [pc, #424]	; (80040ec <HAL_DMA_Abort+0x44c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a68      	ldr	r2, [pc, #416]	; (80040f0 <HAL_DMA_Abort+0x450>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d03b      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a67      	ldr	r2, [pc, #412]	; (80040f4 <HAL_DMA_Abort+0x454>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d036      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <HAL_DMA_Abort+0x458>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d031      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a64      	ldr	r2, [pc, #400]	; (80040fc <HAL_DMA_Abort+0x45c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d02c      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a62      	ldr	r2, [pc, #392]	; (8004100 <HAL_DMA_Abort+0x460>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a61      	ldr	r2, [pc, #388]	; (8004104 <HAL_DMA_Abort+0x464>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a5f      	ldr	r2, [pc, #380]	; (8004108 <HAL_DMA_Abort+0x468>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5e      	ldr	r2, [pc, #376]	; (800410c <HAL_DMA_Abort+0x46c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a5c      	ldr	r2, [pc, #368]	; (8004110 <HAL_DMA_Abort+0x470>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5b      	ldr	r2, [pc, #364]	; (8004114 <HAL_DMA_Abort+0x474>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a59      	ldr	r2, [pc, #356]	; (8004118 <HAL_DMA_Abort+0x478>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_DMA_Abort+0x47c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_Abort+0x32a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a56      	ldr	r2, [pc, #344]	; (8004120 <HAL_DMA_Abort+0x480>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <HAL_DMA_Abort+0x33c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e007      	b.n	8003fec <HAL_DMA_Abort+0x34c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003fec:	e013      	b.n	8004016 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fee:	f7fd fc13 	bl	8001818 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	d90c      	bls.n	8004016 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2203      	movs	r2, #3
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e12d      	b.n	8004272 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <HAL_DMA_Abort+0x444>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d04a      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <HAL_DMA_Abort+0x448>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d045      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <HAL_DMA_Abort+0x44c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d040      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <HAL_DMA_Abort+0x450>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d03b      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <HAL_DMA_Abort+0x454>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d036      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <HAL_DMA_Abort+0x458>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d031      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_DMA_Abort+0x45c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d02c      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a24      	ldr	r2, [pc, #144]	; (8004100 <HAL_DMA_Abort+0x460>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a23      	ldr	r2, [pc, #140]	; (8004104 <HAL_DMA_Abort+0x464>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d022      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a21      	ldr	r2, [pc, #132]	; (8004108 <HAL_DMA_Abort+0x468>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01d      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a20      	ldr	r2, [pc, #128]	; (800410c <HAL_DMA_Abort+0x46c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d018      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_DMA_Abort+0x470>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <HAL_DMA_Abort+0x474>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <HAL_DMA_Abort+0x478>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_DMA_Abort+0x47c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_DMA_Abort+0x422>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a18      	ldr	r2, [pc, #96]	; (8004120 <HAL_DMA_Abort+0x480>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_DMA_Abort+0x426>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_DMA_Abort+0x428>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02b      	beq.n	8004124 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	223f      	movs	r2, #63	; 0x3f
 80040dc:	409a      	lsls	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	e02a      	b.n	800413a <HAL_DMA_Abort+0x49a>
 80040e4:	40020010 	.word	0x40020010
 80040e8:	40020028 	.word	0x40020028
 80040ec:	40020040 	.word	0x40020040
 80040f0:	40020058 	.word	0x40020058
 80040f4:	40020070 	.word	0x40020070
 80040f8:	40020088 	.word	0x40020088
 80040fc:	400200a0 	.word	0x400200a0
 8004100:	400200b8 	.word	0x400200b8
 8004104:	40020410 	.word	0x40020410
 8004108:	40020428 	.word	0x40020428
 800410c:	40020440 	.word	0x40020440
 8004110:	40020458 	.word	0x40020458
 8004114:	40020470 	.word	0x40020470
 8004118:	40020488 	.word	0x40020488
 800411c:	400204a0 	.word	0x400204a0
 8004120:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2201      	movs	r2, #1
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4f      	ldr	r2, [pc, #316]	; (800427c <HAL_DMA_Abort+0x5dc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d072      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a4d      	ldr	r2, [pc, #308]	; (8004280 <HAL_DMA_Abort+0x5e0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d06d      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4c      	ldr	r2, [pc, #304]	; (8004284 <HAL_DMA_Abort+0x5e4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d068      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a4a      	ldr	r2, [pc, #296]	; (8004288 <HAL_DMA_Abort+0x5e8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d063      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a49      	ldr	r2, [pc, #292]	; (800428c <HAL_DMA_Abort+0x5ec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d05e      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a47      	ldr	r2, [pc, #284]	; (8004290 <HAL_DMA_Abort+0x5f0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d059      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a46      	ldr	r2, [pc, #280]	; (8004294 <HAL_DMA_Abort+0x5f4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d054      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a44      	ldr	r2, [pc, #272]	; (8004298 <HAL_DMA_Abort+0x5f8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d04f      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a43      	ldr	r2, [pc, #268]	; (800429c <HAL_DMA_Abort+0x5fc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d04a      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a41      	ldr	r2, [pc, #260]	; (80042a0 <HAL_DMA_Abort+0x600>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d045      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a40      	ldr	r2, [pc, #256]	; (80042a4 <HAL_DMA_Abort+0x604>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d040      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3e      	ldr	r2, [pc, #248]	; (80042a8 <HAL_DMA_Abort+0x608>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d03b      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <HAL_DMA_Abort+0x60c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d036      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3b      	ldr	r2, [pc, #236]	; (80042b0 <HAL_DMA_Abort+0x610>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d031      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3a      	ldr	r2, [pc, #232]	; (80042b4 <HAL_DMA_Abort+0x614>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d02c      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a38      	ldr	r2, [pc, #224]	; (80042b8 <HAL_DMA_Abort+0x618>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d027      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a37      	ldr	r2, [pc, #220]	; (80042bc <HAL_DMA_Abort+0x61c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d022      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <HAL_DMA_Abort+0x620>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01d      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_DMA_Abort+0x624>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d018      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <HAL_DMA_Abort+0x628>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a31      	ldr	r2, [pc, #196]	; (80042cc <HAL_DMA_Abort+0x62c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <HAL_DMA_Abort+0x630>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2e      	ldr	r2, [pc, #184]	; (80042d4 <HAL_DMA_Abort+0x634>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_DMA_Abort+0x58a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <HAL_DMA_Abort+0x638>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <HAL_DMA_Abort+0x58e>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_DMA_Abort+0x590>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800423c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004254:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800425e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	58025408 	.word	0x58025408
 80042c0:	5802541c 	.word	0x5802541c
 80042c4:	58025430 	.word	0x58025430
 80042c8:	58025444 	.word	0x58025444
 80042cc:	58025458 	.word	0x58025458
 80042d0:	5802546c 	.word	0x5802546c
 80042d4:	58025480 	.word	0x58025480
 80042d8:	58025494 	.word	0x58025494

080042dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042e8:	4b67      	ldr	r3, [pc, #412]	; (8004488 <HAL_DMA_IRQHandler+0x1ac>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a67      	ldr	r2, [pc, #412]	; (800448c <HAL_DMA_IRQHandler+0x1b0>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0a9b      	lsrs	r3, r3, #10
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a5f      	ldr	r2, [pc, #380]	; (8004490 <HAL_DMA_IRQHandler+0x1b4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d04a      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5d      	ldr	r2, [pc, #372]	; (8004494 <HAL_DMA_IRQHandler+0x1b8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d045      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a5c      	ldr	r2, [pc, #368]	; (8004498 <HAL_DMA_IRQHandler+0x1bc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d040      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5a      	ldr	r2, [pc, #360]	; (800449c <HAL_DMA_IRQHandler+0x1c0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d03b      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a59      	ldr	r2, [pc, #356]	; (80044a0 <HAL_DMA_IRQHandler+0x1c4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d036      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a57      	ldr	r2, [pc, #348]	; (80044a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d031      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a56      	ldr	r2, [pc, #344]	; (80044a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d02c      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a54      	ldr	r2, [pc, #336]	; (80044ac <HAL_DMA_IRQHandler+0x1d0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d027      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a53      	ldr	r2, [pc, #332]	; (80044b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d022      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a51      	ldr	r2, [pc, #324]	; (80044b4 <HAL_DMA_IRQHandler+0x1d8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01d      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a50      	ldr	r2, [pc, #320]	; (80044b8 <HAL_DMA_IRQHandler+0x1dc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d018      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a4e      	ldr	r2, [pc, #312]	; (80044bc <HAL_DMA_IRQHandler+0x1e0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a4d      	ldr	r2, [pc, #308]	; (80044c0 <HAL_DMA_IRQHandler+0x1e4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00e      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a4b      	ldr	r2, [pc, #300]	; (80044c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a4a      	ldr	r2, [pc, #296]	; (80044c8 <HAL_DMA_IRQHandler+0x1ec>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_DMA_IRQHandler+0xd2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a48      	ldr	r2, [pc, #288]	; (80044cc <HAL_DMA_IRQHandler+0x1f0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_DMA_IRQHandler+0xd6>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_DMA_IRQHandler+0xd8>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 842b 	beq.w	8004c10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	2208      	movs	r2, #8
 80043c4:	409a      	lsls	r2, r3
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80a2 	beq.w	8004514 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <HAL_DMA_IRQHandler+0x1b4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d04a      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2d      	ldr	r2, [pc, #180]	; (8004494 <HAL_DMA_IRQHandler+0x1b8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d045      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <HAL_DMA_IRQHandler+0x1bc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d040      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <HAL_DMA_IRQHandler+0x1c0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d03b      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <HAL_DMA_IRQHandler+0x1c4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d036      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d031      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d02c      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a24      	ldr	r2, [pc, #144]	; (80044ac <HAL_DMA_IRQHandler+0x1d0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d027      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d022      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a21      	ldr	r2, [pc, #132]	; (80044b4 <HAL_DMA_IRQHandler+0x1d8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d01d      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <HAL_DMA_IRQHandler+0x1dc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <HAL_DMA_IRQHandler+0x1e0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_DMA_IRQHandler+0x1e4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <HAL_DMA_IRQHandler+0x1ec>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_DMA_IRQHandler+0x194>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a18      	ldr	r2, [pc, #96]	; (80044cc <HAL_DMA_IRQHandler+0x1f0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d12f      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x1f4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e02e      	b.n	80044e4 <HAL_DMA_IRQHandler+0x208>
 8004486:	bf00      	nop
 8004488:	24000004 	.word	0x24000004
 800448c:	1b4e81b5 	.word	0x1b4e81b5
 8004490:	40020010 	.word	0x40020010
 8004494:	40020028 	.word	0x40020028
 8004498:	40020040 	.word	0x40020040
 800449c:	40020058 	.word	0x40020058
 80044a0:	40020070 	.word	0x40020070
 80044a4:	40020088 	.word	0x40020088
 80044a8:	400200a0 	.word	0x400200a0
 80044ac:	400200b8 	.word	0x400200b8
 80044b0:	40020410 	.word	0x40020410
 80044b4:	40020428 	.word	0x40020428
 80044b8:	40020440 	.word	0x40020440
 80044bc:	40020458 	.word	0x40020458
 80044c0:	40020470 	.word	0x40020470
 80044c4:	40020488 	.word	0x40020488
 80044c8:	400204a0 	.word	0x400204a0
 80044cc:	400204b8 	.word	0x400204b8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0204 	bic.w	r2, r2, #4
 80044f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2208      	movs	r2, #8
 8004502:	409a      	lsls	r2, r3
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f043 0201 	orr.w	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d06e      	beq.n	8004608 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a69      	ldr	r2, [pc, #420]	; (80046d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d04a      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a67      	ldr	r2, [pc, #412]	; (80046d8 <HAL_DMA_IRQHandler+0x3fc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d045      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a66      	ldr	r2, [pc, #408]	; (80046dc <HAL_DMA_IRQHandler+0x400>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d040      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a64      	ldr	r2, [pc, #400]	; (80046e0 <HAL_DMA_IRQHandler+0x404>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d03b      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a63      	ldr	r2, [pc, #396]	; (80046e4 <HAL_DMA_IRQHandler+0x408>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d036      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a61      	ldr	r2, [pc, #388]	; (80046e8 <HAL_DMA_IRQHandler+0x40c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d031      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a60      	ldr	r2, [pc, #384]	; (80046ec <HAL_DMA_IRQHandler+0x410>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d02c      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5e      	ldr	r2, [pc, #376]	; (80046f0 <HAL_DMA_IRQHandler+0x414>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d027      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5d      	ldr	r2, [pc, #372]	; (80046f4 <HAL_DMA_IRQHandler+0x418>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5b      	ldr	r2, [pc, #364]	; (80046f8 <HAL_DMA_IRQHandler+0x41c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01d      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a5a      	ldr	r2, [pc, #360]	; (80046fc <HAL_DMA_IRQHandler+0x420>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_DMA_IRQHandler+0x424>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a57      	ldr	r2, [pc, #348]	; (8004704 <HAL_DMA_IRQHandler+0x428>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a55      	ldr	r2, [pc, #340]	; (8004708 <HAL_DMA_IRQHandler+0x42c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a54      	ldr	r2, [pc, #336]	; (800470c <HAL_DMA_IRQHandler+0x430>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2ee>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a52      	ldr	r2, [pc, #328]	; (8004710 <HAL_DMA_IRQHandler+0x434>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10a      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x304>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e003      	b.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2201      	movs	r2, #1
 80045f6:	409a      	lsls	r2, r3
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	f043 0202 	orr.w	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2204      	movs	r2, #4
 8004612:	409a      	lsls	r2, r3
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 808f 	beq.w	800473c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2c      	ldr	r2, [pc, #176]	; (80046d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d04a      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <HAL_DMA_IRQHandler+0x3fc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d045      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a29      	ldr	r2, [pc, #164]	; (80046dc <HAL_DMA_IRQHandler+0x400>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d040      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <HAL_DMA_IRQHandler+0x404>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d03b      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <HAL_DMA_IRQHandler+0x408>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d036      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_DMA_IRQHandler+0x40c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d031      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a23      	ldr	r2, [pc, #140]	; (80046ec <HAL_DMA_IRQHandler+0x410>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d02c      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_DMA_IRQHandler+0x414>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d027      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a20      	ldr	r2, [pc, #128]	; (80046f4 <HAL_DMA_IRQHandler+0x418>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_DMA_IRQHandler+0x41c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01d      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <HAL_DMA_IRQHandler+0x420>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_DMA_IRQHandler+0x424>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_DMA_IRQHandler+0x428>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_DMA_IRQHandler+0x42c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <HAL_DMA_IRQHandler+0x430>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_DMA_IRQHandler+0x3e2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_DMA_IRQHandler+0x434>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d12a      	bne.n	8004714 <HAL_DMA_IRQHandler+0x438>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e023      	b.n	800471c <HAL_DMA_IRQHandler+0x440>
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2204      	movs	r2, #4
 800472a:	409a      	lsls	r2, r3
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2210      	movs	r2, #16
 8004746:	409a      	lsls	r2, r3
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a6 	beq.w	800489e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a85      	ldr	r2, [pc, #532]	; (800496c <HAL_DMA_IRQHandler+0x690>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d04a      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a83      	ldr	r2, [pc, #524]	; (8004970 <HAL_DMA_IRQHandler+0x694>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d045      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a82      	ldr	r2, [pc, #520]	; (8004974 <HAL_DMA_IRQHandler+0x698>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d040      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a80      	ldr	r2, [pc, #512]	; (8004978 <HAL_DMA_IRQHandler+0x69c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d03b      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7f      	ldr	r2, [pc, #508]	; (800497c <HAL_DMA_IRQHandler+0x6a0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d036      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a7d      	ldr	r2, [pc, #500]	; (8004980 <HAL_DMA_IRQHandler+0x6a4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d031      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_DMA_IRQHandler+0x6a8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d02c      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7a      	ldr	r2, [pc, #488]	; (8004988 <HAL_DMA_IRQHandler+0x6ac>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d027      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a79      	ldr	r2, [pc, #484]	; (800498c <HAL_DMA_IRQHandler+0x6b0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d022      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a77      	ldr	r2, [pc, #476]	; (8004990 <HAL_DMA_IRQHandler+0x6b4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01d      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a76      	ldr	r2, [pc, #472]	; (8004994 <HAL_DMA_IRQHandler+0x6b8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d018      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a74      	ldr	r2, [pc, #464]	; (8004998 <HAL_DMA_IRQHandler+0x6bc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a73      	ldr	r2, [pc, #460]	; (800499c <HAL_DMA_IRQHandler+0x6c0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a71      	ldr	r2, [pc, #452]	; (80049a0 <HAL_DMA_IRQHandler+0x6c4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a70      	ldr	r2, [pc, #448]	; (80049a4 <HAL_DMA_IRQHandler+0x6c8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x516>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6e      	ldr	r2, [pc, #440]	; (80049a8 <HAL_DMA_IRQHandler+0x6cc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10a      	bne.n	8004808 <HAL_DMA_IRQHandler+0x52c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e009      	b.n	800481c <HAL_DMA_IRQHandler+0x540>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf14      	ite	ne
 8004816:	2301      	movne	r3, #1
 8004818:	2300      	moveq	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03e      	beq.n	800489e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2210      	movs	r2, #16
 800482a:	409a      	lsls	r2, r3
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d018      	beq.n	8004870 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d024      	beq.n	800489e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
 800485c:	e01f      	b.n	800489e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01b      	beq.n	800489e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
 800486e:	e016      	b.n	800489e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d107      	bne.n	800488e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0208 	bic.w	r2, r2, #8
 800488c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2220      	movs	r2, #32
 80048a8:	409a      	lsls	r2, r3
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8110 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2c      	ldr	r2, [pc, #176]	; (800496c <HAL_DMA_IRQHandler+0x690>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d04a      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <HAL_DMA_IRQHandler+0x694>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d045      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a29      	ldr	r2, [pc, #164]	; (8004974 <HAL_DMA_IRQHandler+0x698>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d040      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a28      	ldr	r2, [pc, #160]	; (8004978 <HAL_DMA_IRQHandler+0x69c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d03b      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a26      	ldr	r2, [pc, #152]	; (800497c <HAL_DMA_IRQHandler+0x6a0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d036      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a25      	ldr	r2, [pc, #148]	; (8004980 <HAL_DMA_IRQHandler+0x6a4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d031      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a23      	ldr	r2, [pc, #140]	; (8004984 <HAL_DMA_IRQHandler+0x6a8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d02c      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a22      	ldr	r2, [pc, #136]	; (8004988 <HAL_DMA_IRQHandler+0x6ac>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d027      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a20      	ldr	r2, [pc, #128]	; (800498c <HAL_DMA_IRQHandler+0x6b0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d022      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <HAL_DMA_IRQHandler+0x6b4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d01d      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <HAL_DMA_IRQHandler+0x6b8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d018      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <HAL_DMA_IRQHandler+0x6bc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <HAL_DMA_IRQHandler+0x6c0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00e      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <HAL_DMA_IRQHandler+0x6c4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d009      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <HAL_DMA_IRQHandler+0x6c8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <HAL_DMA_IRQHandler+0x678>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <HAL_DMA_IRQHandler+0x6cc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d12b      	bne.n	80049ac <HAL_DMA_IRQHandler+0x6d0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf14      	ite	ne
 8004962:	2301      	movne	r3, #1
 8004964:	2300      	moveq	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e02a      	b.n	80049c0 <HAL_DMA_IRQHandler+0x6e4>
 800496a:	bf00      	nop
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8087 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2220      	movs	r2, #32
 80049d0:	409a      	lsls	r2, r3
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d139      	bne.n	8004a56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0216 	bic.w	r2, r2, #22
 80049f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <HAL_DMA_IRQHandler+0x736>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0208 	bic.w	r2, r2, #8
 8004a20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	223f      	movs	r2, #63	; 0x3f
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8382 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
          }
          return;
 8004a54:	e37c      	b.n	8005150 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02c      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
 8004a82:	e027      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d023      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
 8004a94:	e01e      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0210 	bic.w	r2, r2, #16
 8004ab2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 833e 	beq.w	800515a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8088 	beq.w	8004bfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2204      	movs	r2, #4
 8004af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a89      	ldr	r2, [pc, #548]	; (8004d20 <HAL_DMA_IRQHandler+0xa44>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04a      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a88      	ldr	r2, [pc, #544]	; (8004d24 <HAL_DMA_IRQHandler+0xa48>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d045      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a86      	ldr	r2, [pc, #536]	; (8004d28 <HAL_DMA_IRQHandler+0xa4c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d040      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a85      	ldr	r2, [pc, #532]	; (8004d2c <HAL_DMA_IRQHandler+0xa50>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d03b      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a83      	ldr	r2, [pc, #524]	; (8004d30 <HAL_DMA_IRQHandler+0xa54>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a82      	ldr	r2, [pc, #520]	; (8004d34 <HAL_DMA_IRQHandler+0xa58>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d031      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a80      	ldr	r2, [pc, #512]	; (8004d38 <HAL_DMA_IRQHandler+0xa5c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a7f      	ldr	r2, [pc, #508]	; (8004d3c <HAL_DMA_IRQHandler+0xa60>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d027      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a7d      	ldr	r2, [pc, #500]	; (8004d40 <HAL_DMA_IRQHandler+0xa64>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a7c      	ldr	r2, [pc, #496]	; (8004d44 <HAL_DMA_IRQHandler+0xa68>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a7a      	ldr	r2, [pc, #488]	; (8004d48 <HAL_DMA_IRQHandler+0xa6c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a79      	ldr	r2, [pc, #484]	; (8004d4c <HAL_DMA_IRQHandler+0xa70>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a77      	ldr	r2, [pc, #476]	; (8004d50 <HAL_DMA_IRQHandler+0xa74>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a76      	ldr	r2, [pc, #472]	; (8004d54 <HAL_DMA_IRQHandler+0xa78>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a74      	ldr	r2, [pc, #464]	; (8004d58 <HAL_DMA_IRQHandler+0xa7c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x8b8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a73      	ldr	r2, [pc, #460]	; (8004d5c <HAL_DMA_IRQHandler+0xa80>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <HAL_DMA_IRQHandler+0x8ca>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e007      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x8da>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d307      	bcc.n	8004bd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f2      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x8da>
 8004bd0:	e000      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2203      	movs	r2, #3
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004bea:	e003      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 82aa 	beq.w	800515a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	4798      	blx	r3
 8004c0e:	e2a4      	b.n	800515a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a52      	ldr	r2, [pc, #328]	; (8004d60 <HAL_DMA_IRQHandler+0xa84>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d04a      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a51      	ldr	r2, [pc, #324]	; (8004d64 <HAL_DMA_IRQHandler+0xa88>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d045      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a4f      	ldr	r2, [pc, #316]	; (8004d68 <HAL_DMA_IRQHandler+0xa8c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d040      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a4e      	ldr	r2, [pc, #312]	; (8004d6c <HAL_DMA_IRQHandler+0xa90>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d03b      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a4c      	ldr	r2, [pc, #304]	; (8004d70 <HAL_DMA_IRQHandler+0xa94>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d036      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a4b      	ldr	r2, [pc, #300]	; (8004d74 <HAL_DMA_IRQHandler+0xa98>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d031      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a49      	ldr	r2, [pc, #292]	; (8004d78 <HAL_DMA_IRQHandler+0xa9c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02c      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a48      	ldr	r2, [pc, #288]	; (8004d7c <HAL_DMA_IRQHandler+0xaa0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d027      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a46      	ldr	r2, [pc, #280]	; (8004d80 <HAL_DMA_IRQHandler+0xaa4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a45      	ldr	r2, [pc, #276]	; (8004d84 <HAL_DMA_IRQHandler+0xaa8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a43      	ldr	r2, [pc, #268]	; (8004d88 <HAL_DMA_IRQHandler+0xaac>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a42      	ldr	r2, [pc, #264]	; (8004d8c <HAL_DMA_IRQHandler+0xab0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a40      	ldr	r2, [pc, #256]	; (8004d90 <HAL_DMA_IRQHandler+0xab4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a3f      	ldr	r2, [pc, #252]	; (8004d94 <HAL_DMA_IRQHandler+0xab8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a3d      	ldr	r2, [pc, #244]	; (8004d98 <HAL_DMA_IRQHandler+0xabc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x9d4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3c      	ldr	r2, [pc, #240]	; (8004d9c <HAL_DMA_IRQHandler+0xac0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x9d8>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x9da>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 824f 	beq.w	800515a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2204      	movs	r2, #4
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80dd 	beq.w	8004e94 <HAL_DMA_IRQHandler+0xbb8>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80d7 	beq.w	8004e94 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2204      	movs	r2, #4
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d059      	beq.n	8004db4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d14a      	bne.n	8004da0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8220 	beq.w	8005154 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d1c:	e21a      	b.n	8005154 <HAL_DMA_IRQHandler+0xe78>
 8004d1e:	bf00      	nop
 8004d20:	40020010 	.word	0x40020010
 8004d24:	40020028 	.word	0x40020028
 8004d28:	40020040 	.word	0x40020040
 8004d2c:	40020058 	.word	0x40020058
 8004d30:	40020070 	.word	0x40020070
 8004d34:	40020088 	.word	0x40020088
 8004d38:	400200a0 	.word	0x400200a0
 8004d3c:	400200b8 	.word	0x400200b8
 8004d40:	40020410 	.word	0x40020410
 8004d44:	40020428 	.word	0x40020428
 8004d48:	40020440 	.word	0x40020440
 8004d4c:	40020458 	.word	0x40020458
 8004d50:	40020470 	.word	0x40020470
 8004d54:	40020488 	.word	0x40020488
 8004d58:	400204a0 	.word	0x400204a0
 8004d5c:	400204b8 	.word	0x400204b8
 8004d60:	48022c08 	.word	0x48022c08
 8004d64:	48022c1c 	.word	0x48022c1c
 8004d68:	48022c30 	.word	0x48022c30
 8004d6c:	48022c44 	.word	0x48022c44
 8004d70:	48022c58 	.word	0x48022c58
 8004d74:	48022c6c 	.word	0x48022c6c
 8004d78:	48022c80 	.word	0x48022c80
 8004d7c:	48022c94 	.word	0x48022c94
 8004d80:	58025408 	.word	0x58025408
 8004d84:	5802541c 	.word	0x5802541c
 8004d88:	58025430 	.word	0x58025430
 8004d8c:	58025444 	.word	0x58025444
 8004d90:	58025458 	.word	0x58025458
 8004d94:	5802546c 	.word	0x5802546c
 8004d98:	58025480 	.word	0x58025480
 8004d9c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 81d5 	beq.w	8005154 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db2:	e1cf      	b.n	8005154 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d160      	bne.n	8004e80 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a7f      	ldr	r2, [pc, #508]	; (8004fc0 <HAL_DMA_IRQHandler+0xce4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d04a      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a7d      	ldr	r2, [pc, #500]	; (8004fc4 <HAL_DMA_IRQHandler+0xce8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d045      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7c      	ldr	r2, [pc, #496]	; (8004fc8 <HAL_DMA_IRQHandler+0xcec>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d040      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7a      	ldr	r2, [pc, #488]	; (8004fcc <HAL_DMA_IRQHandler+0xcf0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d03b      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a79      	ldr	r2, [pc, #484]	; (8004fd0 <HAL_DMA_IRQHandler+0xcf4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d036      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a77      	ldr	r2, [pc, #476]	; (8004fd4 <HAL_DMA_IRQHandler+0xcf8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d031      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a76      	ldr	r2, [pc, #472]	; (8004fd8 <HAL_DMA_IRQHandler+0xcfc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d02c      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a74      	ldr	r2, [pc, #464]	; (8004fdc <HAL_DMA_IRQHandler+0xd00>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d027      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a73      	ldr	r2, [pc, #460]	; (8004fe0 <HAL_DMA_IRQHandler+0xd04>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a71      	ldr	r2, [pc, #452]	; (8004fe4 <HAL_DMA_IRQHandler+0xd08>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01d      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a70      	ldr	r2, [pc, #448]	; (8004fe8 <HAL_DMA_IRQHandler+0xd0c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a6e      	ldr	r2, [pc, #440]	; (8004fec <HAL_DMA_IRQHandler+0xd10>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6d      	ldr	r2, [pc, #436]	; (8004ff0 <HAL_DMA_IRQHandler+0xd14>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6b      	ldr	r2, [pc, #428]	; (8004ff4 <HAL_DMA_IRQHandler+0xd18>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6a      	ldr	r2, [pc, #424]	; (8004ff8 <HAL_DMA_IRQHandler+0xd1c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_DMA_IRQHandler+0xb82>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a68      	ldr	r2, [pc, #416]	; (8004ffc <HAL_DMA_IRQHandler+0xd20>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <HAL_DMA_IRQHandler+0xb94>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0208 	bic.w	r2, r2, #8
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e007      	b.n	8004e80 <HAL_DMA_IRQHandler+0xba4>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8165 	beq.w	8005154 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e92:	e15f      	b.n	8005154 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80c5 	beq.w	8005034 <HAL_DMA_IRQHandler+0xd58>
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80bf 	beq.w	8005034 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d018      	beq.n	8004f02 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 813a 	beq.w	8005158 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eec:	e134      	b.n	8005158 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8130 	beq.w	8005158 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f00:	e12a      	b.n	8005158 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f040 8089 	bne.w	8005020 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2b      	ldr	r2, [pc, #172]	; (8004fc0 <HAL_DMA_IRQHandler+0xce4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d04a      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <HAL_DMA_IRQHandler+0xce8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d045      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <HAL_DMA_IRQHandler+0xcec>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d040      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a26      	ldr	r2, [pc, #152]	; (8004fcc <HAL_DMA_IRQHandler+0xcf0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d03b      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <HAL_DMA_IRQHandler+0xcf4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d036      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a23      	ldr	r2, [pc, #140]	; (8004fd4 <HAL_DMA_IRQHandler+0xcf8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d031      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_DMA_IRQHandler+0xcfc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d02c      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <HAL_DMA_IRQHandler+0xd00>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d027      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <HAL_DMA_IRQHandler+0xd04>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <HAL_DMA_IRQHandler+0xd08>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <HAL_DMA_IRQHandler+0xd0c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1a      	ldr	r2, [pc, #104]	; (8004fec <HAL_DMA_IRQHandler+0xd10>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <HAL_DMA_IRQHandler+0xd14>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <HAL_DMA_IRQHandler+0xd18>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <HAL_DMA_IRQHandler+0xd1c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_DMA_IRQHandler+0xcd2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <HAL_DMA_IRQHandler+0xd20>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d128      	bne.n	8005000 <HAL_DMA_IRQHandler+0xd24>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0214 	bic.w	r2, r2, #20
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e027      	b.n	8005010 <HAL_DMA_IRQHandler+0xd34>
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	40020028 	.word	0x40020028
 8004fc8:	40020040 	.word	0x40020040
 8004fcc:	40020058 	.word	0x40020058
 8004fd0:	40020070 	.word	0x40020070
 8004fd4:	40020088 	.word	0x40020088
 8004fd8:	400200a0 	.word	0x400200a0
 8004fdc:	400200b8 	.word	0x400200b8
 8004fe0:	40020410 	.word	0x40020410
 8004fe4:	40020428 	.word	0x40020428
 8004fe8:	40020440 	.word	0x40020440
 8004fec:	40020458 	.word	0x40020458
 8004ff0:	40020470 	.word	0x40020470
 8004ff4:	40020488 	.word	0x40020488
 8004ff8:	400204a0 	.word	0x400204a0
 8004ffc:	400204b8 	.word	0x400204b8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 020a 	bic.w	r2, r2, #10
 800500e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8097 	beq.w	8005158 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005032:	e091      	b.n	8005158 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2208      	movs	r2, #8
 800503e:	409a      	lsls	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8088 	beq.w	800515a <HAL_DMA_IRQHandler+0xe7e>
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8082 	beq.w	800515a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a41      	ldr	r2, [pc, #260]	; (8005160 <HAL_DMA_IRQHandler+0xe84>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d04a      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a3f      	ldr	r2, [pc, #252]	; (8005164 <HAL_DMA_IRQHandler+0xe88>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d045      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a3e      	ldr	r2, [pc, #248]	; (8005168 <HAL_DMA_IRQHandler+0xe8c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d040      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a3c      	ldr	r2, [pc, #240]	; (800516c <HAL_DMA_IRQHandler+0xe90>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d03b      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a3b      	ldr	r2, [pc, #236]	; (8005170 <HAL_DMA_IRQHandler+0xe94>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d036      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a39      	ldr	r2, [pc, #228]	; (8005174 <HAL_DMA_IRQHandler+0xe98>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d031      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a38      	ldr	r2, [pc, #224]	; (8005178 <HAL_DMA_IRQHandler+0xe9c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d02c      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a36      	ldr	r2, [pc, #216]	; (800517c <HAL_DMA_IRQHandler+0xea0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d027      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a35      	ldr	r2, [pc, #212]	; (8005180 <HAL_DMA_IRQHandler+0xea4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a33      	ldr	r2, [pc, #204]	; (8005184 <HAL_DMA_IRQHandler+0xea8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01d      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a32      	ldr	r2, [pc, #200]	; (8005188 <HAL_DMA_IRQHandler+0xeac>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a30      	ldr	r2, [pc, #192]	; (800518c <HAL_DMA_IRQHandler+0xeb0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2f      	ldr	r2, [pc, #188]	; (8005190 <HAL_DMA_IRQHandler+0xeb4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2d      	ldr	r2, [pc, #180]	; (8005194 <HAL_DMA_IRQHandler+0xeb8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <HAL_DMA_IRQHandler+0xebc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_DMA_IRQHandler+0xe1a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2a      	ldr	r2, [pc, #168]	; (800519c <HAL_DMA_IRQHandler+0xec0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d108      	bne.n	8005108 <HAL_DMA_IRQHandler+0xe2c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 021c 	bic.w	r2, r2, #28
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e007      	b.n	8005118 <HAL_DMA_IRQHandler+0xe3c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020e 	bic.w	r2, r2, #14
 8005116:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	2201      	movs	r2, #1
 8005122:	409a      	lsls	r2, r3
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
 800514e:	e004      	b.n	800515a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005150:	bf00      	nop
 8005152:	e002      	b.n	800515a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005154:	bf00      	nop
 8005156:	e000      	b.n	800515a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005158:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40020010 	.word	0x40020010
 8005164:	40020028 	.word	0x40020028
 8005168:	40020040 	.word	0x40020040
 800516c:	40020058 	.word	0x40020058
 8005170:	40020070 	.word	0x40020070
 8005174:	40020088 	.word	0x40020088
 8005178:	400200a0 	.word	0x400200a0
 800517c:	400200b8 	.word	0x400200b8
 8005180:	40020410 	.word	0x40020410
 8005184:	40020428 	.word	0x40020428
 8005188:	40020440 	.word	0x40020440
 800518c:	40020458 	.word	0x40020458
 8005190:	40020470 	.word	0x40020470
 8005194:	40020488 	.word	0x40020488
 8005198:	400204a0 	.word	0x400204a0
 800519c:	400204b8 	.word	0x400204b8

080051a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7f      	ldr	r2, [pc, #508]	; (80053bc <DMA_SetConfig+0x21c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d072      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a7d      	ldr	r2, [pc, #500]	; (80053c0 <DMA_SetConfig+0x220>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d06d      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a7c      	ldr	r2, [pc, #496]	; (80053c4 <DMA_SetConfig+0x224>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d068      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a7a      	ldr	r2, [pc, #488]	; (80053c8 <DMA_SetConfig+0x228>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d063      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a79      	ldr	r2, [pc, #484]	; (80053cc <DMA_SetConfig+0x22c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d05e      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a77      	ldr	r2, [pc, #476]	; (80053d0 <DMA_SetConfig+0x230>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d059      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a76      	ldr	r2, [pc, #472]	; (80053d4 <DMA_SetConfig+0x234>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d054      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a74      	ldr	r2, [pc, #464]	; (80053d8 <DMA_SetConfig+0x238>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d04f      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a73      	ldr	r2, [pc, #460]	; (80053dc <DMA_SetConfig+0x23c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d04a      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a71      	ldr	r2, [pc, #452]	; (80053e0 <DMA_SetConfig+0x240>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d045      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a70      	ldr	r2, [pc, #448]	; (80053e4 <DMA_SetConfig+0x244>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d040      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6e      	ldr	r2, [pc, #440]	; (80053e8 <DMA_SetConfig+0x248>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d03b      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6d      	ldr	r2, [pc, #436]	; (80053ec <DMA_SetConfig+0x24c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d036      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6b      	ldr	r2, [pc, #428]	; (80053f0 <DMA_SetConfig+0x250>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d031      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6a      	ldr	r2, [pc, #424]	; (80053f4 <DMA_SetConfig+0x254>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d02c      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a68      	ldr	r2, [pc, #416]	; (80053f8 <DMA_SetConfig+0x258>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d027      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a67      	ldr	r2, [pc, #412]	; (80053fc <DMA_SetConfig+0x25c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d022      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a65      	ldr	r2, [pc, #404]	; (8005400 <DMA_SetConfig+0x260>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01d      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a64      	ldr	r2, [pc, #400]	; (8005404 <DMA_SetConfig+0x264>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a62      	ldr	r2, [pc, #392]	; (8005408 <DMA_SetConfig+0x268>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a61      	ldr	r2, [pc, #388]	; (800540c <DMA_SetConfig+0x26c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <DMA_SetConfig+0x10a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a5f      	ldr	r2, [pc, #380]	; (8005410 <DMA_SetConfig+0x270>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <DMA_SetConfig+0x10a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a5e      	ldr	r2, [pc, #376]	; (8005414 <DMA_SetConfig+0x274>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <DMA_SetConfig+0x10a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a5c      	ldr	r2, [pc, #368]	; (8005418 <DMA_SetConfig+0x278>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d101      	bne.n	80052ae <DMA_SetConfig+0x10e>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <DMA_SetConfig+0x110>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a39      	ldr	r2, [pc, #228]	; (80053bc <DMA_SetConfig+0x21c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d04a      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a38      	ldr	r2, [pc, #224]	; (80053c0 <DMA_SetConfig+0x220>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d045      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a36      	ldr	r2, [pc, #216]	; (80053c4 <DMA_SetConfig+0x224>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d040      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a35      	ldr	r2, [pc, #212]	; (80053c8 <DMA_SetConfig+0x228>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03b      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a33      	ldr	r2, [pc, #204]	; (80053cc <DMA_SetConfig+0x22c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d036      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a32      	ldr	r2, [pc, #200]	; (80053d0 <DMA_SetConfig+0x230>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d031      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a30      	ldr	r2, [pc, #192]	; (80053d4 <DMA_SetConfig+0x234>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02c      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <DMA_SetConfig+0x238>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d027      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2d      	ldr	r2, [pc, #180]	; (80053dc <DMA_SetConfig+0x23c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <DMA_SetConfig+0x240>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d01d      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <DMA_SetConfig+0x244>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <DMA_SetConfig+0x248>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a27      	ldr	r2, [pc, #156]	; (80053ec <DMA_SetConfig+0x24c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <DMA_SetConfig+0x250>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <DMA_SetConfig+0x254>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <DMA_SetConfig+0x1d0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <DMA_SetConfig+0x258>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d101      	bne.n	8005374 <DMA_SetConfig+0x1d4>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <DMA_SetConfig+0x1d6>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d059      	beq.n	800542e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	223f      	movs	r2, #63	; 0x3f
 8005384:	409a      	lsls	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005398:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d138      	bne.n	800541c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053ba:	e0ae      	b.n	800551a <DMA_SetConfig+0x37a>
 80053bc:	40020010 	.word	0x40020010
 80053c0:	40020028 	.word	0x40020028
 80053c4:	40020040 	.word	0x40020040
 80053c8:	40020058 	.word	0x40020058
 80053cc:	40020070 	.word	0x40020070
 80053d0:	40020088 	.word	0x40020088
 80053d4:	400200a0 	.word	0x400200a0
 80053d8:	400200b8 	.word	0x400200b8
 80053dc:	40020410 	.word	0x40020410
 80053e0:	40020428 	.word	0x40020428
 80053e4:	40020440 	.word	0x40020440
 80053e8:	40020458 	.word	0x40020458
 80053ec:	40020470 	.word	0x40020470
 80053f0:	40020488 	.word	0x40020488
 80053f4:	400204a0 	.word	0x400204a0
 80053f8:	400204b8 	.word	0x400204b8
 80053fc:	58025408 	.word	0x58025408
 8005400:	5802541c 	.word	0x5802541c
 8005404:	58025430 	.word	0x58025430
 8005408:	58025444 	.word	0x58025444
 800540c:	58025458 	.word	0x58025458
 8005410:	5802546c 	.word	0x5802546c
 8005414:	58025480 	.word	0x58025480
 8005418:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
}
 800542c:	e075      	b.n	800551a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a3d      	ldr	r2, [pc, #244]	; (8005528 <DMA_SetConfig+0x388>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d04a      	beq.n	80054ce <DMA_SetConfig+0x32e>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a3b      	ldr	r2, [pc, #236]	; (800552c <DMA_SetConfig+0x38c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d045      	beq.n	80054ce <DMA_SetConfig+0x32e>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <DMA_SetConfig+0x390>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d040      	beq.n	80054ce <DMA_SetConfig+0x32e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a38      	ldr	r2, [pc, #224]	; (8005534 <DMA_SetConfig+0x394>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d03b      	beq.n	80054ce <DMA_SetConfig+0x32e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a37      	ldr	r2, [pc, #220]	; (8005538 <DMA_SetConfig+0x398>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d036      	beq.n	80054ce <DMA_SetConfig+0x32e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a35      	ldr	r2, [pc, #212]	; (800553c <DMA_SetConfig+0x39c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d031      	beq.n	80054ce <DMA_SetConfig+0x32e>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a34      	ldr	r2, [pc, #208]	; (8005540 <DMA_SetConfig+0x3a0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d02c      	beq.n	80054ce <DMA_SetConfig+0x32e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a32      	ldr	r2, [pc, #200]	; (8005544 <DMA_SetConfig+0x3a4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d027      	beq.n	80054ce <DMA_SetConfig+0x32e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a31      	ldr	r2, [pc, #196]	; (8005548 <DMA_SetConfig+0x3a8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <DMA_SetConfig+0x32e>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <DMA_SetConfig+0x3ac>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01d      	beq.n	80054ce <DMA_SetConfig+0x32e>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2e      	ldr	r2, [pc, #184]	; (8005550 <DMA_SetConfig+0x3b0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <DMA_SetConfig+0x32e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <DMA_SetConfig+0x3b4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <DMA_SetConfig+0x32e>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <DMA_SetConfig+0x3b8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <DMA_SetConfig+0x32e>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a29      	ldr	r2, [pc, #164]	; (800555c <DMA_SetConfig+0x3bc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <DMA_SetConfig+0x32e>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a28      	ldr	r2, [pc, #160]	; (8005560 <DMA_SetConfig+0x3c0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <DMA_SetConfig+0x32e>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a26      	ldr	r2, [pc, #152]	; (8005564 <DMA_SetConfig+0x3c4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <DMA_SetConfig+0x332>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <DMA_SetConfig+0x334>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2201      	movs	r2, #1
 80054e2:	409a      	lsls	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d108      	bne.n	800550a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	60da      	str	r2, [r3, #12]
}
 8005508:	e007      	b.n	800551a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	48022c08 	.word	0x48022c08
 800552c:	48022c1c 	.word	0x48022c1c
 8005530:	48022c30 	.word	0x48022c30
 8005534:	48022c44 	.word	0x48022c44
 8005538:	48022c58 	.word	0x48022c58
 800553c:	48022c6c 	.word	0x48022c6c
 8005540:	48022c80 	.word	0x48022c80
 8005544:	48022c94 	.word	0x48022c94
 8005548:	58025408 	.word	0x58025408
 800554c:	5802541c 	.word	0x5802541c
 8005550:	58025430 	.word	0x58025430
 8005554:	58025444 	.word	0x58025444
 8005558:	58025458 	.word	0x58025458
 800555c:	5802546c 	.word	0x5802546c
 8005560:	58025480 	.word	0x58025480
 8005564:	58025494 	.word	0x58025494

08005568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a42      	ldr	r2, [pc, #264]	; (8005680 <DMA_CalcBaseAndBitshift+0x118>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d04a      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a41      	ldr	r2, [pc, #260]	; (8005684 <DMA_CalcBaseAndBitshift+0x11c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d045      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3f      	ldr	r2, [pc, #252]	; (8005688 <DMA_CalcBaseAndBitshift+0x120>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d040      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a3e      	ldr	r2, [pc, #248]	; (800568c <DMA_CalcBaseAndBitshift+0x124>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d03b      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <DMA_CalcBaseAndBitshift+0x128>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d036      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a3b      	ldr	r2, [pc, #236]	; (8005694 <DMA_CalcBaseAndBitshift+0x12c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d031      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a39      	ldr	r2, [pc, #228]	; (8005698 <DMA_CalcBaseAndBitshift+0x130>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d02c      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a38      	ldr	r2, [pc, #224]	; (800569c <DMA_CalcBaseAndBitshift+0x134>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d027      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a36      	ldr	r2, [pc, #216]	; (80056a0 <DMA_CalcBaseAndBitshift+0x138>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d022      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a35      	ldr	r2, [pc, #212]	; (80056a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d01d      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a33      	ldr	r2, [pc, #204]	; (80056a8 <DMA_CalcBaseAndBitshift+0x140>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d018      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a32      	ldr	r2, [pc, #200]	; (80056ac <DMA_CalcBaseAndBitshift+0x144>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a30      	ldr	r2, [pc, #192]	; (80056b0 <DMA_CalcBaseAndBitshift+0x148>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00e      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d009      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a2d      	ldr	r2, [pc, #180]	; (80056b8 <DMA_CalcBaseAndBitshift+0x150>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <DMA_CalcBaseAndBitshift+0xa8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2c      	ldr	r2, [pc, #176]	; (80056bc <DMA_CalcBaseAndBitshift+0x154>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d101      	bne.n	8005614 <DMA_CalcBaseAndBitshift+0xac>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <DMA_CalcBaseAndBitshift+0xae>
 8005614:	2300      	movs	r3, #0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d024      	beq.n	8005664 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	3b10      	subs	r3, #16
 8005622:	4a27      	ldr	r2, [pc, #156]	; (80056c0 <DMA_CalcBaseAndBitshift+0x158>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
 8005636:	461a      	mov	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d908      	bls.n	8005654 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <DMA_CalcBaseAndBitshift+0x160>)
 800564a:	4013      	ands	r3, r2
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	659a      	str	r2, [r3, #88]	; 0x58
 8005652:	e00d      	b.n	8005670 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <DMA_CalcBaseAndBitshift+0x160>)
 800565c:	4013      	ands	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6593      	str	r3, [r2, #88]	; 0x58
 8005662:	e005      	b.n	8005670 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8
 80056c0:	aaaaaaab 	.word	0xaaaaaaab
 80056c4:	08010cb8 	.word	0x08010cb8
 80056c8:	fffffc00 	.word	0xfffffc00

080056cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d120      	bne.n	8005722 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d858      	bhi.n	800579a <DMA_CheckFifoParam+0xce>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <DMA_CheckFifoParam+0x24>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005701 	.word	0x08005701
 80056f4:	08005713 	.word	0x08005713
 80056f8:	08005701 	.word	0x08005701
 80056fc:	0800579b 	.word	0x0800579b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d048      	beq.n	800579e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005710:	e045      	b.n	800579e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800571a:	d142      	bne.n	80057a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005720:	e03f      	b.n	80057a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572a:	d123      	bne.n	8005774 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	2b03      	cmp	r3, #3
 8005732:	d838      	bhi.n	80057a6 <DMA_CheckFifoParam+0xda>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <DMA_CheckFifoParam+0x70>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	0800574d 	.word	0x0800574d
 8005740:	08005753 	.word	0x08005753
 8005744:	0800574d 	.word	0x0800574d
 8005748:	08005765 	.word	0x08005765
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
        break;
 8005750:	e030      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d025      	beq.n	80057aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005762:	e022      	b.n	80057aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800576c:	d11f      	bne.n	80057ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005772:	e01c      	b.n	80057ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	2b02      	cmp	r3, #2
 800577a:	d902      	bls.n	8005782 <DMA_CheckFifoParam+0xb6>
 800577c:	2b03      	cmp	r3, #3
 800577e:	d003      	beq.n	8005788 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005780:	e018      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
        break;
 8005786:	e015      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00e      	beq.n	80057b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
    break;
 8005798:	e00b      	b.n	80057b2 <DMA_CheckFifoParam+0xe6>
        break;
 800579a:	bf00      	nop
 800579c:	e00a      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
        break;
 800579e:	bf00      	nop
 80057a0:	e008      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
        break;
 80057a2:	bf00      	nop
 80057a4:	e006      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
        break;
 80057a6:	bf00      	nop
 80057a8:	e004      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
        break;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
        break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <DMA_CheckFifoParam+0xe8>
    break;
 80057b2:	bf00      	nop
    }
  }

  return status;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop

080057c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a38      	ldr	r2, [pc, #224]	; (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a36      	ldr	r2, [pc, #216]	; (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a35      	ldr	r2, [pc, #212]	; (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a33      	ldr	r2, [pc, #204]	; (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a32      	ldr	r2, [pc, #200]	; (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a30      	ldr	r2, [pc, #192]	; (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2f      	ldr	r2, [pc, #188]	; (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01a      	beq.n	8005862 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	3b08      	subs	r3, #8
 8005834:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	091b      	lsrs	r3, r3, #4
 800583c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4b26      	ldr	r3, [pc, #152]	; (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005860:	e024      	b.n	80058ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	3b10      	subs	r3, #16
 800586a:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d806      	bhi.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d902      	bls.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3308      	adds	r3, #8
 8005888:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4b18      	ldr	r3, [pc, #96]	; (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	461a      	mov	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800589c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2201      	movs	r2, #1
 80058a6:	409a      	lsls	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	58025408 	.word	0x58025408
 80058bc:	5802541c 	.word	0x5802541c
 80058c0:	58025430 	.word	0x58025430
 80058c4:	58025444 	.word	0x58025444
 80058c8:	58025458 	.word	0x58025458
 80058cc:	5802546c 	.word	0x5802546c
 80058d0:	58025480 	.word	0x58025480
 80058d4:	58025494 	.word	0x58025494
 80058d8:	cccccccd 	.word	0xcccccccd
 80058dc:	16009600 	.word	0x16009600
 80058e0:	58025880 	.word	0x58025880
 80058e4:	aaaaaaab 	.word	0xaaaaaaab
 80058e8:	400204b8 	.word	0x400204b8
 80058ec:	4002040f 	.word	0x4002040f
 80058f0:	10008200 	.word	0x10008200
 80058f4:	40020880 	.word	0x40020880

080058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d04a      	beq.n	80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b08      	cmp	r3, #8
 8005912:	d847      	bhi.n	80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a25      	ldr	r2, [pc, #148]	; (80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a24      	ldr	r2, [pc, #144]	; (80059b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d01d      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a21      	ldr	r2, [pc, #132]	; (80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1f      	ldr	r2, [pc, #124]	; (80059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d101      	bne.n	8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005980:	671a      	str	r2, [r3, #112]	; 0x70
 8005982:	e009      	b.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	461a      	mov	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a11      	ldr	r2, [pc, #68]	; (80059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005996:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3b01      	subs	r3, #1
 800599c:	2201      	movs	r2, #1
 800599e:	409a      	lsls	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	58025408 	.word	0x58025408
 80059b4:	5802541c 	.word	0x5802541c
 80059b8:	58025430 	.word	0x58025430
 80059bc:	58025444 	.word	0x58025444
 80059c0:	58025458 	.word	0x58025458
 80059c4:	5802546c 	.word	0x5802546c
 80059c8:	58025480 	.word	0x58025480
 80059cc:	58025494 	.word	0x58025494
 80059d0:	1600963f 	.word	0x1600963f
 80059d4:	58025940 	.word	0x58025940
 80059d8:	1000823f 	.word	0x1000823f
 80059dc:	40020940 	.word	0x40020940

080059e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b089      	sub	sp, #36	; 0x24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059ee:	4b89      	ldr	r3, [pc, #548]	; (8005c14 <HAL_GPIO_Init+0x234>)
 80059f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059f2:	e194      	b.n	8005d1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2101      	movs	r1, #1
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005a00:	4013      	ands	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8186 	beq.w	8005d18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d005      	beq.n	8005a24 <HAL_GPIO_Init+0x44>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d130      	bne.n	8005a86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	2203      	movs	r2, #3
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	091b      	lsrs	r3, r3, #4
 8005a70:	f003 0201 	and.w	r2, r3, #1
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d017      	beq.n	8005ac2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d123      	bne.n	8005b16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	08da      	lsrs	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3208      	adds	r2, #8
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	220f      	movs	r2, #15
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	08da      	lsrs	r2, r3, #3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3208      	adds	r2, #8
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	2203      	movs	r2, #3
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43db      	mvns	r3, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 0203 	and.w	r2, r3, #3
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 80e0 	beq.w	8005d18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b58:	4b2f      	ldr	r3, [pc, #188]	; (8005c18 <HAL_GPIO_Init+0x238>)
 8005b5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005b5e:	4a2e      	ldr	r2, [pc, #184]	; (8005c18 <HAL_GPIO_Init+0x238>)
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005b68:	4b2b      	ldr	r3, [pc, #172]	; (8005c18 <HAL_GPIO_Init+0x238>)
 8005b6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b76:	4a29      	ldr	r2, [pc, #164]	; (8005c1c <HAL_GPIO_Init+0x23c>)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	220f      	movs	r2, #15
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a20      	ldr	r2, [pc, #128]	; (8005c20 <HAL_GPIO_Init+0x240>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d052      	beq.n	8005c48 <HAL_GPIO_Init+0x268>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <HAL_GPIO_Init+0x244>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d031      	beq.n	8005c0e <HAL_GPIO_Init+0x22e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a1e      	ldr	r2, [pc, #120]	; (8005c28 <HAL_GPIO_Init+0x248>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d02b      	beq.n	8005c0a <HAL_GPIO_Init+0x22a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <HAL_GPIO_Init+0x24c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d025      	beq.n	8005c06 <HAL_GPIO_Init+0x226>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <HAL_GPIO_Init+0x250>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01f      	beq.n	8005c02 <HAL_GPIO_Init+0x222>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	; (8005c34 <HAL_GPIO_Init+0x254>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d019      	beq.n	8005bfe <HAL_GPIO_Init+0x21e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1a      	ldr	r2, [pc, #104]	; (8005c38 <HAL_GPIO_Init+0x258>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_GPIO_Init+0x21a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <HAL_GPIO_Init+0x25c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00d      	beq.n	8005bf6 <HAL_GPIO_Init+0x216>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <HAL_GPIO_Init+0x260>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d007      	beq.n	8005bf2 <HAL_GPIO_Init+0x212>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <HAL_GPIO_Init+0x264>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d101      	bne.n	8005bee <HAL_GPIO_Init+0x20e>
 8005bea:	2309      	movs	r3, #9
 8005bec:	e02d      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005bee:	230a      	movs	r3, #10
 8005bf0:	e02b      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	e029      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005bf6:	2307      	movs	r3, #7
 8005bf8:	e027      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005bfa:	2306      	movs	r3, #6
 8005bfc:	e025      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005bfe:	2305      	movs	r3, #5
 8005c00:	e023      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005c02:	2304      	movs	r3, #4
 8005c04:	e021      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005c06:	2303      	movs	r3, #3
 8005c08:	e01f      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e01d      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e01b      	b.n	8005c4a <HAL_GPIO_Init+0x26a>
 8005c12:	bf00      	nop
 8005c14:	58000080 	.word	0x58000080
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	58000400 	.word	0x58000400
 8005c20:	58020000 	.word	0x58020000
 8005c24:	58020400 	.word	0x58020400
 8005c28:	58020800 	.word	0x58020800
 8005c2c:	58020c00 	.word	0x58020c00
 8005c30:	58021000 	.word	0x58021000
 8005c34:	58021400 	.word	0x58021400
 8005c38:	58021800 	.word	0x58021800
 8005c3c:	58021c00 	.word	0x58021c00
 8005c40:	58022000 	.word	0x58022000
 8005c44:	58022400 	.word	0x58022400
 8005c48:	2300      	movs	r3, #0
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	f002 0203 	and.w	r2, r2, #3
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	4093      	lsls	r3, r2
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c5a:	4938      	ldr	r1, [pc, #224]	; (8005d3c <HAL_GPIO_Init+0x35c>)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	3302      	adds	r3, #2
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f ae63 	bne.w	80059f4 <HAL_GPIO_Init+0x14>
  }
}
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	3724      	adds	r7, #36	; 0x24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	58000400 	.word	0x58000400

08005d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	807b      	strh	r3, [r7, #2]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d50:	787b      	ldrb	r3, [r7, #1]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d56:	887a      	ldrh	r2, [r7, #2]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d5c:	e003      	b.n	8005d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d5e:	887b      	ldrh	r3, [r7, #2]
 8005d60:	041a      	lsls	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	619a      	str	r2, [r3, #24]
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d84:	887a      	ldrh	r2, [r7, #2]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	041a      	lsls	r2, r3, #16
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	43d9      	mvns	r1, r3
 8005d90:	887b      	ldrh	r3, [r7, #2]
 8005d92:	400b      	ands	r3, r1
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005db0:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	2b06      	cmp	r3, #6
 8005dba:	d00a      	beq.n	8005dd2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dbc:	4b26      	ldr	r3, [pc, #152]	; (8005e58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d001      	beq.n	8005dce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e040      	b.n	8005e50 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e03e      	b.n	8005e50 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dd2:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005dda:	491f      	ldr	r1, [pc, #124]	; (8005e58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005de2:	f7fb fd19 	bl	8001818 <HAL_GetTick>
 8005de6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005de8:	e009      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dea:	f7fb fd15 	bl	8001818 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df8:	d901      	bls.n	8005dfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e028      	b.n	8005e50 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0a:	d1ee      	bne.n	8005dea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b1e      	cmp	r3, #30
 8005e10:	d008      	beq.n	8005e24 <HAL_PWREx_ConfigSupply+0x7c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b2e      	cmp	r3, #46	; 0x2e
 8005e16:	d005      	beq.n	8005e24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b1d      	cmp	r3, #29
 8005e1c:	d002      	beq.n	8005e24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b2d      	cmp	r3, #45	; 0x2d
 8005e22:	d114      	bne.n	8005e4e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005e24:	f7fb fcf8 	bl	8001818 <HAL_GetTick>
 8005e28:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e2a:	e009      	b.n	8005e40 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e2c:	f7fb fcf4 	bl	8001818 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3a:	d901      	bls.n	8005e40 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e007      	b.n	8005e50 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e40:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d1ee      	bne.n	8005e2c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	58024800 	.word	0x58024800

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	; 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d102      	bne.n	8005e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f000 bc1f 	b.w	80066ae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 80b3 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7e:	4b95      	ldr	r3, [pc, #596]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e88:	4b92      	ldr	r3, [pc, #584]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d007      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x48>
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	2b18      	cmp	r3, #24
 8005e98:	d112      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x64>
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d10d      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea4:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8098 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x186>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 8093 	bne.w	8005fe2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e3f6      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec8:	d106      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x7c>
 8005eca:	4b82      	ldr	r3, [pc, #520]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a81      	ldr	r2, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e058      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d112      	bne.n	8005f06 <HAL_RCC_OscConfig+0xaa>
 8005ee0:	4b7c      	ldr	r3, [pc, #496]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a7b      	ldr	r2, [pc, #492]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b79      	ldr	r3, [pc, #484]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a78      	ldr	r2, [pc, #480]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ef2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4b76      	ldr	r3, [pc, #472]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a75      	ldr	r2, [pc, #468]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e041      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f0e:	d112      	bne.n	8005f36 <HAL_RCC_OscConfig+0xda>
 8005f10:	4b70      	ldr	r3, [pc, #448]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a6f      	ldr	r2, [pc, #444]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	4b6d      	ldr	r3, [pc, #436]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a6c      	ldr	r2, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a69      	ldr	r2, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e029      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005f3e:	d112      	bne.n	8005f66 <HAL_RCC_OscConfig+0x10a>
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	4b5e      	ldr	r3, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a5d      	ldr	r2, [pc, #372]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e011      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
 8005f66:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5a      	ldr	r2, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	4b58      	ldr	r3, [pc, #352]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	4b55      	ldr	r3, [pc, #340]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005f84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d013      	beq.n	8005fba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f92:	f7fb fc41 	bl	8001818 <HAL_GetTick>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f9a:	f7fb fc3d 	bl	8001818 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b64      	cmp	r3, #100	; 0x64
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e380      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fac:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0x13e>
 8005fb8:	e014      	b.n	8005fe4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fba:	f7fb fc2d 	bl	8001818 <HAL_GetTick>
 8005fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc2:	f7fb fc29 	bl	8001818 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b64      	cmp	r3, #100	; 0x64
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e36c      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fd4:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f0      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x166>
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 808c 	beq.w	800610a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff2:	4b38      	ldr	r3, [pc, #224]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ffa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ffc:	4b35      	ldr	r3, [pc, #212]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_RCC_OscConfig+0x1bc>
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	2b18      	cmp	r3, #24
 800600c:	d137      	bne.n	800607e <HAL_RCC_OscConfig+0x222>
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d132      	bne.n	800607e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006018:	4b2e      	ldr	r3, [pc, #184]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_RCC_OscConfig+0x1d4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e33e      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006030:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 0219 	bic.w	r2, r3, #25
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4925      	ldr	r1, [pc, #148]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006042:	f7fb fbe9 	bl	8001818 <HAL_GetTick>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800604a:	f7fb fbe5 	bl	8001818 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e328      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605c:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f0      	beq.n	800604a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	061b      	lsls	r3, r3, #24
 8006076:	4917      	ldr	r1, [pc, #92]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800607c:	e045      	b.n	800610a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d028      	beq.n	80060d8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 0219 	bic.w	r2, r3, #25
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4910      	ldr	r1, [pc, #64]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fb fbbe 	bl	8001818 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a0:	f7fb fbba 	bl	8001818 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e2fd      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f0      	beq.n	80060a0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	4901      	ldr	r1, [pc, #4]	; (80060d4 <HAL_RCC_OscConfig+0x278>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	604b      	str	r3, [r1, #4]
 80060d2:	e01a      	b.n	800610a <HAL_RCC_OscConfig+0x2ae>
 80060d4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060d8:	4b97      	ldr	r3, [pc, #604]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a96      	ldr	r2, [pc, #600]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7fb fb98 	bl	8001818 <HAL_GetTick>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ec:	f7fb fb94 	bl	8001818 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e2d7      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060fe:	4b8e      	ldr	r3, [pc, #568]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	d06a      	beq.n	80061ec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006116:	4b88      	ldr	r3, [pc, #544]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800611e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006120:	4b85      	ldr	r3, [pc, #532]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b08      	cmp	r3, #8
 800612a:	d007      	beq.n	800613c <HAL_RCC_OscConfig+0x2e0>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b18      	cmp	r3, #24
 8006130:	d11b      	bne.n	800616a <HAL_RCC_OscConfig+0x30e>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d116      	bne.n	800616a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800613c:	4b7e      	ldr	r3, [pc, #504]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_RCC_OscConfig+0x2f8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e2ac      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006154:	4b78      	ldr	r3, [pc, #480]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	061b      	lsls	r3, r3, #24
 8006162:	4975      	ldr	r1, [pc, #468]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006164:	4313      	orrs	r3, r2
 8006166:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006168:	e040      	b.n	80061ec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d023      	beq.n	80061ba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006172:	4b71      	ldr	r3, [pc, #452]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a70      	ldr	r2, [pc, #448]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617e:	f7fb fb4b 	bl	8001818 <HAL_GetTick>
 8006182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006184:	e008      	b.n	8006198 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006186:	f7fb fb47 	bl	8001818 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e28a      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006198:	4b67      	ldr	r3, [pc, #412]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0f0      	beq.n	8006186 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061a4:	4b64      	ldr	r3, [pc, #400]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	061b      	lsls	r3, r3, #24
 80061b2:	4961      	ldr	r1, [pc, #388]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60cb      	str	r3, [r1, #12]
 80061b8:	e018      	b.n	80061ec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061ba:	4b5f      	ldr	r3, [pc, #380]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a5e      	ldr	r2, [pc, #376]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fb fb27 	bl	8001818 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061ce:	f7fb fb23 	bl	8001818 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e266      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061e0:	4b55      	ldr	r3, [pc, #340]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d036      	beq.n	8006266 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d019      	beq.n	8006234 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006200:	4b4d      	ldr	r3, [pc, #308]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006204:	4a4c      	ldr	r2, [pc, #304]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620c:	f7fb fb04 	bl	8001818 <HAL_GetTick>
 8006210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006214:	f7fb fb00 	bl	8001818 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e243      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006226:	4b44      	ldr	r3, [pc, #272]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0f0      	beq.n	8006214 <HAL_RCC_OscConfig+0x3b8>
 8006232:	e018      	b.n	8006266 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006234:	4b40      	ldr	r3, [pc, #256]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006238:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006240:	f7fb faea 	bl	8001818 <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006248:	f7fb fae6 	bl	8001818 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e229      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800625a:	4b37      	ldr	r3, [pc, #220]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800625c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f0      	bne.n	8006248 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d036      	beq.n	80062e0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d019      	beq.n	80062ae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800627a:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2e      	ldr	r2, [pc, #184]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006284:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006286:	f7fb fac7 	bl	8001818 <HAL_GetTick>
 800628a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800628e:	f7fb fac3 	bl	8001818 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e206      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0f0      	beq.n	800628e <HAL_RCC_OscConfig+0x432>
 80062ac:	e018      	b.n	80062e0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062ae:	4b22      	ldr	r3, [pc, #136]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a21      	ldr	r2, [pc, #132]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ba:	f7fb faad 	bl	8001818 <HAL_GetTick>
 80062be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062c2:	f7fb faa9 	bl	8001818 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e1ec      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062d4:	4b18      	ldr	r3, [pc, #96]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f0      	bne.n	80062c2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80af 	beq.w	800644c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <HAL_RCC_OscConfig+0x4e0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a12      	ldr	r2, [pc, #72]	; (800633c <HAL_RCC_OscConfig+0x4e0>)
 80062f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062fa:	f7fb fa8d 	bl	8001818 <HAL_GetTick>
 80062fe:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fb fa89 	bl	8001818 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b64      	cmp	r3, #100	; 0x64
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e1cc      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <HAL_RCC_OscConfig+0x4e0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d10b      	bne.n	8006340 <HAL_RCC_OscConfig+0x4e4>
 8006328:	4b03      	ldr	r3, [pc, #12]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	4a02      	ldr	r2, [pc, #8]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	6713      	str	r3, [r2, #112]	; 0x70
 8006334:	e05b      	b.n	80063ee <HAL_RCC_OscConfig+0x592>
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
 800633c:	58024800 	.word	0x58024800
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d112      	bne.n	800636e <HAL_RCC_OscConfig+0x512>
 8006348:	4b9d      	ldr	r3, [pc, #628]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a9c      	ldr	r2, [pc, #624]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	4b9a      	ldr	r3, [pc, #616]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a99      	ldr	r2, [pc, #612]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800635a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
 8006360:	4b97      	ldr	r3, [pc, #604]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006364:	4a96      	ldr	r2, [pc, #600]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006366:	f023 0304 	bic.w	r3, r3, #4
 800636a:	6713      	str	r3, [r2, #112]	; 0x70
 800636c:	e03f      	b.n	80063ee <HAL_RCC_OscConfig+0x592>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b05      	cmp	r3, #5
 8006374:	d112      	bne.n	800639c <HAL_RCC_OscConfig+0x540>
 8006376:	4b92      	ldr	r3, [pc, #584]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	4a91      	ldr	r2, [pc, #580]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	6713      	str	r3, [r2, #112]	; 0x70
 8006382:	4b8f      	ldr	r3, [pc, #572]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	4a8e      	ldr	r2, [pc, #568]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800638c:	6713      	str	r3, [r2, #112]	; 0x70
 800638e:	4b8c      	ldr	r3, [pc, #560]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	4a8b      	ldr	r2, [pc, #556]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	6713      	str	r3, [r2, #112]	; 0x70
 800639a:	e028      	b.n	80063ee <HAL_RCC_OscConfig+0x592>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b85      	cmp	r3, #133	; 0x85
 80063a2:	d112      	bne.n	80063ca <HAL_RCC_OscConfig+0x56e>
 80063a4:	4b86      	ldr	r3, [pc, #536]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	4a85      	ldr	r2, [pc, #532]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063aa:	f043 0304 	orr.w	r3, r3, #4
 80063ae:	6713      	str	r3, [r2, #112]	; 0x70
 80063b0:	4b83      	ldr	r3, [pc, #524]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	4a82      	ldr	r2, [pc, #520]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ba:	6713      	str	r3, [r2, #112]	; 0x70
 80063bc:	4b80      	ldr	r3, [pc, #512]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	4a7f      	ldr	r2, [pc, #508]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	6713      	str	r3, [r2, #112]	; 0x70
 80063c8:	e011      	b.n	80063ee <HAL_RCC_OscConfig+0x592>
 80063ca:	4b7d      	ldr	r3, [pc, #500]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	4a7c      	ldr	r2, [pc, #496]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	6713      	str	r3, [r2, #112]	; 0x70
 80063d6:	4b7a      	ldr	r3, [pc, #488]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4a79      	ldr	r2, [pc, #484]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	6713      	str	r3, [r2, #112]	; 0x70
 80063e2:	4b77      	ldr	r3, [pc, #476]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	4a76      	ldr	r2, [pc, #472]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80063e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d015      	beq.n	8006422 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f6:	f7fb fa0f 	bl	8001818 <HAL_GetTick>
 80063fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063fc:	e00a      	b.n	8006414 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063fe:	f7fb fa0b 	bl	8001818 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	f241 3288 	movw	r2, #5000	; 0x1388
 800640c:	4293      	cmp	r3, r2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e14c      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006414:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0ee      	beq.n	80063fe <HAL_RCC_OscConfig+0x5a2>
 8006420:	e014      	b.n	800644c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006422:	f7fb f9f9 	bl	8001818 <HAL_GetTick>
 8006426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006428:	e00a      	b.n	8006440 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642a:	f7fb f9f5 	bl	8001818 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	f241 3288 	movw	r2, #5000	; 0x1388
 8006438:	4293      	cmp	r3, r2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e136      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006440:	4b5f      	ldr	r3, [pc, #380]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1ee      	bne.n	800642a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 812b 	beq.w	80066ac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006456:	4b5a      	ldr	r3, [pc, #360]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800645e:	2b18      	cmp	r3, #24
 8006460:	f000 80bb 	beq.w	80065da <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	2b02      	cmp	r3, #2
 800646a:	f040 8095 	bne.w	8006598 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646e:	4b54      	ldr	r3, [pc, #336]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a53      	ldr	r2, [pc, #332]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647a:	f7fb f9cd 	bl	8001818 <HAL_GetTick>
 800647e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006482:	f7fb f9c9 	bl	8001818 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e10c      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006494:	4b4a      	ldr	r3, [pc, #296]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1f0      	bne.n	8006482 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a0:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80064a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064a4:	4b47      	ldr	r3, [pc, #284]	; (80065c4 <HAL_RCC_OscConfig+0x768>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064b0:	0112      	lsls	r2, r2, #4
 80064b2:	430a      	orrs	r2, r1
 80064b4:	4942      	ldr	r1, [pc, #264]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	628b      	str	r3, [r1, #40]	; 0x28
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	3b01      	subs	r3, #1
 80064c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	3b01      	subs	r3, #1
 80064ca:	025b      	lsls	r3, r3, #9
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	3b01      	subs	r3, #1
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	3b01      	subs	r3, #1
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064ea:	4935      	ldr	r1, [pc, #212]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80064f0:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	4a32      	ldr	r2, [pc, #200]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064fc:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 80064fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006500:	4b31      	ldr	r3, [pc, #196]	; (80065c8 <HAL_RCC_OscConfig+0x76c>)
 8006502:	4013      	ands	r3, r2
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006508:	00d2      	lsls	r2, r2, #3
 800650a:	492d      	ldr	r1, [pc, #180]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800650c:	4313      	orrs	r3, r2
 800650e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006510:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	f023 020c 	bic.w	r2, r3, #12
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	4928      	ldr	r1, [pc, #160]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800651e:	4313      	orrs	r3, r2
 8006520:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006522:	4b27      	ldr	r3, [pc, #156]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	f023 0202 	bic.w	r2, r3, #2
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	4924      	ldr	r1, [pc, #144]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006530:	4313      	orrs	r3, r2
 8006532:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006534:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800653a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800654a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006564:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800656a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800656e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fb f952 	bl	8001818 <HAL_GetTick>
 8006574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006578:	f7fb f94e 	bl	8001818 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e091      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0x71c>
 8006596:	e089      	b.n	80066ac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006598:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a08      	ldr	r2, [pc, #32]	; (80065c0 <HAL_RCC_OscConfig+0x764>)
 800659e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a4:	f7fb f938 	bl	8001818 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065aa:	e00f      	b.n	80065cc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fb f934 	bl	8001818 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d908      	bls.n	80065cc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e077      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
 80065be:	bf00      	nop
 80065c0:	58024400 	.word	0x58024400
 80065c4:	fffffc0c 	.word	0xfffffc0c
 80065c8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065cc:	4b3a      	ldr	r3, [pc, #232]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e9      	bne.n	80065ac <HAL_RCC_OscConfig+0x750>
 80065d8:	e068      	b.n	80066ac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065da:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065e0:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d031      	beq.n	8006652 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f003 0203 	and.w	r2, r3, #3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d12a      	bne.n	8006652 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d122      	bne.n	8006652 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006618:	429a      	cmp	r2, r3
 800661a:	d11a      	bne.n	8006652 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	0a5b      	lsrs	r3, r3, #9
 8006620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006628:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800662a:	429a      	cmp	r2, r3
 800662c:	d111      	bne.n	8006652 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d108      	bne.n	8006652 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	0e1b      	lsrs	r3, r3, #24
 8006644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d001      	beq.n	8006656 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e02b      	b.n	80066ae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 8006658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665a:	08db      	lsrs	r3, r3, #3
 800665c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006660:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	d01f      	beq.n	80066ac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800666c:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	4a11      	ldr	r2, [pc, #68]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006678:	f7fb f8ce 	bl	8001818 <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800667e:	bf00      	nop
 8006680:	f7fb f8ca 	bl	8001818 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	4293      	cmp	r3, r2
 800668a:	d0f9      	beq.n	8006680 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 800668e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <HAL_RCC_OscConfig+0x860>)
 8006692:	4013      	ands	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006698:	00d2      	lsls	r2, r2, #3
 800669a:	4907      	ldr	r1, [pc, #28]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 800669c:	4313      	orrs	r3, r2
 800669e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <HAL_RCC_OscConfig+0x85c>)
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3730      	adds	r7, #48	; 0x30
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	58024400 	.word	0x58024400
 80066bc:	ffff0007 	.word	0xffff0007

080066c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e19c      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d4:	4b8a      	ldr	r3, [pc, #552]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d910      	bls.n	8006704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b87      	ldr	r3, [pc, #540]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 020f 	bic.w	r2, r3, #15
 80066ea:	4985      	ldr	r1, [pc, #532]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b83      	ldr	r3, [pc, #524]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e184      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d010      	beq.n	8006732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	4b7b      	ldr	r3, [pc, #492]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800671c:	429a      	cmp	r2, r3
 800671e:	d908      	bls.n	8006732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006720:	4b78      	ldr	r3, [pc, #480]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	4975      	ldr	r1, [pc, #468]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 800672e:	4313      	orrs	r3, r2
 8006730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d010      	beq.n	8006760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	4b70      	ldr	r3, [pc, #448]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800674a:	429a      	cmp	r2, r3
 800674c:	d908      	bls.n	8006760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800674e:	4b6d      	ldr	r3, [pc, #436]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	496a      	ldr	r1, [pc, #424]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 800675c:	4313      	orrs	r3, r2
 800675e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d010      	beq.n	800678e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	4b64      	ldr	r3, [pc, #400]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006778:	429a      	cmp	r2, r3
 800677a:	d908      	bls.n	800678e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800677c:	4b61      	ldr	r3, [pc, #388]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	495e      	ldr	r1, [pc, #376]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 800678a:	4313      	orrs	r3, r2
 800678c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69da      	ldr	r2, [r3, #28]
 800679e:	4b59      	ldr	r3, [pc, #356]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d908      	bls.n	80067bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067aa:	4b56      	ldr	r3, [pc, #344]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4953      	ldr	r1, [pc, #332]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	4b4d      	ldr	r3, [pc, #308]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d908      	bls.n	80067ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d8:	4b4a      	ldr	r3, [pc, #296]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	f023 020f 	bic.w	r2, r3, #15
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4947      	ldr	r1, [pc, #284]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d055      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067f6:	4b43      	ldr	r3, [pc, #268]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	4940      	ldr	r1, [pc, #256]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006804:	4313      	orrs	r3, r2
 8006806:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d107      	bne.n	8006820 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006810:	4b3c      	ldr	r3, [pc, #240]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d121      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0f6      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d107      	bne.n	8006838 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006828:	4b36      	ldr	r3, [pc, #216]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d115      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0ea      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d107      	bne.n	8006850 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006840:	4b30      	ldr	r3, [pc, #192]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d109      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0de      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006850:	4b2c      	ldr	r3, [pc, #176]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0d6      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006860:	4b28      	ldr	r3, [pc, #160]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f023 0207 	bic.w	r2, r3, #7
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4925      	ldr	r1, [pc, #148]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 800686e:	4313      	orrs	r3, r2
 8006870:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006872:	f7fa ffd1 	bl	8001818 <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006878:	e00a      	b.n	8006890 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800687a:	f7fa ffcd 	bl	8001818 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	f241 3288 	movw	r2, #5000	; 0x1388
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e0be      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006890:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	429a      	cmp	r2, r3
 80068a0:	d1eb      	bne.n	800687a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d208      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068be:	4b11      	ldr	r3, [pc, #68]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f023 020f 	bic.w	r2, r3, #15
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	490e      	ldr	r1, [pc, #56]	; (8006904 <HAL_RCC_ClockConfig+0x244>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d214      	bcs.n	8006908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b08      	ldr	r3, [pc, #32]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 020f 	bic.w	r2, r3, #15
 80068e6:	4906      	ldr	r1, [pc, #24]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b04      	ldr	r3, [pc, #16]	; (8006900 <HAL_RCC_ClockConfig+0x240>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e086      	b.n	8006a0e <HAL_RCC_ClockConfig+0x34e>
 8006900:	52002000 	.word	0x52002000
 8006904:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	4b3f      	ldr	r3, [pc, #252]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006920:	429a      	cmp	r2, r3
 8006922:	d208      	bcs.n	8006936 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006924:	4b3c      	ldr	r3, [pc, #240]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	4939      	ldr	r1, [pc, #228]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006932:	4313      	orrs	r3, r2
 8006934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d010      	beq.n	8006964 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800694e:	429a      	cmp	r2, r3
 8006950:	d208      	bcs.n	8006964 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006952:	4b31      	ldr	r3, [pc, #196]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	492e      	ldr	r1, [pc, #184]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006960:	4313      	orrs	r3, r2
 8006962:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	d010      	beq.n	8006992 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	4b28      	ldr	r3, [pc, #160]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800697c:	429a      	cmp	r2, r3
 800697e:	d208      	bcs.n	8006992 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	4922      	ldr	r1, [pc, #136]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 800698e:	4313      	orrs	r3, r2
 8006990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d010      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69da      	ldr	r2, [r3, #28]
 80069a2:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d208      	bcs.n	80069c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069ae:	4b1a      	ldr	r3, [pc, #104]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4917      	ldr	r1, [pc, #92]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80069c0:	f000 f834 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	4912      	ldr	r1, [pc, #72]	; (8006a1c <HAL_RCC_ClockConfig+0x35c>)
 80069d2:	5ccb      	ldrb	r3, [r1, r3]
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
 80069dc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069de:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	4a0d      	ldr	r2, [pc, #52]	; (8006a1c <HAL_RCC_ClockConfig+0x35c>)
 80069e8:	5cd3      	ldrb	r3, [r2, r3]
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	4a0a      	ldr	r2, [pc, #40]	; (8006a20 <HAL_RCC_ClockConfig+0x360>)
 80069f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069f8:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <HAL_RCC_ClockConfig+0x364>)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80069fe:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <HAL_RCC_ClockConfig+0x368>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fa fd78 	bl	80014f8 <HAL_InitTick>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	08010ca8 	.word	0x08010ca8
 8006a20:	24000008 	.word	0x24000008
 8006a24:	24000004 	.word	0x24000004
 8006a28:	2400000c 	.word	0x2400000c

08006a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a32:	4bb3      	ldr	r3, [pc, #716]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a3a:	2b18      	cmp	r3, #24
 8006a3c:	f200 8155 	bhi.w	8006cea <HAL_RCC_GetSysClockFreq+0x2be>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006aad 	.word	0x08006aad
 8006a4c:	08006ceb 	.word	0x08006ceb
 8006a50:	08006ceb 	.word	0x08006ceb
 8006a54:	08006ceb 	.word	0x08006ceb
 8006a58:	08006ceb 	.word	0x08006ceb
 8006a5c:	08006ceb 	.word	0x08006ceb
 8006a60:	08006ceb 	.word	0x08006ceb
 8006a64:	08006ceb 	.word	0x08006ceb
 8006a68:	08006ad3 	.word	0x08006ad3
 8006a6c:	08006ceb 	.word	0x08006ceb
 8006a70:	08006ceb 	.word	0x08006ceb
 8006a74:	08006ceb 	.word	0x08006ceb
 8006a78:	08006ceb 	.word	0x08006ceb
 8006a7c:	08006ceb 	.word	0x08006ceb
 8006a80:	08006ceb 	.word	0x08006ceb
 8006a84:	08006ceb 	.word	0x08006ceb
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006ceb 	.word	0x08006ceb
 8006a90:	08006ceb 	.word	0x08006ceb
 8006a94:	08006ceb 	.word	0x08006ceb
 8006a98:	08006ceb 	.word	0x08006ceb
 8006a9c:	08006ceb 	.word	0x08006ceb
 8006aa0:	08006ceb 	.word	0x08006ceb
 8006aa4:	08006ceb 	.word	0x08006ceb
 8006aa8:	08006adf 	.word	0x08006adf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aac:	4b94      	ldr	r3, [pc, #592]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ab8:	4b91      	ldr	r3, [pc, #580]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a90      	ldr	r2, [pc, #576]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006aca:	e111      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006acc:	4b8d      	ldr	r3, [pc, #564]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ace:	61bb      	str	r3, [r7, #24]
      break;
 8006ad0:	e10e      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ad2:	4b8d      	ldr	r3, [pc, #564]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ad4:	61bb      	str	r3, [r7, #24]
      break;
 8006ad6:	e10b      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ad8:	4b8c      	ldr	r3, [pc, #560]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ada:	61bb      	str	r3, [r7, #24]
      break;
 8006adc:	e108      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ade:	4b88      	ldr	r3, [pc, #544]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ae8:	4b85      	ldr	r3, [pc, #532]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006af4:	4b82      	ldr	r3, [pc, #520]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006afe:	4b80      	ldr	r3, [pc, #512]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80e1 	beq.w	8006ce4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	f000 8083 	beq.w	8006c30 <HAL_RCC_GetSysClockFreq+0x204>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	f200 80a1 	bhi.w	8006c74 <HAL_RCC_GetSysClockFreq+0x248>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_RCC_GetSysClockFreq+0x114>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d056      	beq.n	8006bec <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b3e:	e099      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b40:	4b6f      	ldr	r3, [pc, #444]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02d      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b4c:	4b6c      	ldr	r3, [pc, #432]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	4a6b      	ldr	r2, [pc, #428]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	ee07 3a90 	vmov	s15, r3
 8006b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b62      	ldr	r3, [pc, #392]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ba6:	e087      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b51      	ldr	r3, [pc, #324]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bea:	e065      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b40      	ldr	r3, [pc, #256]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c2e:	e043      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b2f      	ldr	r3, [pc, #188]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c72:	e021      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b1e      	ldr	r3, [pc, #120]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	0a5b      	lsrs	r3, r3, #9
 8006cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cdc:	ee17 3a90 	vmov	r3, s15
 8006ce0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006ce2:	e005      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
      break;
 8006ce8:	e002      	b.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cec:	61bb      	str	r3, [r7, #24]
      break;
 8006cee:	bf00      	nop
  }

  return sysclockfreq;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3724      	adds	r7, #36	; 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	58024400 	.word	0x58024400
 8006d04:	03d09000 	.word	0x03d09000
 8006d08:	003d0900 	.word	0x003d0900
 8006d0c:	007a1200 	.word	0x007a1200
 8006d10:	46000000 	.word	0x46000000
 8006d14:	4c742400 	.word	0x4c742400
 8006d18:	4a742400 	.word	0x4a742400
 8006d1c:	4af42400 	.word	0x4af42400

08006d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006d26:	f7ff fe81 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	0a1b      	lsrs	r3, r3, #8
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	490f      	ldr	r1, [pc, #60]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d38:	5ccb      	ldrb	r3, [r1, r3]
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	4a09      	ldr	r2, [pc, #36]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d4e:	5cd3      	ldrb	r3, [r2, r3]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	4a07      	ldr	r2, [pc, #28]	; (8006d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d5e:	4a07      	ldr	r2, [pc, #28]	; (8006d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	58024400 	.word	0x58024400
 8006d74:	08010ca8 	.word	0x08010ca8
 8006d78:	24000008 	.word	0x24000008
 8006d7c:	24000004 	.word	0x24000004

08006d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006d84:	f7ff ffcc 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	091b      	lsrs	r3, r3, #4
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	4904      	ldr	r1, [pc, #16]	; (8006da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d96:	5ccb      	ldrb	r3, [r1, r3]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	58024400 	.word	0x58024400
 8006da8:	08010ca8 	.word	0x08010ca8

08006dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006db0:	f7ff ffb6 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	4904      	ldr	r1, [pc, #16]	; (8006dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dc2:	5ccb      	ldrb	r3, [r1, r3]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	08010ca8 	.word	0x08010ca8

08006dd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	223f      	movs	r2, #63	; 0x3f
 8006de6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006de8:	4b1a      	ldr	r3, [pc, #104]	; (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0207 	and.w	r2, r3, #7
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8006df4:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8006e00:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8006e0c:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8006e30:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <HAL_RCC_GetClockConfig+0x7c>)
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <HAL_RCC_GetClockConfig+0x80>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	601a      	str	r2, [r3, #0]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	58024400 	.word	0x58024400
 8006e58:	52002000 	.word	0x52002000

08006e5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e60:	b0c8      	sub	sp, #288	; 0x120
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006e80:	2500      	movs	r5, #0
 8006e82:	ea54 0305 	orrs.w	r3, r4, r5
 8006e86:	d049      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e92:	d02f      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e98:	d828      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e9e:	d01a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ea4:	d822      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eae:	d007      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006eb0:	e01c      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb2:	4ba7      	ldr	r3, [pc, #668]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	4aa6      	ldr	r2, [pc, #664]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ebe:	e01a      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f002 fa6d 	bl	80093a8 <RCCEx_PLL2_Config>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ed4:	e00f      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eda:	3328      	adds	r3, #40	; 0x28
 8006edc:	2102      	movs	r1, #2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f002 fb14 	bl	800950c <RCCEx_PLL3_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eea:	e004      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006efe:	4b94      	ldr	r3, [pc, #592]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0c:	4a90      	ldr	r2, [pc, #576]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	6513      	str	r3, [r2, #80]	; 0x50
 8006f12:	e003      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006f28:	f04f 0900 	mov.w	r9, #0
 8006f2c:	ea58 0309 	orrs.w	r3, r8, r9
 8006f30:	d047      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d82a      	bhi.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f59 	.word	0x08006f59
 8006f48:	08006f67 	.word	0x08006f67
 8006f4c:	08006f7d 	.word	0x08006f7d
 8006f50:	08006f9b 	.word	0x08006f9b
 8006f54:	08006f9b 	.word	0x08006f9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f58:	4b7d      	ldr	r3, [pc, #500]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f64:	e01a      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f002 fa1a 	bl	80093a8 <RCCEx_PLL2_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f7a:	e00f      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f80:	3328      	adds	r3, #40	; 0x28
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f002 fac1 	bl	800950c <RCCEx_PLL3_Config>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f90:	e004      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f98:	e000      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fa4:	4b6a      	ldr	r3, [pc, #424]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	f023 0107 	bic.w	r1, r3, #7
 8006fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	4a67      	ldr	r2, [pc, #412]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6513      	str	r3, [r2, #80]	; 0x50
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006fce:	f04f 0b00 	mov.w	fp, #0
 8006fd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fd6:	d054      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006fe2:	d036      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006fe4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006fe8:	d82f      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d032      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff4:	d829      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ff8:	d02f      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8006ffc:	d825      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ffe:	2b80      	cmp	r3, #128	; 0x80
 8007000:	d018      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007002:	2b80      	cmp	r3, #128	; 0x80
 8007004:	d821      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800700a:	2b40      	cmp	r3, #64	; 0x40
 800700c:	d007      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800700e:	e01c      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007010:	4b4f      	ldr	r3, [pc, #316]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	4a4e      	ldr	r2, [pc, #312]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800701a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800701c:	e01e      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800701e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007022:	3308      	adds	r3, #8
 8007024:	2100      	movs	r1, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f002 f9be 	bl	80093a8 <RCCEx_PLL2_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007032:	e013      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007038:	3328      	adds	r3, #40	; 0x28
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f002 fa65 	bl	800950c <RCCEx_PLL3_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007048:	e008      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007050:	e004      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007052:	bf00      	nop
 8007054:	e002      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800705a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007064:	4b3a      	ldr	r3, [pc, #232]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007068:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800706c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007072:	4a37      	ldr	r2, [pc, #220]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007074:	430b      	orrs	r3, r1
 8007076:	6513      	str	r3, [r2, #80]	; 0x50
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800707e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800708e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007092:	2300      	movs	r3, #0
 8007094:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007098:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d05c      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80070a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80070ac:	d03b      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80070ae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80070b2:	d834      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b8:	d037      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070be:	d82e      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070c4:	d033      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070ca:	d828      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d0:	d01a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d6:	d822      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80070dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e0:	d007      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80070e2:	e01c      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80070f0:	e01e      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070f6:	3308      	adds	r3, #8
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f002 f954 	bl	80093a8 <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007106:	e013      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800710c:	3328      	adds	r3, #40	; 0x28
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f002 f9fb 	bl	800950c <RCCEx_PLL3_Config>
 8007116:	4603      	mov	r3, r0
 8007118:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800711c:	e008      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007124:	e004      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007126:	bf00      	nop
 8007128:	e002      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800712e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007130:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800713a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8007140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007146:	4a02      	ldr	r2, [pc, #8]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007148:	430b      	orrs	r3, r1
 800714a:	6513      	str	r3, [r2, #80]	; 0x50
 800714c:	e006      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800714e:	bf00      	nop
 8007150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007154:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007158:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800715c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800716c:	2300      	movs	r3, #0
 800716e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007172:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007176:	460b      	mov	r3, r1
 8007178:	4313      	orrs	r3, r2
 800717a:	d03a      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800717c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	2b30      	cmp	r3, #48	; 0x30
 8007184:	d01f      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007186:	2b30      	cmp	r3, #48	; 0x30
 8007188:	d819      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800718a:	2b20      	cmp	r3, #32
 800718c:	d00c      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800718e:	2b20      	cmp	r3, #32
 8007190:	d815      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d019      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007196:	2b10      	cmp	r3, #16
 8007198:	d111      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719a:	4bae      	ldr	r3, [pc, #696]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	4aad      	ldr	r2, [pc, #692]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071a6:	e011      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ac:	3308      	adds	r3, #8
 80071ae:	2102      	movs	r1, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f002 f8f9 	bl	80093a8 <RCCEx_PLL2_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071bc:	e006      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80071ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80071d4:	4b9f      	ldr	r3, [pc, #636]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80071dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e2:	4a9c      	ldr	r2, [pc, #624]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071e4:	430b      	orrs	r3, r1
 80071e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071e8:	e003      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80071f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80071fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007202:	2300      	movs	r3, #0
 8007204:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007208:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800720c:	460b      	mov	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	d051      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800721c:	d035      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800721e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007222:	d82e      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007228:	d031      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800722a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800722e:	d828      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007234:	d01a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723a:	d822      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d007      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007246:	e01c      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007248:	4b82      	ldr	r3, [pc, #520]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a81      	ldr	r2, [pc, #516]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800724e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007254:	e01c      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800725a:	3308      	adds	r3, #8
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f002 f8a2 	bl	80093a8 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800726a:	e011      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800726c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007270:	3328      	adds	r3, #40	; 0x28
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f002 f949 	bl	800950c <RCCEx_PLL3_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800728e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007298:	4b6e      	ldr	r3, [pc, #440]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800729a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80072a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a6:	4a6b      	ldr	r2, [pc, #428]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6513      	str	r3, [r2, #80]	; 0x50
 80072ac:	e003      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80072c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80072d0:	460b      	mov	r3, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	d053      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e0:	d033      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80072e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e6:	d82c      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072ec:	d02f      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80072ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072f2:	d826      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f8:	d02b      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80072fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072fe:	d820      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007304:	d012      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800730a:	d81a      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d022      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007314:	d115      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800731a:	3308      	adds	r3, #8
 800731c:	2101      	movs	r1, #1
 800731e:	4618      	mov	r0, r3
 8007320:	f002 f842 	bl	80093a8 <RCCEx_PLL2_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800732a:	e015      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800732c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007330:	3328      	adds	r3, #40	; 0x28
 8007332:	2101      	movs	r1, #1
 8007334:	4618      	mov	r0, r3
 8007336:	f002 f8e9 	bl	800950c <RCCEx_PLL3_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007340:	e00a      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007348:	e006      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800734a:	bf00      	nop
 800734c:	e004      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800734e:	bf00      	nop
 8007350:	e002      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007358:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007360:	4b3c      	ldr	r3, [pc, #240]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800736e:	4a39      	ldr	r2, [pc, #228]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007370:	430b      	orrs	r3, r1
 8007372:	6513      	str	r3, [r2, #80]	; 0x50
 8007374:	e003      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007376:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800737a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800737e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800738a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800738e:	2300      	movs	r3, #0
 8007390:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007394:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007398:	460b      	mov	r3, r1
 800739a:	4313      	orrs	r3, r2
 800739c:	d060      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800739e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80073aa:	d039      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80073ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80073b0:	d832      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073b6:	d035      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80073b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073bc:	d82c      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c2:	d031      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c8:	d826      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ce:	d02d      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80073d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073d4:	d820      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073da:	d012      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80073dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e0:	d81a      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d024      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ea:	d115      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f0:	3308      	adds	r3, #8
 80073f2:	2101      	movs	r1, #1
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 ffd7 	bl	80093a8 <RCCEx_PLL2_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007400:	e017      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007406:	3328      	adds	r3, #40	; 0x28
 8007408:	2101      	movs	r1, #1
 800740a:	4618      	mov	r0, r3
 800740c:	f002 f87e 	bl	800950c <RCCEx_PLL3_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007416:	e00c      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800741e:	e008      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007420:	bf00      	nop
 8007422:	e006      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10e      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800743a:	4b06      	ldr	r3, [pc, #24]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007446:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800744a:	4a02      	ldr	r2, [pc, #8]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800744c:	430b      	orrs	r3, r1
 800744e:	6593      	str	r3, [r2, #88]	; 0x58
 8007450:	e006      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007452:	bf00      	nop
 8007454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800745c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800746c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	d037      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748a:	d00e      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800748c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007490:	d816      	bhi.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d018      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749a:	d111      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4bc4      	ldr	r3, [pc, #784]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	4ac3      	ldr	r2, [pc, #780]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074a8:	e00f      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ae:	3308      	adds	r3, #8
 80074b0:	2101      	movs	r1, #1
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 ff78 	bl	80093a8 <RCCEx_PLL2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074be:	e004      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80074c6:	e000      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80074c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074d2:	4bb7      	ldr	r3, [pc, #732]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80074da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074e0:	4ab3      	ldr	r2, [pc, #716]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074e2:	430b      	orrs	r3, r1
 80074e4:	6513      	str	r3, [r2, #80]	; 0x50
 80074e6:	e003      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80074fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007500:	2300      	movs	r3, #0
 8007502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007506:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800750a:	460b      	mov	r3, r1
 800750c:	4313      	orrs	r3, r2
 800750e:	d039      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007516:	2b03      	cmp	r3, #3
 8007518:	d81c      	bhi.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800751a:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	0800755d 	.word	0x0800755d
 8007524:	08007531 	.word	0x08007531
 8007528:	0800753f 	.word	0x0800753f
 800752c:	0800755d 	.word	0x0800755d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007530:	4b9f      	ldr	r3, [pc, #636]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	4a9e      	ldr	r2, [pc, #632]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800753a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800753c:	e00f      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800753e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007542:	3308      	adds	r3, #8
 8007544:	2102      	movs	r1, #2
 8007546:	4618      	mov	r0, r3
 8007548:	f001 ff2e 	bl	80093a8 <RCCEx_PLL2_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007552:	e004      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800755a:	e000      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800755c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800755e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007566:	4b92      	ldr	r3, [pc, #584]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	f023 0103 	bic.w	r1, r3, #3
 800756e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007574:	4a8e      	ldr	r2, [pc, #568]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007576:	430b      	orrs	r3, r1
 8007578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800757a:	e003      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007580:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007594:	2300      	movs	r3, #0
 8007596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800759a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800759e:	460b      	mov	r3, r1
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f000 8099 	beq.w	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075a6:	4b83      	ldr	r3, [pc, #524]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a82      	ldr	r2, [pc, #520]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075b2:	f7fa f931 	bl	8001818 <HAL_GetTick>
 80075b6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ba:	e00b      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075bc:	f7fa f92c 	bl	8001818 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b64      	cmp	r3, #100	; 0x64
 80075ca:	d903      	bls.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075d2:	e005      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d4:	4b77      	ldr	r3, [pc, #476]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0ed      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80075e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d173      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075e8:	4b71      	ldr	r3, [pc, #452]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075f4:	4053      	eors	r3, r2
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d015      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075fe:	4b6c      	ldr	r3, [pc, #432]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007606:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800760a:	4b69      	ldr	r3, [pc, #420]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760e:	4a68      	ldr	r2, [pc, #416]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007614:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007616:	4b66      	ldr	r3, [pc, #408]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	4a65      	ldr	r2, [pc, #404]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800761c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007620:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007622:	4a63      	ldr	r2, [pc, #396]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007628:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800762a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800762e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007636:	d118      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007638:	f7fa f8ee 	bl	8001818 <HAL_GetTick>
 800763c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007640:	e00d      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007642:	f7fa f8e9 	bl	8001818 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800764c:	1ad2      	subs	r2, r2, r3
 800764e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007652:	429a      	cmp	r2, r3
 8007654:	d903      	bls.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800765c:	e005      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800765e:	4b54      	ldr	r3, [pc, #336]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0eb      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800766a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800766e:	2b00      	cmp	r3, #0
 8007670:	d129      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007676:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800767a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007682:	d10e      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007684:	4b4a      	ldr	r3, [pc, #296]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800768c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007690:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007694:	091a      	lsrs	r2, r3, #4
 8007696:	4b48      	ldr	r3, [pc, #288]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007698:	4013      	ands	r3, r2
 800769a:	4a45      	ldr	r2, [pc, #276]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800769c:	430b      	orrs	r3, r1
 800769e:	6113      	str	r3, [r2, #16]
 80076a0:	e005      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80076a2:	4b43      	ldr	r3, [pc, #268]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	4a42      	ldr	r2, [pc, #264]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076ac:	6113      	str	r3, [r2, #16]
 80076ae:	4b40      	ldr	r3, [pc, #256]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076be:	4a3c      	ldr	r2, [pc, #240]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6713      	str	r3, [r2, #112]	; 0x70
 80076c4:	e008      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80076ce:	e003      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f002 0301 	and.w	r3, r2, #1
 80076e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f000 8090 	beq.w	800781a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80076fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007702:	2b28      	cmp	r3, #40	; 0x28
 8007704:	d870      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	080077f1 	.word	0x080077f1
 8007710:	080077e9 	.word	0x080077e9
 8007714:	080077e9 	.word	0x080077e9
 8007718:	080077e9 	.word	0x080077e9
 800771c:	080077e9 	.word	0x080077e9
 8007720:	080077e9 	.word	0x080077e9
 8007724:	080077e9 	.word	0x080077e9
 8007728:	080077e9 	.word	0x080077e9
 800772c:	080077bd 	.word	0x080077bd
 8007730:	080077e9 	.word	0x080077e9
 8007734:	080077e9 	.word	0x080077e9
 8007738:	080077e9 	.word	0x080077e9
 800773c:	080077e9 	.word	0x080077e9
 8007740:	080077e9 	.word	0x080077e9
 8007744:	080077e9 	.word	0x080077e9
 8007748:	080077e9 	.word	0x080077e9
 800774c:	080077d3 	.word	0x080077d3
 8007750:	080077e9 	.word	0x080077e9
 8007754:	080077e9 	.word	0x080077e9
 8007758:	080077e9 	.word	0x080077e9
 800775c:	080077e9 	.word	0x080077e9
 8007760:	080077e9 	.word	0x080077e9
 8007764:	080077e9 	.word	0x080077e9
 8007768:	080077e9 	.word	0x080077e9
 800776c:	080077f1 	.word	0x080077f1
 8007770:	080077e9 	.word	0x080077e9
 8007774:	080077e9 	.word	0x080077e9
 8007778:	080077e9 	.word	0x080077e9
 800777c:	080077e9 	.word	0x080077e9
 8007780:	080077e9 	.word	0x080077e9
 8007784:	080077e9 	.word	0x080077e9
 8007788:	080077e9 	.word	0x080077e9
 800778c:	080077f1 	.word	0x080077f1
 8007790:	080077e9 	.word	0x080077e9
 8007794:	080077e9 	.word	0x080077e9
 8007798:	080077e9 	.word	0x080077e9
 800779c:	080077e9 	.word	0x080077e9
 80077a0:	080077e9 	.word	0x080077e9
 80077a4:	080077e9 	.word	0x080077e9
 80077a8:	080077e9 	.word	0x080077e9
 80077ac:	080077f1 	.word	0x080077f1
 80077b0:	58024400 	.word	0x58024400
 80077b4:	58024800 	.word	0x58024800
 80077b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c0:	3308      	adds	r3, #8
 80077c2:	2101      	movs	r1, #1
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fdef 	bl	80093a8 <RCCEx_PLL2_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077d0:	e00f      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077d6:	3328      	adds	r3, #40	; 0x28
 80077d8:	2101      	movs	r1, #1
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 fe96 	bl	800950c <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077e6:	e004      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80077f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077fa:	4bc0      	ldr	r3, [pc, #768]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800780a:	4abc      	ldr	r2, [pc, #752]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800780c:	430b      	orrs	r3, r1
 800780e:	6553      	str	r3, [r2, #84]	; 0x54
 8007810:	e003      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007812:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007816:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800781a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f002 0302 	and.w	r3, r2, #2
 8007826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800782a:	2300      	movs	r3, #0
 800782c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007830:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007834:	460b      	mov	r3, r1
 8007836:	4313      	orrs	r3, r2
 8007838:	d043      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800783a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800783e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007842:	2b05      	cmp	r3, #5
 8007844:	d824      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007899 	.word	0x08007899
 8007850:	08007865 	.word	0x08007865
 8007854:	0800787b 	.word	0x0800787b
 8007858:	08007899 	.word	0x08007899
 800785c:	08007899 	.word	0x08007899
 8007860:	08007899 	.word	0x08007899
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007868:	3308      	adds	r3, #8
 800786a:	2101      	movs	r1, #1
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fd9b 	bl	80093a8 <RCCEx_PLL2_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007878:	e00f      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800787a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787e:	3328      	adds	r3, #40	; 0x28
 8007880:	2101      	movs	r1, #1
 8007882:	4618      	mov	r0, r3
 8007884:	f001 fe42 	bl	800950c <RCCEx_PLL3_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800788e:	e004      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10b      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078a2:	4b96      	ldr	r3, [pc, #600]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	f023 0107 	bic.w	r1, r3, #7
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b2:	4a92      	ldr	r2, [pc, #584]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6553      	str	r3, [r2, #84]	; 0x54
 80078b8:	e003      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	f002 0304 	and.w	r3, r2, #4
 80078ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078d2:	2300      	movs	r3, #0
 80078d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80078dc:	460b      	mov	r3, r1
 80078de:	4313      	orrs	r3, r2
 80078e0:	d043      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d824      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80078ee:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	08007941 	.word	0x08007941
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007923 	.word	0x08007923
 8007900:	08007941 	.word	0x08007941
 8007904:	08007941 	.word	0x08007941
 8007908:	08007941 	.word	0x08007941
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800790c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007910:	3308      	adds	r3, #8
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f001 fd47 	bl	80093a8 <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007920:	e00f      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007926:	3328      	adds	r3, #40	; 0x28
 8007928:	2101      	movs	r1, #1
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fdee 	bl	800950c <RCCEx_PLL3_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007936:	e004      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800793e:	e000      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007942:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800794a:	4b6c      	ldr	r3, [pc, #432]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800794c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794e:	f023 0107 	bic.w	r1, r3, #7
 8007952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800795a:	4a68      	ldr	r2, [pc, #416]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800795c:	430b      	orrs	r3, r1
 800795e:	6593      	str	r3, [r2, #88]	; 0x58
 8007960:	e003      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007966:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800796a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f002 0320 	and.w	r3, r2, #32
 8007976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800797a:	2300      	movs	r3, #0
 800797c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007984:	460b      	mov	r3, r1
 8007986:	4313      	orrs	r3, r2
 8007988:	d055      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800798a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800798e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007996:	d033      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799c:	d82c      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a2:	d02f      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a8:	d826      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079ae:	d02b      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80079b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079b4:	d820      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ba:	d012      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80079bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c0:	d81a      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d022      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80079c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ca:	d115      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d0:	3308      	adds	r3, #8
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fce7 	bl	80093a8 <RCCEx_PLL2_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079e0:	e015      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e6:	3328      	adds	r3, #40	; 0x28
 80079e8:	2102      	movs	r1, #2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 fd8e 	bl	800950c <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079f6:	e00a      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80079fe:	e006      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a00:	bf00      	nop
 8007a02:	e004      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a16:	4b39      	ldr	r3, [pc, #228]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a26:	4a35      	ldr	r2, [pc, #212]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6553      	str	r3, [r2, #84]	; 0x54
 8007a2c:	e003      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a46:	2300      	movs	r3, #0
 8007a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4313      	orrs	r3, r2
 8007a54:	d058      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a62:	d033      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007a64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a68:	d82c      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6e:	d02f      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a74:	d826      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a7a:	d02b      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007a7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a80:	d820      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a86:	d012      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8c:	d81a      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d022      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a96:	d115      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fc81 	bl	80093a8 <RCCEx_PLL2_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aac:	e015      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab2:	3328      	adds	r3, #40	; 0x28
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 fd28 	bl	800950c <RCCEx_PLL3_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ac2:	e00a      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007aca:	e006      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007acc:	bf00      	nop
 8007ace:	e004      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ad0:	bf00      	nop
 8007ad2:	e002      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ada:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10e      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ae2:	4b06      	ldr	r3, [pc, #24]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007af2:	4a02      	ldr	r2, [pc, #8]	; (8007afc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007af4:	430b      	orrs	r3, r1
 8007af6:	6593      	str	r3, [r2, #88]	; 0x58
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007afa:	bf00      	nop
 8007afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007b22:	460b      	mov	r3, r1
 8007b24:	4313      	orrs	r3, r2
 8007b26:	d055      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b34:	d033      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b3a:	d82c      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b40:	d02f      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b46:	d826      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b4c:	d02b      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b52:	d820      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b58:	d012      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b5e:	d81a      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d022      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b68:	d115      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b6e:	3308      	adds	r3, #8
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fc18 	bl	80093a8 <RCCEx_PLL2_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b7e:	e015      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b84:	3328      	adds	r3, #40	; 0x28
 8007b86:	2102      	movs	r1, #2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f001 fcbf 	bl	800950c <RCCEx_PLL3_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b94:	e00a      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007b9c:	e006      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007b9e:	bf00      	nop
 8007ba0:	e004      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007ba2:	bf00      	nop
 8007ba4:	e002      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007ba6:	bf00      	nop
 8007ba8:	e000      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bb4:	4ba1      	ldr	r3, [pc, #644]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bc4:	4a9d      	ldr	r2, [pc, #628]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bca:	e003      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f002 0308 	and.w	r3, r2, #8
 8007be0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	d01e      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c06:	3328      	adds	r3, #40	; 0x28
 8007c08:	2102      	movs	r1, #2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 fc7e 	bl	800950c <RCCEx_PLL3_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c1c:	4b87      	ldr	r3, [pc, #540]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c2c:	4a83      	ldr	r2, [pc, #524]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f002 0310 	and.w	r3, r2, #16
 8007c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c42:	2300      	movs	r3, #0
 8007c44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	d01e      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5e:	d10c      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c64:	3328      	adds	r3, #40	; 0x28
 8007c66:	2102      	movs	r1, #2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 fc4f 	bl	800950c <RCCEx_PLL3_Config>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c7a:	4b70      	ldr	r3, [pc, #448]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c8a:	4a6c      	ldr	r2, [pc, #432]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ca6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007caa:	460b      	mov	r3, r1
 8007cac:	4313      	orrs	r3, r2
 8007cae:	d03e      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cbc:	d022      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cc2:	d81b      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ccc:	d00b      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007cce:	e015      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 fb65 	bl	80093a8 <RCCEx_PLL2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ce4:	e00f      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cea:	3328      	adds	r3, #40	; 0x28
 8007cec:	2102      	movs	r1, #2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fc0c 	bl	800950c <RCCEx_PLL3_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cfa:	e004      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007d02:	e000      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d0e:	4b4b      	ldr	r3, [pc, #300]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d1e:	4a47      	ldr	r2, [pc, #284]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d20:	430b      	orrs	r3, r1
 8007d22:	6593      	str	r3, [r2, #88]	; 0x58
 8007d24:	e003      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007d3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007d44:	460b      	mov	r3, r1
 8007d46:	4313      	orrs	r3, r2
 8007d48:	d03b      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d56:	d01f      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d5c:	d818      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d62:	d003      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d68:	d007      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007d6a:	e011      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6c:	4b33      	ldr	r3, [pc, #204]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4a32      	ldr	r2, [pc, #200]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d78:	e00f      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d7e:	3328      	adds	r3, #40	; 0x28
 8007d80:	2101      	movs	r1, #1
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fbc2 	bl	800950c <RCCEx_PLL3_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d8e:	e004      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007d96:	e000      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007da2:	4b26      	ldr	r3, [pc, #152]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db2:	4a22      	ldr	r2, [pc, #136]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6553      	str	r3, [r2, #84]	; 0x54
 8007db8:	e003      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007dbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007dce:	673b      	str	r3, [r7, #112]	; 0x70
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	677b      	str	r3, [r7, #116]	; 0x74
 8007dd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	d034      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dec:	d007      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007dee:	e011      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007dfc:	e00e      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e02:	3308      	adds	r3, #8
 8007e04:	2102      	movs	r1, #2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 face 	bl	80093a8 <RCCEx_PLL2_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e12:	e003      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10d      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e32:	4a02      	ldr	r2, [pc, #8]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e34:	430b      	orrs	r3, r1
 8007e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007e3a:	bf00      	nop
 8007e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e56:	2300      	movs	r3, #0
 8007e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d00c      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e68:	3328      	adds	r3, #40	; 0x28
 8007e6a:	2102      	movs	r1, #2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 fb4d 	bl	800950c <RCCEx_PLL3_Config>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8007e90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007e94:	460b      	mov	r3, r1
 8007e96:	4313      	orrs	r3, r2
 8007e98:	d038      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea6:	d018      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eac:	d811      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb2:	d014      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb8:	d80b      	bhi.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d011      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec2:	d106      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec4:	4bc3      	ldr	r3, [pc, #780]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	4ac2      	ldr	r2, [pc, #776]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007ed8:	e004      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007eda:	bf00      	nop
 8007edc:	e002      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ede:	bf00      	nop
 8007ee0:	e000      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007eec:	4bb9      	ldr	r3, [pc, #740]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efc:	4ab5      	ldr	r2, [pc, #724]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6553      	str	r3, [r2, #84]	; 0x54
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007f18:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007f22:	460b      	mov	r3, r1
 8007f24:	4313      	orrs	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f28:	4baa      	ldr	r3, [pc, #680]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f36:	4aa7      	ldr	r2, [pc, #668]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007f48:	653b      	str	r3, [r7, #80]	; 0x50
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8007f4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	d009      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f58:	4b9e      	ldr	r3, [pc, #632]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	4a9b      	ldr	r2, [pc, #620]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d009      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007f88:	4b92      	ldr	r3, [pc, #584]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f96:	4a8f      	ldr	r2, [pc, #572]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8007faa:	2300      	movs	r3, #0
 8007fac:	647b      	str	r3, [r7, #68]	; 0x44
 8007fae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fb8:	4b86      	ldr	r3, [pc, #536]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	4a85      	ldr	r2, [pc, #532]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fc2:	6113      	str	r3, [r2, #16]
 8007fc4:	4b83      	ldr	r3, [pc, #524]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fc6:	6919      	ldr	r1, [r3, #16]
 8007fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007fd0:	4a80      	ldr	r2, [pc, #512]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007fec:	460b      	mov	r3, r1
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	d009      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ff2:	4b78      	ldr	r3, [pc, #480]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008000:	4a74      	ldr	r2, [pc, #464]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008002:	430b      	orrs	r3, r1
 8008004:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008012:	633b      	str	r3, [r7, #48]	; 0x30
 8008014:	2300      	movs	r3, #0
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
 8008018:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800801c:	460b      	mov	r3, r1
 800801e:	4313      	orrs	r3, r2
 8008020:	d00a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008022:	4b6c      	ldr	r3, [pc, #432]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008026:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800802a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800802e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008032:	4a68      	ldr	r2, [pc, #416]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008034:	430b      	orrs	r3, r1
 8008036:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	2100      	movs	r1, #0
 8008042:	62b9      	str	r1, [r7, #40]	; 0x28
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800804a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800804e:	460b      	mov	r3, r1
 8008050:	4313      	orrs	r3, r2
 8008052:	d011      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008058:	3308      	adds	r3, #8
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 f9a3 	bl	80093a8 <RCCEx_PLL2_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008074:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	2100      	movs	r1, #0
 8008082:	6239      	str	r1, [r7, #32]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
 800808a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800808e:	460b      	mov	r3, r1
 8008090:	4313      	orrs	r3, r2
 8008092:	d011      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008098:	3308      	adds	r3, #8
 800809a:	2101      	movs	r1, #1
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f983 	bl	80093a8 <RCCEx_PLL2_Config>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80080a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	2100      	movs	r1, #0
 80080c2:	61b9      	str	r1, [r7, #24]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	61fb      	str	r3, [r7, #28]
 80080ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080ce:	460b      	mov	r3, r1
 80080d0:	4313      	orrs	r3, r2
 80080d2:	d011      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080d8:	3308      	adds	r3, #8
 80080da:	2102      	movs	r1, #2
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 f963 	bl	80093a8 <RCCEx_PLL2_Config>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80080e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	2100      	movs	r1, #0
 8008102:	6139      	str	r1, [r7, #16]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	617b      	str	r3, [r7, #20]
 800810a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800810e:	460b      	mov	r3, r1
 8008110:	4313      	orrs	r3, r2
 8008112:	d011      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008118:	3328      	adds	r3, #40	; 0x28
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f001 f9f5 	bl	800950c <RCCEx_PLL3_Config>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8008128:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008134:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	2100      	movs	r1, #0
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800814e:	460b      	mov	r3, r1
 8008150:	4313      	orrs	r3, r2
 8008152:	d011      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008158:	3328      	adds	r3, #40	; 0x28
 800815a:	2101      	movs	r1, #1
 800815c:	4618      	mov	r0, r3
 800815e:	f001 f9d5 	bl	800950c <RCCEx_PLL3_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008168:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008170:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008174:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	2100      	movs	r1, #0
 8008182:	6039      	str	r1, [r7, #0]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800818e:	460b      	mov	r3, r1
 8008190:	4313      	orrs	r3, r2
 8008192:	d011      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008198:	3328      	adds	r3, #40	; 0x28
 800819a:	2102      	movs	r1, #2
 800819c:	4618      	mov	r0, r3
 800819e:	f001 f9b5 	bl	800950c <RCCEx_PLL3_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80081a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80081b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80081b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e000      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80081cc:	46bd      	mov	sp, r7
 80081ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081d2:	bf00      	nop
 80081d4:	58024400 	.word	0x58024400

080081d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b090      	sub	sp, #64	; 0x40
 80081dc:	af00      	add	r7, sp, #0
 80081de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80081ea:	430b      	orrs	r3, r1
 80081ec:	f040 8094 	bne.w	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80081f0:	4b97      	ldr	r3, [pc, #604]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	f200 8087 	bhi.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	0800821d 	.word	0x0800821d
 800820c:	08008245 	.word	0x08008245
 8008210:	0800826d 	.word	0x0800826d
 8008214:	08008309 	.word	0x08008309
 8008218:	08008295 	.word	0x08008295
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800821c:	4b8c      	ldr	r3, [pc, #560]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008228:	d108      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800822a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800822e:	4618      	mov	r0, r3
 8008230:	f000 ff68 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008238:	f000 bc97 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008240:	f000 bc93 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008244:	4b82      	ldr	r3, [pc, #520]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800824c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008250:	d108      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008252:	f107 0318 	add.w	r3, r7, #24
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fcac 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008260:	f000 bc83 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008268:	f000 bc7f 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800826c:	4b78      	ldr	r3, [pc, #480]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008278:	d108      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fdec 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008288:	f000 bc6f 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008290:	f000 bc6b 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008294:	4b6e      	ldr	r3, [pc, #440]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800829c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800829e:	4b6c      	ldr	r3, [pc, #432]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d10c      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082b0:	4b67      	ldr	r3, [pc, #412]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	08db      	lsrs	r3, r3, #3
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	4a66      	ldr	r2, [pc, #408]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c2:	e01f      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082c4:	4b62      	ldr	r3, [pc, #392]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d0:	d106      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082d8:	d102      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082da:	4b5f      	ldr	r3, [pc, #380]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082de:	e011      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082e0:	4b5b      	ldr	r3, [pc, #364]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ec:	d106      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f4:	d102      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082f6:	4b59      	ldr	r3, [pc, #356]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082fa:	e003      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008300:	f000 bc33 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008304:	f000 bc31 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008308:	4b55      	ldr	r3, [pc, #340]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830c:	f000 bc2d 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008314:	f000 bc29 	b.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008320:	430b      	orrs	r3, r1
 8008322:	f040 809f 	bne.w	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008326:	4b4a      	ldr	r3, [pc, #296]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800832e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008336:	d04d      	beq.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833e:	f200 8084 	bhi.w	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	2bc0      	cmp	r3, #192	; 0xc0
 8008346:	d07d      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	2bc0      	cmp	r3, #192	; 0xc0
 800834c:	d87d      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d02d      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	2b80      	cmp	r3, #128	; 0x80
 8008358:	d877      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	2b40      	cmp	r3, #64	; 0x40
 8008364:	d012      	beq.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008366:	e070      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008368:	4b39      	ldr	r3, [pc, #228]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008374:	d107      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fec2 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008384:	e3f1      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800838a:	e3ee      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800838c:	4b30      	ldr	r3, [pc, #192]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008398:	d107      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800839a:	f107 0318 	add.w	r3, r7, #24
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fc08 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a8:	e3df      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ae:	e3dc      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083b0:	4b27      	ldr	r3, [pc, #156]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083bc:	d107      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083be:	f107 030c 	add.w	r3, r7, #12
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fd4a 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083cc:	e3cd      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d2:	e3ca      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083de:	4b1c      	ldr	r3, [pc, #112]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d10c      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80083ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083f0:	4b17      	ldr	r3, [pc, #92]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	08db      	lsrs	r3, r3, #3
 80083f6:	f003 0303 	and.w	r3, r3, #3
 80083fa:	4a16      	ldr	r2, [pc, #88]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80083fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008402:	e01e      	b.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008404:	4b12      	ldr	r3, [pc, #72]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008410:	d106      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008418:	d102      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800841a:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800841e:	e010      	b.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800842c:	d106      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008434:	d102      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800843a:	e002      	b.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008440:	e393      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008442:	e392      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008448:	e38f      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844e:	e38c      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008450:	58024400 	.word	0x58024400
 8008454:	03d09000 	.word	0x03d09000
 8008458:	003d0900 	.word	0x003d0900
 800845c:	007a1200 	.word	0x007a1200
 8008460:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008468:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800846c:	430b      	orrs	r3, r1
 800846e:	f040 809c 	bne.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008472:	4b9e      	ldr	r3, [pc, #632]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008476:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800847a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008482:	d054      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800848a:	f200 808b 	bhi.w	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008494:	f000 8083 	beq.w	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800849e:	f200 8081 	bhi.w	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a8:	d02f      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b0:	d878      	bhi.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084be:	d012      	beq.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80084c0:	e070      	b.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084c2:	4b8a      	ldr	r3, [pc, #552]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ce:	d107      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fe15 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084de:	e344      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e4:	e341      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084e6:	4b81      	ldr	r3, [pc, #516]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f2:	d107      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f4:	f107 0318 	add.w	r3, r7, #24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fb5b 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008502:	e332      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008508:	e32f      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800850a:	4b78      	ldr	r3, [pc, #480]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008516:	d107      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008518:	f107 030c 	add.w	r3, r7, #12
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fc9d 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008526:	e320      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800852c:	e31d      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800852e:	4b6f      	ldr	r3, [pc, #444]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008536:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008538:	4b6c      	ldr	r3, [pc, #432]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b04      	cmp	r3, #4
 8008542:	d10c      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008546:	2b00      	cmp	r3, #0
 8008548:	d109      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800854a:	4b68      	ldr	r3, [pc, #416]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	08db      	lsrs	r3, r3, #3
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	4a66      	ldr	r2, [pc, #408]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008556:	fa22 f303 	lsr.w	r3, r2, r3
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855c:	e01e      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800855e:	4b63      	ldr	r3, [pc, #396]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800856a:	d106      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800856c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008572:	d102      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008574:	4b5f      	ldr	r3, [pc, #380]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008578:	e010      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800857a:	4b5c      	ldr	r3, [pc, #368]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008586:	d106      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800858e:	d102      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008590:	4b59      	ldr	r3, [pc, #356]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008594:	e002      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800859a:	e2e6      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800859c:	e2e5      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800859e:	4b57      	ldr	r3, [pc, #348]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a2:	e2e2      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a8:	e2df      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80085aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80085b2:	430b      	orrs	r3, r1
 80085b4:	f040 80a7 	bne.w	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80085b8:	4b4c      	ldr	r3, [pc, #304]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80085c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085c8:	d055      	beq.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d0:	f200 8096 	bhi.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085da:	f000 8084 	beq.w	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085e4:	f200 808c 	bhi.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ee:	d030      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f6:	f200 8083 	bhi.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008606:	d012      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008608:	e07a      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800860a:	4b38      	ldr	r3, [pc, #224]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008616:	d107      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fd71 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008626:	e2a0      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800862c:	e29d      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800862e:	4b2f      	ldr	r3, [pc, #188]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863a:	d107      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863c:	f107 0318 	add.w	r3, r7, #24
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fab7 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864a:	e28e      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008650:	e28b      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008652:	4b26      	ldr	r3, [pc, #152]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800865a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800865e:	d107      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008660:	f107 030c 	add.w	r3, r7, #12
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fbf9 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866e:	e27c      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008674:	e279      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008676:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800867e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008680:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b04      	cmp	r3, #4
 800868a:	d10c      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800868c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868e:	2b00      	cmp	r3, #0
 8008690:	d109      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008692:	4b16      	ldr	r3, [pc, #88]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	08db      	lsrs	r3, r3, #3
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	4a14      	ldr	r2, [pc, #80]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800869e:	fa22 f303 	lsr.w	r3, r2, r3
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a4:	e01e      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086a6:	4b11      	ldr	r3, [pc, #68]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b2:	d106      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ba:	d102      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086c0:	e010      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086c2:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ce:	d106      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d6:	d102      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086d8:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086dc:	e002      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086e2:	e242      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80086e4:	e241      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ea:	e23e      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80086ec:	58024400 	.word	0x58024400
 80086f0:	03d09000 	.word	0x03d09000
 80086f4:	003d0900 	.word	0x003d0900
 80086f8:	007a1200 	.word	0x007a1200
 80086fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008704:	e231      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800870e:	430b      	orrs	r3, r1
 8008710:	f040 8085 	bne.w	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008714:	4b9c      	ldr	r3, [pc, #624]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008718:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800871c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008724:	d06b      	beq.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800872c:	d874      	bhi.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008734:	d056      	beq.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800873c:	d86c      	bhi.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008744:	d03b      	beq.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800874c:	d864      	bhi.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008754:	d021      	beq.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800875c:	d85c      	bhi.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876a:	d004      	beq.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800876c:	e054      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800876e:	f7fe fb07 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8008772:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008774:	e1f9      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008776:	4b84      	ldr	r3, [pc, #528]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800877e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008782:	d107      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008784:	f107 0318 	add.w	r3, r7, #24
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fa13 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008792:	e1ea      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008798:	e1e7      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800879a:	4b7b      	ldr	r3, [pc, #492]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a6:	d107      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087a8:	f107 030c 	add.w	r3, r7, #12
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fb55 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b6:	e1d8      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087bc:	e1d5      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087be:	4b72      	ldr	r3, [pc, #456]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d109      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087ca:	4b6f      	ldr	r3, [pc, #444]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	08db      	lsrs	r3, r3, #3
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	4a6d      	ldr	r2, [pc, #436]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80087d6:	fa22 f303 	lsr.w	r3, r2, r3
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087dc:	e1c5      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e2:	e1c2      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087e4:	4b68      	ldr	r3, [pc, #416]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f0:	d102      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80087f2:	4b67      	ldr	r3, [pc, #412]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f6:	e1b8      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087fc:	e1b5      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087fe:	4b62      	ldr	r3, [pc, #392]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800880a:	d102      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800880c:	4b61      	ldr	r3, [pc, #388]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800880e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008810:	e1ab      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008816:	e1a8      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800881c:	e1a5      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800881e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008822:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008826:	430b      	orrs	r3, r1
 8008828:	d173      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800882a:	4b57      	ldr	r3, [pc, #348]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800882c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008832:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800883a:	d02f      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008842:	d863      	bhi.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	2b00      	cmp	r3, #0
 8008848:	d004      	beq.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008850:	d012      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008852:	e05b      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008854:	4b4c      	ldr	r3, [pc, #304]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800885c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008860:	d107      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008862:	f107 0318 	add.w	r3, r7, #24
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f9a4 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008870:	e17b      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008876:	e178      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008878:	4b43      	ldr	r3, [pc, #268]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008884:	d107      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008886:	f107 030c 	add.w	r3, r7, #12
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fae6 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008894:	e169      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800889a:	e166      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800889c:	4b3a      	ldr	r3, [pc, #232]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800889e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088a6:	4b38      	ldr	r3, [pc, #224]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d10c      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80088b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088b8:	4b33      	ldr	r3, [pc, #204]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	08db      	lsrs	r3, r3, #3
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	4a32      	ldr	r2, [pc, #200]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ca:	e01e      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088cc:	4b2e      	ldr	r3, [pc, #184]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d8:	d106      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80088da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088e0:	d102      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088e2:	4b2b      	ldr	r3, [pc, #172]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e6:	e010      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088e8:	4b27      	ldr	r3, [pc, #156]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f4:	d106      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088fc:	d102      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088fe:	4b25      	ldr	r3, [pc, #148]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008902:	e002      	b.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008908:	e12f      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800890a:	e12e      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008910:	e12b      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008916:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800891a:	430b      	orrs	r3, r1
 800891c:	d13c      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800891e:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008926:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008934:	d012      	beq.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008936:	e023      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008944:	d107      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fbda 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008954:	e109      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800895a:	e106      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008968:	d107      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800896a:	f107 0318 	add.w	r3, r7, #24
 800896e:	4618      	mov	r0, r3
 8008970:	f000 f920 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008978:	e0f7      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800897e:	e0f4      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008984:	e0f1      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008986:	bf00      	nop
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	003d0900 	.word	0x003d0900
 8008994:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800899c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80089a0:	430b      	orrs	r3, r1
 80089a2:	f040 8091 	bne.w	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80089a6:	4b73      	ldr	r3, [pc, #460]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80089ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089b6:	f000 8081 	beq.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089c0:	d87f      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089c8:	d06b      	beq.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089d0:	d877      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d8:	d056      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e0:	d86f      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089e8:	d03b      	beq.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089f0:	d867      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f8:	d021      	beq.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a00:	d85f      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d004      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a0e:	d004      	beq.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008a10:	e057      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a12:	f000 f8b9 	bl	8008b88 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a18:	e0a7      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a1a:	4b56      	ldr	r3, [pc, #344]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a26:	d107      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a28:	f107 0318 	add.w	r3, r7, #24
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f8c1 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a36:	e098      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a3c:	e095      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a3e:	4b4d      	ldr	r3, [pc, #308]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a4a:	d107      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a4c:	f107 030c 	add.w	r3, r7, #12
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fa03 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5a:	e086      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a60:	e083      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a62:	4b44      	ldr	r3, [pc, #272]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a6e:	4b41      	ldr	r3, [pc, #260]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	08db      	lsrs	r3, r3, #3
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	4a3f      	ldr	r2, [pc, #252]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a80:	e073      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a86:	e070      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a88:	4b3a      	ldr	r3, [pc, #232]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a94:	d102      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008a96:	4b39      	ldr	r3, [pc, #228]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a9a:	e066      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa0:	e063      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008aa2:	4b34      	ldr	r3, [pc, #208]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aae:	d102      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008ab0:	4b33      	ldr	r3, [pc, #204]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ab4:	e059      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aba:	e056      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008abc:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ac0:	e053      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ac6:	e050      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008acc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	d148      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ad4:	4b27      	ldr	r3, [pc, #156]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008adc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae4:	d02a      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aec:	d838      	bhi.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008afa:	d00d      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008afc:	e030      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008afe:	4b1d      	ldr	r3, [pc, #116]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b0a:	d102      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008b0c:	4b1c      	ldr	r3, [pc, #112]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b10:	e02b      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b16:	e028      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b18:	4b16      	ldr	r3, [pc, #88]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b24:	d107      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 faea 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b34:	e019      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b3a:	e016      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b48:	d107      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b4a:	f107 0318 	add.w	r3, r7, #24
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 f830 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b58:	e007      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b5e:	e004      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b64:	e001      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3740      	adds	r7, #64	; 0x40
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	58024400 	.word	0x58024400
 8008b78:	03d09000 	.word	0x03d09000
 8008b7c:	003d0900 	.word	0x003d0900
 8008b80:	007a1200 	.word	0x007a1200
 8008b84:	00bb8000 	.word	0x00bb8000

08008b88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008b8c:	f7fe f8c8 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8008b90:	4602      	mov	r2, r0
 8008b92:	4b06      	ldr	r3, [pc, #24]	; (8008bac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	091b      	lsrs	r3, r3, #4
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	4904      	ldr	r1, [pc, #16]	; (8008bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ba0:	f003 031f 	and.w	r3, r3, #31
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	58024400 	.word	0x58024400
 8008bb0:	08010ca8 	.word	0x08010ca8

08008bb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b089      	sub	sp, #36	; 0x24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bbc:	4ba1      	ldr	r3, [pc, #644]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008bc6:	4b9f      	ldr	r3, [pc, #636]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	0b1b      	lsrs	r3, r3, #12
 8008bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bd2:	4b9c      	ldr	r3, [pc, #624]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	091b      	lsrs	r3, r3, #4
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008bde:	4b99      	ldr	r3, [pc, #612]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be2:	08db      	lsrs	r3, r3, #3
 8008be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8111 	beq.w	8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	f000 8083 	beq.w	8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	f200 80a1 	bhi.w	8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d056      	beq.n	8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c1e:	e099      	b.n	8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c20:	4b88      	ldr	r3, [pc, #544]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0320 	and.w	r3, r3, #32
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d02d      	beq.n	8008c88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c2c:	4b85      	ldr	r3, [pc, #532]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	08db      	lsrs	r3, r3, #3
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	4a84      	ldr	r2, [pc, #528]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	ee07 3a90 	vmov	s15, r3
 8008c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	4b7b      	ldr	r3, [pc, #492]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c86:	e087      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9a:	4b6a      	ldr	r3, [pc, #424]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cca:	e065      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cde:	4b59      	ldr	r3, [pc, #356]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d0e:	e043      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d22:	4b48      	ldr	r3, [pc, #288]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d52:	e021      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d66:	4b37      	ldr	r3, [pc, #220]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008d98:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9c:	0a5b      	lsrs	r3, r3, #9
 8008d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dbe:	ee17 2a90 	vmov	r2, s15
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008dc6:	4b1f      	ldr	r3, [pc, #124]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dec:	ee17 2a90 	vmov	r2, s15
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008df4:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	0e1b      	lsrs	r3, r3, #24
 8008dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1a:	ee17 2a90 	vmov	r2, s15
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e22:	e008      	b.n	8008e36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	609a      	str	r2, [r3, #8]
}
 8008e36:	bf00      	nop
 8008e38:	3724      	adds	r7, #36	; 0x24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	58024400 	.word	0x58024400
 8008e48:	03d09000 	.word	0x03d09000
 8008e4c:	46000000 	.word	0x46000000
 8008e50:	4c742400 	.word	0x4c742400
 8008e54:	4a742400 	.word	0x4a742400
 8008e58:	4af42400 	.word	0x4af42400

08008e5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b089      	sub	sp, #36	; 0x24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e64:	4ba1      	ldr	r3, [pc, #644]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e6e:	4b9f      	ldr	r3, [pc, #636]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e72:	0d1b      	lsrs	r3, r3, #20
 8008e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e7a:	4b9c      	ldr	r3, [pc, #624]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	0a1b      	lsrs	r3, r3, #8
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008e86:	4b99      	ldr	r3, [pc, #612]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8a:	08db      	lsrs	r3, r3, #3
 8008e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	fb02 f303 	mul.w	r3, r2, r3
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8111 	beq.w	80090cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	f000 8083 	beq.w	8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	f200 80a1 	bhi.w	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d056      	beq.n	8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ec6:	e099      	b.n	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ec8:	4b88      	ldr	r3, [pc, #544]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d02d      	beq.n	8008f30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ed4:	4b85      	ldr	r3, [pc, #532]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	08db      	lsrs	r3, r3, #3
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	4a84      	ldr	r2, [pc, #528]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	ee07 3a90 	vmov	s15, r3
 8008eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efe:	4b7b      	ldr	r3, [pc, #492]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f12:	eddf 5a78 	vldr	s11, [pc, #480]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f2e:	e087      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f42:	4b6a      	ldr	r3, [pc, #424]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f56:	eddf 5a67 	vldr	s11, [pc, #412]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f72:	e065      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80090fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f86:	4b59      	ldr	r3, [pc, #356]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fb6:	e043      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fca:	4b48      	ldr	r3, [pc, #288]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fde:	eddf 5a45 	vldr	s11, [pc, #276]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ffa:	e021      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80090fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800900a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900e:	4b37      	ldr	r3, [pc, #220]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009022:	eddf 5a34 	vldr	s11, [pc, #208]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800903e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009040:	4b2a      	ldr	r3, [pc, #168]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	0a5b      	lsrs	r3, r3, #9
 8009046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800905a:	edd7 6a07 	vldr	s13, [r7, #28]
 800905e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009066:	ee17 2a90 	vmov	r2, s15
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800906e:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	0c1b      	lsrs	r3, r3, #16
 8009074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009084:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009088:	edd7 6a07 	vldr	s13, [r7, #28]
 800908c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009094:	ee17 2a90 	vmov	r2, s15
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800909c:	4b13      	ldr	r3, [pc, #76]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	0e1b      	lsrs	r3, r3, #24
 80090a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090c2:	ee17 2a90 	vmov	r2, s15
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090ca:	e008      	b.n	80090de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	609a      	str	r2, [r3, #8]
}
 80090de:	bf00      	nop
 80090e0:	3724      	adds	r7, #36	; 0x24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	58024400 	.word	0x58024400
 80090f0:	03d09000 	.word	0x03d09000
 80090f4:	46000000 	.word	0x46000000
 80090f8:	4c742400 	.word	0x4c742400
 80090fc:	4a742400 	.word	0x4a742400
 8009100:	4af42400 	.word	0x4af42400

08009104 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009104:	b480      	push	{r7}
 8009106:	b089      	sub	sp, #36	; 0x24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800910c:	4ba0      	ldr	r3, [pc, #640]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800910e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009110:	f003 0303 	and.w	r3, r3, #3
 8009114:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009116:	4b9e      	ldr	r3, [pc, #632]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	091b      	lsrs	r3, r3, #4
 800911c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009120:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009122:	4b9b      	ldr	r3, [pc, #620]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800912c:	4b98      	ldr	r3, [pc, #608]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009130:	08db      	lsrs	r3, r3, #3
 8009132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009144:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8111 	beq.w	8009372 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b02      	cmp	r3, #2
 8009154:	f000 8083 	beq.w	800925e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	2b02      	cmp	r3, #2
 800915c:	f200 80a1 	bhi.w	80092a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d056      	beq.n	800921a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800916c:	e099      	b.n	80092a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800916e:	4b88      	ldr	r3, [pc, #544]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d02d      	beq.n	80091d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800917a:	4b85      	ldr	r3, [pc, #532]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	4a83      	ldr	r2, [pc, #524]	; (8009394 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009186:	fa22 f303 	lsr.w	r3, r2, r3
 800918a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a4:	4b7a      	ldr	r3, [pc, #488]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ac:	ee07 3a90 	vmov	s15, r3
 80091b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80091b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091d4:	e087      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800939c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e8:	4b69      	ldr	r3, [pc, #420]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800920c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009218:	e065      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009224:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80093a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922c:	4b58      	ldr	r3, [pc, #352]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009234:	ee07 3a90 	vmov	s15, r3
 8009238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009240:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800925c:	e043      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800926c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009270:	4b47      	ldr	r3, [pc, #284]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009280:	ed97 6a03 	vldr	s12, [r7, #12]
 8009284:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092a0:	e021      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800939c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b4:	4b36      	ldr	r3, [pc, #216]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80092e6:	4b2a      	ldr	r3, [pc, #168]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	0a5b      	lsrs	r3, r3, #9
 80092ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009300:	edd7 6a07 	vldr	s13, [r7, #28]
 8009304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800930c:	ee17 2a90 	vmov	r2, s15
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009314:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	0c1b      	lsrs	r3, r3, #16
 800931a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800932a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800932e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800933a:	ee17 2a90 	vmov	r2, s15
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009342:	4b13      	ldr	r3, [pc, #76]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	0e1b      	lsrs	r3, r3, #24
 8009348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800935c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009368:	ee17 2a90 	vmov	r2, s15
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009370:	e008      	b.n	8009384 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
}
 8009384:	bf00      	nop
 8009386:	3724      	adds	r7, #36	; 0x24
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	58024400 	.word	0x58024400
 8009394:	03d09000 	.word	0x03d09000
 8009398:	46000000 	.word	0x46000000
 800939c:	4c742400 	.word	0x4c742400
 80093a0:	4a742400 	.word	0x4a742400
 80093a4:	4af42400 	.word	0x4af42400

080093a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093b6:	4b53      	ldr	r3, [pc, #332]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d101      	bne.n	80093c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e099      	b.n	80094fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093c6:	4b4f      	ldr	r3, [pc, #316]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a4e      	ldr	r2, [pc, #312]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093d2:	f7f8 fa21 	bl	8001818 <HAL_GetTick>
 80093d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093d8:	e008      	b.n	80093ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093da:	f7f8 fa1d 	bl	8001818 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e086      	b.n	80094fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093ec:	4b45      	ldr	r3, [pc, #276]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f0      	bne.n	80093da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093f8:	4b42      	ldr	r3, [pc, #264]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	031b      	lsls	r3, r3, #12
 8009406:	493f      	ldr	r1, [pc, #252]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009408:	4313      	orrs	r3, r2
 800940a:	628b      	str	r3, [r1, #40]	; 0x28
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	3b01      	subs	r3, #1
 8009412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	3b01      	subs	r3, #1
 800941c:	025b      	lsls	r3, r3, #9
 800941e:	b29b      	uxth	r3, r3
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	3b01      	subs	r3, #1
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800942e:	431a      	orrs	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	3b01      	subs	r3, #1
 8009436:	061b      	lsls	r3, r3, #24
 8009438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800943c:	4931      	ldr	r1, [pc, #196]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009442:	4b30      	ldr	r3, [pc, #192]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	492d      	ldr	r1, [pc, #180]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009450:	4313      	orrs	r3, r2
 8009452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009454:	4b2b      	ldr	r3, [pc, #172]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	f023 0220 	bic.w	r2, r3, #32
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	4928      	ldr	r1, [pc, #160]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009462:	4313      	orrs	r3, r2
 8009464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009466:	4b27      	ldr	r3, [pc, #156]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	4a26      	ldr	r2, [pc, #152]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800946c:	f023 0310 	bic.w	r3, r3, #16
 8009470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009472:	4b24      	ldr	r3, [pc, #144]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009476:	4b24      	ldr	r3, [pc, #144]	; (8009508 <RCCEx_PLL2_Config+0x160>)
 8009478:	4013      	ands	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	69d2      	ldr	r2, [r2, #28]
 800947e:	00d2      	lsls	r2, r2, #3
 8009480:	4920      	ldr	r1, [pc, #128]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009482:	4313      	orrs	r3, r2
 8009484:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009486:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948a:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800948c:	f043 0310 	orr.w	r3, r3, #16
 8009490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	4a19      	ldr	r2, [pc, #100]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800949e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094a4:	e00f      	b.n	80094c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d106      	bne.n	80094ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80094ac:	4b15      	ldr	r3, [pc, #84]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a14      	ldr	r2, [pc, #80]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094b8:	e005      	b.n	80094c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094ba:	4b12      	ldr	r3, [pc, #72]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094be:	4a11      	ldr	r2, [pc, #68]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a0e      	ldr	r2, [pc, #56]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d2:	f7f8 f9a1 	bl	8001818 <HAL_GetTick>
 80094d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094d8:	e008      	b.n	80094ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094da:	f7f8 f99d 	bl	8001818 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e006      	b.n	80094fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0f0      	beq.n	80094da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	58024400 	.word	0x58024400
 8009508:	ffff0007 	.word	0xffff0007

0800950c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800951a:	4b53      	ldr	r3, [pc, #332]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d101      	bne.n	800952a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e099      	b.n	800965e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800952a:	4b4f      	ldr	r3, [pc, #316]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a4e      	ldr	r2, [pc, #312]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009536:	f7f8 f96f 	bl	8001818 <HAL_GetTick>
 800953a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800953c:	e008      	b.n	8009550 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800953e:	f7f8 f96b 	bl	8001818 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d901      	bls.n	8009550 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e086      	b.n	800965e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009550:	4b45      	ldr	r3, [pc, #276]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1f0      	bne.n	800953e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800955c:	4b42      	ldr	r3, [pc, #264]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009560:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	051b      	lsls	r3, r3, #20
 800956a:	493f      	ldr	r1, [pc, #252]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800956c:	4313      	orrs	r3, r2
 800956e:	628b      	str	r3, [r1, #40]	; 0x28
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	3b01      	subs	r3, #1
 8009576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	3b01      	subs	r3, #1
 8009580:	025b      	lsls	r3, r3, #9
 8009582:	b29b      	uxth	r3, r3
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	3b01      	subs	r3, #1
 800958c:	041b      	lsls	r3, r3, #16
 800958e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	3b01      	subs	r3, #1
 800959a:	061b      	lsls	r3, r3, #24
 800959c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095a0:	4931      	ldr	r1, [pc, #196]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095a6:	4b30      	ldr	r3, [pc, #192]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	492d      	ldr	r1, [pc, #180]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095b8:	4b2b      	ldr	r3, [pc, #172]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	4928      	ldr	r1, [pc, #160]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095ca:	4b27      	ldr	r3, [pc, #156]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ce:	4a26      	ldr	r2, [pc, #152]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <RCCEx_PLL3_Config+0x160>)
 80095dc:	4013      	ands	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	69d2      	ldr	r2, [r2, #28]
 80095e2:	00d2      	lsls	r2, r2, #3
 80095e4:	4920      	ldr	r1, [pc, #128]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095ea:	4b1f      	ldr	r3, [pc, #124]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095fc:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	4a19      	ldr	r2, [pc, #100]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009608:	e00f      	b.n	800962a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d106      	bne.n	800961e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009610:	4b15      	ldr	r3, [pc, #84]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	4a14      	ldr	r2, [pc, #80]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800961a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800961c:	e005      	b.n	800962a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	4a11      	ldr	r2, [pc, #68]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800962a:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a0e      	ldr	r2, [pc, #56]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009636:	f7f8 f8ef 	bl	8001818 <HAL_GetTick>
 800963a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800963c:	e008      	b.n	8009650 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800963e:	f7f8 f8eb 	bl	8001818 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	2b02      	cmp	r3, #2
 800964a:	d901      	bls.n	8009650 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e006      	b.n	800965e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0f0      	beq.n	800963e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	58024400 	.word	0x58024400
 800966c:	ffff0007 	.word	0xffff0007

08009670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e049      	b.n	8009716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7f7 fe32 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3304      	adds	r3, #4
 80096ac:	4619      	mov	r1, r3
 80096ae:	4610      	mov	r0, r2
 80096b0:	f000 fd48 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b01      	cmp	r3, #1
 8009732:	d001      	beq.n	8009738 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e04c      	b.n	80097d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a26      	ldr	r2, [pc, #152]	; (80097e0 <HAL_TIM_Base_Start+0xc0>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d022      	beq.n	8009790 <HAL_TIM_Base_Start+0x70>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009752:	d01d      	beq.n	8009790 <HAL_TIM_Base_Start+0x70>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a22      	ldr	r2, [pc, #136]	; (80097e4 <HAL_TIM_Base_Start+0xc4>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d018      	beq.n	8009790 <HAL_TIM_Base_Start+0x70>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a21      	ldr	r2, [pc, #132]	; (80097e8 <HAL_TIM_Base_Start+0xc8>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d013      	beq.n	8009790 <HAL_TIM_Base_Start+0x70>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a1f      	ldr	r2, [pc, #124]	; (80097ec <HAL_TIM_Base_Start+0xcc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d00e      	beq.n	8009790 <HAL_TIM_Base_Start+0x70>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <HAL_TIM_Base_Start+0xd0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d009      	beq.n	8009790 <HAL_TIM_Base_Start+0x70>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a1c      	ldr	r2, [pc, #112]	; (80097f4 <HAL_TIM_Base_Start+0xd4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d004      	beq.n	8009790 <HAL_TIM_Base_Start+0x70>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a1b      	ldr	r2, [pc, #108]	; (80097f8 <HAL_TIM_Base_Start+0xd8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d115      	bne.n	80097bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689a      	ldr	r2, [r3, #8]
 8009796:	4b19      	ldr	r3, [pc, #100]	; (80097fc <HAL_TIM_Base_Start+0xdc>)
 8009798:	4013      	ands	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b06      	cmp	r3, #6
 80097a0:	d015      	beq.n	80097ce <HAL_TIM_Base_Start+0xae>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097a8:	d011      	beq.n	80097ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 0201 	orr.w	r2, r2, #1
 80097b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ba:	e008      	b.n	80097ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0201 	orr.w	r2, r2, #1
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	e000      	b.n	80097d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	40010000 	.word	0x40010000
 80097e4:	40000400 	.word	0x40000400
 80097e8:	40000800 	.word	0x40000800
 80097ec:	40000c00 	.word	0x40000c00
 80097f0:	40010400 	.word	0x40010400
 80097f4:	40001800 	.word	0x40001800
 80097f8:	40014000 	.word	0x40014000
 80097fc:	00010007 	.word	0x00010007

08009800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b01      	cmp	r3, #1
 8009812:	d001      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e054      	b.n	80098c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0201 	orr.w	r2, r2, #1
 800982e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a26      	ldr	r2, [pc, #152]	; (80098d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d022      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x80>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009842:	d01d      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x80>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a22      	ldr	r2, [pc, #136]	; (80098d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d018      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x80>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a21      	ldr	r2, [pc, #132]	; (80098d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d013      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x80>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a1f      	ldr	r2, [pc, #124]	; (80098dc <HAL_TIM_Base_Start_IT+0xdc>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00e      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x80>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a1e      	ldr	r2, [pc, #120]	; (80098e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d009      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x80>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1c      	ldr	r2, [pc, #112]	; (80098e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d004      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x80>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a1b      	ldr	r2, [pc, #108]	; (80098e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d115      	bne.n	80098ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	4b19      	ldr	r3, [pc, #100]	; (80098ec <HAL_TIM_Base_Start_IT+0xec>)
 8009888:	4013      	ands	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b06      	cmp	r3, #6
 8009890:	d015      	beq.n	80098be <HAL_TIM_Base_Start_IT+0xbe>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009898:	d011      	beq.n	80098be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f042 0201 	orr.w	r2, r2, #1
 80098a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098aa:	e008      	b.n	80098be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0201 	orr.w	r2, r2, #1
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	e000      	b.n	80098c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	40010000 	.word	0x40010000
 80098d4:	40000400 	.word	0x40000400
 80098d8:	40000800 	.word	0x40000800
 80098dc:	40000c00 	.word	0x40000c00
 80098e0:	40010400 	.word	0x40010400
 80098e4:	40001800 	.word	0x40001800
 80098e8:	40014000 	.word	0x40014000
 80098ec:	00010007 	.word	0x00010007

080098f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e049      	b.n	8009996 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d106      	bne.n	800991c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f841 	bl	800999e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f000 fc08 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
	...

080099b4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d109      	bne.n	80099d8 <HAL_TIM_OC_Start+0x24>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	bf14      	ite	ne
 80099d0:	2301      	movne	r3, #1
 80099d2:	2300      	moveq	r3, #0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	e03c      	b.n	8009a52 <HAL_TIM_OC_Start+0x9e>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2b04      	cmp	r3, #4
 80099dc:	d109      	bne.n	80099f2 <HAL_TIM_OC_Start+0x3e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	bf14      	ite	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	2300      	moveq	r3, #0
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	e02f      	b.n	8009a52 <HAL_TIM_OC_Start+0x9e>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d109      	bne.n	8009a0c <HAL_TIM_OC_Start+0x58>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	bf14      	ite	ne
 8009a04:	2301      	movne	r3, #1
 8009a06:	2300      	moveq	r3, #0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e022      	b.n	8009a52 <HAL_TIM_OC_Start+0x9e>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b0c      	cmp	r3, #12
 8009a10:	d109      	bne.n	8009a26 <HAL_TIM_OC_Start+0x72>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	bf14      	ite	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	2300      	moveq	r3, #0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	e015      	b.n	8009a52 <HAL_TIM_OC_Start+0x9e>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d109      	bne.n	8009a40 <HAL_TIM_OC_Start+0x8c>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e008      	b.n	8009a52 <HAL_TIM_OC_Start+0x9e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e0a1      	b.n	8009b9e <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_OC_Start+0xb6>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a68:	e023      	b.n	8009ab2 <HAL_TIM_OC_Start+0xfe>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	d104      	bne.n	8009a7a <HAL_TIM_OC_Start+0xc6>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a78:	e01b      	b.n	8009ab2 <HAL_TIM_OC_Start+0xfe>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b08      	cmp	r3, #8
 8009a7e:	d104      	bne.n	8009a8a <HAL_TIM_OC_Start+0xd6>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a88:	e013      	b.n	8009ab2 <HAL_TIM_OC_Start+0xfe>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b0c      	cmp	r3, #12
 8009a8e:	d104      	bne.n	8009a9a <HAL_TIM_OC_Start+0xe6>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a98:	e00b      	b.n	8009ab2 <HAL_TIM_OC_Start+0xfe>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b10      	cmp	r3, #16
 8009a9e:	d104      	bne.n	8009aaa <HAL_TIM_OC_Start+0xf6>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa8:	e003      	b.n	8009ab2 <HAL_TIM_OC_Start+0xfe>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2202      	movs	r2, #2
 8009aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 ff50 	bl	800a960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a38      	ldr	r2, [pc, #224]	; (8009ba8 <HAL_TIM_OC_Start+0x1f4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d013      	beq.n	8009af2 <HAL_TIM_OC_Start+0x13e>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a37      	ldr	r2, [pc, #220]	; (8009bac <HAL_TIM_OC_Start+0x1f8>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d00e      	beq.n	8009af2 <HAL_TIM_OC_Start+0x13e>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a35      	ldr	r2, [pc, #212]	; (8009bb0 <HAL_TIM_OC_Start+0x1fc>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d009      	beq.n	8009af2 <HAL_TIM_OC_Start+0x13e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a34      	ldr	r2, [pc, #208]	; (8009bb4 <HAL_TIM_OC_Start+0x200>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d004      	beq.n	8009af2 <HAL_TIM_OC_Start+0x13e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a32      	ldr	r2, [pc, #200]	; (8009bb8 <HAL_TIM_OC_Start+0x204>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d101      	bne.n	8009af6 <HAL_TIM_OC_Start+0x142>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e000      	b.n	8009af8 <HAL_TIM_OC_Start+0x144>
 8009af6:	2300      	movs	r3, #0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a25      	ldr	r2, [pc, #148]	; (8009ba8 <HAL_TIM_OC_Start+0x1f4>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d022      	beq.n	8009b5c <HAL_TIM_OC_Start+0x1a8>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1e:	d01d      	beq.n	8009b5c <HAL_TIM_OC_Start+0x1a8>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a25      	ldr	r2, [pc, #148]	; (8009bbc <HAL_TIM_OC_Start+0x208>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d018      	beq.n	8009b5c <HAL_TIM_OC_Start+0x1a8>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a24      	ldr	r2, [pc, #144]	; (8009bc0 <HAL_TIM_OC_Start+0x20c>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d013      	beq.n	8009b5c <HAL_TIM_OC_Start+0x1a8>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a22      	ldr	r2, [pc, #136]	; (8009bc4 <HAL_TIM_OC_Start+0x210>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d00e      	beq.n	8009b5c <HAL_TIM_OC_Start+0x1a8>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a1a      	ldr	r2, [pc, #104]	; (8009bac <HAL_TIM_OC_Start+0x1f8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d009      	beq.n	8009b5c <HAL_TIM_OC_Start+0x1a8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1e      	ldr	r2, [pc, #120]	; (8009bc8 <HAL_TIM_OC_Start+0x214>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d004      	beq.n	8009b5c <HAL_TIM_OC_Start+0x1a8>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a16      	ldr	r2, [pc, #88]	; (8009bb0 <HAL_TIM_OC_Start+0x1fc>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d115      	bne.n	8009b88 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	4b1a      	ldr	r3, [pc, #104]	; (8009bcc <HAL_TIM_OC_Start+0x218>)
 8009b64:	4013      	ands	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b06      	cmp	r3, #6
 8009b6c:	d015      	beq.n	8009b9a <HAL_TIM_OC_Start+0x1e6>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b74:	d011      	beq.n	8009b9a <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 0201 	orr.w	r2, r2, #1
 8009b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b86:	e008      	b.n	8009b9a <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	e000      	b.n	8009b9c <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40010000 	.word	0x40010000
 8009bac:	40010400 	.word	0x40010400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40014400 	.word	0x40014400
 8009bb8:	40014800 	.word	0x40014800
 8009bbc:	40000400 	.word	0x40000400
 8009bc0:	40000800 	.word	0x40000800
 8009bc4:	40000c00 	.word	0x40000c00
 8009bc8:	40001800 	.word	0x40001800
 8009bcc:	00010007 	.word	0x00010007

08009bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d122      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d11b      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f06f 0202 	mvn.w	r2, #2
 8009bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	f003 0303 	and.w	r3, r3, #3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fa78 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009c18:	e005      	b.n	8009c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fa6a 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa7b 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b04      	cmp	r3, #4
 8009c38:	d122      	bne.n	8009c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	d11b      	bne.n	8009c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f06f 0204 	mvn.w	r2, #4
 8009c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2202      	movs	r2, #2
 8009c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa4e 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009c6c:	e005      	b.n	8009c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fa40 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fa51 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	f003 0308 	and.w	r3, r3, #8
 8009c8a:	2b08      	cmp	r3, #8
 8009c8c:	d122      	bne.n	8009cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	f003 0308 	and.w	r3, r3, #8
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d11b      	bne.n	8009cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f06f 0208 	mvn.w	r2, #8
 8009ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2204      	movs	r2, #4
 8009caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa24 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009cc0:	e005      	b.n	8009cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa16 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fa27 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	f003 0310 	and.w	r3, r3, #16
 8009cde:	2b10      	cmp	r3, #16
 8009ce0:	d122      	bne.n	8009d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f003 0310 	and.w	r3, r3, #16
 8009cec:	2b10      	cmp	r3, #16
 8009cee:	d11b      	bne.n	8009d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f06f 0210 	mvn.w	r2, #16
 8009cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9fa 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009d14:	e005      	b.n	8009d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f9ec 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f9fd 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d10e      	bne.n	8009d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d107      	bne.n	8009d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f06f 0201 	mvn.w	r2, #1
 8009d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7f7 f9fe 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5e:	2b80      	cmp	r3, #128	; 0x80
 8009d60:	d10e      	bne.n	8009d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6c:	2b80      	cmp	r3, #128	; 0x80
 8009d6e:	d107      	bne.n	8009d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 ff4e 	bl	800ac1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d8e:	d10e      	bne.n	8009dae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9a:	2b80      	cmp	r3, #128	; 0x80
 8009d9c:	d107      	bne.n	8009dae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 ff41 	bl	800ac30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db8:	2b40      	cmp	r3, #64	; 0x40
 8009dba:	d10e      	bne.n	8009dda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc6:	2b40      	cmp	r3, #64	; 0x40
 8009dc8:	d107      	bne.n	8009dda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f9ab 	bl	800a130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f003 0320 	and.w	r3, r3, #32
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	d10e      	bne.n	8009e06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f003 0320 	and.w	r3, r3, #32
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d107      	bne.n	8009e06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f06f 0220 	mvn.w	r2, #32
 8009dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 ff01 	bl	800ac08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e06:	bf00      	nop
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d101      	bne.n	8009e2e <HAL_TIM_OC_ConfigChannel+0x1e>
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e066      	b.n	8009efc <HAL_TIM_OC_ConfigChannel+0xec>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b14      	cmp	r3, #20
 8009e3a:	d857      	bhi.n	8009eec <HAL_TIM_OC_ConfigChannel+0xdc>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e99 	.word	0x08009e99
 8009e48:	08009eed 	.word	0x08009eed
 8009e4c:	08009eed 	.word	0x08009eed
 8009e50:	08009eed 	.word	0x08009eed
 8009e54:	08009ea7 	.word	0x08009ea7
 8009e58:	08009eed 	.word	0x08009eed
 8009e5c:	08009eed 	.word	0x08009eed
 8009e60:	08009eed 	.word	0x08009eed
 8009e64:	08009eb5 	.word	0x08009eb5
 8009e68:	08009eed 	.word	0x08009eed
 8009e6c:	08009eed 	.word	0x08009eed
 8009e70:	08009eed 	.word	0x08009eed
 8009e74:	08009ec3 	.word	0x08009ec3
 8009e78:	08009eed 	.word	0x08009eed
 8009e7c:	08009eed 	.word	0x08009eed
 8009e80:	08009eed 	.word	0x08009eed
 8009e84:	08009ed1 	.word	0x08009ed1
 8009e88:	08009eed 	.word	0x08009eed
 8009e8c:	08009eed 	.word	0x08009eed
 8009e90:	08009eed 	.word	0x08009eed
 8009e94:	08009edf 	.word	0x08009edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 f9ea 	bl	800a278 <TIM_OC1_SetConfig>
      break;
 8009ea4:	e025      	b.n	8009ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fa73 	bl	800a398 <TIM_OC2_SetConfig>
      break;
 8009eb2:	e01e      	b.n	8009ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 faf6 	bl	800a4ac <TIM_OC3_SetConfig>
      break;
 8009ec0:	e017      	b.n	8009ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fb77 	bl	800a5bc <TIM_OC4_SetConfig>
      break;
 8009ece:	e010      	b.n	8009ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fbda 	bl	800a690 <TIM_OC5_SetConfig>
      break;
 8009edc:	e009      	b.n	8009ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fc37 	bl	800a758 <TIM_OC6_SetConfig>
      break;
 8009eea:	e002      	b.n	8009ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_TIM_ConfigClockSource+0x1c>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e0dc      	b.n	800a0da <HAL_TIM_ConfigClockSource+0x1d6>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	4b6a      	ldr	r3, [pc, #424]	; (800a0e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a64      	ldr	r2, [pc, #400]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	f000 80a9 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009f5c:	4a62      	ldr	r2, [pc, #392]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	f200 80ae 	bhi.w	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f64:	4a61      	ldr	r2, [pc, #388]	; (800a0ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	f000 80a1 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009f6c:	4a5f      	ldr	r2, [pc, #380]	; (800a0ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	f200 80a6 	bhi.w	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f74:	4a5e      	ldr	r2, [pc, #376]	; (800a0f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	f000 8099 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009f7c:	4a5c      	ldr	r2, [pc, #368]	; (800a0f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	f200 809e 	bhi.w	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f88:	f000 8091 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009f8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f90:	f200 8096 	bhi.w	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f98:	f000 8089 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fa0:	f200 808e 	bhi.w	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fa8:	d03e      	beq.n	800a028 <HAL_TIM_ConfigClockSource+0x124>
 8009faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fae:	f200 8087 	bhi.w	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb6:	f000 8086 	beq.w	800a0c6 <HAL_TIM_ConfigClockSource+0x1c2>
 8009fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fbe:	d87f      	bhi.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc0:	2b70      	cmp	r3, #112	; 0x70
 8009fc2:	d01a      	beq.n	8009ffa <HAL_TIM_ConfigClockSource+0xf6>
 8009fc4:	2b70      	cmp	r3, #112	; 0x70
 8009fc6:	d87b      	bhi.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc8:	2b60      	cmp	r3, #96	; 0x60
 8009fca:	d050      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x16a>
 8009fcc:	2b60      	cmp	r3, #96	; 0x60
 8009fce:	d877      	bhi.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd0:	2b50      	cmp	r3, #80	; 0x50
 8009fd2:	d03c      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x14a>
 8009fd4:	2b50      	cmp	r3, #80	; 0x50
 8009fd6:	d873      	bhi.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd8:	2b40      	cmp	r3, #64	; 0x40
 8009fda:	d058      	beq.n	800a08e <HAL_TIM_ConfigClockSource+0x18a>
 8009fdc:	2b40      	cmp	r3, #64	; 0x40
 8009fde:	d86f      	bhi.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe0:	2b30      	cmp	r3, #48	; 0x30
 8009fe2:	d064      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009fe4:	2b30      	cmp	r3, #48	; 0x30
 8009fe6:	d86b      	bhi.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d060      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	d867      	bhi.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d05c      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff4:	2b10      	cmp	r3, #16
 8009ff6:	d05a      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff8:	e062      	b.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	6899      	ldr	r1, [r3, #8]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	f000 fc89 	bl	800a920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a01c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	609a      	str	r2, [r3, #8]
      break;
 800a026:	e04f      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	6899      	ldr	r1, [r3, #8]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	f000 fc72 	bl	800a920 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a04a:	609a      	str	r2, [r3, #8]
      break;
 800a04c:	e03c      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	6859      	ldr	r1, [r3, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f000 fbe2 	bl	800a824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2150      	movs	r1, #80	; 0x50
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fc3c 	bl	800a8e4 <TIM_ITRx_SetConfig>
      break;
 800a06c:	e02c      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6859      	ldr	r1, [r3, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	461a      	mov	r2, r3
 800a07c:	f000 fc01 	bl	800a882 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2160      	movs	r1, #96	; 0x60
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fc2c 	bl	800a8e4 <TIM_ITRx_SetConfig>
      break;
 800a08c:	e01c      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6818      	ldr	r0, [r3, #0]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	6859      	ldr	r1, [r3, #4]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f000 fbc2 	bl	800a824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2140      	movs	r1, #64	; 0x40
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fc1c 	bl	800a8e4 <TIM_ITRx_SetConfig>
      break;
 800a0ac:	e00c      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f000 fc13 	bl	800a8e4 <TIM_ITRx_SetConfig>
      break;
 800a0be:	e003      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c4:	e000      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a0c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	ffceff88 	.word	0xffceff88
 800a0e8:	00100040 	.word	0x00100040
 800a0ec:	00100030 	.word	0x00100030
 800a0f0:	00100020 	.word	0x00100020

0800a0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a40      	ldr	r2, [pc, #256]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d013      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a162:	d00f      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a3d      	ldr	r2, [pc, #244]	; (800a25c <TIM_Base_SetConfig+0x118>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00b      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a3c      	ldr	r2, [pc, #240]	; (800a260 <TIM_Base_SetConfig+0x11c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a3b      	ldr	r2, [pc, #236]	; (800a264 <TIM_Base_SetConfig+0x120>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a3a      	ldr	r2, [pc, #232]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d108      	bne.n	800a196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d01f      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a4:	d01b      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2c      	ldr	r2, [pc, #176]	; (800a25c <TIM_Base_SetConfig+0x118>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d017      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2b      	ldr	r2, [pc, #172]	; (800a260 <TIM_Base_SetConfig+0x11c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d013      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2a      	ldr	r2, [pc, #168]	; (800a264 <TIM_Base_SetConfig+0x120>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d00f      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a29      	ldr	r2, [pc, #164]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00b      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a28      	ldr	r2, [pc, #160]	; (800a26c <TIM_Base_SetConfig+0x128>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d007      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a27      	ldr	r2, [pc, #156]	; (800a270 <TIM_Base_SetConfig+0x12c>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d003      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a26      	ldr	r2, [pc, #152]	; (800a274 <TIM_Base_SetConfig+0x130>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d108      	bne.n	800a1f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a10      	ldr	r2, [pc, #64]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00f      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a12      	ldr	r2, [pc, #72]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00b      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a11      	ldr	r2, [pc, #68]	; (800a26c <TIM_Base_SetConfig+0x128>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d007      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a10      	ldr	r2, [pc, #64]	; (800a270 <TIM_Base_SetConfig+0x12c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d003      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a0f      	ldr	r2, [pc, #60]	; (800a274 <TIM_Base_SetConfig+0x130>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d103      	bne.n	800a244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	615a      	str	r2, [r3, #20]
}
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40010400 	.word	0x40010400
 800a26c:	40014000 	.word	0x40014000
 800a270:	40014400 	.word	0x40014400
 800a274:	40014800 	.word	0x40014800

0800a278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	f023 0201 	bic.w	r2, r3, #1
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4b37      	ldr	r3, [pc, #220]	; (800a380 <TIM_OC1_SetConfig+0x108>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f023 0302 	bic.w	r3, r3, #2
 800a2c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a2d      	ldr	r2, [pc, #180]	; (800a384 <TIM_OC1_SetConfig+0x10c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00f      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a2c      	ldr	r2, [pc, #176]	; (800a388 <TIM_OC1_SetConfig+0x110>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d00b      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a2b      	ldr	r2, [pc, #172]	; (800a38c <TIM_OC1_SetConfig+0x114>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d007      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a2a      	ldr	r2, [pc, #168]	; (800a390 <TIM_OC1_SetConfig+0x118>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d003      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a29      	ldr	r2, [pc, #164]	; (800a394 <TIM_OC1_SetConfig+0x11c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d10c      	bne.n	800a30e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f023 0308 	bic.w	r3, r3, #8
 800a2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f023 0304 	bic.w	r3, r3, #4
 800a30c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a1c      	ldr	r2, [pc, #112]	; (800a384 <TIM_OC1_SetConfig+0x10c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00f      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a1b      	ldr	r2, [pc, #108]	; (800a388 <TIM_OC1_SetConfig+0x110>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00b      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a1a      	ldr	r2, [pc, #104]	; (800a38c <TIM_OC1_SetConfig+0x114>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d007      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a19      	ldr	r2, [pc, #100]	; (800a390 <TIM_OC1_SetConfig+0x118>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d003      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a18      	ldr	r2, [pc, #96]	; (800a394 <TIM_OC1_SetConfig+0x11c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d111      	bne.n	800a35a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a33c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	621a      	str	r2, [r3, #32]
}
 800a374:	bf00      	nop
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	fffeff8f 	.word	0xfffeff8f
 800a384:	40010000 	.word	0x40010000
 800a388:	40010400 	.word	0x40010400
 800a38c:	40014000 	.word	0x40014000
 800a390:	40014400 	.word	0x40014400
 800a394:	40014800 	.word	0x40014800

0800a398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	f023 0210 	bic.w	r2, r3, #16
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4b34      	ldr	r3, [pc, #208]	; (800a494 <TIM_OC2_SetConfig+0xfc>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	021b      	lsls	r3, r3, #8
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f023 0320 	bic.w	r3, r3, #32
 800a3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a29      	ldr	r2, [pc, #164]	; (800a498 <TIM_OC2_SetConfig+0x100>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d003      	beq.n	800a400 <TIM_OC2_SetConfig+0x68>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a28      	ldr	r2, [pc, #160]	; (800a49c <TIM_OC2_SetConfig+0x104>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10d      	bne.n	800a41c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	011b      	lsls	r3, r3, #4
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4313      	orrs	r3, r2
 800a412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a41a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a1e      	ldr	r2, [pc, #120]	; (800a498 <TIM_OC2_SetConfig+0x100>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00f      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a1d      	ldr	r2, [pc, #116]	; (800a49c <TIM_OC2_SetConfig+0x104>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d00b      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a1c      	ldr	r2, [pc, #112]	; (800a4a0 <TIM_OC2_SetConfig+0x108>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d007      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <TIM_OC2_SetConfig+0x10c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d003      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a1a      	ldr	r2, [pc, #104]	; (800a4a8 <TIM_OC2_SetConfig+0x110>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d113      	bne.n	800a46c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a44a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	4313      	orrs	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	621a      	str	r2, [r3, #32]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	feff8fff 	.word	0xfeff8fff
 800a498:	40010000 	.word	0x40010000
 800a49c:	40010400 	.word	0x40010400
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	40014400 	.word	0x40014400
 800a4a8:	40014800 	.word	0x40014800

0800a4ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	4b33      	ldr	r3, [pc, #204]	; (800a5a4 <TIM_OC3_SetConfig+0xf8>)
 800a4d8:	4013      	ands	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 0303 	bic.w	r3, r3, #3
 800a4e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a28      	ldr	r2, [pc, #160]	; (800a5a8 <TIM_OC3_SetConfig+0xfc>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d003      	beq.n	800a512 <TIM_OC3_SetConfig+0x66>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a27      	ldr	r2, [pc, #156]	; (800a5ac <TIM_OC3_SetConfig+0x100>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d10d      	bne.n	800a52e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	4313      	orrs	r3, r2
 800a524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a1d      	ldr	r2, [pc, #116]	; (800a5a8 <TIM_OC3_SetConfig+0xfc>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d00f      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a1c      	ldr	r2, [pc, #112]	; (800a5ac <TIM_OC3_SetConfig+0x100>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d00b      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a1b      	ldr	r2, [pc, #108]	; (800a5b0 <TIM_OC3_SetConfig+0x104>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d007      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a1a      	ldr	r2, [pc, #104]	; (800a5b4 <TIM_OC3_SetConfig+0x108>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d003      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a19      	ldr	r2, [pc, #100]	; (800a5b8 <TIM_OC3_SetConfig+0x10c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d113      	bne.n	800a57e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a55c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	011b      	lsls	r3, r3, #4
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4313      	orrs	r3, r2
 800a570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	011b      	lsls	r3, r3, #4
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	621a      	str	r2, [r3, #32]
}
 800a598:	bf00      	nop
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	fffeff8f 	.word	0xfffeff8f
 800a5a8:	40010000 	.word	0x40010000
 800a5ac:	40010400 	.word	0x40010400
 800a5b0:	40014000 	.word	0x40014000
 800a5b4:	40014400 	.word	0x40014400
 800a5b8:	40014800 	.word	0x40014800

0800a5bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4b24      	ldr	r3, [pc, #144]	; (800a678 <TIM_OC4_SetConfig+0xbc>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	031b      	lsls	r3, r3, #12
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	4313      	orrs	r3, r2
 800a612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a19      	ldr	r2, [pc, #100]	; (800a67c <TIM_OC4_SetConfig+0xc0>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00f      	beq.n	800a63c <TIM_OC4_SetConfig+0x80>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a18      	ldr	r2, [pc, #96]	; (800a680 <TIM_OC4_SetConfig+0xc4>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d00b      	beq.n	800a63c <TIM_OC4_SetConfig+0x80>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a17      	ldr	r2, [pc, #92]	; (800a684 <TIM_OC4_SetConfig+0xc8>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d007      	beq.n	800a63c <TIM_OC4_SetConfig+0x80>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a16      	ldr	r2, [pc, #88]	; (800a688 <TIM_OC4_SetConfig+0xcc>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d003      	beq.n	800a63c <TIM_OC4_SetConfig+0x80>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a15      	ldr	r2, [pc, #84]	; (800a68c <TIM_OC4_SetConfig+0xd0>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d109      	bne.n	800a650 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	019b      	lsls	r3, r3, #6
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	621a      	str	r2, [r3, #32]
}
 800a66a:	bf00      	nop
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	feff8fff 	.word	0xfeff8fff
 800a67c:	40010000 	.word	0x40010000
 800a680:	40010400 	.word	0x40010400
 800a684:	40014000 	.word	0x40014000
 800a688:	40014400 	.word	0x40014400
 800a68c:	40014800 	.word	0x40014800

0800a690 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4b21      	ldr	r3, [pc, #132]	; (800a740 <TIM_OC5_SetConfig+0xb0>)
 800a6bc:	4013      	ands	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	041b      	lsls	r3, r3, #16
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a18      	ldr	r2, [pc, #96]	; (800a744 <TIM_OC5_SetConfig+0xb4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00f      	beq.n	800a706 <TIM_OC5_SetConfig+0x76>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a17      	ldr	r2, [pc, #92]	; (800a748 <TIM_OC5_SetConfig+0xb8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00b      	beq.n	800a706 <TIM_OC5_SetConfig+0x76>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a16      	ldr	r2, [pc, #88]	; (800a74c <TIM_OC5_SetConfig+0xbc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d007      	beq.n	800a706 <TIM_OC5_SetConfig+0x76>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a15      	ldr	r2, [pc, #84]	; (800a750 <TIM_OC5_SetConfig+0xc0>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d003      	beq.n	800a706 <TIM_OC5_SetConfig+0x76>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a14      	ldr	r2, [pc, #80]	; (800a754 <TIM_OC5_SetConfig+0xc4>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d109      	bne.n	800a71a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a70c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	021b      	lsls	r3, r3, #8
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	4313      	orrs	r3, r2
 800a718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	621a      	str	r2, [r3, #32]
}
 800a734:	bf00      	nop
 800a736:	371c      	adds	r7, #28
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	fffeff8f 	.word	0xfffeff8f
 800a744:	40010000 	.word	0x40010000
 800a748:	40010400 	.word	0x40010400
 800a74c:	40014000 	.word	0x40014000
 800a750:	40014400 	.word	0x40014400
 800a754:	40014800 	.word	0x40014800

0800a758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a758:	b480      	push	{r7}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4b22      	ldr	r3, [pc, #136]	; (800a80c <TIM_OC6_SetConfig+0xb4>)
 800a784:	4013      	ands	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	021b      	lsls	r3, r3, #8
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	4313      	orrs	r3, r2
 800a792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a79a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	051b      	lsls	r3, r3, #20
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a19      	ldr	r2, [pc, #100]	; (800a810 <TIM_OC6_SetConfig+0xb8>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d00f      	beq.n	800a7d0 <TIM_OC6_SetConfig+0x78>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a18      	ldr	r2, [pc, #96]	; (800a814 <TIM_OC6_SetConfig+0xbc>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d00b      	beq.n	800a7d0 <TIM_OC6_SetConfig+0x78>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a17      	ldr	r2, [pc, #92]	; (800a818 <TIM_OC6_SetConfig+0xc0>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d007      	beq.n	800a7d0 <TIM_OC6_SetConfig+0x78>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a16      	ldr	r2, [pc, #88]	; (800a81c <TIM_OC6_SetConfig+0xc4>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d003      	beq.n	800a7d0 <TIM_OC6_SetConfig+0x78>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a15      	ldr	r2, [pc, #84]	; (800a820 <TIM_OC6_SetConfig+0xc8>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d109      	bne.n	800a7e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	029b      	lsls	r3, r3, #10
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	621a      	str	r2, [r3, #32]
}
 800a7fe:	bf00      	nop
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	feff8fff 	.word	0xfeff8fff
 800a810:	40010000 	.word	0x40010000
 800a814:	40010400 	.word	0x40010400
 800a818:	40014000 	.word	0x40014000
 800a81c:	40014400 	.word	0x40014400
 800a820:	40014800 	.word	0x40014800

0800a824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	f023 0201 	bic.w	r2, r3, #1
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a84e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	011b      	lsls	r3, r3, #4
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4313      	orrs	r3, r2
 800a858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f023 030a 	bic.w	r3, r3, #10
 800a860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4313      	orrs	r3, r2
 800a868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	621a      	str	r2, [r3, #32]
}
 800a876:	bf00      	nop
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a882:	b480      	push	{r7}
 800a884:	b087      	sub	sp, #28
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	60b9      	str	r1, [r7, #8]
 800a88c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	f023 0210 	bic.w	r2, r3, #16
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	031b      	lsls	r3, r3, #12
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	621a      	str	r2, [r3, #32]
}
 800a8d6:	bf00      	nop
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
	...

0800a8e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4b09      	ldr	r3, [pc, #36]	; (800a91c <TIM_ITRx_SetConfig+0x38>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4313      	orrs	r3, r2
 800a902:	f043 0307 	orr.w	r3, r3, #7
 800a906:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	609a      	str	r2, [r3, #8]
}
 800a90e:	bf00      	nop
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	ffcfff8f 	.word	0xffcfff8f

0800a920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a93a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	021a      	lsls	r2, r3, #8
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	431a      	orrs	r2, r3
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	4313      	orrs	r3, r2
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	609a      	str	r2, [r3, #8]
}
 800a954:	bf00      	nop
 800a956:	371c      	adds	r7, #28
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a960:	b480      	push	{r7}
 800a962:	b087      	sub	sp, #28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f003 031f 	and.w	r3, r3, #31
 800a972:	2201      	movs	r2, #1
 800a974:	fa02 f303 	lsl.w	r3, r2, r3
 800a978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a1a      	ldr	r2, [r3, #32]
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	43db      	mvns	r3, r3
 800a982:	401a      	ands	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6a1a      	ldr	r2, [r3, #32]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f003 031f 	and.w	r3, r3, #31
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	fa01 f303 	lsl.w	r3, r1, r3
 800a998:	431a      	orrs	r2, r3
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	621a      	str	r2, [r3, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
	...

0800a9ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d101      	bne.n	800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e06d      	b.n	800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a30      	ldr	r2, [pc, #192]	; (800aaac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d004      	beq.n	800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a2f      	ldr	r2, [pc, #188]	; (800aab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d108      	bne.n	800aa0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a20      	ldr	r2, [pc, #128]	; (800aaac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d022      	beq.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa36:	d01d      	beq.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1d      	ldr	r2, [pc, #116]	; (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d018      	beq.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1c      	ldr	r2, [pc, #112]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d013      	beq.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1a      	ldr	r2, [pc, #104]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00e      	beq.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a15      	ldr	r2, [pc, #84]	; (800aab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d009      	beq.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a16      	ldr	r2, [pc, #88]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d004      	beq.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a15      	ldr	r2, [pc, #84]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d10c      	bne.n	800aa8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	40010000 	.word	0x40010000
 800aab0:	40010400 	.word	0x40010400
 800aab4:	40000400 	.word	0x40000400
 800aab8:	40000800 	.word	0x40000800
 800aabc:	40000c00 	.word	0x40000c00
 800aac0:	40001800 	.word	0x40001800
 800aac4:	40014000 	.word	0x40014000

0800aac8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d101      	bne.n	800aae4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aae0:	2302      	movs	r3, #2
 800aae2:	e087      	b.n	800abf4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	041b      	lsls	r3, r3, #16
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a27      	ldr	r2, [pc, #156]	; (800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d004      	beq.n	800ab72 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a25      	ldr	r2, [pc, #148]	; (800ac04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d106      	bne.n	800ab80 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a1e      	ldr	r2, [pc, #120]	; (800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d004      	beq.n	800ab94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a1d      	ldr	r2, [pc, #116]	; (800ac04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d126      	bne.n	800abe2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9e:	051b      	lsls	r3, r3, #20
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a0e      	ldr	r2, [pc, #56]	; (800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d004      	beq.n	800abd4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a0d      	ldr	r2, [pc, #52]	; (800ac04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d106      	bne.n	800abe2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	40010000 	.word	0x40010000
 800ac04:	40010400 	.word	0x40010400

0800ac08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e042      	b.n	800acdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7f6 fba7 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2224      	movs	r2, #36	; 0x24
 800ac72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 0201 	bic.w	r2, r2, #1
 800ac84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f8ca 	bl	800ae20 <UART_SetConfig>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e022      	b.n	800acdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 ff2a 	bl	800baf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689a      	ldr	r2, [r3, #8]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f042 0201 	orr.w	r2, r2, #1
 800acd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 ffb1 	bl	800bc3c <UART_CheckIdleState>
 800acda:	4603      	mov	r3, r0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08a      	sub	sp, #40	; 0x28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	d167      	bne.n	800adcc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <HAL_UART_Transmit_DMA+0x24>
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e060      	b.n	800adce <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	88fa      	ldrh	r2, [r7, #6]
 800ad16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	88fa      	ldrh	r2, [r7, #6]
 800ad1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2221      	movs	r2, #33	; 0x21
 800ad2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d028      	beq.n	800ad8c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad3e:	4a26      	ldr	r2, [pc, #152]	; (800add8 <HAL_UART_Transmit_DMA+0xf4>)
 800ad40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad46:	4a25      	ldr	r2, [pc, #148]	; (800addc <HAL_UART_Transmit_DMA+0xf8>)
 800ad48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad4e:	4a24      	ldr	r2, [pc, #144]	; (800ade0 <HAL_UART_Transmit_DMA+0xfc>)
 800ad50:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad56:	2200      	movs	r2, #0
 800ad58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad62:	4619      	mov	r1, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3328      	adds	r3, #40	; 0x28
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	88fb      	ldrh	r3, [r7, #6]
 800ad6e:	f7f8 fd2d 	bl	80037cc <HAL_DMA_Start_IT>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d009      	beq.n	800ad8c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2220      	movs	r2, #32
 800ad84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e020      	b.n	800adce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2240      	movs	r2, #64	; 0x40
 800ad92:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3308      	adds	r3, #8
 800ad9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	613b      	str	r3, [r7, #16]
   return(result);
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adaa:	627b      	str	r3, [r7, #36]	; 0x24
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3308      	adds	r3, #8
 800adb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb4:	623a      	str	r2, [r7, #32]
 800adb6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb8:	69f9      	ldr	r1, [r7, #28]
 800adba:	6a3a      	ldr	r2, [r7, #32]
 800adbc:	e841 2300 	strex	r3, r2, [r1]
 800adc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1e5      	bne.n	800ad94 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	e000      	b.n	800adce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800adcc:	2302      	movs	r3, #2
  }
}
 800adce:	4618      	mov	r0, r3
 800add0:	3728      	adds	r7, #40	; 0x28
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	0800bfad 	.word	0x0800bfad
 800addc:	0800c043 	.word	0x0800c043
 800ade0:	0800c05f 	.word	0x0800c05f

0800ade4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae24:	b092      	sub	sp, #72	; 0x48
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	689a      	ldr	r2, [r3, #8]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	69db      	ldr	r3, [r3, #28]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	4bbe      	ldr	r3, [pc, #760]	; (800b148 <UART_SetConfig+0x328>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	6812      	ldr	r2, [r2, #0]
 800ae56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae58:	430b      	orrs	r3, r1
 800ae5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	68da      	ldr	r2, [r3, #12]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4ab3      	ldr	r2, [pc, #716]	; (800b14c <UART_SetConfig+0x32c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d004      	beq.n	800ae8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	4baf      	ldr	r3, [pc, #700]	; (800b150 <UART_SetConfig+0x330>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	6812      	ldr	r2, [r2, #0]
 800ae9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae9c:	430b      	orrs	r3, r1
 800ae9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	f023 010f 	bic.w	r1, r3, #15
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4aa6      	ldr	r2, [pc, #664]	; (800b154 <UART_SetConfig+0x334>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d177      	bne.n	800afb0 <UART_SetConfig+0x190>
 800aec0:	4ba5      	ldr	r3, [pc, #660]	; (800b158 <UART_SetConfig+0x338>)
 800aec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aec8:	2b28      	cmp	r3, #40	; 0x28
 800aeca:	d86d      	bhi.n	800afa8 <UART_SetConfig+0x188>
 800aecc:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <UART_SetConfig+0xb4>)
 800aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed2:	bf00      	nop
 800aed4:	0800af79 	.word	0x0800af79
 800aed8:	0800afa9 	.word	0x0800afa9
 800aedc:	0800afa9 	.word	0x0800afa9
 800aee0:	0800afa9 	.word	0x0800afa9
 800aee4:	0800afa9 	.word	0x0800afa9
 800aee8:	0800afa9 	.word	0x0800afa9
 800aeec:	0800afa9 	.word	0x0800afa9
 800aef0:	0800afa9 	.word	0x0800afa9
 800aef4:	0800af81 	.word	0x0800af81
 800aef8:	0800afa9 	.word	0x0800afa9
 800aefc:	0800afa9 	.word	0x0800afa9
 800af00:	0800afa9 	.word	0x0800afa9
 800af04:	0800afa9 	.word	0x0800afa9
 800af08:	0800afa9 	.word	0x0800afa9
 800af0c:	0800afa9 	.word	0x0800afa9
 800af10:	0800afa9 	.word	0x0800afa9
 800af14:	0800af89 	.word	0x0800af89
 800af18:	0800afa9 	.word	0x0800afa9
 800af1c:	0800afa9 	.word	0x0800afa9
 800af20:	0800afa9 	.word	0x0800afa9
 800af24:	0800afa9 	.word	0x0800afa9
 800af28:	0800afa9 	.word	0x0800afa9
 800af2c:	0800afa9 	.word	0x0800afa9
 800af30:	0800afa9 	.word	0x0800afa9
 800af34:	0800af91 	.word	0x0800af91
 800af38:	0800afa9 	.word	0x0800afa9
 800af3c:	0800afa9 	.word	0x0800afa9
 800af40:	0800afa9 	.word	0x0800afa9
 800af44:	0800afa9 	.word	0x0800afa9
 800af48:	0800afa9 	.word	0x0800afa9
 800af4c:	0800afa9 	.word	0x0800afa9
 800af50:	0800afa9 	.word	0x0800afa9
 800af54:	0800af99 	.word	0x0800af99
 800af58:	0800afa9 	.word	0x0800afa9
 800af5c:	0800afa9 	.word	0x0800afa9
 800af60:	0800afa9 	.word	0x0800afa9
 800af64:	0800afa9 	.word	0x0800afa9
 800af68:	0800afa9 	.word	0x0800afa9
 800af6c:	0800afa9 	.word	0x0800afa9
 800af70:	0800afa9 	.word	0x0800afa9
 800af74:	0800afa1 	.word	0x0800afa1
 800af78:	2301      	movs	r3, #1
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7e:	e326      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800af80:	2304      	movs	r3, #4
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af86:	e322      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800af88:	2308      	movs	r3, #8
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8e:	e31e      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800af90:	2310      	movs	r3, #16
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af96:	e31a      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800af98:	2320      	movs	r3, #32
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9e:	e316      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800afa0:	2340      	movs	r3, #64	; 0x40
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa6:	e312      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800afa8:	2380      	movs	r3, #128	; 0x80
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afae:	e30e      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a69      	ldr	r2, [pc, #420]	; (800b15c <UART_SetConfig+0x33c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d130      	bne.n	800b01c <UART_SetConfig+0x1fc>
 800afba:	4b67      	ldr	r3, [pc, #412]	; (800b158 <UART_SetConfig+0x338>)
 800afbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afbe:	f003 0307 	and.w	r3, r3, #7
 800afc2:	2b05      	cmp	r3, #5
 800afc4:	d826      	bhi.n	800b014 <UART_SetConfig+0x1f4>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <UART_SetConfig+0x1ac>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afe5 	.word	0x0800afe5
 800afd0:	0800afed 	.word	0x0800afed
 800afd4:	0800aff5 	.word	0x0800aff5
 800afd8:	0800affd 	.word	0x0800affd
 800afdc:	0800b005 	.word	0x0800b005
 800afe0:	0800b00d 	.word	0x0800b00d
 800afe4:	2300      	movs	r3, #0
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afea:	e2f0      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800afec:	2304      	movs	r3, #4
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff2:	e2ec      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800aff4:	2308      	movs	r3, #8
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affa:	e2e8      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800affc:	2310      	movs	r3, #16
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b002:	e2e4      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b004:	2320      	movs	r3, #32
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00a:	e2e0      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b00c:	2340      	movs	r3, #64	; 0x40
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b012:	e2dc      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b014:	2380      	movs	r3, #128	; 0x80
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01a:	e2d8      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a4f      	ldr	r2, [pc, #316]	; (800b160 <UART_SetConfig+0x340>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d130      	bne.n	800b088 <UART_SetConfig+0x268>
 800b026:	4b4c      	ldr	r3, [pc, #304]	; (800b158 <UART_SetConfig+0x338>)
 800b028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02a:	f003 0307 	and.w	r3, r3, #7
 800b02e:	2b05      	cmp	r3, #5
 800b030:	d826      	bhi.n	800b080 <UART_SetConfig+0x260>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <UART_SetConfig+0x218>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b051 	.word	0x0800b051
 800b03c:	0800b059 	.word	0x0800b059
 800b040:	0800b061 	.word	0x0800b061
 800b044:	0800b069 	.word	0x0800b069
 800b048:	0800b071 	.word	0x0800b071
 800b04c:	0800b079 	.word	0x0800b079
 800b050:	2300      	movs	r3, #0
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b056:	e2ba      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b058:	2304      	movs	r3, #4
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05e:	e2b6      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b060:	2308      	movs	r3, #8
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b066:	e2b2      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b068:	2310      	movs	r3, #16
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06e:	e2ae      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b070:	2320      	movs	r3, #32
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b076:	e2aa      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b078:	2340      	movs	r3, #64	; 0x40
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07e:	e2a6      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b080:	2380      	movs	r3, #128	; 0x80
 800b082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b086:	e2a2      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a35      	ldr	r2, [pc, #212]	; (800b164 <UART_SetConfig+0x344>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d130      	bne.n	800b0f4 <UART_SetConfig+0x2d4>
 800b092:	4b31      	ldr	r3, [pc, #196]	; (800b158 <UART_SetConfig+0x338>)
 800b094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	2b05      	cmp	r3, #5
 800b09c:	d826      	bhi.n	800b0ec <UART_SetConfig+0x2cc>
 800b09e:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <UART_SetConfig+0x284>)
 800b0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a4:	0800b0bd 	.word	0x0800b0bd
 800b0a8:	0800b0c5 	.word	0x0800b0c5
 800b0ac:	0800b0cd 	.word	0x0800b0cd
 800b0b0:	0800b0d5 	.word	0x0800b0d5
 800b0b4:	0800b0dd 	.word	0x0800b0dd
 800b0b8:	0800b0e5 	.word	0x0800b0e5
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c2:	e284      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b0c4:	2304      	movs	r3, #4
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ca:	e280      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b0cc:	2308      	movs	r3, #8
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d2:	e27c      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0da:	e278      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b0dc:	2320      	movs	r3, #32
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e2:	e274      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b0e4:	2340      	movs	r3, #64	; 0x40
 800b0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ea:	e270      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b0ec:	2380      	movs	r3, #128	; 0x80
 800b0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f2:	e26c      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a1b      	ldr	r2, [pc, #108]	; (800b168 <UART_SetConfig+0x348>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d142      	bne.n	800b184 <UART_SetConfig+0x364>
 800b0fe:	4b16      	ldr	r3, [pc, #88]	; (800b158 <UART_SetConfig+0x338>)
 800b100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b102:	f003 0307 	and.w	r3, r3, #7
 800b106:	2b05      	cmp	r3, #5
 800b108:	d838      	bhi.n	800b17c <UART_SetConfig+0x35c>
 800b10a:	a201      	add	r2, pc, #4	; (adr r2, 800b110 <UART_SetConfig+0x2f0>)
 800b10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b110:	0800b129 	.word	0x0800b129
 800b114:	0800b131 	.word	0x0800b131
 800b118:	0800b139 	.word	0x0800b139
 800b11c:	0800b141 	.word	0x0800b141
 800b120:	0800b16d 	.word	0x0800b16d
 800b124:	0800b175 	.word	0x0800b175
 800b128:	2300      	movs	r3, #0
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12e:	e24e      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b130:	2304      	movs	r3, #4
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b136:	e24a      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b138:	2308      	movs	r3, #8
 800b13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b13e:	e246      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b140:	2310      	movs	r3, #16
 800b142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b146:	e242      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b148:	cfff69f3 	.word	0xcfff69f3
 800b14c:	58000c00 	.word	0x58000c00
 800b150:	11fff4ff 	.word	0x11fff4ff
 800b154:	40011000 	.word	0x40011000
 800b158:	58024400 	.word	0x58024400
 800b15c:	40004400 	.word	0x40004400
 800b160:	40004800 	.word	0x40004800
 800b164:	40004c00 	.word	0x40004c00
 800b168:	40005000 	.word	0x40005000
 800b16c:	2320      	movs	r3, #32
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b172:	e22c      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b174:	2340      	movs	r3, #64	; 0x40
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17a:	e228      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b17c:	2380      	movs	r3, #128	; 0x80
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b182:	e224      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4ab1      	ldr	r2, [pc, #708]	; (800b450 <UART_SetConfig+0x630>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d176      	bne.n	800b27c <UART_SetConfig+0x45c>
 800b18e:	4bb1      	ldr	r3, [pc, #708]	; (800b454 <UART_SetConfig+0x634>)
 800b190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b196:	2b28      	cmp	r3, #40	; 0x28
 800b198:	d86c      	bhi.n	800b274 <UART_SetConfig+0x454>
 800b19a:	a201      	add	r2, pc, #4	; (adr r2, 800b1a0 <UART_SetConfig+0x380>)
 800b19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a0:	0800b245 	.word	0x0800b245
 800b1a4:	0800b275 	.word	0x0800b275
 800b1a8:	0800b275 	.word	0x0800b275
 800b1ac:	0800b275 	.word	0x0800b275
 800b1b0:	0800b275 	.word	0x0800b275
 800b1b4:	0800b275 	.word	0x0800b275
 800b1b8:	0800b275 	.word	0x0800b275
 800b1bc:	0800b275 	.word	0x0800b275
 800b1c0:	0800b24d 	.word	0x0800b24d
 800b1c4:	0800b275 	.word	0x0800b275
 800b1c8:	0800b275 	.word	0x0800b275
 800b1cc:	0800b275 	.word	0x0800b275
 800b1d0:	0800b275 	.word	0x0800b275
 800b1d4:	0800b275 	.word	0x0800b275
 800b1d8:	0800b275 	.word	0x0800b275
 800b1dc:	0800b275 	.word	0x0800b275
 800b1e0:	0800b255 	.word	0x0800b255
 800b1e4:	0800b275 	.word	0x0800b275
 800b1e8:	0800b275 	.word	0x0800b275
 800b1ec:	0800b275 	.word	0x0800b275
 800b1f0:	0800b275 	.word	0x0800b275
 800b1f4:	0800b275 	.word	0x0800b275
 800b1f8:	0800b275 	.word	0x0800b275
 800b1fc:	0800b275 	.word	0x0800b275
 800b200:	0800b25d 	.word	0x0800b25d
 800b204:	0800b275 	.word	0x0800b275
 800b208:	0800b275 	.word	0x0800b275
 800b20c:	0800b275 	.word	0x0800b275
 800b210:	0800b275 	.word	0x0800b275
 800b214:	0800b275 	.word	0x0800b275
 800b218:	0800b275 	.word	0x0800b275
 800b21c:	0800b275 	.word	0x0800b275
 800b220:	0800b265 	.word	0x0800b265
 800b224:	0800b275 	.word	0x0800b275
 800b228:	0800b275 	.word	0x0800b275
 800b22c:	0800b275 	.word	0x0800b275
 800b230:	0800b275 	.word	0x0800b275
 800b234:	0800b275 	.word	0x0800b275
 800b238:	0800b275 	.word	0x0800b275
 800b23c:	0800b275 	.word	0x0800b275
 800b240:	0800b26d 	.word	0x0800b26d
 800b244:	2301      	movs	r3, #1
 800b246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24a:	e1c0      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b24c:	2304      	movs	r3, #4
 800b24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b252:	e1bc      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b254:	2308      	movs	r3, #8
 800b256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25a:	e1b8      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b25c:	2310      	movs	r3, #16
 800b25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b262:	e1b4      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b264:	2320      	movs	r3, #32
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26a:	e1b0      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b26c:	2340      	movs	r3, #64	; 0x40
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b272:	e1ac      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b274:	2380      	movs	r3, #128	; 0x80
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27a:	e1a8      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a75      	ldr	r2, [pc, #468]	; (800b458 <UART_SetConfig+0x638>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d130      	bne.n	800b2e8 <UART_SetConfig+0x4c8>
 800b286:	4b73      	ldr	r3, [pc, #460]	; (800b454 <UART_SetConfig+0x634>)
 800b288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d826      	bhi.n	800b2e0 <UART_SetConfig+0x4c0>
 800b292:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <UART_SetConfig+0x478>)
 800b294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b298:	0800b2b1 	.word	0x0800b2b1
 800b29c:	0800b2b9 	.word	0x0800b2b9
 800b2a0:	0800b2c1 	.word	0x0800b2c1
 800b2a4:	0800b2c9 	.word	0x0800b2c9
 800b2a8:	0800b2d1 	.word	0x0800b2d1
 800b2ac:	0800b2d9 	.word	0x0800b2d9
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2b6:	e18a      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b2b8:	2304      	movs	r3, #4
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2be:	e186      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c6:	e182      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ce:	e17e      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b2d0:	2320      	movs	r3, #32
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d6:	e17a      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b2d8:	2340      	movs	r3, #64	; 0x40
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2de:	e176      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b2e0:	2380      	movs	r3, #128	; 0x80
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e6:	e172      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a5b      	ldr	r2, [pc, #364]	; (800b45c <UART_SetConfig+0x63c>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d130      	bne.n	800b354 <UART_SetConfig+0x534>
 800b2f2:	4b58      	ldr	r3, [pc, #352]	; (800b454 <UART_SetConfig+0x634>)
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f6:	f003 0307 	and.w	r3, r3, #7
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	d826      	bhi.n	800b34c <UART_SetConfig+0x52c>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <UART_SetConfig+0x4e4>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b31d 	.word	0x0800b31d
 800b308:	0800b325 	.word	0x0800b325
 800b30c:	0800b32d 	.word	0x0800b32d
 800b310:	0800b335 	.word	0x0800b335
 800b314:	0800b33d 	.word	0x0800b33d
 800b318:	0800b345 	.word	0x0800b345
 800b31c:	2300      	movs	r3, #0
 800b31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b322:	e154      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b324:	2304      	movs	r3, #4
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32a:	e150      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b32c:	2308      	movs	r3, #8
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b332:	e14c      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b334:	2310      	movs	r3, #16
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e148      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b33c:	2320      	movs	r3, #32
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e144      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b344:	2340      	movs	r3, #64	; 0x40
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34a:	e140      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b34c:	2380      	movs	r3, #128	; 0x80
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e13c      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a41      	ldr	r2, [pc, #260]	; (800b460 <UART_SetConfig+0x640>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	f040 8082 	bne.w	800b464 <UART_SetConfig+0x644>
 800b360:	4b3c      	ldr	r3, [pc, #240]	; (800b454 <UART_SetConfig+0x634>)
 800b362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b368:	2b28      	cmp	r3, #40	; 0x28
 800b36a:	d86d      	bhi.n	800b448 <UART_SetConfig+0x628>
 800b36c:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <UART_SetConfig+0x554>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b419 	.word	0x0800b419
 800b378:	0800b449 	.word	0x0800b449
 800b37c:	0800b449 	.word	0x0800b449
 800b380:	0800b449 	.word	0x0800b449
 800b384:	0800b449 	.word	0x0800b449
 800b388:	0800b449 	.word	0x0800b449
 800b38c:	0800b449 	.word	0x0800b449
 800b390:	0800b449 	.word	0x0800b449
 800b394:	0800b421 	.word	0x0800b421
 800b398:	0800b449 	.word	0x0800b449
 800b39c:	0800b449 	.word	0x0800b449
 800b3a0:	0800b449 	.word	0x0800b449
 800b3a4:	0800b449 	.word	0x0800b449
 800b3a8:	0800b449 	.word	0x0800b449
 800b3ac:	0800b449 	.word	0x0800b449
 800b3b0:	0800b449 	.word	0x0800b449
 800b3b4:	0800b429 	.word	0x0800b429
 800b3b8:	0800b449 	.word	0x0800b449
 800b3bc:	0800b449 	.word	0x0800b449
 800b3c0:	0800b449 	.word	0x0800b449
 800b3c4:	0800b449 	.word	0x0800b449
 800b3c8:	0800b449 	.word	0x0800b449
 800b3cc:	0800b449 	.word	0x0800b449
 800b3d0:	0800b449 	.word	0x0800b449
 800b3d4:	0800b431 	.word	0x0800b431
 800b3d8:	0800b449 	.word	0x0800b449
 800b3dc:	0800b449 	.word	0x0800b449
 800b3e0:	0800b449 	.word	0x0800b449
 800b3e4:	0800b449 	.word	0x0800b449
 800b3e8:	0800b449 	.word	0x0800b449
 800b3ec:	0800b449 	.word	0x0800b449
 800b3f0:	0800b449 	.word	0x0800b449
 800b3f4:	0800b439 	.word	0x0800b439
 800b3f8:	0800b449 	.word	0x0800b449
 800b3fc:	0800b449 	.word	0x0800b449
 800b400:	0800b449 	.word	0x0800b449
 800b404:	0800b449 	.word	0x0800b449
 800b408:	0800b449 	.word	0x0800b449
 800b40c:	0800b449 	.word	0x0800b449
 800b410:	0800b449 	.word	0x0800b449
 800b414:	0800b441 	.word	0x0800b441
 800b418:	2301      	movs	r3, #1
 800b41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41e:	e0d6      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b420:	2304      	movs	r3, #4
 800b422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b426:	e0d2      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b428:	2308      	movs	r3, #8
 800b42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42e:	e0ce      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b430:	2310      	movs	r3, #16
 800b432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b436:	e0ca      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b438:	2320      	movs	r3, #32
 800b43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43e:	e0c6      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b440:	2340      	movs	r3, #64	; 0x40
 800b442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b446:	e0c2      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b448:	2380      	movs	r3, #128	; 0x80
 800b44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44e:	e0be      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b450:	40011400 	.word	0x40011400
 800b454:	58024400 	.word	0x58024400
 800b458:	40007800 	.word	0x40007800
 800b45c:	40007c00 	.word	0x40007c00
 800b460:	40011800 	.word	0x40011800
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4aad      	ldr	r2, [pc, #692]	; (800b720 <UART_SetConfig+0x900>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d176      	bne.n	800b55c <UART_SetConfig+0x73c>
 800b46e:	4bad      	ldr	r3, [pc, #692]	; (800b724 <UART_SetConfig+0x904>)
 800b470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b476:	2b28      	cmp	r3, #40	; 0x28
 800b478:	d86c      	bhi.n	800b554 <UART_SetConfig+0x734>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <UART_SetConfig+0x660>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b525 	.word	0x0800b525
 800b484:	0800b555 	.word	0x0800b555
 800b488:	0800b555 	.word	0x0800b555
 800b48c:	0800b555 	.word	0x0800b555
 800b490:	0800b555 	.word	0x0800b555
 800b494:	0800b555 	.word	0x0800b555
 800b498:	0800b555 	.word	0x0800b555
 800b49c:	0800b555 	.word	0x0800b555
 800b4a0:	0800b52d 	.word	0x0800b52d
 800b4a4:	0800b555 	.word	0x0800b555
 800b4a8:	0800b555 	.word	0x0800b555
 800b4ac:	0800b555 	.word	0x0800b555
 800b4b0:	0800b555 	.word	0x0800b555
 800b4b4:	0800b555 	.word	0x0800b555
 800b4b8:	0800b555 	.word	0x0800b555
 800b4bc:	0800b555 	.word	0x0800b555
 800b4c0:	0800b535 	.word	0x0800b535
 800b4c4:	0800b555 	.word	0x0800b555
 800b4c8:	0800b555 	.word	0x0800b555
 800b4cc:	0800b555 	.word	0x0800b555
 800b4d0:	0800b555 	.word	0x0800b555
 800b4d4:	0800b555 	.word	0x0800b555
 800b4d8:	0800b555 	.word	0x0800b555
 800b4dc:	0800b555 	.word	0x0800b555
 800b4e0:	0800b53d 	.word	0x0800b53d
 800b4e4:	0800b555 	.word	0x0800b555
 800b4e8:	0800b555 	.word	0x0800b555
 800b4ec:	0800b555 	.word	0x0800b555
 800b4f0:	0800b555 	.word	0x0800b555
 800b4f4:	0800b555 	.word	0x0800b555
 800b4f8:	0800b555 	.word	0x0800b555
 800b4fc:	0800b555 	.word	0x0800b555
 800b500:	0800b545 	.word	0x0800b545
 800b504:	0800b555 	.word	0x0800b555
 800b508:	0800b555 	.word	0x0800b555
 800b50c:	0800b555 	.word	0x0800b555
 800b510:	0800b555 	.word	0x0800b555
 800b514:	0800b555 	.word	0x0800b555
 800b518:	0800b555 	.word	0x0800b555
 800b51c:	0800b555 	.word	0x0800b555
 800b520:	0800b54d 	.word	0x0800b54d
 800b524:	2301      	movs	r3, #1
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52a:	e050      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b52c:	2304      	movs	r3, #4
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b532:	e04c      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b534:	2308      	movs	r3, #8
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53a:	e048      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b53c:	2310      	movs	r3, #16
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b542:	e044      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b544:	2320      	movs	r3, #32
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54a:	e040      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b54c:	2340      	movs	r3, #64	; 0x40
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b552:	e03c      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b554:	2380      	movs	r3, #128	; 0x80
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55a:	e038      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a71      	ldr	r2, [pc, #452]	; (800b728 <UART_SetConfig+0x908>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d130      	bne.n	800b5c8 <UART_SetConfig+0x7a8>
 800b566:	4b6f      	ldr	r3, [pc, #444]	; (800b724 <UART_SetConfig+0x904>)
 800b568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56a:	f003 0307 	and.w	r3, r3, #7
 800b56e:	2b05      	cmp	r3, #5
 800b570:	d826      	bhi.n	800b5c0 <UART_SetConfig+0x7a0>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <UART_SetConfig+0x758>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b591 	.word	0x0800b591
 800b57c:	0800b599 	.word	0x0800b599
 800b580:	0800b5a1 	.word	0x0800b5a1
 800b584:	0800b5a9 	.word	0x0800b5a9
 800b588:	0800b5b1 	.word	0x0800b5b1
 800b58c:	0800b5b9 	.word	0x0800b5b9
 800b590:	2302      	movs	r3, #2
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b596:	e01a      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b598:	2304      	movs	r3, #4
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59e:	e016      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b5a0:	2308      	movs	r3, #8
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a6:	e012      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b5a8:	2310      	movs	r3, #16
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ae:	e00e      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b5b0:	2320      	movs	r3, #32
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b6:	e00a      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b5b8:	2340      	movs	r3, #64	; 0x40
 800b5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5be:	e006      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b5c0:	2380      	movs	r3, #128	; 0x80
 800b5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5c6:	e002      	b.n	800b5ce <UART_SetConfig+0x7ae>
 800b5c8:	2380      	movs	r3, #128	; 0x80
 800b5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a55      	ldr	r2, [pc, #340]	; (800b728 <UART_SetConfig+0x908>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	f040 80f8 	bne.w	800b7ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	dc46      	bgt.n	800b670 <UART_SetConfig+0x850>
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	db75      	blt.n	800b6d2 <UART_SetConfig+0x8b2>
 800b5e6:	3b02      	subs	r3, #2
 800b5e8:	2b1e      	cmp	r3, #30
 800b5ea:	d872      	bhi.n	800b6d2 <UART_SetConfig+0x8b2>
 800b5ec:	a201      	add	r2, pc, #4	; (adr r2, 800b5f4 <UART_SetConfig+0x7d4>)
 800b5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f2:	bf00      	nop
 800b5f4:	0800b677 	.word	0x0800b677
 800b5f8:	0800b6d3 	.word	0x0800b6d3
 800b5fc:	0800b67f 	.word	0x0800b67f
 800b600:	0800b6d3 	.word	0x0800b6d3
 800b604:	0800b6d3 	.word	0x0800b6d3
 800b608:	0800b6d3 	.word	0x0800b6d3
 800b60c:	0800b68f 	.word	0x0800b68f
 800b610:	0800b6d3 	.word	0x0800b6d3
 800b614:	0800b6d3 	.word	0x0800b6d3
 800b618:	0800b6d3 	.word	0x0800b6d3
 800b61c:	0800b6d3 	.word	0x0800b6d3
 800b620:	0800b6d3 	.word	0x0800b6d3
 800b624:	0800b6d3 	.word	0x0800b6d3
 800b628:	0800b6d3 	.word	0x0800b6d3
 800b62c:	0800b69f 	.word	0x0800b69f
 800b630:	0800b6d3 	.word	0x0800b6d3
 800b634:	0800b6d3 	.word	0x0800b6d3
 800b638:	0800b6d3 	.word	0x0800b6d3
 800b63c:	0800b6d3 	.word	0x0800b6d3
 800b640:	0800b6d3 	.word	0x0800b6d3
 800b644:	0800b6d3 	.word	0x0800b6d3
 800b648:	0800b6d3 	.word	0x0800b6d3
 800b64c:	0800b6d3 	.word	0x0800b6d3
 800b650:	0800b6d3 	.word	0x0800b6d3
 800b654:	0800b6d3 	.word	0x0800b6d3
 800b658:	0800b6d3 	.word	0x0800b6d3
 800b65c:	0800b6d3 	.word	0x0800b6d3
 800b660:	0800b6d3 	.word	0x0800b6d3
 800b664:	0800b6d3 	.word	0x0800b6d3
 800b668:	0800b6d3 	.word	0x0800b6d3
 800b66c:	0800b6c5 	.word	0x0800b6c5
 800b670:	2b40      	cmp	r3, #64	; 0x40
 800b672:	d02a      	beq.n	800b6ca <UART_SetConfig+0x8aa>
 800b674:	e02d      	b.n	800b6d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b676:	f7fd fa87 	bl	8008b88 <HAL_RCCEx_GetD3PCLK1Freq>
 800b67a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b67c:	e02f      	b.n	800b6de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b682:	4618      	mov	r0, r3
 800b684:	f7fd fa96 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b68c:	e027      	b.n	800b6de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b68e:	f107 0318 	add.w	r3, r7, #24
 800b692:	4618      	mov	r0, r3
 800b694:	f7fd fbe2 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b69c:	e01f      	b.n	800b6de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b69e:	4b21      	ldr	r3, [pc, #132]	; (800b724 <UART_SetConfig+0x904>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0320 	and.w	r3, r3, #32
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d009      	beq.n	800b6be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6aa:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <UART_SetConfig+0x904>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	08db      	lsrs	r3, r3, #3
 800b6b0:	f003 0303 	and.w	r3, r3, #3
 800b6b4:	4a1d      	ldr	r2, [pc, #116]	; (800b72c <UART_SetConfig+0x90c>)
 800b6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6bc:	e00f      	b.n	800b6de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b6be:	4b1b      	ldr	r3, [pc, #108]	; (800b72c <UART_SetConfig+0x90c>)
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6c2:	e00c      	b.n	800b6de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6c4:	4b1a      	ldr	r3, [pc, #104]	; (800b730 <UART_SetConfig+0x910>)
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6c8:	e009      	b.n	800b6de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d0:	e005      	b.n	800b6de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b6dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 81ee 	beq.w	800bac2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	4a12      	ldr	r2, [pc, #72]	; (800b734 <UART_SetConfig+0x914>)
 800b6ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6f8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	4613      	mov	r3, r2
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	4413      	add	r3, r2
 800b704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b706:	429a      	cmp	r2, r3
 800b708:	d305      	bcc.n	800b716 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b712:	429a      	cmp	r2, r3
 800b714:	d910      	bls.n	800b738 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b71c:	e1d1      	b.n	800bac2 <UART_SetConfig+0xca2>
 800b71e:	bf00      	nop
 800b720:	40011c00 	.word	0x40011c00
 800b724:	58024400 	.word	0x58024400
 800b728:	58000c00 	.word	0x58000c00
 800b72c:	03d09000 	.word	0x03d09000
 800b730:	003d0900 	.word	0x003d0900
 800b734:	08010cc0 	.word	0x08010cc0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73a:	2200      	movs	r2, #0
 800b73c:	60bb      	str	r3, [r7, #8]
 800b73e:	60fa      	str	r2, [r7, #12]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	4ac0      	ldr	r2, [pc, #768]	; (800ba48 <UART_SetConfig+0xc28>)
 800b746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	2200      	movs	r2, #0
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	607a      	str	r2, [r7, #4]
 800b752:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b75a:	f7f4 fdc9 	bl	80002f0 <__aeabi_uldivmod>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	4610      	mov	r0, r2
 800b764:	4619      	mov	r1, r3
 800b766:	f04f 0200 	mov.w	r2, #0
 800b76a:	f04f 0300 	mov.w	r3, #0
 800b76e:	020b      	lsls	r3, r1, #8
 800b770:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b774:	0202      	lsls	r2, r0, #8
 800b776:	6979      	ldr	r1, [r7, #20]
 800b778:	6849      	ldr	r1, [r1, #4]
 800b77a:	0849      	lsrs	r1, r1, #1
 800b77c:	2000      	movs	r0, #0
 800b77e:	460c      	mov	r4, r1
 800b780:	4605      	mov	r5, r0
 800b782:	eb12 0804 	adds.w	r8, r2, r4
 800b786:	eb43 0905 	adc.w	r9, r3, r5
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	469a      	mov	sl, r3
 800b792:	4693      	mov	fp, r2
 800b794:	4652      	mov	r2, sl
 800b796:	465b      	mov	r3, fp
 800b798:	4640      	mov	r0, r8
 800b79a:	4649      	mov	r1, r9
 800b79c:	f7f4 fda8 	bl	80002f0 <__aeabi_uldivmod>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ae:	d308      	bcc.n	800b7c2 <UART_SetConfig+0x9a2>
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7b6:	d204      	bcs.n	800b7c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7be:	60da      	str	r2, [r3, #12]
 800b7c0:	e17f      	b.n	800bac2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b7c8:	e17b      	b.n	800bac2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7d2:	f040 80bd 	bne.w	800b950 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b7d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7da:	2b20      	cmp	r3, #32
 800b7dc:	dc48      	bgt.n	800b870 <UART_SetConfig+0xa50>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	db7b      	blt.n	800b8da <UART_SetConfig+0xaba>
 800b7e2:	2b20      	cmp	r3, #32
 800b7e4:	d879      	bhi.n	800b8da <UART_SetConfig+0xaba>
 800b7e6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ec <UART_SetConfig+0x9cc>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b877 	.word	0x0800b877
 800b7f0:	0800b87f 	.word	0x0800b87f
 800b7f4:	0800b8db 	.word	0x0800b8db
 800b7f8:	0800b8db 	.word	0x0800b8db
 800b7fc:	0800b887 	.word	0x0800b887
 800b800:	0800b8db 	.word	0x0800b8db
 800b804:	0800b8db 	.word	0x0800b8db
 800b808:	0800b8db 	.word	0x0800b8db
 800b80c:	0800b897 	.word	0x0800b897
 800b810:	0800b8db 	.word	0x0800b8db
 800b814:	0800b8db 	.word	0x0800b8db
 800b818:	0800b8db 	.word	0x0800b8db
 800b81c:	0800b8db 	.word	0x0800b8db
 800b820:	0800b8db 	.word	0x0800b8db
 800b824:	0800b8db 	.word	0x0800b8db
 800b828:	0800b8db 	.word	0x0800b8db
 800b82c:	0800b8a7 	.word	0x0800b8a7
 800b830:	0800b8db 	.word	0x0800b8db
 800b834:	0800b8db 	.word	0x0800b8db
 800b838:	0800b8db 	.word	0x0800b8db
 800b83c:	0800b8db 	.word	0x0800b8db
 800b840:	0800b8db 	.word	0x0800b8db
 800b844:	0800b8db 	.word	0x0800b8db
 800b848:	0800b8db 	.word	0x0800b8db
 800b84c:	0800b8db 	.word	0x0800b8db
 800b850:	0800b8db 	.word	0x0800b8db
 800b854:	0800b8db 	.word	0x0800b8db
 800b858:	0800b8db 	.word	0x0800b8db
 800b85c:	0800b8db 	.word	0x0800b8db
 800b860:	0800b8db 	.word	0x0800b8db
 800b864:	0800b8db 	.word	0x0800b8db
 800b868:	0800b8db 	.word	0x0800b8db
 800b86c:	0800b8cd 	.word	0x0800b8cd
 800b870:	2b40      	cmp	r3, #64	; 0x40
 800b872:	d02e      	beq.n	800b8d2 <UART_SetConfig+0xab2>
 800b874:	e031      	b.n	800b8da <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b876:	f7fb fa83 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 800b87a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b87c:	e033      	b.n	800b8e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b87e:	f7fb fa95 	bl	8006dac <HAL_RCC_GetPCLK2Freq>
 800b882:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b884:	e02f      	b.n	800b8e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd f992 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b894:	e027      	b.n	800b8e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b896:	f107 0318 	add.w	r3, r7, #24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fd fade 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8a4:	e01f      	b.n	800b8e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8a6:	4b69      	ldr	r3, [pc, #420]	; (800ba4c <UART_SetConfig+0xc2c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0320 	and.w	r3, r3, #32
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d009      	beq.n	800b8c6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8b2:	4b66      	ldr	r3, [pc, #408]	; (800ba4c <UART_SetConfig+0xc2c>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	08db      	lsrs	r3, r3, #3
 800b8b8:	f003 0303 	and.w	r3, r3, #3
 800b8bc:	4a64      	ldr	r2, [pc, #400]	; (800ba50 <UART_SetConfig+0xc30>)
 800b8be:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8c4:	e00f      	b.n	800b8e6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b8c6:	4b62      	ldr	r3, [pc, #392]	; (800ba50 <UART_SetConfig+0xc30>)
 800b8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ca:	e00c      	b.n	800b8e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8cc:	4b61      	ldr	r3, [pc, #388]	; (800ba54 <UART_SetConfig+0xc34>)
 800b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d0:	e009      	b.n	800b8e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d8:	e005      	b.n	800b8e6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b8e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 80ea 	beq.w	800bac2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	4a55      	ldr	r2, [pc, #340]	; (800ba48 <UART_SetConfig+0xc28>)
 800b8f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b900:	005a      	lsls	r2, r3, #1
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	085b      	lsrs	r3, r3, #1
 800b908:	441a      	add	r2, r3
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b912:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d916      	bls.n	800b948 <UART_SetConfig+0xb28>
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b920:	d212      	bcs.n	800b948 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	b29b      	uxth	r3, r3
 800b926:	f023 030f 	bic.w	r3, r3, #15
 800b92a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	085b      	lsrs	r3, r3, #1
 800b930:	b29b      	uxth	r3, r3
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	b29a      	uxth	r2, r3
 800b938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b93a:	4313      	orrs	r3, r2
 800b93c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b944:	60da      	str	r2, [r3, #12]
 800b946:	e0bc      	b.n	800bac2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b94e:	e0b8      	b.n	800bac2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b950:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b954:	2b20      	cmp	r3, #32
 800b956:	dc4b      	bgt.n	800b9f0 <UART_SetConfig+0xbd0>
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f2c0 8087 	blt.w	800ba6c <UART_SetConfig+0xc4c>
 800b95e:	2b20      	cmp	r3, #32
 800b960:	f200 8084 	bhi.w	800ba6c <UART_SetConfig+0xc4c>
 800b964:	a201      	add	r2, pc, #4	; (adr r2, 800b96c <UART_SetConfig+0xb4c>)
 800b966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96a:	bf00      	nop
 800b96c:	0800b9f7 	.word	0x0800b9f7
 800b970:	0800b9ff 	.word	0x0800b9ff
 800b974:	0800ba6d 	.word	0x0800ba6d
 800b978:	0800ba6d 	.word	0x0800ba6d
 800b97c:	0800ba07 	.word	0x0800ba07
 800b980:	0800ba6d 	.word	0x0800ba6d
 800b984:	0800ba6d 	.word	0x0800ba6d
 800b988:	0800ba6d 	.word	0x0800ba6d
 800b98c:	0800ba17 	.word	0x0800ba17
 800b990:	0800ba6d 	.word	0x0800ba6d
 800b994:	0800ba6d 	.word	0x0800ba6d
 800b998:	0800ba6d 	.word	0x0800ba6d
 800b99c:	0800ba6d 	.word	0x0800ba6d
 800b9a0:	0800ba6d 	.word	0x0800ba6d
 800b9a4:	0800ba6d 	.word	0x0800ba6d
 800b9a8:	0800ba6d 	.word	0x0800ba6d
 800b9ac:	0800ba27 	.word	0x0800ba27
 800b9b0:	0800ba6d 	.word	0x0800ba6d
 800b9b4:	0800ba6d 	.word	0x0800ba6d
 800b9b8:	0800ba6d 	.word	0x0800ba6d
 800b9bc:	0800ba6d 	.word	0x0800ba6d
 800b9c0:	0800ba6d 	.word	0x0800ba6d
 800b9c4:	0800ba6d 	.word	0x0800ba6d
 800b9c8:	0800ba6d 	.word	0x0800ba6d
 800b9cc:	0800ba6d 	.word	0x0800ba6d
 800b9d0:	0800ba6d 	.word	0x0800ba6d
 800b9d4:	0800ba6d 	.word	0x0800ba6d
 800b9d8:	0800ba6d 	.word	0x0800ba6d
 800b9dc:	0800ba6d 	.word	0x0800ba6d
 800b9e0:	0800ba6d 	.word	0x0800ba6d
 800b9e4:	0800ba6d 	.word	0x0800ba6d
 800b9e8:	0800ba6d 	.word	0x0800ba6d
 800b9ec:	0800ba5f 	.word	0x0800ba5f
 800b9f0:	2b40      	cmp	r3, #64	; 0x40
 800b9f2:	d037      	beq.n	800ba64 <UART_SetConfig+0xc44>
 800b9f4:	e03a      	b.n	800ba6c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9f6:	f7fb f9c3 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 800b9fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9fc:	e03c      	b.n	800ba78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9fe:	f7fb f9d5 	bl	8006dac <HAL_RCC_GetPCLK2Freq>
 800ba02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba04:	e038      	b.n	800ba78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fd f8d2 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba14:	e030      	b.n	800ba78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba16:	f107 0318 	add.w	r3, r7, #24
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fd fa1e 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba24:	e028      	b.n	800ba78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <UART_SetConfig+0xc2c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 0320 	and.w	r3, r3, #32
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d012      	beq.n	800ba58 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba32:	4b06      	ldr	r3, [pc, #24]	; (800ba4c <UART_SetConfig+0xc2c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	08db      	lsrs	r3, r3, #3
 800ba38:	f003 0303 	and.w	r3, r3, #3
 800ba3c:	4a04      	ldr	r2, [pc, #16]	; (800ba50 <UART_SetConfig+0xc30>)
 800ba3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba44:	e018      	b.n	800ba78 <UART_SetConfig+0xc58>
 800ba46:	bf00      	nop
 800ba48:	08010cc0 	.word	0x08010cc0
 800ba4c:	58024400 	.word	0x58024400
 800ba50:	03d09000 	.word	0x03d09000
 800ba54:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ba58:	4b24      	ldr	r3, [pc, #144]	; (800baec <UART_SetConfig+0xccc>)
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba5c:	e00c      	b.n	800ba78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba5e:	4b24      	ldr	r3, [pc, #144]	; (800baf0 <UART_SetConfig+0xcd0>)
 800ba60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba62:	e009      	b.n	800ba78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6a:	e005      	b.n	800ba78 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba76:	bf00      	nop
    }

    if (pclk != 0U)
 800ba78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d021      	beq.n	800bac2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba82:	4a1c      	ldr	r2, [pc, #112]	; (800baf4 <UART_SetConfig+0xcd4>)
 800ba84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	085b      	lsrs	r3, r3, #1
 800ba96:	441a      	add	r2, r3
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	2b0f      	cmp	r3, #15
 800baa6:	d909      	bls.n	800babc <UART_SetConfig+0xc9c>
 800baa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baae:	d205      	bcs.n	800babc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	60da      	str	r2, [r3, #12]
 800baba:	e002      	b.n	800bac2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	2201      	movs	r2, #1
 800bace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2200      	movs	r2, #0
 800bad6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2200      	movs	r2, #0
 800badc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bade:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3748      	adds	r7, #72	; 0x48
 800bae6:	46bd      	mov	sp, r7
 800bae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800baec:	03d09000 	.word	0x03d09000
 800baf0:	003d0900 	.word	0x003d0900
 800baf4:	08010cc0 	.word	0x08010cc0

0800baf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00a      	beq.n	800bb66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	430a      	orrs	r2, r1
 800bb64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6a:	f003 0308 	and.w	r3, r3, #8
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	430a      	orrs	r2, r1
 800bb86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8c:	f003 0310 	and.w	r3, r3, #16
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00a      	beq.n	800bbaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d01a      	beq.n	800bc0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	430a      	orrs	r2, r1
 800bbec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbf6:	d10a      	bne.n	800bc0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00a      	beq.n	800bc30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	430a      	orrs	r2, r1
 800bc2e:	605a      	str	r2, [r3, #4]
  }
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b098      	sub	sp, #96	; 0x60
 800bc40:	af02      	add	r7, sp, #8
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc4c:	f7f5 fde4 	bl	8001818 <HAL_GetTick>
 800bc50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0308 	and.w	r3, r3, #8
 800bc5c:	2b08      	cmp	r3, #8
 800bc5e:	d12f      	bne.n	800bcc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f88e 	bl	800bd90 <UART_WaitOnFlagUntilTimeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d022      	beq.n	800bcc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc82:	e853 3f00 	ldrex	r3, [r3]
 800bc86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc8e:	653b      	str	r3, [r7, #80]	; 0x50
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc98:	647b      	str	r3, [r7, #68]	; 0x44
 800bc9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bca0:	e841 2300 	strex	r3, r2, [r1]
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1e6      	bne.n	800bc7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	e063      	b.n	800bd88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 0304 	and.w	r3, r3, #4
 800bcca:	2b04      	cmp	r3, #4
 800bccc:	d149      	bne.n	800bd62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f857 	bl	800bd90 <UART_WaitOnFlagUntilTimeout>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d03c      	beq.n	800bd62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	e853 3f00 	ldrex	r3, [r3]
 800bcf4:	623b      	str	r3, [r7, #32]
   return(result);
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd06:	633b      	str	r3, [r7, #48]	; 0x30
 800bd08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e6      	bne.n	800bce8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f023 0301 	bic.w	r3, r3, #1
 800bd30:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3308      	adds	r3, #8
 800bd38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd3a:	61fa      	str	r2, [r7, #28]
 800bd3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	69b9      	ldr	r1, [r7, #24]
 800bd40:	69fa      	ldr	r2, [r7, #28]
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	617b      	str	r3, [r7, #20]
   return(result);
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e5      	bne.n	800bd1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e012      	b.n	800bd88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2220      	movs	r2, #32
 800bd6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3758      	adds	r7, #88	; 0x58
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bda0:	e049      	b.n	800be36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda8:	d045      	beq.n	800be36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdaa:	f7f5 fd35 	bl	8001818 <HAL_GetTick>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	69ba      	ldr	r2, [r7, #24]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d302      	bcc.n	800bdc0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e048      	b.n	800be56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 0304 	and.w	r3, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d031      	beq.n	800be36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69db      	ldr	r3, [r3, #28]
 800bdd8:	f003 0308 	and.w	r3, r3, #8
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d110      	bne.n	800be02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2208      	movs	r2, #8
 800bde6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 f879 	bl	800bee0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e029      	b.n	800be56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69db      	ldr	r3, [r3, #28]
 800be08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be10:	d111      	bne.n	800be36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f85f 	bl	800bee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2220      	movs	r2, #32
 800be26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e00f      	b.n	800be56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	69da      	ldr	r2, [r3, #28]
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	4013      	ands	r3, r2
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	429a      	cmp	r2, r3
 800be44:	bf0c      	ite	eq
 800be46:	2301      	moveq	r3, #1
 800be48:	2300      	movne	r3, #0
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	461a      	mov	r2, r3
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	429a      	cmp	r2, r3
 800be52:	d0a6      	beq.n	800bda2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be5e:	b480      	push	{r7}
 800be60:	b08f      	sub	sp, #60	; 0x3c
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	61fb      	str	r3, [r7, #28]
   return(result);
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be7a:	637b      	str	r3, [r7, #52]	; 0x34
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be86:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e6      	bne.n	800be66 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3308      	adds	r3, #8
 800be9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800beae:	633b      	str	r3, [r7, #48]	; 0x30
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3308      	adds	r3, #8
 800beb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beb8:	61ba      	str	r2, [r7, #24]
 800beba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6979      	ldr	r1, [r7, #20]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	613b      	str	r3, [r7, #16]
   return(result);
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e5      	bne.n	800be98 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2220      	movs	r2, #32
 800bed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800bed4:	bf00      	nop
 800bed6:	373c      	adds	r7, #60	; 0x3c
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b095      	sub	sp, #84	; 0x54
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800befc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf06:	643b      	str	r3, [r7, #64]	; 0x40
 800bf08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf0e:	e841 2300 	strex	r3, r2, [r1]
 800bf12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1e6      	bne.n	800bee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3308      	adds	r3, #8
 800bf20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	4b1e      	ldr	r3, [pc, #120]	; (800bfa8 <UART_EndRxTransfer+0xc8>)
 800bf2e:	4013      	ands	r3, r2
 800bf30:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	3308      	adds	r3, #8
 800bf38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf42:	e841 2300 	strex	r3, r2, [r1]
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1e5      	bne.n	800bf1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d118      	bne.n	800bf88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	e853 3f00 	ldrex	r3, [r3]
 800bf62:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f023 0310 	bic.w	r3, r3, #16
 800bf6a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf74:	61bb      	str	r3, [r7, #24]
 800bf76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf78:	6979      	ldr	r1, [r7, #20]
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	e841 2300 	strex	r3, r2, [r1]
 800bf80:	613b      	str	r3, [r7, #16]
   return(result);
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e6      	bne.n	800bf56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bf9c:	bf00      	nop
 800bf9e:	3754      	adds	r7, #84	; 0x54
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	effffffe 	.word	0xeffffffe

0800bfac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b090      	sub	sp, #64	; 0x40
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc2:	d037      	beq.n	800c034 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800bfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	e853 3f00 	ldrex	r3, [r3]
 800bfda:	623b      	str	r3, [r7, #32]
   return(result);
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfe2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3308      	adds	r3, #8
 800bfea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfec:	633a      	str	r2, [r7, #48]	; 0x30
 800bfee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff4:	e841 2300 	strex	r3, r2, [r1]
 800bff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e5      	bne.n	800bfcc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
 800c016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c022:	69b9      	ldr	r1, [r7, #24]
 800c024:	69fa      	ldr	r2, [r7, #28]
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	617b      	str	r3, [r7, #20]
   return(result);
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e6      	bne.n	800c000 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c032:	e002      	b.n	800c03a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c034:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c036:	f7fe fed5 	bl	800ade4 <HAL_UART_TxCpltCallback>
}
 800c03a:	bf00      	nop
 800c03c:	3740      	adds	r7, #64	; 0x40
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7fe fed1 	bl	800adf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c056:	bf00      	nop
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c072:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c07a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c086:	2b80      	cmp	r3, #128	; 0x80
 800c088:	d109      	bne.n	800c09e <UART_DMAError+0x40>
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	2b21      	cmp	r3, #33	; 0x21
 800c08e:	d106      	bne.n	800c09e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2200      	movs	r2, #0
 800c094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c098:	6978      	ldr	r0, [r7, #20]
 800c09a:	f7ff fee0 	bl	800be5e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a8:	2b40      	cmp	r3, #64	; 0x40
 800c0aa:	d109      	bne.n	800c0c0 <UART_DMAError+0x62>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b22      	cmp	r3, #34	; 0x22
 800c0b0:	d106      	bne.n	800c0c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c0ba:	6978      	ldr	r0, [r7, #20]
 800c0bc:	f7ff ff10 	bl	800bee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0c6:	f043 0210 	orr.w	r2, r3, #16
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0d0:	6978      	ldr	r0, [r7, #20]
 800c0d2:	f7fe fe9b 	bl	800ae0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0d6:	bf00      	nop
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b085      	sub	sp, #20
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d101      	bne.n	800c0f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e027      	b.n	800c144 <HAL_UARTEx_DisableFifoMode+0x66>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2224      	movs	r2, #36	; 0x24
 800c100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f022 0201 	bic.w	r2, r2, #1
 800c11a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c122:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2220      	movs	r2, #32
 800c136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c160:	2b01      	cmp	r3, #1
 800c162:	d101      	bne.n	800c168 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c164:	2302      	movs	r3, #2
 800c166:	e02d      	b.n	800c1c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2224      	movs	r2, #36	; 0x24
 800c174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f022 0201 	bic.w	r2, r2, #1
 800c18e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 f84f 	bl	800c248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2220      	movs	r2, #32
 800c1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d101      	bne.n	800c1e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e02d      	b.n	800c240 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2224      	movs	r2, #36	; 0x24
 800c1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0201 	bic.w	r2, r2, #1
 800c20a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	430a      	orrs	r2, r1
 800c21e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f811 	bl	800c248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2220      	movs	r2, #32
 800c232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c254:	2b00      	cmp	r3, #0
 800c256:	d108      	bne.n	800c26a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c268:	e031      	b.n	800c2ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c26a:	2310      	movs	r3, #16
 800c26c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c26e:	2310      	movs	r3, #16
 800c270:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	0e5b      	lsrs	r3, r3, #25
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	f003 0307 	and.w	r3, r3, #7
 800c280:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	0f5b      	lsrs	r3, r3, #29
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f003 0307 	and.w	r3, r3, #7
 800c290:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c292:	7bbb      	ldrb	r3, [r7, #14]
 800c294:	7b3a      	ldrb	r2, [r7, #12]
 800c296:	4911      	ldr	r1, [pc, #68]	; (800c2dc <UARTEx_SetNbDataToProcess+0x94>)
 800c298:	5c8a      	ldrb	r2, [r1, r2]
 800c29a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c29e:	7b3a      	ldrb	r2, [r7, #12]
 800c2a0:	490f      	ldr	r1, [pc, #60]	; (800c2e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c2a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	7b7a      	ldrb	r2, [r7, #13]
 800c2b4:	4909      	ldr	r1, [pc, #36]	; (800c2dc <UARTEx_SetNbDataToProcess+0x94>)
 800c2b6:	5c8a      	ldrb	r2, [r1, r2]
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c2bc:	7b7a      	ldrb	r2, [r7, #13]
 800c2be:	4908      	ldr	r1, [pc, #32]	; (800c2e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c2c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c2ce:	bf00      	nop
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	08010cd8 	.word	0x08010cd8
 800c2e0:	08010ce0 	.word	0x08010ce0

0800c2e4 <__NVIC_SetPriority>:
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	6039      	str	r1, [r7, #0]
 800c2ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c2f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	db0a      	blt.n	800c30e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	490c      	ldr	r1, [pc, #48]	; (800c330 <__NVIC_SetPriority+0x4c>)
 800c2fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c302:	0112      	lsls	r2, r2, #4
 800c304:	b2d2      	uxtb	r2, r2
 800c306:	440b      	add	r3, r1
 800c308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c30c:	e00a      	b.n	800c324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	b2da      	uxtb	r2, r3
 800c312:	4908      	ldr	r1, [pc, #32]	; (800c334 <__NVIC_SetPriority+0x50>)
 800c314:	88fb      	ldrh	r3, [r7, #6]
 800c316:	f003 030f 	and.w	r3, r3, #15
 800c31a:	3b04      	subs	r3, #4
 800c31c:	0112      	lsls	r2, r2, #4
 800c31e:	b2d2      	uxtb	r2, r2
 800c320:	440b      	add	r3, r1
 800c322:	761a      	strb	r2, [r3, #24]
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	e000e100 	.word	0xe000e100
 800c334:	e000ed00 	.word	0xe000ed00

0800c338 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c338:	b580      	push	{r7, lr}
 800c33a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c33c:	4b05      	ldr	r3, [pc, #20]	; (800c354 <SysTick_Handler+0x1c>)
 800c33e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c340:	f002 f8f0 	bl	800e524 <xTaskGetSchedulerState>
 800c344:	4603      	mov	r3, r0
 800c346:	2b01      	cmp	r3, #1
 800c348:	d001      	beq.n	800c34e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c34a:	f002 ffd5 	bl	800f2f8 <xPortSysTickHandler>
  }
}
 800c34e:	bf00      	nop
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	e000e010 	.word	0xe000e010

0800c358 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c35c:	2100      	movs	r1, #0
 800c35e:	f06f 0004 	mvn.w	r0, #4
 800c362:	f7ff ffbf 	bl	800c2e4 <__NVIC_SetPriority>
#endif
}
 800c366:	bf00      	nop
 800c368:	bd80      	pop	{r7, pc}
	...

0800c36c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c372:	f3ef 8305 	mrs	r3, IPSR
 800c376:	603b      	str	r3, [r7, #0]
  return(result);
 800c378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c37e:	f06f 0305 	mvn.w	r3, #5
 800c382:	607b      	str	r3, [r7, #4]
 800c384:	e00c      	b.n	800c3a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c386:	4b0a      	ldr	r3, [pc, #40]	; (800c3b0 <osKernelInitialize+0x44>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d105      	bne.n	800c39a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c38e:	4b08      	ldr	r3, [pc, #32]	; (800c3b0 <osKernelInitialize+0x44>)
 800c390:	2201      	movs	r2, #1
 800c392:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c394:	2300      	movs	r3, #0
 800c396:	607b      	str	r3, [r7, #4]
 800c398:	e002      	b.n	800c3a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295
 800c39e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3a0:	687b      	ldr	r3, [r7, #4]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	2404a36c 	.word	0x2404a36c

0800c3b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3ba:	f3ef 8305 	mrs	r3, IPSR
 800c3be:	603b      	str	r3, [r7, #0]
  return(result);
 800c3c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <osKernelStart+0x1a>
    stat = osErrorISR;
 800c3c6:	f06f 0305 	mvn.w	r3, #5
 800c3ca:	607b      	str	r3, [r7, #4]
 800c3cc:	e010      	b.n	800c3f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c3ce:	4b0b      	ldr	r3, [pc, #44]	; (800c3fc <osKernelStart+0x48>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d109      	bne.n	800c3ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c3d6:	f7ff ffbf 	bl	800c358 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c3da:	4b08      	ldr	r3, [pc, #32]	; (800c3fc <osKernelStart+0x48>)
 800c3dc:	2202      	movs	r2, #2
 800c3de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c3e0:	f001 fc58 	bl	800dc94 <vTaskStartScheduler>
      stat = osOK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	607b      	str	r3, [r7, #4]
 800c3e8:	e002      	b.n	800c3f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3f0:	687b      	ldr	r3, [r7, #4]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	2404a36c 	.word	0x2404a36c

0800c400 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c400:	b580      	push	{r7, lr}
 800c402:	b08e      	sub	sp, #56	; 0x38
 800c404:	af04      	add	r7, sp, #16
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c410:	f3ef 8305 	mrs	r3, IPSR
 800c414:	617b      	str	r3, [r7, #20]
  return(result);
 800c416:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d17e      	bne.n	800c51a <osThreadNew+0x11a>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d07b      	beq.n	800c51a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c422:	2380      	movs	r3, #128	; 0x80
 800c424:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c426:	2318      	movs	r3, #24
 800c428:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c42e:	f04f 33ff 	mov.w	r3, #4294967295
 800c432:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d045      	beq.n	800c4c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <osThreadNew+0x48>
        name = attr->name;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d008      	beq.n	800c46e <osThreadNew+0x6e>
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	2b38      	cmp	r3, #56	; 0x38
 800c460:	d805      	bhi.n	800c46e <osThreadNew+0x6e>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	f003 0301 	and.w	r3, r3, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <osThreadNew+0x72>
        return (NULL);
 800c46e:	2300      	movs	r3, #0
 800c470:	e054      	b.n	800c51c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	089b      	lsrs	r3, r3, #2
 800c480:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00e      	beq.n	800c4a8 <osThreadNew+0xa8>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	2b5b      	cmp	r3, #91	; 0x5b
 800c490:	d90a      	bls.n	800c4a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c496:	2b00      	cmp	r3, #0
 800c498:	d006      	beq.n	800c4a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <osThreadNew+0xa8>
        mem = 1;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	61bb      	str	r3, [r7, #24]
 800c4a6:	e010      	b.n	800c4ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10c      	bne.n	800c4ca <osThreadNew+0xca>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d108      	bne.n	800c4ca <osThreadNew+0xca>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d104      	bne.n	800c4ca <osThreadNew+0xca>
          mem = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	61bb      	str	r3, [r7, #24]
 800c4c4:	e001      	b.n	800c4ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d110      	bne.n	800c4f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4d8:	9202      	str	r2, [sp, #8]
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	6a3a      	ldr	r2, [r7, #32]
 800c4e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f001 fa32 	bl	800d950 <xTaskCreateStatic>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	613b      	str	r3, [r7, #16]
 800c4f0:	e013      	b.n	800c51a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d110      	bne.n	800c51a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	f107 0310 	add.w	r3, r7, #16
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f001 fa7d 	bl	800da0a <xTaskCreate>
 800c510:	4603      	mov	r3, r0
 800c512:	2b01      	cmp	r3, #1
 800c514:	d001      	beq.n	800c51a <osThreadNew+0x11a>
            hTask = NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c51a:	693b      	ldr	r3, [r7, #16]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3728      	adds	r7, #40	; 0x28
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c524:	b580      	push	{r7, lr}
 800c526:	b08a      	sub	sp, #40	; 0x28
 800c528:	af02      	add	r7, sp, #8
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c530:	2300      	movs	r3, #0
 800c532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c534:	f3ef 8305 	mrs	r3, IPSR
 800c538:	613b      	str	r3, [r7, #16]
  return(result);
 800c53a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d175      	bne.n	800c62c <osSemaphoreNew+0x108>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d072      	beq.n	800c62c <osSemaphoreNew+0x108>
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d86e      	bhi.n	800c62c <osSemaphoreNew+0x108>
    mem = -1;
 800c54e:	f04f 33ff 	mov.w	r3, #4294967295
 800c552:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d015      	beq.n	800c586 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d006      	beq.n	800c570 <osSemaphoreNew+0x4c>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	2b4f      	cmp	r3, #79	; 0x4f
 800c568:	d902      	bls.n	800c570 <osSemaphoreNew+0x4c>
        mem = 1;
 800c56a:	2301      	movs	r3, #1
 800c56c:	61bb      	str	r3, [r7, #24]
 800c56e:	e00c      	b.n	800c58a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d108      	bne.n	800c58a <osSemaphoreNew+0x66>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d104      	bne.n	800c58a <osSemaphoreNew+0x66>
          mem = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	61bb      	str	r3, [r7, #24]
 800c584:	e001      	b.n	800c58a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c586:	2300      	movs	r3, #0
 800c588:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c590:	d04c      	beq.n	800c62c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d128      	bne.n	800c5ea <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d10a      	bne.n	800c5b4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	2203      	movs	r2, #3
 800c5a4:	9200      	str	r2, [sp, #0]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	f000 fa2a 	bl	800ca04 <xQueueGenericCreateStatic>
 800c5b0:	61f8      	str	r0, [r7, #28]
 800c5b2:	e005      	b.n	800c5c0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c5b4:	2203      	movs	r2, #3
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f000 fa9b 	bl	800caf4 <xQueueGenericCreate>
 800c5be:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d022      	beq.n	800c60c <osSemaphoreNew+0xe8>
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01f      	beq.n	800c60c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	69f8      	ldr	r0, [r7, #28]
 800c5d4:	f000 fb56 	bl	800cc84 <xQueueGenericSend>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d016      	beq.n	800c60c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c5de:	69f8      	ldr	r0, [r7, #28]
 800c5e0:	f000 ffe2 	bl	800d5a8 <vQueueDelete>
            hSemaphore = NULL;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	61fb      	str	r3, [r7, #28]
 800c5e8:	e010      	b.n	800c60c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d108      	bne.n	800c602 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f000 fad8 	bl	800cbae <xQueueCreateCountingSemaphoreStatic>
 800c5fe:	61f8      	str	r0, [r7, #28]
 800c600:	e004      	b.n	800c60c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c602:	68b9      	ldr	r1, [r7, #8]
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f000 fb09 	bl	800cc1c <xQueueCreateCountingSemaphore>
 800c60a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00c      	beq.n	800c62c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d003      	beq.n	800c620 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	617b      	str	r3, [r7, #20]
 800c61e:	e001      	b.n	800c624 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c624:	6979      	ldr	r1, [r7, #20]
 800c626:	69f8      	ldr	r0, [r7, #28]
 800c628:	f001 f90a 	bl	800d840 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c62c:	69fb      	ldr	r3, [r7, #28]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3720      	adds	r7, #32
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
	...

0800c638 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c646:	2300      	movs	r3, #0
 800c648:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d103      	bne.n	800c658 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c650:	f06f 0303 	mvn.w	r3, #3
 800c654:	617b      	str	r3, [r7, #20]
 800c656:	e039      	b.n	800c6cc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c658:	f3ef 8305 	mrs	r3, IPSR
 800c65c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c65e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c660:	2b00      	cmp	r3, #0
 800c662:	d022      	beq.n	800c6aa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d003      	beq.n	800c672 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c66a:	f06f 0303 	mvn.w	r3, #3
 800c66e:	617b      	str	r3, [r7, #20]
 800c670:	e02c      	b.n	800c6cc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c672:	2300      	movs	r3, #0
 800c674:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c676:	f107 0308 	add.w	r3, r7, #8
 800c67a:	461a      	mov	r2, r3
 800c67c:	2100      	movs	r1, #0
 800c67e:	6938      	ldr	r0, [r7, #16]
 800c680:	f000 ff12 	bl	800d4a8 <xQueueReceiveFromISR>
 800c684:	4603      	mov	r3, r0
 800c686:	2b01      	cmp	r3, #1
 800c688:	d003      	beq.n	800c692 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c68a:	f06f 0302 	mvn.w	r3, #2
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	e01c      	b.n	800c6cc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d019      	beq.n	800c6cc <osSemaphoreAcquire+0x94>
 800c698:	4b0f      	ldr	r3, [pc, #60]	; (800c6d8 <osSemaphoreAcquire+0xa0>)
 800c69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c69e:	601a      	str	r2, [r3, #0]
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	e010      	b.n	800c6cc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6938      	ldr	r0, [r7, #16]
 800c6ae:	f000 fdef 	bl	800d290 <xQueueSemaphoreTake>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d009      	beq.n	800c6cc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d003      	beq.n	800c6c6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c6be:	f06f 0301 	mvn.w	r3, #1
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	e002      	b.n	800c6cc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c6c6:	f06f 0302 	mvn.w	r3, #2
 800c6ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c6cc:	697b      	ldr	r3, [r7, #20]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d103      	bne.n	800c6fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c6f2:	f06f 0303 	mvn.w	r3, #3
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	e02c      	b.n	800c754 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6fa:	f3ef 8305 	mrs	r3, IPSR
 800c6fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800c700:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c702:	2b00      	cmp	r3, #0
 800c704:	d01a      	beq.n	800c73c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c706:	2300      	movs	r3, #0
 800c708:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c70a:	f107 0308 	add.w	r3, r7, #8
 800c70e:	4619      	mov	r1, r3
 800c710:	6938      	ldr	r0, [r7, #16]
 800c712:	f000 fc50 	bl	800cfb6 <xQueueGiveFromISR>
 800c716:	4603      	mov	r3, r0
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d003      	beq.n	800c724 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c71c:	f06f 0302 	mvn.w	r3, #2
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	e017      	b.n	800c754 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d014      	beq.n	800c754 <osSemaphoreRelease+0x78>
 800c72a:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <osSemaphoreRelease+0x84>)
 800c72c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	e00b      	b.n	800c754 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c73c:	2300      	movs	r3, #0
 800c73e:	2200      	movs	r2, #0
 800c740:	2100      	movs	r1, #0
 800c742:	6938      	ldr	r0, [r7, #16]
 800c744:	f000 fa9e 	bl	800cc84 <xQueueGenericSend>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d002      	beq.n	800c754 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c74e:	f06f 0302 	mvn.w	r3, #2
 800c752:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c754:	697b      	ldr	r3, [r7, #20]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	e000ed04 	.word	0xe000ed04

0800c764 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4a07      	ldr	r2, [pc, #28]	; (800c790 <vApplicationGetIdleTaskMemory+0x2c>)
 800c774:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	4a06      	ldr	r2, [pc, #24]	; (800c794 <vApplicationGetIdleTaskMemory+0x30>)
 800c77a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2280      	movs	r2, #128	; 0x80
 800c780:	601a      	str	r2, [r3, #0]
}
 800c782:	bf00      	nop
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	2404a370 	.word	0x2404a370
 800c794:	2404a3cc 	.word	0x2404a3cc

0800c798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4a07      	ldr	r2, [pc, #28]	; (800c7c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c7a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	4a06      	ldr	r2, [pc, #24]	; (800c7c8 <vApplicationGetTimerTaskMemory+0x30>)
 800c7ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7b6:	601a      	str	r2, [r3, #0]
}
 800c7b8:	bf00      	nop
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	2404a5cc 	.word	0x2404a5cc
 800c7c8:	2404a628 	.word	0x2404a628

0800c7cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f103 0208 	add.w	r2, r3, #8
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f103 0208 	add.w	r2, r3, #8
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f103 0208 	add.w	r2, r3, #8
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c826:	b480      	push	{r7}
 800c828:	b085      	sub	sp, #20
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	689a      	ldr	r2, [r3, #8]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	1c5a      	adds	r2, r3, #1
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	601a      	str	r2, [r3, #0]
}
 800c862:	bf00      	nop
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c86e:	b480      	push	{r7}
 800c870:	b085      	sub	sp, #20
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c884:	d103      	bne.n	800c88e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	e00c      	b.n	800c8a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	3308      	adds	r3, #8
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e002      	b.n	800c89c <vListInsert+0x2e>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d2f6      	bcs.n	800c896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	1c5a      	adds	r2, r3, #1
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	6892      	ldr	r2, [r2, #8]
 800c8f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	6852      	ldr	r2, [r2, #4]
 800c900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d103      	bne.n	800c914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	689a      	ldr	r2, [r3, #8]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	1e5a      	subs	r2, r3, #1
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10a      	bne.n	800c95e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c95a:	bf00      	nop
 800c95c:	e7fe      	b.n	800c95c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c95e:	f002 fc39 	bl	800f1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96a:	68f9      	ldr	r1, [r7, #12]
 800c96c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c96e:	fb01 f303 	mul.w	r3, r1, r3
 800c972:	441a      	add	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98e:	3b01      	subs	r3, #1
 800c990:	68f9      	ldr	r1, [r7, #12]
 800c992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c994:	fb01 f303 	mul.w	r3, r1, r3
 800c998:	441a      	add	r2, r3
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	22ff      	movs	r2, #255	; 0xff
 800c9a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	22ff      	movs	r2, #255	; 0xff
 800c9aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d114      	bne.n	800c9de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	691b      	ldr	r3, [r3, #16]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01a      	beq.n	800c9f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3310      	adds	r3, #16
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f001 fbf1 	bl	800e1a8 <xTaskRemoveFromEventList>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d012      	beq.n	800c9f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ca00 <xQueueGenericReset+0xcc>)
 800c9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	e009      	b.n	800c9f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3310      	adds	r3, #16
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fef2 	bl	800c7cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3324      	adds	r3, #36	; 0x24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff feed 	bl	800c7cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9f2:	f002 fc1f 	bl	800f234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9f6:	2301      	movs	r3, #1
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08e      	sub	sp, #56	; 0x38
 800ca08:	af02      	add	r7, sp, #8
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10a      	bne.n	800ca2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10a      	bne.n	800ca4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca46:	bf00      	nop
 800ca48:	e7fe      	b.n	800ca48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <xQueueGenericCreateStatic+0x52>
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <xQueueGenericCreateStatic+0x56>
 800ca56:	2301      	movs	r3, #1
 800ca58:	e000      	b.n	800ca5c <xQueueGenericCreateStatic+0x58>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	623b      	str	r3, [r7, #32]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d102      	bne.n	800ca82 <xQueueGenericCreateStatic+0x7e>
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <xQueueGenericCreateStatic+0x82>
 800ca82:	2301      	movs	r3, #1
 800ca84:	e000      	b.n	800ca88 <xQueueGenericCreateStatic+0x84>
 800ca86:	2300      	movs	r3, #0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	f383 8811 	msr	BASEPRI, r3
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	61fb      	str	r3, [r7, #28]
}
 800ca9e:	bf00      	nop
 800caa0:	e7fe      	b.n	800caa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800caa2:	2350      	movs	r3, #80	; 0x50
 800caa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b50      	cmp	r3, #80	; 0x50
 800caaa:	d00a      	beq.n	800cac2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	61bb      	str	r3, [r7, #24]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cac2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00d      	beq.n	800caea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cad6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	4613      	mov	r3, r2
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	68b9      	ldr	r1, [r7, #8]
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 f83f 	bl	800cb68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800caec:	4618      	mov	r0, r3
 800caee:	3730      	adds	r7, #48	; 0x30
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08a      	sub	sp, #40	; 0x28
 800caf8:	af02      	add	r7, sp, #8
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10a      	bne.n	800cb1e <xQueueGenericCreate+0x2a>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	613b      	str	r3, [r7, #16]
}
 800cb1a:	bf00      	nop
 800cb1c:	e7fe      	b.n	800cb1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	fb02 f303 	mul.w	r3, r2, r3
 800cb26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	3350      	adds	r3, #80	; 0x50
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f002 fc73 	bl	800f418 <pvPortMalloc>
 800cb32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d011      	beq.n	800cb5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	3350      	adds	r3, #80	; 0x50
 800cb42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb4c:	79fa      	ldrb	r2, [r7, #7]
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	4613      	mov	r3, r2
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	68b9      	ldr	r1, [r7, #8]
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f000 f805 	bl	800cb68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb5e:	69bb      	ldr	r3, [r7, #24]
	}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3720      	adds	r7, #32
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d103      	bne.n	800cb84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	e002      	b.n	800cb8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb96:	2101      	movs	r1, #1
 800cb98:	69b8      	ldr	r0, [r7, #24]
 800cb9a:	f7ff fecb 	bl	800c934 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	78fa      	ldrb	r2, [r7, #3]
 800cba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cba6:	bf00      	nop
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b08a      	sub	sp, #40	; 0x28
 800cbb2:	af02      	add	r7, sp, #8
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d10a      	bne.n	800cbd6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	61bb      	str	r3, [r7, #24]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d90a      	bls.n	800cbf4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	617b      	str	r3, [r7, #20]
}
 800cbf0:	bf00      	nop
 800cbf2:	e7fe      	b.n	800cbf2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f7ff ff00 	bl	800ca04 <xQueueGenericCreateStatic>
 800cc04:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc12:	69fb      	ldr	r3, [r7, #28]
	}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3720      	adds	r7, #32
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	613b      	str	r3, [r7, #16]
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d90a      	bls.n	800cc60 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	60fb      	str	r3, [r7, #12]
}
 800cc5c:	bf00      	nop
 800cc5e:	e7fe      	b.n	800cc5e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc60:	2202      	movs	r2, #2
 800cc62:	2100      	movs	r1, #0
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ff45 	bl	800caf4 <xQueueGenericCreate>
 800cc6a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d002      	beq.n	800cc78 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc78:	697b      	ldr	r3, [r7, #20]
	}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3718      	adds	r7, #24
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08e      	sub	sp, #56	; 0x38
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc92:	2300      	movs	r3, #0
 800cc94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10a      	bne.n	800ccb6 <xQueueGenericSend+0x32>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d103      	bne.n	800ccc4 <xQueueGenericSend+0x40>
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <xQueueGenericSend+0x44>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e000      	b.n	800ccca <xQueueGenericSend+0x46>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10a      	bne.n	800cce4 <xQueueGenericSend+0x60>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cce0:	bf00      	nop
 800cce2:	e7fe      	b.n	800cce2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d103      	bne.n	800ccf2 <xQueueGenericSend+0x6e>
 800ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d101      	bne.n	800ccf6 <xQueueGenericSend+0x72>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e000      	b.n	800ccf8 <xQueueGenericSend+0x74>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <xQueueGenericSend+0x8e>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	623b      	str	r3, [r7, #32]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd12:	f001 fc07 	bl	800e524 <xTaskGetSchedulerState>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d102      	bne.n	800cd22 <xQueueGenericSend+0x9e>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <xQueueGenericSend+0xa2>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e000      	b.n	800cd28 <xQueueGenericSend+0xa4>
 800cd26:	2300      	movs	r3, #0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xQueueGenericSend+0xbe>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	61fb      	str	r3, [r7, #28]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd42:	f002 fa47 	bl	800f1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d302      	bcc.n	800cd58 <xQueueGenericSend+0xd4>
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b02      	cmp	r3, #2
 800cd56:	d129      	bne.n	800cdac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd5e:	f000 fc5e 	bl	800d61e <prvCopyDataToQueue>
 800cd62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d010      	beq.n	800cd8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	3324      	adds	r3, #36	; 0x24
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 fa19 	bl	800e1a8 <xTaskRemoveFromEventList>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d013      	beq.n	800cda4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd7c:	4b3f      	ldr	r3, [pc, #252]	; (800ce7c <xQueueGenericSend+0x1f8>)
 800cd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	e00a      	b.n	800cda4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d007      	beq.n	800cda4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd94:	4b39      	ldr	r3, [pc, #228]	; (800ce7c <xQueueGenericSend+0x1f8>)
 800cd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cda4:	f002 fa46 	bl	800f234 <vPortExitCritical>
				return pdPASS;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e063      	b.n	800ce74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d103      	bne.n	800cdba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdb2:	f002 fa3f 	bl	800f234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e05c      	b.n	800ce74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d106      	bne.n	800cdce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdc0:	f107 0314 	add.w	r3, r7, #20
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f001 fa53 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdce:	f002 fa31 	bl	800f234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdd2:	f000 ffc5 	bl	800dd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdd6:	f002 f9fd 	bl	800f1d4 <vPortEnterCritical>
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cde0:	b25b      	sxtb	r3, r3
 800cde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde6:	d103      	bne.n	800cdf0 <xQueueGenericSend+0x16c>
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf6:	b25b      	sxtb	r3, r3
 800cdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfc:	d103      	bne.n	800ce06 <xQueueGenericSend+0x182>
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce06:	f002 fa15 	bl	800f234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce0a:	1d3a      	adds	r2, r7, #4
 800ce0c:	f107 0314 	add.w	r3, r7, #20
 800ce10:	4611      	mov	r1, r2
 800ce12:	4618      	mov	r0, r3
 800ce14:	f001 fa42 	bl	800e29c <xTaskCheckForTimeOut>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d124      	bne.n	800ce68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce20:	f000 fcf5 	bl	800d80e <prvIsQueueFull>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d018      	beq.n	800ce5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	3310      	adds	r3, #16
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	4611      	mov	r1, r2
 800ce32:	4618      	mov	r0, r3
 800ce34:	f001 f968 	bl	800e108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce3a:	f000 fc80 	bl	800d73e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce3e:	f000 ff9d 	bl	800dd7c <xTaskResumeAll>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f47f af7c 	bne.w	800cd42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce4a:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <xQueueGenericSend+0x1f8>)
 800ce4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	e772      	b.n	800cd42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce5e:	f000 fc6e 	bl	800d73e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce62:	f000 ff8b 	bl	800dd7c <xTaskResumeAll>
 800ce66:	e76c      	b.n	800cd42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce6a:	f000 fc68 	bl	800d73e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce6e:	f000 ff85 	bl	800dd7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3738      	adds	r7, #56	; 0x38
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	e000ed04 	.word	0xe000ed04

0800ce80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b090      	sub	sp, #64	; 0x40
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10a      	bne.n	800ceae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d103      	bne.n	800cebc <xQueueGenericSendFromISR+0x3c>
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <xQueueGenericSendFromISR+0x40>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e000      	b.n	800cec2 <xQueueGenericSendFromISR+0x42>
 800cec0:	2300      	movs	r3, #0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10a      	bne.n	800cedc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ced8:	bf00      	nop
 800ceda:	e7fe      	b.n	800ceda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	2b02      	cmp	r3, #2
 800cee0:	d103      	bne.n	800ceea <xQueueGenericSendFromISR+0x6a>
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d101      	bne.n	800ceee <xQueueGenericSendFromISR+0x6e>
 800ceea:	2301      	movs	r3, #1
 800ceec:	e000      	b.n	800cef0 <xQueueGenericSendFromISR+0x70>
 800ceee:	2300      	movs	r3, #0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10a      	bne.n	800cf0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	623b      	str	r3, [r7, #32]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf0a:	f002 fa45 	bl	800f398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf0e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	61fa      	str	r2, [r7, #28]
 800cf24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d302      	bcc.n	800cf3c <xQueueGenericSendFromISR+0xbc>
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d12f      	bne.n	800cf9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	68b9      	ldr	r1, [r7, #8]
 800cf50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf52:	f000 fb64 	bl	800d61e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5e:	d112      	bne.n	800cf86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d016      	beq.n	800cf96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	3324      	adds	r3, #36	; 0x24
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f001 f91b 	bl	800e1a8 <xTaskRemoveFromEventList>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00e      	beq.n	800cf96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00b      	beq.n	800cf96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	e007      	b.n	800cf96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	b25a      	sxtb	r2, r3
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf96:	2301      	movs	r3, #1
 800cf98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cf9a:	e001      	b.n	800cfa0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cfaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3740      	adds	r7, #64	; 0x40
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b08e      	sub	sp, #56	; 0x38
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10a      	bne.n	800cfe0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	623b      	str	r3, [r7, #32]
}
 800cfdc:	bf00      	nop
 800cfde:	e7fe      	b.n	800cfde <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00a      	beq.n	800cffe <xQueueGiveFromISR+0x48>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	61fb      	str	r3, [r7, #28]
}
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d103      	bne.n	800d00e <xQueueGiveFromISR+0x58>
 800d006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <xQueueGiveFromISR+0x5c>
 800d00e:	2301      	movs	r3, #1
 800d010:	e000      	b.n	800d014 <xQueueGiveFromISR+0x5e>
 800d012:	2300      	movs	r3, #0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10a      	bne.n	800d02e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	61bb      	str	r3, [r7, #24]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d02e:	f002 f9b3 	bl	800f398 <vPortValidateInterruptPriority>
	__asm volatile
 800d032:	f3ef 8211 	mrs	r2, BASEPRI
 800d036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	617a      	str	r2, [r7, #20]
 800d048:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d04a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d04c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d052:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d22b      	bcs.n	800d0b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	1c5a      	adds	r2, r3, #1
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d078:	d112      	bne.n	800d0a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d016      	beq.n	800d0b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	3324      	adds	r3, #36	; 0x24
 800d086:	4618      	mov	r0, r3
 800d088:	f001 f88e 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00e      	beq.n	800d0b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00b      	beq.n	800d0b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2201      	movs	r2, #1
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	e007      	b.n	800d0b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	b25a      	sxtb	r2, r3
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0b4:	e001      	b.n	800d0ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f383 8811 	msr	BASEPRI, r3
}
 800d0c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3738      	adds	r7, #56	; 0x38
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08c      	sub	sp, #48	; 0x30
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10a      	bne.n	800d100 <xQueueReceive+0x30>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	623b      	str	r3, [r7, #32]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d103      	bne.n	800d10e <xQueueReceive+0x3e>
 800d106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <xQueueReceive+0x42>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <xQueueReceive+0x44>
 800d112:	2300      	movs	r3, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueReceive+0x5e>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	61fb      	str	r3, [r7, #28]
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d12e:	f001 f9f9 	bl	800e524 <xTaskGetSchedulerState>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d102      	bne.n	800d13e <xQueueReceive+0x6e>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <xQueueReceive+0x72>
 800d13e:	2301      	movs	r3, #1
 800d140:	e000      	b.n	800d144 <xQueueReceive+0x74>
 800d142:	2300      	movs	r3, #0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10a      	bne.n	800d15e <xQueueReceive+0x8e>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	61bb      	str	r3, [r7, #24]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d15e:	f002 f839 	bl	800f1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d166:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d01f      	beq.n	800d1ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d172:	f000 fabe 	bl	800d6f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d178:	1e5a      	subs	r2, r3, #1
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00f      	beq.n	800d1a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d188:	3310      	adds	r3, #16
 800d18a:	4618      	mov	r0, r3
 800d18c:	f001 f80c 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d007      	beq.n	800d1a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d196:	4b3d      	ldr	r3, [pc, #244]	; (800d28c <xQueueReceive+0x1bc>)
 800d198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1a6:	f002 f845 	bl	800f234 <vPortExitCritical>
				return pdPASS;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e069      	b.n	800d282 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d103      	bne.n	800d1bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1b4:	f002 f83e 	bl	800f234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e062      	b.n	800d282 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d106      	bne.n	800d1d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1c2:	f107 0310 	add.w	r3, r7, #16
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f001 f852 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1d0:	f002 f830 	bl	800f234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1d4:	f000 fdc4 	bl	800dd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1d8:	f001 fffc 	bl	800f1d4 <vPortEnterCritical>
 800d1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1e2:	b25b      	sxtb	r3, r3
 800d1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e8:	d103      	bne.n	800d1f2 <xQueueReceive+0x122>
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1f8:	b25b      	sxtb	r3, r3
 800d1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1fe:	d103      	bne.n	800d208 <xQueueReceive+0x138>
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	2200      	movs	r2, #0
 800d204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d208:	f002 f814 	bl	800f234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d20c:	1d3a      	adds	r2, r7, #4
 800d20e:	f107 0310 	add.w	r3, r7, #16
 800d212:	4611      	mov	r1, r2
 800d214:	4618      	mov	r0, r3
 800d216:	f001 f841 	bl	800e29c <xTaskCheckForTimeOut>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d123      	bne.n	800d268 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d222:	f000 fade 	bl	800d7e2 <prvIsQueueEmpty>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d017      	beq.n	800d25c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22e:	3324      	adds	r3, #36	; 0x24
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	4611      	mov	r1, r2
 800d234:	4618      	mov	r0, r3
 800d236:	f000 ff67 	bl	800e108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d23c:	f000 fa7f 	bl	800d73e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d240:	f000 fd9c 	bl	800dd7c <xTaskResumeAll>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d189      	bne.n	800d15e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d24a:	4b10      	ldr	r3, [pc, #64]	; (800d28c <xQueueReceive+0x1bc>)
 800d24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d250:	601a      	str	r2, [r3, #0]
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	e780      	b.n	800d15e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d25e:	f000 fa6e 	bl	800d73e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d262:	f000 fd8b 	bl	800dd7c <xTaskResumeAll>
 800d266:	e77a      	b.n	800d15e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26a:	f000 fa68 	bl	800d73e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d26e:	f000 fd85 	bl	800dd7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d274:	f000 fab5 	bl	800d7e2 <prvIsQueueEmpty>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f43f af6f 	beq.w	800d15e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d280:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d282:	4618      	mov	r0, r3
 800d284:	3730      	adds	r7, #48	; 0x30
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	e000ed04 	.word	0xe000ed04

0800d290 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b08e      	sub	sp, #56	; 0x38
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d29a:	2300      	movs	r3, #0
 800d29c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	623b      	str	r3, [r7, #32]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00a      	beq.n	800d2e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	61fb      	str	r3, [r7, #28]
}
 800d2dc:	bf00      	nop
 800d2de:	e7fe      	b.n	800d2de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2e0:	f001 f920 	bl	800e524 <xTaskGetSchedulerState>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d102      	bne.n	800d2f0 <xQueueSemaphoreTake+0x60>
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <xQueueSemaphoreTake+0x64>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e000      	b.n	800d2f6 <xQueueSemaphoreTake+0x66>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10a      	bne.n	800d310 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	61bb      	str	r3, [r7, #24]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d310:	f001 ff60 	bl	800f1d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d318:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d024      	beq.n	800d36a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	1e5a      	subs	r2, r3, #1
 800d324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d326:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d104      	bne.n	800d33a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d330:	f001 fa6e 	bl	800e810 <pvTaskIncrementMutexHeldCount>
 800d334:	4602      	mov	r2, r0
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00f      	beq.n	800d362 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	3310      	adds	r3, #16
 800d346:	4618      	mov	r0, r3
 800d348:	f000 ff2e 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d007      	beq.n	800d362 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d352:	4b54      	ldr	r3, [pc, #336]	; (800d4a4 <xQueueSemaphoreTake+0x214>)
 800d354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d362:	f001 ff67 	bl	800f234 <vPortExitCritical>
				return pdPASS;
 800d366:	2301      	movs	r3, #1
 800d368:	e097      	b.n	800d49a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d111      	bne.n	800d394 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00a      	beq.n	800d38c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	617b      	str	r3, [r7, #20]
}
 800d388:	bf00      	nop
 800d38a:	e7fe      	b.n	800d38a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d38c:	f001 ff52 	bl	800f234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d390:	2300      	movs	r3, #0
 800d392:	e082      	b.n	800d49a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d39a:	f107 030c 	add.w	r3, r7, #12
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 ff66 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3a8:	f001 ff44 	bl	800f234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3ac:	f000 fcd8 	bl	800dd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3b0:	f001 ff10 	bl	800f1d4 <vPortEnterCritical>
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ba:	b25b      	sxtb	r3, r3
 800d3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c0:	d103      	bne.n	800d3ca <xQueueSemaphoreTake+0x13a>
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3d0:	b25b      	sxtb	r3, r3
 800d3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d6:	d103      	bne.n	800d3e0 <xQueueSemaphoreTake+0x150>
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3e0:	f001 ff28 	bl	800f234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3e4:	463a      	mov	r2, r7
 800d3e6:	f107 030c 	add.w	r3, r7, #12
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 ff55 	bl	800e29c <xTaskCheckForTimeOut>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d132      	bne.n	800d45e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3fa:	f000 f9f2 	bl	800d7e2 <prvIsQueueEmpty>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d026      	beq.n	800d452 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d109      	bne.n	800d420 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d40c:	f001 fee2 	bl	800f1d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	4618      	mov	r0, r3
 800d416:	f001 f8a3 	bl	800e560 <xTaskPriorityInherit>
 800d41a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d41c:	f001 ff0a 	bl	800f234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	3324      	adds	r3, #36	; 0x24
 800d424:	683a      	ldr	r2, [r7, #0]
 800d426:	4611      	mov	r1, r2
 800d428:	4618      	mov	r0, r3
 800d42a:	f000 fe6d 	bl	800e108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d430:	f000 f985 	bl	800d73e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d434:	f000 fca2 	bl	800dd7c <xTaskResumeAll>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f47f af68 	bne.w	800d310 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d440:	4b18      	ldr	r3, [pc, #96]	; (800d4a4 <xQueueSemaphoreTake+0x214>)
 800d442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	e75e      	b.n	800d310 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d454:	f000 f973 	bl	800d73e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d458:	f000 fc90 	bl	800dd7c <xTaskResumeAll>
 800d45c:	e758      	b.n	800d310 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d45e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d460:	f000 f96d 	bl	800d73e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d464:	f000 fc8a 	bl	800dd7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d46a:	f000 f9ba 	bl	800d7e2 <prvIsQueueEmpty>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	f43f af4d 	beq.w	800d310 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00d      	beq.n	800d498 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d47c:	f001 feaa 	bl	800f1d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d482:	f000 f8b4 	bl	800d5ee <prvGetDisinheritPriorityAfterTimeout>
 800d486:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d48e:	4618      	mov	r0, r3
 800d490:	f001 f93c 	bl	800e70c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d494:	f001 fece 	bl	800f234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3738      	adds	r7, #56	; 0x38
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08e      	sub	sp, #56	; 0x38
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10a      	bne.n	800d4d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	623b      	str	r3, [r7, #32]
}
 800d4d0:	bf00      	nop
 800d4d2:	e7fe      	b.n	800d4d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d103      	bne.n	800d4e2 <xQueueReceiveFromISR+0x3a>
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <xQueueReceiveFromISR+0x3e>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e000      	b.n	800d4e8 <xQueueReceiveFromISR+0x40>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10a      	bne.n	800d502 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	61fb      	str	r3, [r7, #28]
}
 800d4fe:	bf00      	nop
 800d500:	e7fe      	b.n	800d500 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d502:	f001 ff49 	bl	800f398 <vPortValidateInterruptPriority>
	__asm volatile
 800d506:	f3ef 8211 	mrs	r2, BASEPRI
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	61ba      	str	r2, [r7, #24]
 800d51c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d51e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d520:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d526:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d02f      	beq.n	800d58e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d538:	68b9      	ldr	r1, [r7, #8]
 800d53a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d53c:	f000 f8d9 	bl	800d6f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d542:	1e5a      	subs	r2, r3, #1
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d550:	d112      	bne.n	800d578 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d016      	beq.n	800d588 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55c:	3310      	adds	r3, #16
 800d55e:	4618      	mov	r0, r3
 800d560:	f000 fe22 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00e      	beq.n	800d588 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	e007      	b.n	800d588 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57c:	3301      	adds	r3, #1
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	b25a      	sxtb	r2, r3
 800d582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d588:	2301      	movs	r3, #1
 800d58a:	637b      	str	r3, [r7, #52]	; 0x34
 800d58c:	e001      	b.n	800d592 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d58e:	2300      	movs	r3, #0
 800d590:	637b      	str	r3, [r7, #52]	; 0x34
 800d592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d594:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	f383 8811 	msr	BASEPRI, r3
}
 800d59c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3738      	adds	r7, #56	; 0x38
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10a      	bne.n	800d5d0 <vQueueDelete+0x28>
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	60bb      	str	r3, [r7, #8]
}
 800d5cc:	bf00      	nop
 800d5ce:	e7fe      	b.n	800d5ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 f95f 	bl	800d894 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d102      	bne.n	800d5e6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f001 ffe5 	bl	800f5b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5e6:	bf00      	nop
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5ee:	b480      	push	{r7}
 800d5f0:	b085      	sub	sp, #20
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d006      	beq.n	800d60c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d608:	60fb      	str	r3, [r7, #12]
 800d60a:	e001      	b.n	800d610 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d610:	68fb      	ldr	r3, [r7, #12]
	}
 800d612:	4618      	mov	r0, r3
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b086      	sub	sp, #24
 800d622:	af00      	add	r7, sp, #0
 800d624:	60f8      	str	r0, [r7, #12]
 800d626:	60b9      	str	r1, [r7, #8]
 800d628:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d632:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10d      	bne.n	800d658 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d14d      	bne.n	800d6e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 fff1 	bl	800e630 <xTaskPriorityDisinherit>
 800d64e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2200      	movs	r2, #0
 800d654:	609a      	str	r2, [r3, #8]
 800d656:	e043      	b.n	800d6e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d119      	bne.n	800d692 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6858      	ldr	r0, [r3, #4]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d666:	461a      	mov	r2, r3
 800d668:	68b9      	ldr	r1, [r7, #8]
 800d66a:	f003 f9ab 	bl	80109c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	685a      	ldr	r2, [r3, #4]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	441a      	add	r2, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	685a      	ldr	r2, [r3, #4]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	429a      	cmp	r2, r3
 800d686:	d32b      	bcc.n	800d6e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	605a      	str	r2, [r3, #4]
 800d690:	e026      	b.n	800d6e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	68d8      	ldr	r0, [r3, #12]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69a:	461a      	mov	r2, r3
 800d69c:	68b9      	ldr	r1, [r7, #8]
 800d69e:	f003 f991 	bl	80109c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	68da      	ldr	r2, [r3, #12]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6aa:	425b      	negs	r3, r3
 800d6ac:	441a      	add	r2, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	68da      	ldr	r2, [r3, #12]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d207      	bcs.n	800d6ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	689a      	ldr	r2, [r3, #8]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	425b      	negs	r3, r3
 800d6c8:	441a      	add	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d105      	bne.n	800d6e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d002      	beq.n	800d6e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	1c5a      	adds	r2, r3, #1
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6e8:	697b      	ldr	r3, [r7, #20]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3718      	adds	r7, #24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b082      	sub	sp, #8
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d700:	2b00      	cmp	r3, #0
 800d702:	d018      	beq.n	800d736 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68da      	ldr	r2, [r3, #12]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70c:	441a      	add	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68da      	ldr	r2, [r3, #12]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d303      	bcc.n	800d726 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68d9      	ldr	r1, [r3, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72e:	461a      	mov	r2, r3
 800d730:	6838      	ldr	r0, [r7, #0]
 800d732:	f003 f947 	bl	80109c4 <memcpy>
	}
}
 800d736:	bf00      	nop
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d746:	f001 fd45 	bl	800f1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d750:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d752:	e011      	b.n	800d778 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d012      	beq.n	800d782 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3324      	adds	r3, #36	; 0x24
 800d760:	4618      	mov	r0, r3
 800d762:	f000 fd21 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d76c:	f000 fdf8 	bl	800e360 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d770:	7bfb      	ldrb	r3, [r7, #15]
 800d772:	3b01      	subs	r3, #1
 800d774:	b2db      	uxtb	r3, r3
 800d776:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dce9      	bgt.n	800d754 <prvUnlockQueue+0x16>
 800d780:	e000      	b.n	800d784 <prvUnlockQueue+0x46>
					break;
 800d782:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	22ff      	movs	r2, #255	; 0xff
 800d788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d78c:	f001 fd52 	bl	800f234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d790:	f001 fd20 	bl	800f1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d79a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d79c:	e011      	b.n	800d7c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d012      	beq.n	800d7cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	3310      	adds	r3, #16
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fcfc 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7b6:	f000 fdd3 	bl	800e360 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7ba:	7bbb      	ldrb	r3, [r7, #14]
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dce9      	bgt.n	800d79e <prvUnlockQueue+0x60>
 800d7ca:	e000      	b.n	800d7ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	22ff      	movs	r2, #255	; 0xff
 800d7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7d6:	f001 fd2d 	bl	800f234 <vPortExitCritical>
}
 800d7da:	bf00      	nop
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b084      	sub	sp, #16
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7ea:	f001 fcf3 	bl	800f1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d102      	bne.n	800d7fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	60fb      	str	r3, [r7, #12]
 800d7fa:	e001      	b.n	800d800 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d800:	f001 fd18 	bl	800f234 <vPortExitCritical>

	return xReturn;
 800d804:	68fb      	ldr	r3, [r7, #12]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b084      	sub	sp, #16
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d816:	f001 fcdd 	bl	800f1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d822:	429a      	cmp	r2, r3
 800d824:	d102      	bne.n	800d82c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d826:	2301      	movs	r3, #1
 800d828:	60fb      	str	r3, [r7, #12]
 800d82a:	e001      	b.n	800d830 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d82c:	2300      	movs	r3, #0
 800d82e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d830:	f001 fd00 	bl	800f234 <vPortExitCritical>

	return xReturn;
 800d834:	68fb      	ldr	r3, [r7, #12]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
 800d84e:	e014      	b.n	800d87a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d850:	4a0f      	ldr	r2, [pc, #60]	; (800d890 <vQueueAddToRegistry+0x50>)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10b      	bne.n	800d874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d85c:	490c      	ldr	r1, [pc, #48]	; (800d890 <vQueueAddToRegistry+0x50>)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d866:	4a0a      	ldr	r2, [pc, #40]	; (800d890 <vQueueAddToRegistry+0x50>)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	00db      	lsls	r3, r3, #3
 800d86c:	4413      	add	r3, r2
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d872:	e006      	b.n	800d882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3301      	adds	r3, #1
 800d878:	60fb      	str	r3, [r7, #12]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2b07      	cmp	r3, #7
 800d87e:	d9e7      	bls.n	800d850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d880:	bf00      	nop
 800d882:	bf00      	nop
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	2404aa28 	.word	0x2404aa28

0800d894 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	e016      	b.n	800d8d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8a2:	4a10      	ldr	r2, [pc, #64]	; (800d8e4 <vQueueUnregisterQueue+0x50>)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	00db      	lsls	r3, r3, #3
 800d8a8:	4413      	add	r3, r2
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d10b      	bne.n	800d8ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8b2:	4a0c      	ldr	r2, [pc, #48]	; (800d8e4 <vQueueUnregisterQueue+0x50>)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8bc:	4a09      	ldr	r2, [pc, #36]	; (800d8e4 <vQueueUnregisterQueue+0x50>)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	4413      	add	r3, r2
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	605a      	str	r2, [r3, #4]
				break;
 800d8c8:	e006      	b.n	800d8d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2b07      	cmp	r3, #7
 800d8d4:	d9e5      	bls.n	800d8a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	2404aa28 	.word	0x2404aa28

0800d8e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8f8:	f001 fc6c 	bl	800f1d4 <vPortEnterCritical>
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d902:	b25b      	sxtb	r3, r3
 800d904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d908:	d103      	bne.n	800d912 <vQueueWaitForMessageRestricted+0x2a>
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d918:	b25b      	sxtb	r3, r3
 800d91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d91e:	d103      	bne.n	800d928 <vQueueWaitForMessageRestricted+0x40>
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	2200      	movs	r2, #0
 800d924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d928:	f001 fc84 	bl	800f234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d930:	2b00      	cmp	r3, #0
 800d932:	d106      	bne.n	800d942 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	3324      	adds	r3, #36	; 0x24
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	68b9      	ldr	r1, [r7, #8]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 fc07 	bl	800e150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d942:	6978      	ldr	r0, [r7, #20]
 800d944:	f7ff fefb 	bl	800d73e <prvUnlockQueue>
	}
 800d948:	bf00      	nop
 800d94a:	3718      	adds	r7, #24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d950:	b580      	push	{r7, lr}
 800d952:	b08e      	sub	sp, #56	; 0x38
 800d954:	af04      	add	r7, sp, #16
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	623b      	str	r3, [r7, #32]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10a      	bne.n	800d996 <xTaskCreateStatic+0x46>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	61fb      	str	r3, [r7, #28]
}
 800d992:	bf00      	nop
 800d994:	e7fe      	b.n	800d994 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d996:	235c      	movs	r3, #92	; 0x5c
 800d998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	2b5c      	cmp	r3, #92	; 0x5c
 800d99e:	d00a      	beq.n	800d9b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	61bb      	str	r3, [r7, #24]
}
 800d9b2:	bf00      	nop
 800d9b4:	e7fe      	b.n	800d9b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d01e      	beq.n	800d9fc <xTaskCreateStatic+0xac>
 800d9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d01b      	beq.n	800d9fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	9303      	str	r3, [sp, #12]
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	9302      	str	r3, [sp, #8]
 800d9de:	f107 0314 	add.w	r3, r7, #20
 800d9e2:	9301      	str	r3, [sp, #4]
 800d9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	68b9      	ldr	r1, [r7, #8]
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f000 f850 	bl	800da94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9f6:	f000 f8dd 	bl	800dbb4 <prvAddNewTaskToReadyList>
 800d9fa:	e001      	b.n	800da00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da00:	697b      	ldr	r3, [r7, #20]
	}
 800da02:	4618      	mov	r0, r3
 800da04:	3728      	adds	r7, #40	; 0x28
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b08c      	sub	sp, #48	; 0x30
 800da0e:	af04      	add	r7, sp, #16
 800da10:	60f8      	str	r0, [r7, #12]
 800da12:	60b9      	str	r1, [r7, #8]
 800da14:	603b      	str	r3, [r7, #0]
 800da16:	4613      	mov	r3, r2
 800da18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da1a:	88fb      	ldrh	r3, [r7, #6]
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4618      	mov	r0, r3
 800da20:	f001 fcfa 	bl	800f418 <pvPortMalloc>
 800da24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00e      	beq.n	800da4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da2c:	205c      	movs	r0, #92	; 0x5c
 800da2e:	f001 fcf3 	bl	800f418 <pvPortMalloc>
 800da32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d003      	beq.n	800da42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	697a      	ldr	r2, [r7, #20]
 800da3e:	631a      	str	r2, [r3, #48]	; 0x30
 800da40:	e005      	b.n	800da4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da42:	6978      	ldr	r0, [r7, #20]
 800da44:	f001 fdb4 	bl	800f5b0 <vPortFree>
 800da48:	e001      	b.n	800da4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d017      	beq.n	800da84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	2200      	movs	r2, #0
 800da58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da5c:	88fa      	ldrh	r2, [r7, #6]
 800da5e:	2300      	movs	r3, #0
 800da60:	9303      	str	r3, [sp, #12]
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	9302      	str	r3, [sp, #8]
 800da66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	68b9      	ldr	r1, [r7, #8]
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f000 f80e 	bl	800da94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da78:	69f8      	ldr	r0, [r7, #28]
 800da7a:	f000 f89b 	bl	800dbb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da7e:	2301      	movs	r3, #1
 800da80:	61bb      	str	r3, [r7, #24]
 800da82:	e002      	b.n	800da8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da84:	f04f 33ff 	mov.w	r3, #4294967295
 800da88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da8a:	69bb      	ldr	r3, [r7, #24]
	}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3720      	adds	r7, #32
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b088      	sub	sp, #32
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
 800daa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	461a      	mov	r2, r3
 800daac:	21a5      	movs	r1, #165	; 0xa5
 800daae:	f002 ff97 	bl	80109e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dab6:	6879      	ldr	r1, [r7, #4]
 800dab8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dabc:	440b      	add	r3, r1
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	f023 0307 	bic.w	r3, r3, #7
 800daca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00a      	beq.n	800daec <prvInitialiseNewTask+0x58>
	__asm volatile
 800dad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	617b      	str	r3, [r7, #20]
}
 800dae8:	bf00      	nop
 800daea:	e7fe      	b.n	800daea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d01f      	beq.n	800db32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800daf2:	2300      	movs	r3, #0
 800daf4:	61fb      	str	r3, [r7, #28]
 800daf6:	e012      	b.n	800db1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	69fb      	ldr	r3, [r7, #28]
 800dafc:	4413      	add	r3, r2
 800dafe:	7819      	ldrb	r1, [r3, #0]
 800db00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	4413      	add	r3, r2
 800db06:	3334      	adds	r3, #52	; 0x34
 800db08:	460a      	mov	r2, r1
 800db0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	4413      	add	r3, r2
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d006      	beq.n	800db26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	3301      	adds	r3, #1
 800db1c:	61fb      	str	r3, [r7, #28]
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	2b0f      	cmp	r3, #15
 800db22:	d9e9      	bls.n	800daf8 <prvInitialiseNewTask+0x64>
 800db24:	e000      	b.n	800db28 <prvInitialiseNewTask+0x94>
			{
				break;
 800db26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db30:	e003      	b.n	800db3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db34:	2200      	movs	r2, #0
 800db36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	2b37      	cmp	r3, #55	; 0x37
 800db3e:	d901      	bls.n	800db44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db40:	2337      	movs	r3, #55	; 0x37
 800db42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	2200      	movs	r2, #0
 800db54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	3304      	adds	r3, #4
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fe fe56 	bl	800c80c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db62:	3318      	adds	r3, #24
 800db64:	4618      	mov	r0, r3
 800db66:	f7fe fe51 	bl	800c80c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	2200      	movs	r2, #0
 800db84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	68f9      	ldr	r1, [r7, #12]
 800db92:	69b8      	ldr	r0, [r7, #24]
 800db94:	f001 f9f2 	bl	800ef7c <pxPortInitialiseStack>
 800db98:	4602      	mov	r2, r0
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbaa:	bf00      	nop
 800dbac:	3720      	adds	r7, #32
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbbc:	f001 fb0a 	bl	800f1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbc0:	4b2d      	ldr	r3, [pc, #180]	; (800dc78 <prvAddNewTaskToReadyList+0xc4>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	4a2c      	ldr	r2, [pc, #176]	; (800dc78 <prvAddNewTaskToReadyList+0xc4>)
 800dbc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dbca:	4b2c      	ldr	r3, [pc, #176]	; (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d109      	bne.n	800dbe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbd2:	4a2a      	ldr	r2, [pc, #168]	; (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbd8:	4b27      	ldr	r3, [pc, #156]	; (800dc78 <prvAddNewTaskToReadyList+0xc4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d110      	bne.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dbe0:	f000 fbe2 	bl	800e3a8 <prvInitialiseTaskLists>
 800dbe4:	e00d      	b.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dbe6:	4b26      	ldr	r3, [pc, #152]	; (800dc80 <prvAddNewTaskToReadyList+0xcc>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d109      	bne.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dbee:	4b23      	ldr	r3, [pc, #140]	; (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d802      	bhi.n	800dc02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dbfc:	4a1f      	ldr	r2, [pc, #124]	; (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc02:	4b20      	ldr	r3, [pc, #128]	; (800dc84 <prvAddNewTaskToReadyList+0xd0>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3301      	adds	r3, #1
 800dc08:	4a1e      	ldr	r2, [pc, #120]	; (800dc84 <prvAddNewTaskToReadyList+0xd0>)
 800dc0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc0c:	4b1d      	ldr	r3, [pc, #116]	; (800dc84 <prvAddNewTaskToReadyList+0xd0>)
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc18:	4b1b      	ldr	r3, [pc, #108]	; (800dc88 <prvAddNewTaskToReadyList+0xd4>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d903      	bls.n	800dc28 <prvAddNewTaskToReadyList+0x74>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc24:	4a18      	ldr	r2, [pc, #96]	; (800dc88 <prvAddNewTaskToReadyList+0xd4>)
 800dc26:	6013      	str	r3, [r2, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4a15      	ldr	r2, [pc, #84]	; (800dc8c <prvAddNewTaskToReadyList+0xd8>)
 800dc36:	441a      	add	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4610      	mov	r0, r2
 800dc40:	f7fe fdf1 	bl	800c826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc44:	f001 faf6 	bl	800f234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc48:	4b0d      	ldr	r3, [pc, #52]	; (800dc80 <prvAddNewTaskToReadyList+0xcc>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00e      	beq.n	800dc6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc50:	4b0a      	ldr	r3, [pc, #40]	; (800dc7c <prvAddNewTaskToReadyList+0xc8>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d207      	bcs.n	800dc6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc5e:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <prvAddNewTaskToReadyList+0xdc>)
 800dc60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	2404af3c 	.word	0x2404af3c
 800dc7c:	2404aa68 	.word	0x2404aa68
 800dc80:	2404af48 	.word	0x2404af48
 800dc84:	2404af58 	.word	0x2404af58
 800dc88:	2404af44 	.word	0x2404af44
 800dc8c:	2404aa6c 	.word	0x2404aa6c
 800dc90:	e000ed04 	.word	0xe000ed04

0800dc94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08a      	sub	sp, #40	; 0x28
 800dc98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dca2:	463a      	mov	r2, r7
 800dca4:	1d39      	adds	r1, r7, #4
 800dca6:	f107 0308 	add.w	r3, r7, #8
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fe fd5a 	bl	800c764 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcb0:	6839      	ldr	r1, [r7, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	9202      	str	r2, [sp, #8]
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	2300      	movs	r3, #0
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	460a      	mov	r2, r1
 800dcc2:	4921      	ldr	r1, [pc, #132]	; (800dd48 <vTaskStartScheduler+0xb4>)
 800dcc4:	4821      	ldr	r0, [pc, #132]	; (800dd4c <vTaskStartScheduler+0xb8>)
 800dcc6:	f7ff fe43 	bl	800d950 <xTaskCreateStatic>
 800dcca:	4603      	mov	r3, r0
 800dccc:	4a20      	ldr	r2, [pc, #128]	; (800dd50 <vTaskStartScheduler+0xbc>)
 800dcce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dcd0:	4b1f      	ldr	r3, [pc, #124]	; (800dd50 <vTaskStartScheduler+0xbc>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	617b      	str	r3, [r7, #20]
 800dcdc:	e001      	b.n	800dce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d102      	bne.n	800dcee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dce8:	f000 fdfa 	bl	800e8e0 <xTimerCreateTimerTask>
 800dcec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d116      	bne.n	800dd22 <vTaskStartScheduler+0x8e>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	613b      	str	r3, [r7, #16]
}
 800dd06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd08:	4b12      	ldr	r3, [pc, #72]	; (800dd54 <vTaskStartScheduler+0xc0>)
 800dd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd10:	4b11      	ldr	r3, [pc, #68]	; (800dd58 <vTaskStartScheduler+0xc4>)
 800dd12:	2201      	movs	r2, #1
 800dd14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd16:	4b11      	ldr	r3, [pc, #68]	; (800dd5c <vTaskStartScheduler+0xc8>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd1c:	f001 f9b8 	bl	800f090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd20:	e00e      	b.n	800dd40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd28:	d10a      	bne.n	800dd40 <vTaskStartScheduler+0xac>
	__asm volatile
 800dd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2e:	f383 8811 	msr	BASEPRI, r3
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	60fb      	str	r3, [r7, #12]
}
 800dd3c:	bf00      	nop
 800dd3e:	e7fe      	b.n	800dd3e <vTaskStartScheduler+0xaa>
}
 800dd40:	bf00      	nop
 800dd42:	3718      	adds	r7, #24
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	08010bd0 	.word	0x08010bd0
 800dd4c:	0800e379 	.word	0x0800e379
 800dd50:	2404af60 	.word	0x2404af60
 800dd54:	2404af5c 	.word	0x2404af5c
 800dd58:	2404af48 	.word	0x2404af48
 800dd5c:	2404af40 	.word	0x2404af40

0800dd60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd60:	b480      	push	{r7}
 800dd62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd64:	4b04      	ldr	r3, [pc, #16]	; (800dd78 <vTaskSuspendAll+0x18>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	4a03      	ldr	r2, [pc, #12]	; (800dd78 <vTaskSuspendAll+0x18>)
 800dd6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd6e:	bf00      	nop
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	2404af64 	.word	0x2404af64

0800dd7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd82:	2300      	movs	r3, #0
 800dd84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd86:	2300      	movs	r3, #0
 800dd88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd8a:	4b42      	ldr	r3, [pc, #264]	; (800de94 <xTaskResumeAll+0x118>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	f383 8811 	msr	BASEPRI, r3
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	603b      	str	r3, [r7, #0]
}
 800dda4:	bf00      	nop
 800dda6:	e7fe      	b.n	800dda6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dda8:	f001 fa14 	bl	800f1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddac:	4b39      	ldr	r3, [pc, #228]	; (800de94 <xTaskResumeAll+0x118>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	4a38      	ldr	r2, [pc, #224]	; (800de94 <xTaskResumeAll+0x118>)
 800ddb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb6:	4b37      	ldr	r3, [pc, #220]	; (800de94 <xTaskResumeAll+0x118>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d162      	bne.n	800de84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddbe:	4b36      	ldr	r3, [pc, #216]	; (800de98 <xTaskResumeAll+0x11c>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d05e      	beq.n	800de84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddc6:	e02f      	b.n	800de28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddc8:	4b34      	ldr	r3, [pc, #208]	; (800de9c <xTaskResumeAll+0x120>)
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3318      	adds	r3, #24
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fd83 	bl	800c8e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	3304      	adds	r3, #4
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe fd7e 	bl	800c8e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde8:	4b2d      	ldr	r3, [pc, #180]	; (800dea0 <xTaskResumeAll+0x124>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d903      	bls.n	800ddf8 <xTaskResumeAll+0x7c>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	4a2a      	ldr	r2, [pc, #168]	; (800dea0 <xTaskResumeAll+0x124>)
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	4a27      	ldr	r2, [pc, #156]	; (800dea4 <xTaskResumeAll+0x128>)
 800de06:	441a      	add	r2, r3
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7fe fd09 	bl	800c826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de18:	4b23      	ldr	r3, [pc, #140]	; (800dea8 <xTaskResumeAll+0x12c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1e:	429a      	cmp	r2, r3
 800de20:	d302      	bcc.n	800de28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de22:	4b22      	ldr	r3, [pc, #136]	; (800deac <xTaskResumeAll+0x130>)
 800de24:	2201      	movs	r2, #1
 800de26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de28:	4b1c      	ldr	r3, [pc, #112]	; (800de9c <xTaskResumeAll+0x120>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1cb      	bne.n	800ddc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de36:	f000 fb55 	bl	800e4e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de3a:	4b1d      	ldr	r3, [pc, #116]	; (800deb0 <xTaskResumeAll+0x134>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d010      	beq.n	800de68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de46:	f000 f847 	bl	800ded8 <xTaskIncrementTick>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de50:	4b16      	ldr	r3, [pc, #88]	; (800deac <xTaskResumeAll+0x130>)
 800de52:	2201      	movs	r2, #1
 800de54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	3b01      	subs	r3, #1
 800de5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1f1      	bne.n	800de46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800de62:	4b13      	ldr	r3, [pc, #76]	; (800deb0 <xTaskResumeAll+0x134>)
 800de64:	2200      	movs	r2, #0
 800de66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de68:	4b10      	ldr	r3, [pc, #64]	; (800deac <xTaskResumeAll+0x130>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d009      	beq.n	800de84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de70:	2301      	movs	r3, #1
 800de72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de74:	4b0f      	ldr	r3, [pc, #60]	; (800deb4 <xTaskResumeAll+0x138>)
 800de76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de84:	f001 f9d6 	bl	800f234 <vPortExitCritical>

	return xAlreadyYielded;
 800de88:	68bb      	ldr	r3, [r7, #8]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	2404af64 	.word	0x2404af64
 800de98:	2404af3c 	.word	0x2404af3c
 800de9c:	2404aefc 	.word	0x2404aefc
 800dea0:	2404af44 	.word	0x2404af44
 800dea4:	2404aa6c 	.word	0x2404aa6c
 800dea8:	2404aa68 	.word	0x2404aa68
 800deac:	2404af50 	.word	0x2404af50
 800deb0:	2404af4c 	.word	0x2404af4c
 800deb4:	e000ed04 	.word	0xe000ed04

0800deb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800debe:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <xTaskGetTickCount+0x1c>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dec4:	687b      	ldr	r3, [r7, #4]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	370c      	adds	r7, #12
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	2404af40 	.word	0x2404af40

0800ded8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dede:	2300      	movs	r3, #0
 800dee0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dee2:	4b4f      	ldr	r3, [pc, #316]	; (800e020 <xTaskIncrementTick+0x148>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f040 808f 	bne.w	800e00a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800deec:	4b4d      	ldr	r3, [pc, #308]	; (800e024 <xTaskIncrementTick+0x14c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3301      	adds	r3, #1
 800def2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800def4:	4a4b      	ldr	r2, [pc, #300]	; (800e024 <xTaskIncrementTick+0x14c>)
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d120      	bne.n	800df42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df00:	4b49      	ldr	r3, [pc, #292]	; (800e028 <xTaskIncrementTick+0x150>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00a      	beq.n	800df20 <xTaskIncrementTick+0x48>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	603b      	str	r3, [r7, #0]
}
 800df1c:	bf00      	nop
 800df1e:	e7fe      	b.n	800df1e <xTaskIncrementTick+0x46>
 800df20:	4b41      	ldr	r3, [pc, #260]	; (800e028 <xTaskIncrementTick+0x150>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	60fb      	str	r3, [r7, #12]
 800df26:	4b41      	ldr	r3, [pc, #260]	; (800e02c <xTaskIncrementTick+0x154>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a3f      	ldr	r2, [pc, #252]	; (800e028 <xTaskIncrementTick+0x150>)
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	4a3f      	ldr	r2, [pc, #252]	; (800e02c <xTaskIncrementTick+0x154>)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6013      	str	r3, [r2, #0]
 800df34:	4b3e      	ldr	r3, [pc, #248]	; (800e030 <xTaskIncrementTick+0x158>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	3301      	adds	r3, #1
 800df3a:	4a3d      	ldr	r2, [pc, #244]	; (800e030 <xTaskIncrementTick+0x158>)
 800df3c:	6013      	str	r3, [r2, #0]
 800df3e:	f000 fad1 	bl	800e4e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df42:	4b3c      	ldr	r3, [pc, #240]	; (800e034 <xTaskIncrementTick+0x15c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d349      	bcc.n	800dfe0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df4c:	4b36      	ldr	r3, [pc, #216]	; (800e028 <xTaskIncrementTick+0x150>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d104      	bne.n	800df60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df56:	4b37      	ldr	r3, [pc, #220]	; (800e034 <xTaskIncrementTick+0x15c>)
 800df58:	f04f 32ff 	mov.w	r2, #4294967295
 800df5c:	601a      	str	r2, [r3, #0]
					break;
 800df5e:	e03f      	b.n	800dfe0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df60:	4b31      	ldr	r3, [pc, #196]	; (800e028 <xTaskIncrementTick+0x150>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	429a      	cmp	r2, r3
 800df76:	d203      	bcs.n	800df80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df78:	4a2e      	ldr	r2, [pc, #184]	; (800e034 <xTaskIncrementTick+0x15c>)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df7e:	e02f      	b.n	800dfe0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	3304      	adds	r3, #4
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe fcab 	bl	800c8e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d004      	beq.n	800df9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	3318      	adds	r3, #24
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fca2 	bl	800c8e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa0:	4b25      	ldr	r3, [pc, #148]	; (800e038 <xTaskIncrementTick+0x160>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d903      	bls.n	800dfb0 <xTaskIncrementTick+0xd8>
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfac:	4a22      	ldr	r2, [pc, #136]	; (800e038 <xTaskIncrementTick+0x160>)
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	4413      	add	r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4a1f      	ldr	r2, [pc, #124]	; (800e03c <xTaskIncrementTick+0x164>)
 800dfbe:	441a      	add	r2, r3
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	f7fe fc2d 	bl	800c826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd0:	4b1b      	ldr	r3, [pc, #108]	; (800e040 <xTaskIncrementTick+0x168>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d3b8      	bcc.n	800df4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfde:	e7b5      	b.n	800df4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfe0:	4b17      	ldr	r3, [pc, #92]	; (800e040 <xTaskIncrementTick+0x168>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe6:	4915      	ldr	r1, [pc, #84]	; (800e03c <xTaskIncrementTick+0x164>)
 800dfe8:	4613      	mov	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	4413      	add	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	440b      	add	r3, r1
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d901      	bls.n	800dffc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dff8:	2301      	movs	r3, #1
 800dffa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dffc:	4b11      	ldr	r3, [pc, #68]	; (800e044 <xTaskIncrementTick+0x16c>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d007      	beq.n	800e014 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e004:	2301      	movs	r3, #1
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	e004      	b.n	800e014 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e00a:	4b0f      	ldr	r3, [pc, #60]	; (800e048 <xTaskIncrementTick+0x170>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	3301      	adds	r3, #1
 800e010:	4a0d      	ldr	r2, [pc, #52]	; (800e048 <xTaskIncrementTick+0x170>)
 800e012:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e014:	697b      	ldr	r3, [r7, #20]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	2404af64 	.word	0x2404af64
 800e024:	2404af40 	.word	0x2404af40
 800e028:	2404aef4 	.word	0x2404aef4
 800e02c:	2404aef8 	.word	0x2404aef8
 800e030:	2404af54 	.word	0x2404af54
 800e034:	2404af5c 	.word	0x2404af5c
 800e038:	2404af44 	.word	0x2404af44
 800e03c:	2404aa6c 	.word	0x2404aa6c
 800e040:	2404aa68 	.word	0x2404aa68
 800e044:	2404af50 	.word	0x2404af50
 800e048:	2404af4c 	.word	0x2404af4c

0800e04c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e052:	4b28      	ldr	r3, [pc, #160]	; (800e0f4 <vTaskSwitchContext+0xa8>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e05a:	4b27      	ldr	r3, [pc, #156]	; (800e0f8 <vTaskSwitchContext+0xac>)
 800e05c:	2201      	movs	r2, #1
 800e05e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e060:	e041      	b.n	800e0e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e062:	4b25      	ldr	r3, [pc, #148]	; (800e0f8 <vTaskSwitchContext+0xac>)
 800e064:	2200      	movs	r2, #0
 800e066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e068:	4b24      	ldr	r3, [pc, #144]	; (800e0fc <vTaskSwitchContext+0xb0>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	60fb      	str	r3, [r7, #12]
 800e06e:	e010      	b.n	800e092 <vTaskSwitchContext+0x46>
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10a      	bne.n	800e08c <vTaskSwitchContext+0x40>
	__asm volatile
 800e076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	607b      	str	r3, [r7, #4]
}
 800e088:	bf00      	nop
 800e08a:	e7fe      	b.n	800e08a <vTaskSwitchContext+0x3e>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	3b01      	subs	r3, #1
 800e090:	60fb      	str	r3, [r7, #12]
 800e092:	491b      	ldr	r1, [pc, #108]	; (800e100 <vTaskSwitchContext+0xb4>)
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	4613      	mov	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	440b      	add	r3, r1
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0e4      	beq.n	800e070 <vTaskSwitchContext+0x24>
 800e0a6:	68fa      	ldr	r2, [r7, #12]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4a13      	ldr	r2, [pc, #76]	; (800e100 <vTaskSwitchContext+0xb4>)
 800e0b2:	4413      	add	r3, r2
 800e0b4:	60bb      	str	r3, [r7, #8]
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	605a      	str	r2, [r3, #4]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	3308      	adds	r3, #8
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d104      	bne.n	800e0d6 <vTaskSwitchContext+0x8a>
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	605a      	str	r2, [r3, #4]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	4a09      	ldr	r2, [pc, #36]	; (800e104 <vTaskSwitchContext+0xb8>)
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	4a06      	ldr	r2, [pc, #24]	; (800e0fc <vTaskSwitchContext+0xb0>)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6013      	str	r3, [r2, #0]
}
 800e0e6:	bf00      	nop
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	2404af64 	.word	0x2404af64
 800e0f8:	2404af50 	.word	0x2404af50
 800e0fc:	2404af44 	.word	0x2404af44
 800e100:	2404aa6c 	.word	0x2404aa6c
 800e104:	2404aa68 	.word	0x2404aa68

0800e108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10a      	bne.n	800e12e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11c:	f383 8811 	msr	BASEPRI, r3
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	60fb      	str	r3, [r7, #12]
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e12e:	4b07      	ldr	r3, [pc, #28]	; (800e14c <vTaskPlaceOnEventList+0x44>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	3318      	adds	r3, #24
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7fe fb99 	bl	800c86e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e13c:	2101      	movs	r1, #1
 800e13e:	6838      	ldr	r0, [r7, #0]
 800e140:	f000 fb7a 	bl	800e838 <prvAddCurrentTaskToDelayedList>
}
 800e144:	bf00      	nop
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	2404aa68 	.word	0x2404aa68

0800e150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10a      	bne.n	800e178 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	617b      	str	r3, [r7, #20]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e178:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	3318      	adds	r3, #24
 800e17e:	4619      	mov	r1, r3
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f7fe fb50 	bl	800c826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e18c:	f04f 33ff 	mov.w	r3, #4294967295
 800e190:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e192:	6879      	ldr	r1, [r7, #4]
 800e194:	68b8      	ldr	r0, [r7, #8]
 800e196:	f000 fb4f 	bl	800e838 <prvAddCurrentTaskToDelayedList>
	}
 800e19a:	bf00      	nop
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	2404aa68 	.word	0x2404aa68

0800e1a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10a      	bne.n	800e1d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	60fb      	str	r3, [r7, #12]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	3318      	adds	r3, #24
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fb81 	bl	800c8e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1de:	4b1e      	ldr	r3, [pc, #120]	; (800e258 <xTaskRemoveFromEventList+0xb0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d11d      	bne.n	800e222 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe fb78 	bl	800c8e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f4:	4b19      	ldr	r3, [pc, #100]	; (800e25c <xTaskRemoveFromEventList+0xb4>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d903      	bls.n	800e204 <xTaskRemoveFromEventList+0x5c>
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e200:	4a16      	ldr	r2, [pc, #88]	; (800e25c <xTaskRemoveFromEventList+0xb4>)
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e208:	4613      	mov	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4a13      	ldr	r2, [pc, #76]	; (800e260 <xTaskRemoveFromEventList+0xb8>)
 800e212:	441a      	add	r2, r3
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	3304      	adds	r3, #4
 800e218:	4619      	mov	r1, r3
 800e21a:	4610      	mov	r0, r2
 800e21c:	f7fe fb03 	bl	800c826 <vListInsertEnd>
 800e220:	e005      	b.n	800e22e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	3318      	adds	r3, #24
 800e226:	4619      	mov	r1, r3
 800e228:	480e      	ldr	r0, [pc, #56]	; (800e264 <xTaskRemoveFromEventList+0xbc>)
 800e22a:	f7fe fafc 	bl	800c826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e232:	4b0d      	ldr	r3, [pc, #52]	; (800e268 <xTaskRemoveFromEventList+0xc0>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e238:	429a      	cmp	r2, r3
 800e23a:	d905      	bls.n	800e248 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e23c:	2301      	movs	r3, #1
 800e23e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e240:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <xTaskRemoveFromEventList+0xc4>)
 800e242:	2201      	movs	r2, #1
 800e244:	601a      	str	r2, [r3, #0]
 800e246:	e001      	b.n	800e24c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e248:	2300      	movs	r3, #0
 800e24a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e24c:	697b      	ldr	r3, [r7, #20]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	2404af64 	.word	0x2404af64
 800e25c:	2404af44 	.word	0x2404af44
 800e260:	2404aa6c 	.word	0x2404aa6c
 800e264:	2404aefc 	.word	0x2404aefc
 800e268:	2404aa68 	.word	0x2404aa68
 800e26c:	2404af50 	.word	0x2404af50

0800e270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e278:	4b06      	ldr	r3, [pc, #24]	; (800e294 <vTaskInternalSetTimeOutState+0x24>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e280:	4b05      	ldr	r3, [pc, #20]	; (800e298 <vTaskInternalSetTimeOutState+0x28>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	605a      	str	r2, [r3, #4]
}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	2404af54 	.word	0x2404af54
 800e298:	2404af40 	.word	0x2404af40

0800e29c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b088      	sub	sp, #32
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10a      	bne.n	800e2c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	613b      	str	r3, [r7, #16]
}
 800e2be:	bf00      	nop
 800e2c0:	e7fe      	b.n	800e2c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	60fb      	str	r3, [r7, #12]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e2de:	f000 ff79 	bl	800f1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2e2:	4b1d      	ldr	r3, [pc, #116]	; (800e358 <xTaskCheckForTimeOut+0xbc>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	69ba      	ldr	r2, [r7, #24]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fa:	d102      	bne.n	800e302 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	61fb      	str	r3, [r7, #28]
 800e300:	e023      	b.n	800e34a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	4b15      	ldr	r3, [pc, #84]	; (800e35c <xTaskCheckForTimeOut+0xc0>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d007      	beq.n	800e31e <xTaskCheckForTimeOut+0x82>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	69ba      	ldr	r2, [r7, #24]
 800e314:	429a      	cmp	r2, r3
 800e316:	d302      	bcc.n	800e31e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e318:	2301      	movs	r3, #1
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	e015      	b.n	800e34a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	697a      	ldr	r2, [r7, #20]
 800e324:	429a      	cmp	r2, r3
 800e326:	d20b      	bcs.n	800e340 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	1ad2      	subs	r2, r2, r3
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7ff ff9b 	bl	800e270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e33a:	2300      	movs	r3, #0
 800e33c:	61fb      	str	r3, [r7, #28]
 800e33e:	e004      	b.n	800e34a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	2200      	movs	r2, #0
 800e344:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e346:	2301      	movs	r3, #1
 800e348:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e34a:	f000 ff73 	bl	800f234 <vPortExitCritical>

	return xReturn;
 800e34e:	69fb      	ldr	r3, [r7, #28]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3720      	adds	r7, #32
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	2404af40 	.word	0x2404af40
 800e35c:	2404af54 	.word	0x2404af54

0800e360 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e360:	b480      	push	{r7}
 800e362:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e364:	4b03      	ldr	r3, [pc, #12]	; (800e374 <vTaskMissedYield+0x14>)
 800e366:	2201      	movs	r2, #1
 800e368:	601a      	str	r2, [r3, #0]
}
 800e36a:	bf00      	nop
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	2404af50 	.word	0x2404af50

0800e378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e380:	f000 f852 	bl	800e428 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e384:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <prvIdleTask+0x28>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d9f9      	bls.n	800e380 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e38c:	4b05      	ldr	r3, [pc, #20]	; (800e3a4 <prvIdleTask+0x2c>)
 800e38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e39c:	e7f0      	b.n	800e380 <prvIdleTask+0x8>
 800e39e:	bf00      	nop
 800e3a0:	2404aa6c 	.word	0x2404aa6c
 800e3a4:	e000ed04 	.word	0xe000ed04

0800e3a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	607b      	str	r3, [r7, #4]
 800e3b2:	e00c      	b.n	800e3ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4a12      	ldr	r2, [pc, #72]	; (800e408 <prvInitialiseTaskLists+0x60>)
 800e3c0:	4413      	add	r3, r2
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe fa02 	bl	800c7cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	607b      	str	r3, [r7, #4]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b37      	cmp	r3, #55	; 0x37
 800e3d2:	d9ef      	bls.n	800e3b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3d4:	480d      	ldr	r0, [pc, #52]	; (800e40c <prvInitialiseTaskLists+0x64>)
 800e3d6:	f7fe f9f9 	bl	800c7cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3da:	480d      	ldr	r0, [pc, #52]	; (800e410 <prvInitialiseTaskLists+0x68>)
 800e3dc:	f7fe f9f6 	bl	800c7cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3e0:	480c      	ldr	r0, [pc, #48]	; (800e414 <prvInitialiseTaskLists+0x6c>)
 800e3e2:	f7fe f9f3 	bl	800c7cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3e6:	480c      	ldr	r0, [pc, #48]	; (800e418 <prvInitialiseTaskLists+0x70>)
 800e3e8:	f7fe f9f0 	bl	800c7cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3ec:	480b      	ldr	r0, [pc, #44]	; (800e41c <prvInitialiseTaskLists+0x74>)
 800e3ee:	f7fe f9ed 	bl	800c7cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3f2:	4b0b      	ldr	r3, [pc, #44]	; (800e420 <prvInitialiseTaskLists+0x78>)
 800e3f4:	4a05      	ldr	r2, [pc, #20]	; (800e40c <prvInitialiseTaskLists+0x64>)
 800e3f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e3f8:	4b0a      	ldr	r3, [pc, #40]	; (800e424 <prvInitialiseTaskLists+0x7c>)
 800e3fa:	4a05      	ldr	r2, [pc, #20]	; (800e410 <prvInitialiseTaskLists+0x68>)
 800e3fc:	601a      	str	r2, [r3, #0]
}
 800e3fe:	bf00      	nop
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	2404aa6c 	.word	0x2404aa6c
 800e40c:	2404aecc 	.word	0x2404aecc
 800e410:	2404aee0 	.word	0x2404aee0
 800e414:	2404aefc 	.word	0x2404aefc
 800e418:	2404af10 	.word	0x2404af10
 800e41c:	2404af28 	.word	0x2404af28
 800e420:	2404aef4 	.word	0x2404aef4
 800e424:	2404aef8 	.word	0x2404aef8

0800e428 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e42e:	e019      	b.n	800e464 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e430:	f000 fed0 	bl	800f1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e434:	4b10      	ldr	r3, [pc, #64]	; (800e478 <prvCheckTasksWaitingTermination+0x50>)
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	3304      	adds	r3, #4
 800e440:	4618      	mov	r0, r3
 800e442:	f7fe fa4d 	bl	800c8e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e446:	4b0d      	ldr	r3, [pc, #52]	; (800e47c <prvCheckTasksWaitingTermination+0x54>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	3b01      	subs	r3, #1
 800e44c:	4a0b      	ldr	r2, [pc, #44]	; (800e47c <prvCheckTasksWaitingTermination+0x54>)
 800e44e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e450:	4b0b      	ldr	r3, [pc, #44]	; (800e480 <prvCheckTasksWaitingTermination+0x58>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3b01      	subs	r3, #1
 800e456:	4a0a      	ldr	r2, [pc, #40]	; (800e480 <prvCheckTasksWaitingTermination+0x58>)
 800e458:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e45a:	f000 feeb 	bl	800f234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f810 	bl	800e484 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e464:	4b06      	ldr	r3, [pc, #24]	; (800e480 <prvCheckTasksWaitingTermination+0x58>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1e1      	bne.n	800e430 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e46c:	bf00      	nop
 800e46e:	bf00      	nop
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	2404af10 	.word	0x2404af10
 800e47c:	2404af3c 	.word	0x2404af3c
 800e480:	2404af24 	.word	0x2404af24

0800e484 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e492:	2b00      	cmp	r3, #0
 800e494:	d108      	bne.n	800e4a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49a:	4618      	mov	r0, r3
 800e49c:	f001 f888 	bl	800f5b0 <vPortFree>
				vPortFree( pxTCB );
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f001 f885 	bl	800f5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4a6:	e018      	b.n	800e4da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d103      	bne.n	800e4ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f001 f87c 	bl	800f5b0 <vPortFree>
	}
 800e4b8:	e00f      	b.n	800e4da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4c0:	2b02      	cmp	r3, #2
 800e4c2:	d00a      	beq.n	800e4da <prvDeleteTCB+0x56>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	60fb      	str	r3, [r7, #12]
}
 800e4d6:	bf00      	nop
 800e4d8:	e7fe      	b.n	800e4d8 <prvDeleteTCB+0x54>
	}
 800e4da:	bf00      	nop
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
	...

0800e4e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4ea:	4b0c      	ldr	r3, [pc, #48]	; (800e51c <prvResetNextTaskUnblockTime+0x38>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d104      	bne.n	800e4fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4f4:	4b0a      	ldr	r3, [pc, #40]	; (800e520 <prvResetNextTaskUnblockTime+0x3c>)
 800e4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4fc:	e008      	b.n	800e510 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4fe:	4b07      	ldr	r3, [pc, #28]	; (800e51c <prvResetNextTaskUnblockTime+0x38>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	4a04      	ldr	r2, [pc, #16]	; (800e520 <prvResetNextTaskUnblockTime+0x3c>)
 800e50e:	6013      	str	r3, [r2, #0]
}
 800e510:	bf00      	nop
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr
 800e51c:	2404aef4 	.word	0x2404aef4
 800e520:	2404af5c 	.word	0x2404af5c

0800e524 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e52a:	4b0b      	ldr	r3, [pc, #44]	; (800e558 <xTaskGetSchedulerState+0x34>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d102      	bne.n	800e538 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e532:	2301      	movs	r3, #1
 800e534:	607b      	str	r3, [r7, #4]
 800e536:	e008      	b.n	800e54a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e538:	4b08      	ldr	r3, [pc, #32]	; (800e55c <xTaskGetSchedulerState+0x38>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d102      	bne.n	800e546 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e540:	2302      	movs	r3, #2
 800e542:	607b      	str	r3, [r7, #4]
 800e544:	e001      	b.n	800e54a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e546:	2300      	movs	r3, #0
 800e548:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e54a:	687b      	ldr	r3, [r7, #4]
	}
 800e54c:	4618      	mov	r0, r3
 800e54e:	370c      	adds	r7, #12
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr
 800e558:	2404af48 	.word	0x2404af48
 800e55c:	2404af64 	.word	0x2404af64

0800e560 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e56c:	2300      	movs	r3, #0
 800e56e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d051      	beq.n	800e61a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57a:	4b2a      	ldr	r3, [pc, #168]	; (800e624 <xTaskPriorityInherit+0xc4>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e580:	429a      	cmp	r2, r3
 800e582:	d241      	bcs.n	800e608 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	db06      	blt.n	800e59a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e58c:	4b25      	ldr	r3, [pc, #148]	; (800e624 <xTaskPriorityInherit+0xc4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	6959      	ldr	r1, [r3, #20]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4a1f      	ldr	r2, [pc, #124]	; (800e628 <xTaskPriorityInherit+0xc8>)
 800e5ac:	4413      	add	r3, r2
 800e5ae:	4299      	cmp	r1, r3
 800e5b0:	d122      	bne.n	800e5f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe f992 	bl	800c8e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5bc:	4b19      	ldr	r3, [pc, #100]	; (800e624 <xTaskPriorityInherit+0xc4>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ca:	4b18      	ldr	r3, [pc, #96]	; (800e62c <xTaskPriorityInherit+0xcc>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d903      	bls.n	800e5da <xTaskPriorityInherit+0x7a>
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d6:	4a15      	ldr	r2, [pc, #84]	; (800e62c <xTaskPriorityInherit+0xcc>)
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5de:	4613      	mov	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4413      	add	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	4a10      	ldr	r2, [pc, #64]	; (800e628 <xTaskPriorityInherit+0xc8>)
 800e5e8:	441a      	add	r2, r3
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	f7fe f918 	bl	800c826 <vListInsertEnd>
 800e5f6:	e004      	b.n	800e602 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5f8:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <xTaskPriorityInherit+0xc4>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e602:	2301      	movs	r3, #1
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	e008      	b.n	800e61a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e60c:	4b05      	ldr	r3, [pc, #20]	; (800e624 <xTaskPriorityInherit+0xc4>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e612:	429a      	cmp	r2, r3
 800e614:	d201      	bcs.n	800e61a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e616:	2301      	movs	r3, #1
 800e618:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e61a:	68fb      	ldr	r3, [r7, #12]
	}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	2404aa68 	.word	0x2404aa68
 800e628:	2404aa6c 	.word	0x2404aa6c
 800e62c:	2404af44 	.word	0x2404af44

0800e630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e63c:	2300      	movs	r3, #0
 800e63e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d056      	beq.n	800e6f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e646:	4b2e      	ldr	r3, [pc, #184]	; (800e700 <xTaskPriorityDisinherit+0xd0>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	693a      	ldr	r2, [r7, #16]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d00a      	beq.n	800e666 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	60fb      	str	r3, [r7, #12]
}
 800e662:	bf00      	nop
 800e664:	e7fe      	b.n	800e664 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10a      	bne.n	800e684 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	60bb      	str	r3, [r7, #8]
}
 800e680:	bf00      	nop
 800e682:	e7fe      	b.n	800e682 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e688:	1e5a      	subs	r2, r3, #1
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e696:	429a      	cmp	r2, r3
 800e698:	d02c      	beq.n	800e6f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d128      	bne.n	800e6f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe f91a 	bl	800c8e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c4:	4b0f      	ldr	r3, [pc, #60]	; (800e704 <xTaskPriorityDisinherit+0xd4>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d903      	bls.n	800e6d4 <xTaskPriorityDisinherit+0xa4>
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d0:	4a0c      	ldr	r2, [pc, #48]	; (800e704 <xTaskPriorityDisinherit+0xd4>)
 800e6d2:	6013      	str	r3, [r2, #0]
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d8:	4613      	mov	r3, r2
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	4413      	add	r3, r2
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	4a09      	ldr	r2, [pc, #36]	; (800e708 <xTaskPriorityDisinherit+0xd8>)
 800e6e2:	441a      	add	r2, r3
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	3304      	adds	r3, #4
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	4610      	mov	r0, r2
 800e6ec:	f7fe f89b 	bl	800c826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6f4:	697b      	ldr	r3, [r7, #20]
	}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3718      	adds	r7, #24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	2404aa68 	.word	0x2404aa68
 800e704:	2404af44 	.word	0x2404af44
 800e708:	2404aa6c 	.word	0x2404aa6c

0800e70c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b088      	sub	sp, #32
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e71a:	2301      	movs	r3, #1
 800e71c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d06a      	beq.n	800e7fa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10a      	bne.n	800e742 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	60fb      	str	r3, [r7, #12]
}
 800e73e:	bf00      	nop
 800e740:	e7fe      	b.n	800e740 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d902      	bls.n	800e752 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	61fb      	str	r3, [r7, #28]
 800e750:	e002      	b.n	800e758 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e756:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e75c:	69fa      	ldr	r2, [r7, #28]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d04b      	beq.n	800e7fa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d146      	bne.n	800e7fa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e76c:	4b25      	ldr	r3, [pc, #148]	; (800e804 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	69ba      	ldr	r2, [r7, #24]
 800e772:	429a      	cmp	r2, r3
 800e774:	d10a      	bne.n	800e78c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77a:	f383 8811 	msr	BASEPRI, r3
 800e77e:	f3bf 8f6f 	isb	sy
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	60bb      	str	r3, [r7, #8]
}
 800e788:	bf00      	nop
 800e78a:	e7fe      	b.n	800e78a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e790:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	69fa      	ldr	r2, [r7, #28]
 800e796:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	699b      	ldr	r3, [r3, #24]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	db04      	blt.n	800e7aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	6959      	ldr	r1, [r3, #20]
 800e7ae:	693a      	ldr	r2, [r7, #16]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	4413      	add	r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	4a13      	ldr	r2, [pc, #76]	; (800e808 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7ba:	4413      	add	r3, r2
 800e7bc:	4299      	cmp	r1, r3
 800e7be:	d11c      	bne.n	800e7fa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fe f88b 	bl	800c8e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ce:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d903      	bls.n	800e7de <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7da:	4a0c      	ldr	r2, [pc, #48]	; (800e80c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7dc:	6013      	str	r3, [r2, #0]
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4413      	add	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4a07      	ldr	r2, [pc, #28]	; (800e808 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7ec:	441a      	add	r2, r3
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	4610      	mov	r0, r2
 800e7f6:	f7fe f816 	bl	800c826 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7fa:	bf00      	nop
 800e7fc:	3720      	adds	r7, #32
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	2404aa68 	.word	0x2404aa68
 800e808:	2404aa6c 	.word	0x2404aa6c
 800e80c:	2404af44 	.word	0x2404af44

0800e810 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e810:	b480      	push	{r7}
 800e812:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e814:	4b07      	ldr	r3, [pc, #28]	; (800e834 <pvTaskIncrementMutexHeldCount+0x24>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d004      	beq.n	800e826 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <pvTaskIncrementMutexHeldCount+0x24>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e822:	3201      	adds	r2, #1
 800e824:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e826:	4b03      	ldr	r3, [pc, #12]	; (800e834 <pvTaskIncrementMutexHeldCount+0x24>)
 800e828:	681b      	ldr	r3, [r3, #0]
	}
 800e82a:	4618      	mov	r0, r3
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	2404aa68 	.word	0x2404aa68

0800e838 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e842:	4b21      	ldr	r3, [pc, #132]	; (800e8c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e848:	4b20      	ldr	r3, [pc, #128]	; (800e8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3304      	adds	r3, #4
 800e84e:	4618      	mov	r0, r3
 800e850:	f7fe f846 	bl	800c8e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e85a:	d10a      	bne.n	800e872 <prvAddCurrentTaskToDelayedList+0x3a>
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e862:	4b1a      	ldr	r3, [pc, #104]	; (800e8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	3304      	adds	r3, #4
 800e868:	4619      	mov	r1, r3
 800e86a:	4819      	ldr	r0, [pc, #100]	; (800e8d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e86c:	f7fd ffdb 	bl	800c826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e870:	e026      	b.n	800e8c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4413      	add	r3, r2
 800e878:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e87a:	4b14      	ldr	r3, [pc, #80]	; (800e8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e882:	68ba      	ldr	r2, [r7, #8]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	429a      	cmp	r2, r3
 800e888:	d209      	bcs.n	800e89e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e88a:	4b12      	ldr	r3, [pc, #72]	; (800e8d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3304      	adds	r3, #4
 800e894:	4619      	mov	r1, r3
 800e896:	4610      	mov	r0, r2
 800e898:	f7fd ffe9 	bl	800c86e <vListInsert>
}
 800e89c:	e010      	b.n	800e8c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e89e:	4b0e      	ldr	r3, [pc, #56]	; (800e8d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	4b0a      	ldr	r3, [pc, #40]	; (800e8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	4610      	mov	r0, r2
 800e8ac:	f7fd ffdf 	bl	800c86e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8b0:	4b0a      	ldr	r3, [pc, #40]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d202      	bcs.n	800e8c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8ba:	4a08      	ldr	r2, [pc, #32]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	6013      	str	r3, [r2, #0]
}
 800e8c0:	bf00      	nop
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	2404af40 	.word	0x2404af40
 800e8cc:	2404aa68 	.word	0x2404aa68
 800e8d0:	2404af28 	.word	0x2404af28
 800e8d4:	2404aef8 	.word	0x2404aef8
 800e8d8:	2404aef4 	.word	0x2404aef4
 800e8dc:	2404af5c 	.word	0x2404af5c

0800e8e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b08a      	sub	sp, #40	; 0x28
 800e8e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e8ea:	f000 fb07 	bl	800eefc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e8ee:	4b1c      	ldr	r3, [pc, #112]	; (800e960 <xTimerCreateTimerTask+0x80>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d021      	beq.n	800e93a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e8fe:	1d3a      	adds	r2, r7, #4
 800e900:	f107 0108 	add.w	r1, r7, #8
 800e904:	f107 030c 	add.w	r3, r7, #12
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fd ff45 	bl	800c798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e90e:	6879      	ldr	r1, [r7, #4]
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	68fa      	ldr	r2, [r7, #12]
 800e914:	9202      	str	r2, [sp, #8]
 800e916:	9301      	str	r3, [sp, #4]
 800e918:	2302      	movs	r3, #2
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	2300      	movs	r3, #0
 800e91e:	460a      	mov	r2, r1
 800e920:	4910      	ldr	r1, [pc, #64]	; (800e964 <xTimerCreateTimerTask+0x84>)
 800e922:	4811      	ldr	r0, [pc, #68]	; (800e968 <xTimerCreateTimerTask+0x88>)
 800e924:	f7ff f814 	bl	800d950 <xTaskCreateStatic>
 800e928:	4603      	mov	r3, r0
 800e92a:	4a10      	ldr	r2, [pc, #64]	; (800e96c <xTimerCreateTimerTask+0x8c>)
 800e92c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e92e:	4b0f      	ldr	r3, [pc, #60]	; (800e96c <xTimerCreateTimerTask+0x8c>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e936:	2301      	movs	r3, #1
 800e938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d10a      	bne.n	800e956 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	613b      	str	r3, [r7, #16]
}
 800e952:	bf00      	nop
 800e954:	e7fe      	b.n	800e954 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e956:	697b      	ldr	r3, [r7, #20]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3718      	adds	r7, #24
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	2404af98 	.word	0x2404af98
 800e964:	08010bd8 	.word	0x08010bd8
 800e968:	0800eaa5 	.word	0x0800eaa5
 800e96c:	2404af9c 	.word	0x2404af9c

0800e970 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b08a      	sub	sp, #40	; 0x28
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
 800e97c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e97e:	2300      	movs	r3, #0
 800e980:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10a      	bne.n	800e99e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98c:	f383 8811 	msr	BASEPRI, r3
 800e990:	f3bf 8f6f 	isb	sy
 800e994:	f3bf 8f4f 	dsb	sy
 800e998:	623b      	str	r3, [r7, #32]
}
 800e99a:	bf00      	nop
 800e99c:	e7fe      	b.n	800e99c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e99e:	4b1a      	ldr	r3, [pc, #104]	; (800ea08 <xTimerGenericCommand+0x98>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d02a      	beq.n	800e9fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	2b05      	cmp	r3, #5
 800e9b6:	dc18      	bgt.n	800e9ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9b8:	f7ff fdb4 	bl	800e524 <xTaskGetSchedulerState>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d109      	bne.n	800e9d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9c2:	4b11      	ldr	r3, [pc, #68]	; (800ea08 <xTimerGenericCommand+0x98>)
 800e9c4:	6818      	ldr	r0, [r3, #0]
 800e9c6:	f107 0110 	add.w	r1, r7, #16
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ce:	f7fe f959 	bl	800cc84 <xQueueGenericSend>
 800e9d2:	6278      	str	r0, [r7, #36]	; 0x24
 800e9d4:	e012      	b.n	800e9fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ea08 <xTimerGenericCommand+0x98>)
 800e9d8:	6818      	ldr	r0, [r3, #0]
 800e9da:	f107 0110 	add.w	r1, r7, #16
 800e9de:	2300      	movs	r3, #0
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f7fe f94f 	bl	800cc84 <xQueueGenericSend>
 800e9e6:	6278      	str	r0, [r7, #36]	; 0x24
 800e9e8:	e008      	b.n	800e9fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e9ea:	4b07      	ldr	r3, [pc, #28]	; (800ea08 <xTimerGenericCommand+0x98>)
 800e9ec:	6818      	ldr	r0, [r3, #0]
 800e9ee:	f107 0110 	add.w	r1, r7, #16
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	683a      	ldr	r2, [r7, #0]
 800e9f6:	f7fe fa43 	bl	800ce80 <xQueueGenericSendFromISR>
 800e9fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3728      	adds	r7, #40	; 0x28
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	2404af98 	.word	0x2404af98

0800ea0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b088      	sub	sp, #32
 800ea10:	af02      	add	r7, sp, #8
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea16:	4b22      	ldr	r3, [pc, #136]	; (800eaa0 <prvProcessExpiredTimer+0x94>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	3304      	adds	r3, #4
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fd ff5b 	bl	800c8e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea30:	f003 0304 	and.w	r3, r3, #4
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d022      	beq.n	800ea7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	699a      	ldr	r2, [r3, #24]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	18d1      	adds	r1, r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	6978      	ldr	r0, [r7, #20]
 800ea46:	f000 f8d1 	bl	800ebec <prvInsertTimerInActiveList>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d01f      	beq.n	800ea90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea50:	2300      	movs	r3, #0
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	2300      	movs	r3, #0
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	2100      	movs	r1, #0
 800ea5a:	6978      	ldr	r0, [r7, #20]
 800ea5c:	f7ff ff88 	bl	800e970 <xTimerGenericCommand>
 800ea60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d113      	bne.n	800ea90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ea68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6c:	f383 8811 	msr	BASEPRI, r3
 800ea70:	f3bf 8f6f 	isb	sy
 800ea74:	f3bf 8f4f 	dsb	sy
 800ea78:	60fb      	str	r3, [r7, #12]
}
 800ea7a:	bf00      	nop
 800ea7c:	e7fe      	b.n	800ea7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea84:	f023 0301 	bic.w	r3, r3, #1
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	6978      	ldr	r0, [r7, #20]
 800ea96:	4798      	blx	r3
}
 800ea98:	bf00      	nop
 800ea9a:	3718      	adds	r7, #24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	2404af90 	.word	0x2404af90

0800eaa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eaac:	f107 0308 	add.w	r3, r7, #8
 800eab0:	4618      	mov	r0, r3
 800eab2:	f000 f857 	bl	800eb64 <prvGetNextExpireTime>
 800eab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	4619      	mov	r1, r3
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f000 f803 	bl	800eac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eac2:	f000 f8d5 	bl	800ec70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eac6:	e7f1      	b.n	800eaac <prvTimerTask+0x8>

0800eac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ead2:	f7ff f945 	bl	800dd60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ead6:	f107 0308 	add.w	r3, r7, #8
 800eada:	4618      	mov	r0, r3
 800eadc:	f000 f866 	bl	800ebac <prvSampleTimeNow>
 800eae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d130      	bne.n	800eb4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10a      	bne.n	800eb04 <prvProcessTimerOrBlockTask+0x3c>
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d806      	bhi.n	800eb04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eaf6:	f7ff f941 	bl	800dd7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eafa:	68f9      	ldr	r1, [r7, #12]
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff ff85 	bl	800ea0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb02:	e024      	b.n	800eb4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d008      	beq.n	800eb1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb0a:	4b13      	ldr	r3, [pc, #76]	; (800eb58 <prvProcessTimerOrBlockTask+0x90>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <prvProcessTimerOrBlockTask+0x50>
 800eb14:	2301      	movs	r3, #1
 800eb16:	e000      	b.n	800eb1a <prvProcessTimerOrBlockTask+0x52>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb1c:	4b0f      	ldr	r3, [pc, #60]	; (800eb5c <prvProcessTimerOrBlockTask+0x94>)
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	f7fe fedd 	bl	800d8e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb2e:	f7ff f925 	bl	800dd7c <xTaskResumeAll>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10a      	bne.n	800eb4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb38:	4b09      	ldr	r3, [pc, #36]	; (800eb60 <prvProcessTimerOrBlockTask+0x98>)
 800eb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	f3bf 8f6f 	isb	sy
}
 800eb48:	e001      	b.n	800eb4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb4a:	f7ff f917 	bl	800dd7c <xTaskResumeAll>
}
 800eb4e:	bf00      	nop
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	2404af94 	.word	0x2404af94
 800eb5c:	2404af98 	.word	0x2404af98
 800eb60:	e000ed04 	.word	0xe000ed04

0800eb64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb6c:	4b0e      	ldr	r3, [pc, #56]	; (800eba8 <prvGetNextExpireTime+0x44>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <prvGetNextExpireTime+0x16>
 800eb76:	2201      	movs	r2, #1
 800eb78:	e000      	b.n	800eb7c <prvGetNextExpireTime+0x18>
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d105      	bne.n	800eb94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb88:	4b07      	ldr	r3, [pc, #28]	; (800eba8 <prvGetNextExpireTime+0x44>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	e001      	b.n	800eb98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb94:	2300      	movs	r3, #0
 800eb96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb98:	68fb      	ldr	r3, [r7, #12]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop
 800eba8:	2404af90 	.word	0x2404af90

0800ebac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebb4:	f7ff f980 	bl	800deb8 <xTaskGetTickCount>
 800ebb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebba:	4b0b      	ldr	r3, [pc, #44]	; (800ebe8 <prvSampleTimeNow+0x3c>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d205      	bcs.n	800ebd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ebc4:	f000 f936 	bl	800ee34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	e002      	b.n	800ebd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ebd6:	4a04      	ldr	r2, [pc, #16]	; (800ebe8 <prvSampleTimeNow+0x3c>)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	2404afa0 	.word	0x2404afa0

0800ebec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
 800ebf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d812      	bhi.n	800ec38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	1ad2      	subs	r2, r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	699b      	ldr	r3, [r3, #24]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d302      	bcc.n	800ec26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec20:	2301      	movs	r3, #1
 800ec22:	617b      	str	r3, [r7, #20]
 800ec24:	e01b      	b.n	800ec5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec26:	4b10      	ldr	r3, [pc, #64]	; (800ec68 <prvInsertTimerInActiveList+0x7c>)
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3304      	adds	r3, #4
 800ec2e:	4619      	mov	r1, r3
 800ec30:	4610      	mov	r0, r2
 800ec32:	f7fd fe1c 	bl	800c86e <vListInsert>
 800ec36:	e012      	b.n	800ec5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d206      	bcs.n	800ec4e <prvInsertTimerInActiveList+0x62>
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d302      	bcc.n	800ec4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	617b      	str	r3, [r7, #20]
 800ec4c:	e007      	b.n	800ec5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec4e:	4b07      	ldr	r3, [pc, #28]	; (800ec6c <prvInsertTimerInActiveList+0x80>)
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	3304      	adds	r3, #4
 800ec56:	4619      	mov	r1, r3
 800ec58:	4610      	mov	r0, r2
 800ec5a:	f7fd fe08 	bl	800c86e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec5e:	697b      	ldr	r3, [r7, #20]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	2404af94 	.word	0x2404af94
 800ec6c:	2404af90 	.word	0x2404af90

0800ec70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b08e      	sub	sp, #56	; 0x38
 800ec74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec76:	e0ca      	b.n	800ee0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	da18      	bge.n	800ecb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec7e:	1d3b      	adds	r3, r7, #4
 800ec80:	3304      	adds	r3, #4
 800ec82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10a      	bne.n	800eca0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	61fb      	str	r3, [r7, #28]
}
 800ec9c:	bf00      	nop
 800ec9e:	e7fe      	b.n	800ec9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eca6:	6850      	ldr	r0, [r2, #4]
 800eca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecaa:	6892      	ldr	r2, [r2, #8]
 800ecac:	4611      	mov	r1, r2
 800ecae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f2c0 80aa 	blt.w	800ee0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	695b      	ldr	r3, [r3, #20]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d004      	beq.n	800ecce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fd fe09 	bl	800c8e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecce:	463b      	mov	r3, r7
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7ff ff6b 	bl	800ebac <prvSampleTimeNow>
 800ecd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b09      	cmp	r3, #9
 800ecdc:	f200 8097 	bhi.w	800ee0e <prvProcessReceivedCommands+0x19e>
 800ece0:	a201      	add	r2, pc, #4	; (adr r2, 800ece8 <prvProcessReceivedCommands+0x78>)
 800ece2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece6:	bf00      	nop
 800ece8:	0800ed11 	.word	0x0800ed11
 800ecec:	0800ed11 	.word	0x0800ed11
 800ecf0:	0800ed11 	.word	0x0800ed11
 800ecf4:	0800ed85 	.word	0x0800ed85
 800ecf8:	0800ed99 	.word	0x0800ed99
 800ecfc:	0800ede3 	.word	0x0800ede3
 800ed00:	0800ed11 	.word	0x0800ed11
 800ed04:	0800ed11 	.word	0x0800ed11
 800ed08:	0800ed85 	.word	0x0800ed85
 800ed0c:	0800ed99 	.word	0x0800ed99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed16:	f043 0301 	orr.w	r3, r3, #1
 800ed1a:	b2da      	uxtb	r2, r3
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	18d1      	adds	r1, r2, r3
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed30:	f7ff ff5c 	bl	800ebec <prvInsertTimerInActiveList>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d069      	beq.n	800ee0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed48:	f003 0304 	and.w	r3, r3, #4
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d05e      	beq.n	800ee0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed50:	68ba      	ldr	r2, [r7, #8]
 800ed52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed54:	699b      	ldr	r3, [r3, #24]
 800ed56:	441a      	add	r2, r3
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	2100      	movs	r1, #0
 800ed60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed62:	f7ff fe05 	bl	800e970 <xTimerGenericCommand>
 800ed66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed68:	6a3b      	ldr	r3, [r7, #32]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d14f      	bne.n	800ee0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ed6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed72:	f383 8811 	msr	BASEPRI, r3
 800ed76:	f3bf 8f6f 	isb	sy
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	61bb      	str	r3, [r7, #24]
}
 800ed80:	bf00      	nop
 800ed82:	e7fe      	b.n	800ed82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed8a:	f023 0301 	bic.w	r3, r3, #1
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ed96:	e03a      	b.n	800ee0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed9e:	f043 0301 	orr.w	r3, r3, #1
 800eda2:	b2da      	uxtb	r2, r3
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10a      	bne.n	800edce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	617b      	str	r3, [r7, #20]
}
 800edca:	bf00      	nop
 800edcc:	e7fe      	b.n	800edcc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800edce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd0:	699a      	ldr	r2, [r3, #24]
 800edd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd4:	18d1      	adds	r1, r2, r3
 800edd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eddc:	f7ff ff06 	bl	800ebec <prvInsertTimerInActiveList>
					break;
 800ede0:	e015      	b.n	800ee0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ede8:	f003 0302 	and.w	r3, r3, #2
 800edec:	2b00      	cmp	r3, #0
 800edee:	d103      	bne.n	800edf8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800edf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edf2:	f000 fbdd 	bl	800f5b0 <vPortFree>
 800edf6:	e00a      	b.n	800ee0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edfe:	f023 0301 	bic.w	r3, r3, #1
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee0a:	e000      	b.n	800ee0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee0e:	4b08      	ldr	r3, [pc, #32]	; (800ee30 <prvProcessReceivedCommands+0x1c0>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	1d39      	adds	r1, r7, #4
 800ee14:	2200      	movs	r2, #0
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fe f95a 	bl	800d0d0 <xQueueReceive>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f47f af2a 	bne.w	800ec78 <prvProcessReceivedCommands+0x8>
	}
}
 800ee24:	bf00      	nop
 800ee26:	bf00      	nop
 800ee28:	3730      	adds	r7, #48	; 0x30
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	2404af98 	.word	0x2404af98

0800ee34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee3a:	e048      	b.n	800eece <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee3c:	4b2d      	ldr	r3, [pc, #180]	; (800eef4 <prvSwitchTimerLists+0xc0>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee46:	4b2b      	ldr	r3, [pc, #172]	; (800eef4 <prvSwitchTimerLists+0xc0>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3304      	adds	r3, #4
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fd fd43 	bl	800c8e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee68:	f003 0304 	and.w	r3, r3, #4
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d02e      	beq.n	800eece <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	699b      	ldr	r3, [r3, #24]
 800ee74:	693a      	ldr	r2, [r7, #16]
 800ee76:	4413      	add	r3, r2
 800ee78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d90e      	bls.n	800eea0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	68fa      	ldr	r2, [r7, #12]
 800ee8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee8e:	4b19      	ldr	r3, [pc, #100]	; (800eef4 <prvSwitchTimerLists+0xc0>)
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	3304      	adds	r3, #4
 800ee96:	4619      	mov	r1, r3
 800ee98:	4610      	mov	r0, r2
 800ee9a:	f7fd fce8 	bl	800c86e <vListInsert>
 800ee9e:	e016      	b.n	800eece <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eea0:	2300      	movs	r3, #0
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	2300      	movs	r3, #0
 800eea6:	693a      	ldr	r2, [r7, #16]
 800eea8:	2100      	movs	r1, #0
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f7ff fd60 	bl	800e970 <xTimerGenericCommand>
 800eeb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d10a      	bne.n	800eece <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	603b      	str	r3, [r7, #0]
}
 800eeca:	bf00      	nop
 800eecc:	e7fe      	b.n	800eecc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eece:	4b09      	ldr	r3, [pc, #36]	; (800eef4 <prvSwitchTimerLists+0xc0>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d1b1      	bne.n	800ee3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eed8:	4b06      	ldr	r3, [pc, #24]	; (800eef4 <prvSwitchTimerLists+0xc0>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eede:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <prvSwitchTimerLists+0xc4>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a04      	ldr	r2, [pc, #16]	; (800eef4 <prvSwitchTimerLists+0xc0>)
 800eee4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eee6:	4a04      	ldr	r2, [pc, #16]	; (800eef8 <prvSwitchTimerLists+0xc4>)
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	6013      	str	r3, [r2, #0]
}
 800eeec:	bf00      	nop
 800eeee:	3718      	adds	r7, #24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	2404af90 	.word	0x2404af90
 800eef8:	2404af94 	.word	0x2404af94

0800eefc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef02:	f000 f967 	bl	800f1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef06:	4b15      	ldr	r3, [pc, #84]	; (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d120      	bne.n	800ef50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef0e:	4814      	ldr	r0, [pc, #80]	; (800ef60 <prvCheckForValidListAndQueue+0x64>)
 800ef10:	f7fd fc5c 	bl	800c7cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef14:	4813      	ldr	r0, [pc, #76]	; (800ef64 <prvCheckForValidListAndQueue+0x68>)
 800ef16:	f7fd fc59 	bl	800c7cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef1a:	4b13      	ldr	r3, [pc, #76]	; (800ef68 <prvCheckForValidListAndQueue+0x6c>)
 800ef1c:	4a10      	ldr	r2, [pc, #64]	; (800ef60 <prvCheckForValidListAndQueue+0x64>)
 800ef1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef20:	4b12      	ldr	r3, [pc, #72]	; (800ef6c <prvCheckForValidListAndQueue+0x70>)
 800ef22:	4a10      	ldr	r2, [pc, #64]	; (800ef64 <prvCheckForValidListAndQueue+0x68>)
 800ef24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef26:	2300      	movs	r3, #0
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4b11      	ldr	r3, [pc, #68]	; (800ef70 <prvCheckForValidListAndQueue+0x74>)
 800ef2c:	4a11      	ldr	r2, [pc, #68]	; (800ef74 <prvCheckForValidListAndQueue+0x78>)
 800ef2e:	2110      	movs	r1, #16
 800ef30:	200a      	movs	r0, #10
 800ef32:	f7fd fd67 	bl	800ca04 <xQueueGenericCreateStatic>
 800ef36:	4603      	mov	r3, r0
 800ef38:	4a08      	ldr	r2, [pc, #32]	; (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef3c:	4b07      	ldr	r3, [pc, #28]	; (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d005      	beq.n	800ef50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef44:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <prvCheckForValidListAndQueue+0x60>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	490b      	ldr	r1, [pc, #44]	; (800ef78 <prvCheckForValidListAndQueue+0x7c>)
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fe fc78 	bl	800d840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef50:	f000 f970 	bl	800f234 <vPortExitCritical>
}
 800ef54:	bf00      	nop
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	2404af98 	.word	0x2404af98
 800ef60:	2404af68 	.word	0x2404af68
 800ef64:	2404af7c 	.word	0x2404af7c
 800ef68:	2404af90 	.word	0x2404af90
 800ef6c:	2404af94 	.word	0x2404af94
 800ef70:	2404b044 	.word	0x2404b044
 800ef74:	2404afa4 	.word	0x2404afa4
 800ef78:	08010be0 	.word	0x08010be0

0800ef7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	3b04      	subs	r3, #4
 800ef8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3b04      	subs	r3, #4
 800ef9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	f023 0201 	bic.w	r2, r3, #1
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3b04      	subs	r3, #4
 800efaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efac:	4a0c      	ldr	r2, [pc, #48]	; (800efe0 <pxPortInitialiseStack+0x64>)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3b14      	subs	r3, #20
 800efb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f06f 0202 	mvn.w	r2, #2
 800efca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3b20      	subs	r3, #32
 800efd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efd2:	68fb      	ldr	r3, [r7, #12]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	0800efe5 	.word	0x0800efe5

0800efe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800efee:	4b12      	ldr	r3, [pc, #72]	; (800f038 <prvTaskExitError+0x54>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff6:	d00a      	beq.n	800f00e <prvTaskExitError+0x2a>
	__asm volatile
 800eff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	60fb      	str	r3, [r7, #12]
}
 800f00a:	bf00      	nop
 800f00c:	e7fe      	b.n	800f00c <prvTaskExitError+0x28>
	__asm volatile
 800f00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f012:	f383 8811 	msr	BASEPRI, r3
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	f3bf 8f4f 	dsb	sy
 800f01e:	60bb      	str	r3, [r7, #8]
}
 800f020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f022:	bf00      	nop
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d0fc      	beq.n	800f024 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f02a:	bf00      	nop
 800f02c:	bf00      	nop
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	24000014 	.word	0x24000014
 800f03c:	00000000 	.word	0x00000000

0800f040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f040:	4b07      	ldr	r3, [pc, #28]	; (800f060 <pxCurrentTCBConst2>)
 800f042:	6819      	ldr	r1, [r3, #0]
 800f044:	6808      	ldr	r0, [r1, #0]
 800f046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04a:	f380 8809 	msr	PSP, r0
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	f04f 0000 	mov.w	r0, #0
 800f056:	f380 8811 	msr	BASEPRI, r0
 800f05a:	4770      	bx	lr
 800f05c:	f3af 8000 	nop.w

0800f060 <pxCurrentTCBConst2>:
 800f060:	2404aa68 	.word	0x2404aa68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop

0800f068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f068:	4808      	ldr	r0, [pc, #32]	; (800f08c <prvPortStartFirstTask+0x24>)
 800f06a:	6800      	ldr	r0, [r0, #0]
 800f06c:	6800      	ldr	r0, [r0, #0]
 800f06e:	f380 8808 	msr	MSP, r0
 800f072:	f04f 0000 	mov.w	r0, #0
 800f076:	f380 8814 	msr	CONTROL, r0
 800f07a:	b662      	cpsie	i
 800f07c:	b661      	cpsie	f
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	df00      	svc	0
 800f088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f08a:	bf00      	nop
 800f08c:	e000ed08 	.word	0xe000ed08

0800f090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f096:	4b46      	ldr	r3, [pc, #280]	; (800f1b0 <xPortStartScheduler+0x120>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a46      	ldr	r2, [pc, #280]	; (800f1b4 <xPortStartScheduler+0x124>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d10a      	bne.n	800f0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	613b      	str	r3, [r7, #16]
}
 800f0b2:	bf00      	nop
 800f0b4:	e7fe      	b.n	800f0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0b6:	4b3e      	ldr	r3, [pc, #248]	; (800f1b0 <xPortStartScheduler+0x120>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4a3f      	ldr	r2, [pc, #252]	; (800f1b8 <xPortStartScheduler+0x128>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d10a      	bne.n	800f0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800f0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c4:	f383 8811 	msr	BASEPRI, r3
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	60fb      	str	r3, [r7, #12]
}
 800f0d2:	bf00      	nop
 800f0d4:	e7fe      	b.n	800f0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0d6:	4b39      	ldr	r3, [pc, #228]	; (800f1bc <xPortStartScheduler+0x12c>)
 800f0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	22ff      	movs	r2, #255	; 0xff
 800f0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	4b31      	ldr	r3, [pc, #196]	; (800f1c0 <xPortStartScheduler+0x130>)
 800f0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0fe:	4b31      	ldr	r3, [pc, #196]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f100:	2207      	movs	r2, #7
 800f102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f104:	e009      	b.n	800f11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f106:	4b2f      	ldr	r3, [pc, #188]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3b01      	subs	r3, #1
 800f10c:	4a2d      	ldr	r2, [pc, #180]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	b2db      	uxtb	r3, r3
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	b2db      	uxtb	r3, r3
 800f118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f11a:	78fb      	ldrb	r3, [r7, #3]
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f122:	2b80      	cmp	r3, #128	; 0x80
 800f124:	d0ef      	beq.n	800f106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f126:	4b27      	ldr	r3, [pc, #156]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f1c3 0307 	rsb	r3, r3, #7
 800f12e:	2b04      	cmp	r3, #4
 800f130:	d00a      	beq.n	800f148 <xPortStartScheduler+0xb8>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	60bb      	str	r3, [r7, #8]
}
 800f144:	bf00      	nop
 800f146:	e7fe      	b.n	800f146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f148:	4b1e      	ldr	r3, [pc, #120]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	4a1d      	ldr	r2, [pc, #116]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f152:	4b1c      	ldr	r3, [pc, #112]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f15a:	4a1a      	ldr	r2, [pc, #104]	; (800f1c4 <xPortStartScheduler+0x134>)
 800f15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	b2da      	uxtb	r2, r3
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f166:	4b18      	ldr	r3, [pc, #96]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a17      	ldr	r2, [pc, #92]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f172:	4b15      	ldr	r3, [pc, #84]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a14      	ldr	r2, [pc, #80]	; (800f1c8 <xPortStartScheduler+0x138>)
 800f178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f17e:	f000 f8dd 	bl	800f33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f182:	4b12      	ldr	r3, [pc, #72]	; (800f1cc <xPortStartScheduler+0x13c>)
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f188:	f000 f8fc 	bl	800f384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f18c:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <xPortStartScheduler+0x140>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a0f      	ldr	r2, [pc, #60]	; (800f1d0 <xPortStartScheduler+0x140>)
 800f192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f198:	f7ff ff66 	bl	800f068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f19c:	f7fe ff56 	bl	800e04c <vTaskSwitchContext>
	prvTaskExitError();
 800f1a0:	f7ff ff20 	bl	800efe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	e000ed00 	.word	0xe000ed00
 800f1b4:	410fc271 	.word	0x410fc271
 800f1b8:	410fc270 	.word	0x410fc270
 800f1bc:	e000e400 	.word	0xe000e400
 800f1c0:	2404b094 	.word	0x2404b094
 800f1c4:	2404b098 	.word	0x2404b098
 800f1c8:	e000ed20 	.word	0xe000ed20
 800f1cc:	24000014 	.word	0x24000014
 800f1d0:	e000ef34 	.word	0xe000ef34

0800f1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1de:	f383 8811 	msr	BASEPRI, r3
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	607b      	str	r3, [r7, #4]
}
 800f1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1ee:	4b0f      	ldr	r3, [pc, #60]	; (800f22c <vPortEnterCritical+0x58>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	4a0d      	ldr	r2, [pc, #52]	; (800f22c <vPortEnterCritical+0x58>)
 800f1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1f8:	4b0c      	ldr	r3, [pc, #48]	; (800f22c <vPortEnterCritical+0x58>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d10f      	bne.n	800f220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f200:	4b0b      	ldr	r3, [pc, #44]	; (800f230 <vPortEnterCritical+0x5c>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	b2db      	uxtb	r3, r3
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00a      	beq.n	800f220 <vPortEnterCritical+0x4c>
	__asm volatile
 800f20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20e:	f383 8811 	msr	BASEPRI, r3
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	f3bf 8f4f 	dsb	sy
 800f21a:	603b      	str	r3, [r7, #0]
}
 800f21c:	bf00      	nop
 800f21e:	e7fe      	b.n	800f21e <vPortEnterCritical+0x4a>
	}
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	24000014 	.word	0x24000014
 800f230:	e000ed04 	.word	0xe000ed04

0800f234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f23a:	4b12      	ldr	r3, [pc, #72]	; (800f284 <vPortExitCritical+0x50>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d10a      	bne.n	800f258 <vPortExitCritical+0x24>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	607b      	str	r3, [r7, #4]
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f258:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <vPortExitCritical+0x50>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	4a09      	ldr	r2, [pc, #36]	; (800f284 <vPortExitCritical+0x50>)
 800f260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f262:	4b08      	ldr	r3, [pc, #32]	; (800f284 <vPortExitCritical+0x50>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d105      	bne.n	800f276 <vPortExitCritical+0x42>
 800f26a:	2300      	movs	r3, #0
 800f26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	f383 8811 	msr	BASEPRI, r3
}
 800f274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f276:	bf00      	nop
 800f278:	370c      	adds	r7, #12
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	24000014 	.word	0x24000014
	...

0800f290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f290:	f3ef 8009 	mrs	r0, PSP
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	4b15      	ldr	r3, [pc, #84]	; (800f2f0 <pxCurrentTCBConst>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	f01e 0f10 	tst.w	lr, #16
 800f2a0:	bf08      	it	eq
 800f2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2aa:	6010      	str	r0, [r2, #0]
 800f2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2b4:	f380 8811 	msr	BASEPRI, r0
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f7fe fec4 	bl	800e04c <vTaskSwitchContext>
 800f2c4:	f04f 0000 	mov.w	r0, #0
 800f2c8:	f380 8811 	msr	BASEPRI, r0
 800f2cc:	bc09      	pop	{r0, r3}
 800f2ce:	6819      	ldr	r1, [r3, #0]
 800f2d0:	6808      	ldr	r0, [r1, #0]
 800f2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d6:	f01e 0f10 	tst.w	lr, #16
 800f2da:	bf08      	it	eq
 800f2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2e0:	f380 8809 	msr	PSP, r0
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w

0800f2f0 <pxCurrentTCBConst>:
 800f2f0:	2404aa68 	.word	0x2404aa68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop

0800f2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	f383 8811 	msr	BASEPRI, r3
 800f306:	f3bf 8f6f 	isb	sy
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	607b      	str	r3, [r7, #4]
}
 800f310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f312:	f7fe fde1 	bl	800ded8 <xTaskIncrementTick>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f31c:	4b06      	ldr	r3, [pc, #24]	; (800f338 <xPortSysTickHandler+0x40>)
 800f31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	2300      	movs	r3, #0
 800f326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	f383 8811 	msr	BASEPRI, r3
}
 800f32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	e000ed04 	.word	0xe000ed04

0800f33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f33c:	b480      	push	{r7}
 800f33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f340:	4b0b      	ldr	r3, [pc, #44]	; (800f370 <vPortSetupTimerInterrupt+0x34>)
 800f342:	2200      	movs	r2, #0
 800f344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f346:	4b0b      	ldr	r3, [pc, #44]	; (800f374 <vPortSetupTimerInterrupt+0x38>)
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f34c:	4b0a      	ldr	r3, [pc, #40]	; (800f378 <vPortSetupTimerInterrupt+0x3c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a0a      	ldr	r2, [pc, #40]	; (800f37c <vPortSetupTimerInterrupt+0x40>)
 800f352:	fba2 2303 	umull	r2, r3, r2, r3
 800f356:	099b      	lsrs	r3, r3, #6
 800f358:	4a09      	ldr	r2, [pc, #36]	; (800f380 <vPortSetupTimerInterrupt+0x44>)
 800f35a:	3b01      	subs	r3, #1
 800f35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f35e:	4b04      	ldr	r3, [pc, #16]	; (800f370 <vPortSetupTimerInterrupt+0x34>)
 800f360:	2207      	movs	r2, #7
 800f362:	601a      	str	r2, [r3, #0]
}
 800f364:	bf00      	nop
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	e000e010 	.word	0xe000e010
 800f374:	e000e018 	.word	0xe000e018
 800f378:	24000004 	.word	0x24000004
 800f37c:	10624dd3 	.word	0x10624dd3
 800f380:	e000e014 	.word	0xe000e014

0800f384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f394 <vPortEnableVFP+0x10>
 800f388:	6801      	ldr	r1, [r0, #0]
 800f38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f38e:	6001      	str	r1, [r0, #0]
 800f390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f392:	bf00      	nop
 800f394:	e000ed88 	.word	0xe000ed88

0800f398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f39e:	f3ef 8305 	mrs	r3, IPSR
 800f3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b0f      	cmp	r3, #15
 800f3a8:	d914      	bls.n	800f3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3aa:	4a17      	ldr	r2, [pc, #92]	; (800f408 <vPortValidateInterruptPriority+0x70>)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3b4:	4b15      	ldr	r3, [pc, #84]	; (800f40c <vPortValidateInterruptPriority+0x74>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	7afa      	ldrb	r2, [r7, #11]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d20a      	bcs.n	800f3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	607b      	str	r3, [r7, #4]
}
 800f3d0:	bf00      	nop
 800f3d2:	e7fe      	b.n	800f3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3d4:	4b0e      	ldr	r3, [pc, #56]	; (800f410 <vPortValidateInterruptPriority+0x78>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3dc:	4b0d      	ldr	r3, [pc, #52]	; (800f414 <vPortValidateInterruptPriority+0x7c>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d90a      	bls.n	800f3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	603b      	str	r3, [r7, #0]
}
 800f3f6:	bf00      	nop
 800f3f8:	e7fe      	b.n	800f3f8 <vPortValidateInterruptPriority+0x60>
	}
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	e000e3f0 	.word	0xe000e3f0
 800f40c:	2404b094 	.word	0x2404b094
 800f410:	e000ed0c 	.word	0xe000ed0c
 800f414:	2404b098 	.word	0x2404b098

0800f418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b08a      	sub	sp, #40	; 0x28
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f420:	2300      	movs	r3, #0
 800f422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f424:	f7fe fc9c 	bl	800dd60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f428:	4b5b      	ldr	r3, [pc, #364]	; (800f598 <pvPortMalloc+0x180>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f430:	f000 f920 	bl	800f674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f434:	4b59      	ldr	r3, [pc, #356]	; (800f59c <pvPortMalloc+0x184>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4013      	ands	r3, r2
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 8093 	bne.w	800f568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d01d      	beq.n	800f484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f448:	2208      	movs	r2, #8
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4413      	add	r3, r2
 800f44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f003 0307 	and.w	r3, r3, #7
 800f456:	2b00      	cmp	r3, #0
 800f458:	d014      	beq.n	800f484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f023 0307 	bic.w	r3, r3, #7
 800f460:	3308      	adds	r3, #8
 800f462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f003 0307 	and.w	r3, r3, #7
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00a      	beq.n	800f484 <pvPortMalloc+0x6c>
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	617b      	str	r3, [r7, #20]
}
 800f480:	bf00      	nop
 800f482:	e7fe      	b.n	800f482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d06e      	beq.n	800f568 <pvPortMalloc+0x150>
 800f48a:	4b45      	ldr	r3, [pc, #276]	; (800f5a0 <pvPortMalloc+0x188>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	429a      	cmp	r2, r3
 800f492:	d869      	bhi.n	800f568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f494:	4b43      	ldr	r3, [pc, #268]	; (800f5a4 <pvPortMalloc+0x18c>)
 800f496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f498:	4b42      	ldr	r3, [pc, #264]	; (800f5a4 <pvPortMalloc+0x18c>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f49e:	e004      	b.n	800f4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d903      	bls.n	800f4bc <pvPortMalloc+0xa4>
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1f1      	bne.n	800f4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4bc:	4b36      	ldr	r3, [pc, #216]	; (800f598 <pvPortMalloc+0x180>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d050      	beq.n	800f568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4c6:	6a3b      	ldr	r3, [r7, #32]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2208      	movs	r2, #8
 800f4cc:	4413      	add	r3, r2
 800f4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	1ad2      	subs	r2, r2, r3
 800f4e0:	2308      	movs	r3, #8
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d91f      	bls.n	800f528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	f003 0307 	and.w	r3, r3, #7
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d00a      	beq.n	800f510 <pvPortMalloc+0xf8>
	__asm volatile
 800f4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	613b      	str	r3, [r7, #16]
}
 800f50c:	bf00      	nop
 800f50e:	e7fe      	b.n	800f50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	685a      	ldr	r2, [r3, #4]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	1ad2      	subs	r2, r2, r3
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f522:	69b8      	ldr	r0, [r7, #24]
 800f524:	f000 f908 	bl	800f738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f528:	4b1d      	ldr	r3, [pc, #116]	; (800f5a0 <pvPortMalloc+0x188>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	4a1b      	ldr	r2, [pc, #108]	; (800f5a0 <pvPortMalloc+0x188>)
 800f534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f536:	4b1a      	ldr	r3, [pc, #104]	; (800f5a0 <pvPortMalloc+0x188>)
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	4b1b      	ldr	r3, [pc, #108]	; (800f5a8 <pvPortMalloc+0x190>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d203      	bcs.n	800f54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f542:	4b17      	ldr	r3, [pc, #92]	; (800f5a0 <pvPortMalloc+0x188>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a18      	ldr	r2, [pc, #96]	; (800f5a8 <pvPortMalloc+0x190>)
 800f548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	4b13      	ldr	r3, [pc, #76]	; (800f59c <pvPortMalloc+0x184>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	431a      	orrs	r2, r3
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	2200      	movs	r2, #0
 800f55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f55e:	4b13      	ldr	r3, [pc, #76]	; (800f5ac <pvPortMalloc+0x194>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	3301      	adds	r3, #1
 800f564:	4a11      	ldr	r2, [pc, #68]	; (800f5ac <pvPortMalloc+0x194>)
 800f566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f568:	f7fe fc08 	bl	800dd7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	f003 0307 	and.w	r3, r3, #7
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00a      	beq.n	800f58c <pvPortMalloc+0x174>
	__asm volatile
 800f576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57a:	f383 8811 	msr	BASEPRI, r3
 800f57e:	f3bf 8f6f 	isb	sy
 800f582:	f3bf 8f4f 	dsb	sy
 800f586:	60fb      	str	r3, [r7, #12]
}
 800f588:	bf00      	nop
 800f58a:	e7fe      	b.n	800f58a <pvPortMalloc+0x172>
	return pvReturn;
 800f58c:	69fb      	ldr	r3, [r7, #28]
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3728      	adds	r7, #40	; 0x28
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	2404eca4 	.word	0x2404eca4
 800f59c:	2404ecb8 	.word	0x2404ecb8
 800f5a0:	2404eca8 	.word	0x2404eca8
 800f5a4:	2404ec9c 	.word	0x2404ec9c
 800f5a8:	2404ecac 	.word	0x2404ecac
 800f5ac:	2404ecb0 	.word	0x2404ecb0

0800f5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d04d      	beq.n	800f65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5c2:	2308      	movs	r3, #8
 800f5c4:	425b      	negs	r3, r3
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	685a      	ldr	r2, [r3, #4]
 800f5d4:	4b24      	ldr	r3, [pc, #144]	; (800f668 <vPortFree+0xb8>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4013      	ands	r3, r2
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10a      	bne.n	800f5f4 <vPortFree+0x44>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	60fb      	str	r3, [r7, #12]
}
 800f5f0:	bf00      	nop
 800f5f2:	e7fe      	b.n	800f5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00a      	beq.n	800f612 <vPortFree+0x62>
	__asm volatile
 800f5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f600:	f383 8811 	msr	BASEPRI, r3
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	60bb      	str	r3, [r7, #8]
}
 800f60e:	bf00      	nop
 800f610:	e7fe      	b.n	800f610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	4b14      	ldr	r3, [pc, #80]	; (800f668 <vPortFree+0xb8>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4013      	ands	r3, r2
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d01e      	beq.n	800f65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d11a      	bne.n	800f65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	685a      	ldr	r2, [r3, #4]
 800f62c:	4b0e      	ldr	r3, [pc, #56]	; (800f668 <vPortFree+0xb8>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	43db      	mvns	r3, r3
 800f632:	401a      	ands	r2, r3
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f638:	f7fe fb92 	bl	800dd60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	685a      	ldr	r2, [r3, #4]
 800f640:	4b0a      	ldr	r3, [pc, #40]	; (800f66c <vPortFree+0xbc>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4413      	add	r3, r2
 800f646:	4a09      	ldr	r2, [pc, #36]	; (800f66c <vPortFree+0xbc>)
 800f648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f64a:	6938      	ldr	r0, [r7, #16]
 800f64c:	f000 f874 	bl	800f738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f650:	4b07      	ldr	r3, [pc, #28]	; (800f670 <vPortFree+0xc0>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	3301      	adds	r3, #1
 800f656:	4a06      	ldr	r2, [pc, #24]	; (800f670 <vPortFree+0xc0>)
 800f658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f65a:	f7fe fb8f 	bl	800dd7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f65e:	bf00      	nop
 800f660:	3718      	adds	r7, #24
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	2404ecb8 	.word	0x2404ecb8
 800f66c:	2404eca8 	.word	0x2404eca8
 800f670:	2404ecb4 	.word	0x2404ecb4

0800f674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f674:	b480      	push	{r7}
 800f676:	b085      	sub	sp, #20
 800f678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f67a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f680:	4b27      	ldr	r3, [pc, #156]	; (800f720 <prvHeapInit+0xac>)
 800f682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f003 0307 	and.w	r3, r3, #7
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00c      	beq.n	800f6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	3307      	adds	r3, #7
 800f692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f023 0307 	bic.w	r3, r3, #7
 800f69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	4a1f      	ldr	r2, [pc, #124]	; (800f720 <prvHeapInit+0xac>)
 800f6a4:	4413      	add	r3, r2
 800f6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6ac:	4a1d      	ldr	r2, [pc, #116]	; (800f724 <prvHeapInit+0xb0>)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6b2:	4b1c      	ldr	r3, [pc, #112]	; (800f724 <prvHeapInit+0xb0>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	68ba      	ldr	r2, [r7, #8]
 800f6bc:	4413      	add	r3, r2
 800f6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6c0:	2208      	movs	r2, #8
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	1a9b      	subs	r3, r3, r2
 800f6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f023 0307 	bic.w	r3, r3, #7
 800f6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	4a15      	ldr	r2, [pc, #84]	; (800f728 <prvHeapInit+0xb4>)
 800f6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6d6:	4b14      	ldr	r3, [pc, #80]	; (800f728 <prvHeapInit+0xb4>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6de:	4b12      	ldr	r3, [pc, #72]	; (800f728 <prvHeapInit+0xb4>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	1ad2      	subs	r2, r2, r3
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6f4:	4b0c      	ldr	r3, [pc, #48]	; (800f728 <prvHeapInit+0xb4>)
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	4a0a      	ldr	r2, [pc, #40]	; (800f72c <prvHeapInit+0xb8>)
 800f702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	4a09      	ldr	r2, [pc, #36]	; (800f730 <prvHeapInit+0xbc>)
 800f70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f70c:	4b09      	ldr	r3, [pc, #36]	; (800f734 <prvHeapInit+0xc0>)
 800f70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f712:	601a      	str	r2, [r3, #0]
}
 800f714:	bf00      	nop
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr
 800f720:	2404b09c 	.word	0x2404b09c
 800f724:	2404ec9c 	.word	0x2404ec9c
 800f728:	2404eca4 	.word	0x2404eca4
 800f72c:	2404ecac 	.word	0x2404ecac
 800f730:	2404eca8 	.word	0x2404eca8
 800f734:	2404ecb8 	.word	0x2404ecb8

0800f738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f738:	b480      	push	{r7}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f740:	4b28      	ldr	r3, [pc, #160]	; (800f7e4 <prvInsertBlockIntoFreeList+0xac>)
 800f742:	60fb      	str	r3, [r7, #12]
 800f744:	e002      	b.n	800f74c <prvInsertBlockIntoFreeList+0x14>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	60fb      	str	r3, [r7, #12]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	429a      	cmp	r2, r3
 800f754:	d8f7      	bhi.n	800f746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	68ba      	ldr	r2, [r7, #8]
 800f760:	4413      	add	r3, r2
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	429a      	cmp	r2, r3
 800f766:	d108      	bne.n	800f77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	441a      	add	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	68ba      	ldr	r2, [r7, #8]
 800f784:	441a      	add	r2, r3
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d118      	bne.n	800f7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	4b15      	ldr	r3, [pc, #84]	; (800f7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	429a      	cmp	r2, r3
 800f798:	d00d      	beq.n	800f7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	441a      	add	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	e008      	b.n	800f7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7b6:	4b0c      	ldr	r3, [pc, #48]	; (800f7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	601a      	str	r2, [r3, #0]
 800f7be:	e003      	b.n	800f7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d002      	beq.n	800f7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7d6:	bf00      	nop
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	2404ec9c 	.word	0x2404ec9c
 800f7e8:	2404eca4 	.word	0x2404eca4

0800f7ec <arm_max_f32>:
 800f7ec:	f101 3cff 	add.w	ip, r1, #4294967295
 800f7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7f2:	4607      	mov	r7, r0
 800f7f4:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800f7f8:	ecf7 7a01 	vldmia	r7!, {s15}
 800f7fc:	d05c      	beq.n	800f8b8 <arm_max_f32+0xcc>
 800f7fe:	2400      	movs	r4, #0
 800f800:	3014      	adds	r0, #20
 800f802:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800f806:	4625      	mov	r5, r4
 800f808:	ed10 7a04 	vldr	s14, [r0, #-16]
 800f80c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f814:	d502      	bpl.n	800f81c <arm_max_f32+0x30>
 800f816:	eef0 7a47 	vmov.f32	s15, s14
 800f81a:	1c65      	adds	r5, r4, #1
 800f81c:	ed10 7a03 	vldr	s14, [r0, #-12]
 800f820:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f828:	d502      	bpl.n	800f830 <arm_max_f32+0x44>
 800f82a:	eef0 7a47 	vmov.f32	s15, s14
 800f82e:	1ca5      	adds	r5, r4, #2
 800f830:	ed10 7a02 	vldr	s14, [r0, #-8]
 800f834:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83c:	d502      	bpl.n	800f844 <arm_max_f32+0x58>
 800f83e:	eef0 7a47 	vmov.f32	s15, s14
 800f842:	1ce5      	adds	r5, r4, #3
 800f844:	ed10 7a01 	vldr	s14, [r0, #-4]
 800f848:	3404      	adds	r4, #4
 800f84a:	3010      	adds	r0, #16
 800f84c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f854:	d502      	bpl.n	800f85c <arm_max_f32+0x70>
 800f856:	eef0 7a47 	vmov.f32	s15, s14
 800f85a:	4625      	mov	r5, r4
 800f85c:	42a6      	cmp	r6, r4
 800f85e:	d1d3      	bne.n	800f808 <arm_max_f32+0x1c>
 800f860:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800f864:	f01c 0003 	ands.w	r0, ip, #3
 800f868:	d01e      	beq.n	800f8a8 <arm_max_f32+0xbc>
 800f86a:	ed97 7a00 	vldr	s14, [r7]
 800f86e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f876:	dc1b      	bgt.n	800f8b0 <arm_max_f32+0xc4>
 800f878:	3801      	subs	r0, #1
 800f87a:	d015      	beq.n	800f8a8 <arm_max_f32+0xbc>
 800f87c:	ed97 7a01 	vldr	s14, [r7, #4]
 800f880:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f888:	d502      	bpl.n	800f890 <arm_max_f32+0xa4>
 800f88a:	eef0 7a47 	vmov.f32	s15, s14
 800f88e:	1a0d      	subs	r5, r1, r0
 800f890:	2801      	cmp	r0, #1
 800f892:	d009      	beq.n	800f8a8 <arm_max_f32+0xbc>
 800f894:	ed97 7a02 	vldr	s14, [r7, #8]
 800f898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a0:	dd02      	ble.n	800f8a8 <arm_max_f32+0xbc>
 800f8a2:	eef0 7a47 	vmov.f32	s15, s14
 800f8a6:	4665      	mov	r5, ip
 800f8a8:	edc2 7a00 	vstr	s15, [r2]
 800f8ac:	601d      	str	r5, [r3, #0]
 800f8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b0:	eef0 7a47 	vmov.f32	s15, s14
 800f8b4:	1a0d      	subs	r5, r1, r0
 800f8b6:	e7df      	b.n	800f878 <arm_max_f32+0x8c>
 800f8b8:	4675      	mov	r5, lr
 800f8ba:	e7d3      	b.n	800f864 <arm_max_f32+0x78>

0800f8bc <arm_rfft_32_fast_init_f32>:
 800f8bc:	b180      	cbz	r0, 800f8e0 <arm_rfft_32_fast_init_f32+0x24>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2220      	movs	r2, #32
 800f8c2:	2010      	movs	r0, #16
 800f8c4:	4908      	ldr	r1, [pc, #32]	; (800f8e8 <arm_rfft_32_fast_init_f32+0x2c>)
 800f8c6:	b430      	push	{r4, r5}
 800f8c8:	2514      	movs	r5, #20
 800f8ca:	4c08      	ldr	r4, [pc, #32]	; (800f8ec <arm_rfft_32_fast_init_f32+0x30>)
 800f8cc:	821a      	strh	r2, [r3, #16]
 800f8ce:	4a08      	ldr	r2, [pc, #32]	; (800f8f0 <arm_rfft_32_fast_init_f32+0x34>)
 800f8d0:	8018      	strh	r0, [r3, #0]
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	819d      	strh	r5, [r3, #12]
 800f8d6:	615a      	str	r2, [r3, #20]
 800f8d8:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f8dc:	bc30      	pop	{r4, r5}
 800f8de:	4770      	bx	lr
 800f8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	080165d0 	.word	0x080165d0
 800f8ec:	08011c98 	.word	0x08011c98
 800f8f0:	0801f350 	.word	0x0801f350

0800f8f4 <arm_rfft_64_fast_init_f32>:
 800f8f4:	b180      	cbz	r0, 800f918 <arm_rfft_64_fast_init_f32+0x24>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2240      	movs	r2, #64	; 0x40
 800f8fa:	2020      	movs	r0, #32
 800f8fc:	4908      	ldr	r1, [pc, #32]	; (800f920 <arm_rfft_64_fast_init_f32+0x2c>)
 800f8fe:	b430      	push	{r4, r5}
 800f900:	2530      	movs	r5, #48	; 0x30
 800f902:	4c08      	ldr	r4, [pc, #32]	; (800f924 <arm_rfft_64_fast_init_f32+0x30>)
 800f904:	821a      	strh	r2, [r3, #16]
 800f906:	4a08      	ldr	r2, [pc, #32]	; (800f928 <arm_rfft_64_fast_init_f32+0x34>)
 800f908:	8018      	strh	r0, [r3, #0]
 800f90a:	2000      	movs	r0, #0
 800f90c:	819d      	strh	r5, [r3, #12]
 800f90e:	615a      	str	r2, [r3, #20]
 800f910:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f914:	bc30      	pop	{r4, r5}
 800f916:	4770      	bx	lr
 800f918:	f04f 30ff 	mov.w	r0, #4294967295
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	0801ae50 	.word	0x0801ae50
 800f924:	08013df0 	.word	0x08013df0
 800f928:	08023bd0 	.word	0x08023bd0

0800f92c <arm_rfft_256_fast_init_f32>:
 800f92c:	b188      	cbz	r0, 800f952 <arm_rfft_256_fast_init_f32+0x26>
 800f92e:	4603      	mov	r3, r0
 800f930:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f934:	2080      	movs	r0, #128	; 0x80
 800f936:	4908      	ldr	r1, [pc, #32]	; (800f958 <arm_rfft_256_fast_init_f32+0x2c>)
 800f938:	b430      	push	{r4, r5}
 800f93a:	25d0      	movs	r5, #208	; 0xd0
 800f93c:	4c07      	ldr	r4, [pc, #28]	; (800f95c <arm_rfft_256_fast_init_f32+0x30>)
 800f93e:	821a      	strh	r2, [r3, #16]
 800f940:	4a07      	ldr	r2, [pc, #28]	; (800f960 <arm_rfft_256_fast_init_f32+0x34>)
 800f942:	8018      	strh	r0, [r3, #0]
 800f944:	2000      	movs	r0, #0
 800f946:	819d      	strh	r5, [r3, #12]
 800f948:	615a      	str	r2, [r3, #20]
 800f94a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f94e:	bc30      	pop	{r4, r5}
 800f950:	4770      	bx	lr
 800f952:	f04f 30ff 	mov.w	r0, #4294967295
 800f956:	4770      	bx	lr
 800f958:	080161d0 	.word	0x080161d0
 800f95c:	08011af8 	.word	0x08011af8
 800f960:	0801ef50 	.word	0x0801ef50

0800f964 <arm_rfft_512_fast_init_f32>:
 800f964:	b198      	cbz	r0, 800f98e <arm_rfft_512_fast_init_f32+0x2a>
 800f966:	4603      	mov	r3, r0
 800f968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f96c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f970:	4908      	ldr	r1, [pc, #32]	; (800f994 <arm_rfft_512_fast_init_f32+0x30>)
 800f972:	b430      	push	{r4, r5}
 800f974:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800f978:	4c07      	ldr	r4, [pc, #28]	; (800f998 <arm_rfft_512_fast_init_f32+0x34>)
 800f97a:	821a      	strh	r2, [r3, #16]
 800f97c:	4a07      	ldr	r2, [pc, #28]	; (800f99c <arm_rfft_512_fast_init_f32+0x38>)
 800f97e:	8018      	strh	r0, [r3, #0]
 800f980:	2000      	movs	r0, #0
 800f982:	819d      	strh	r5, [r3, #12]
 800f984:	615a      	str	r2, [r3, #20]
 800f986:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f98a:	bc30      	pop	{r4, r5}
 800f98c:	4770      	bx	lr
 800f98e:	f04f 30ff 	mov.w	r0, #4294967295
 800f992:	4770      	bx	lr
 800f994:	0801a650 	.word	0x0801a650
 800f998:	08013a80 	.word	0x08013a80
 800f99c:	080233d0 	.word	0x080233d0

0800f9a0 <arm_rfft_1024_fast_init_f32>:
 800f9a0:	b198      	cbz	r0, 800f9ca <arm_rfft_1024_fast_init_f32+0x2a>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f9a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f9ac:	4908      	ldr	r1, [pc, #32]	; (800f9d0 <arm_rfft_1024_fast_init_f32+0x30>)
 800f9ae:	b430      	push	{r4, r5}
 800f9b0:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800f9b4:	4c07      	ldr	r4, [pc, #28]	; (800f9d4 <arm_rfft_1024_fast_init_f32+0x34>)
 800f9b6:	821a      	strh	r2, [r3, #16]
 800f9b8:	4a07      	ldr	r2, [pc, #28]	; (800f9d8 <arm_rfft_1024_fast_init_f32+0x38>)
 800f9ba:	8018      	strh	r0, [r3, #0]
 800f9bc:	2000      	movs	r0, #0
 800f9be:	819d      	strh	r5, [r3, #12]
 800f9c0:	615a      	str	r2, [r3, #20]
 800f9c2:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f9c6:	bc30      	pop	{r4, r5}
 800f9c8:	4770      	bx	lr
 800f9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ce:	4770      	bx	lr
 800f9d0:	0801af50 	.word	0x0801af50
 800f9d4:	08013e50 	.word	0x08013e50
 800f9d8:	0801bf50 	.word	0x0801bf50

0800f9dc <arm_rfft_2048_fast_init_f32>:
 800f9dc:	b198      	cbz	r0, 800fa06 <arm_rfft_2048_fast_init_f32+0x2a>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f9e8:	4908      	ldr	r1, [pc, #32]	; (800fa0c <arm_rfft_2048_fast_init_f32+0x30>)
 800f9ea:	b430      	push	{r4, r5}
 800f9ec:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800f9f0:	4c07      	ldr	r4, [pc, #28]	; (800fa10 <arm_rfft_2048_fast_init_f32+0x34>)
 800f9f2:	821a      	strh	r2, [r3, #16]
 800f9f4:	4a07      	ldr	r2, [pc, #28]	; (800fa14 <arm_rfft_2048_fast_init_f32+0x38>)
 800f9f6:	8018      	strh	r0, [r3, #0]
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	819d      	strh	r5, [r3, #12]
 800f9fc:	615a      	str	r2, [r3, #20]
 800f9fe:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fa02:	bc30      	pop	{r4, r5}
 800fa04:	4770      	bx	lr
 800fa06:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0a:	4770      	bx	lr
 800fa0c:	080141d0 	.word	0x080141d0
 800fa10:	08010ce8 	.word	0x08010ce8
 800fa14:	0801cf50 	.word	0x0801cf50

0800fa18 <arm_rfft_4096_fast_init_f32>:
 800fa18:	b198      	cbz	r0, 800fa42 <arm_rfft_4096_fast_init_f32+0x2a>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fa24:	4908      	ldr	r1, [pc, #32]	; (800fa48 <arm_rfft_4096_fast_init_f32+0x30>)
 800fa26:	b430      	push	{r4, r5}
 800fa28:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800fa2c:	4c07      	ldr	r4, [pc, #28]	; (800fa4c <arm_rfft_4096_fast_init_f32+0x34>)
 800fa2e:	821a      	strh	r2, [r3, #16]
 800fa30:	4a07      	ldr	r2, [pc, #28]	; (800fa50 <arm_rfft_4096_fast_init_f32+0x38>)
 800fa32:	8018      	strh	r0, [r3, #0]
 800fa34:	2000      	movs	r0, #0
 800fa36:	819d      	strh	r5, [r3, #12]
 800fa38:	615a      	str	r2, [r3, #20]
 800fa3a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fa3e:	bc30      	pop	{r4, r5}
 800fa40:	4770      	bx	lr
 800fa42:	f04f 30ff 	mov.w	r0, #4294967295
 800fa46:	4770      	bx	lr
 800fa48:	08016650 	.word	0x08016650
 800fa4c:	08011cc0 	.word	0x08011cc0
 800fa50:	0801f3d0 	.word	0x0801f3d0

0800fa54 <arm_rfft_fast_init_f32>:
 800fa54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fa58:	d01f      	beq.n	800fa9a <arm_rfft_fast_init_f32+0x46>
 800fa5a:	d90b      	bls.n	800fa74 <arm_rfft_fast_init_f32+0x20>
 800fa5c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800fa60:	d019      	beq.n	800fa96 <arm_rfft_fast_init_f32+0x42>
 800fa62:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800fa66:	d012      	beq.n	800fa8e <arm_rfft_fast_init_f32+0x3a>
 800fa68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fa6c:	d00d      	beq.n	800fa8a <arm_rfft_fast_init_f32+0x36>
 800fa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa72:	4770      	bx	lr
 800fa74:	2940      	cmp	r1, #64	; 0x40
 800fa76:	d00c      	beq.n	800fa92 <arm_rfft_fast_init_f32+0x3e>
 800fa78:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fa7c:	d003      	beq.n	800fa86 <arm_rfft_fast_init_f32+0x32>
 800fa7e:	2920      	cmp	r1, #32
 800fa80:	d1f5      	bne.n	800fa6e <arm_rfft_fast_init_f32+0x1a>
 800fa82:	4b07      	ldr	r3, [pc, #28]	; (800faa0 <arm_rfft_fast_init_f32+0x4c>)
 800fa84:	4718      	bx	r3
 800fa86:	4b07      	ldr	r3, [pc, #28]	; (800faa4 <arm_rfft_fast_init_f32+0x50>)
 800fa88:	4718      	bx	r3
 800fa8a:	4b07      	ldr	r3, [pc, #28]	; (800faa8 <arm_rfft_fast_init_f32+0x54>)
 800fa8c:	4718      	bx	r3
 800fa8e:	4b07      	ldr	r3, [pc, #28]	; (800faac <arm_rfft_fast_init_f32+0x58>)
 800fa90:	4718      	bx	r3
 800fa92:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <arm_rfft_fast_init_f32+0x5c>)
 800fa94:	e7f6      	b.n	800fa84 <arm_rfft_fast_init_f32+0x30>
 800fa96:	4b07      	ldr	r3, [pc, #28]	; (800fab4 <arm_rfft_fast_init_f32+0x60>)
 800fa98:	e7f4      	b.n	800fa84 <arm_rfft_fast_init_f32+0x30>
 800fa9a:	4b07      	ldr	r3, [pc, #28]	; (800fab8 <arm_rfft_fast_init_f32+0x64>)
 800fa9c:	e7f2      	b.n	800fa84 <arm_rfft_fast_init_f32+0x30>
 800fa9e:	bf00      	nop
 800faa0:	0800f8bd 	.word	0x0800f8bd
 800faa4:	0800f92d 	.word	0x0800f92d
 800faa8:	0800f9a1 	.word	0x0800f9a1
 800faac:	0800fa19 	.word	0x0800fa19
 800fab0:	0800f8f5 	.word	0x0800f8f5
 800fab4:	0800f9dd 	.word	0x0800f9dd
 800fab8:	0800f965 	.word	0x0800f965

0800fabc <stage_rfft_f32>:
 800fabc:	b470      	push	{r4, r5, r6}
 800fabe:	edd1 7a00 	vldr	s15, [r1]
 800fac2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fac6:	ed91 7a01 	vldr	s14, [r1, #4]
 800faca:	f101 0510 	add.w	r5, r1, #16
 800face:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fad2:	8806      	ldrh	r6, [r0, #0]
 800fad4:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fad8:	6943      	ldr	r3, [r0, #20]
 800fada:	1e70      	subs	r0, r6, #1
 800fadc:	eeb0 4a46 	vmov.f32	s8, s12
 800fae0:	f102 0410 	add.w	r4, r2, #16
 800fae4:	3310      	adds	r3, #16
 800fae6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800faea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800faee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faf2:	3908      	subs	r1, #8
 800faf4:	ee26 7a86 	vmul.f32	s14, s13, s12
 800faf8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fafc:	ed82 7a00 	vstr	s14, [r2]
 800fb00:	edc2 7a01 	vstr	s15, [r2, #4]
 800fb04:	ed15 6a02 	vldr	s12, [r5, #-8]
 800fb08:	3801      	subs	r0, #1
 800fb0a:	ed91 7a02 	vldr	s14, [r1, #8]
 800fb0e:	f105 0508 	add.w	r5, r5, #8
 800fb12:	ed53 6a02 	vldr	s13, [r3, #-8]
 800fb16:	f1a1 0108 	sub.w	r1, r1, #8
 800fb1a:	ee77 5a46 	vsub.f32	s11, s14, s12
 800fb1e:	edd1 4a05 	vldr	s9, [r1, #20]
 800fb22:	ed55 7a03 	vldr	s15, [r5, #-12]
 800fb26:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fb2a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800fb2e:	f104 0408 	add.w	r4, r4, #8
 800fb32:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800fb36:	f103 0308 	add.w	r3, r3, #8
 800fb3a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800fb3e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800fb42:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800fb46:	ee37 7a23 	vadd.f32	s14, s14, s7
 800fb4a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800fb4e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fb52:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800fb56:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fb5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb5e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb62:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fb66:	ed04 7a04 	vstr	s14, [r4, #-16]
 800fb6a:	ed44 7a03 	vstr	s15, [r4, #-12]
 800fb6e:	d1c9      	bne.n	800fb04 <stage_rfft_f32+0x48>
 800fb70:	bc70      	pop	{r4, r5, r6}
 800fb72:	4770      	bx	lr

0800fb74 <merge_rfft_f32>:
 800fb74:	b410      	push	{r4}
 800fb76:	edd1 7a00 	vldr	s15, [r1]
 800fb7a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800fb7e:	edd1 6a01 	vldr	s13, [r1, #4]
 800fb82:	8804      	ldrh	r4, [r0, #0]
 800fb84:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb88:	6940      	ldr	r0, [r0, #20]
 800fb8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb8e:	3c01      	subs	r4, #1
 800fb90:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb94:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fb98:	ed82 7a00 	vstr	s14, [r2]
 800fb9c:	edc2 7a01 	vstr	s15, [r2, #4]
 800fba0:	b3dc      	cbz	r4, 800fc1a <merge_rfft_f32+0xa6>
 800fba2:	00e3      	lsls	r3, r4, #3
 800fba4:	3010      	adds	r0, #16
 800fba6:	3210      	adds	r2, #16
 800fba8:	3b08      	subs	r3, #8
 800fbaa:	440b      	add	r3, r1
 800fbac:	3110      	adds	r1, #16
 800fbae:	ed11 6a02 	vldr	s12, [r1, #-8]
 800fbb2:	3c01      	subs	r4, #1
 800fbb4:	ed93 7a02 	vldr	s14, [r3, #8]
 800fbb8:	f101 0108 	add.w	r1, r1, #8
 800fbbc:	ed50 6a02 	vldr	s13, [r0, #-8]
 800fbc0:	f1a3 0308 	sub.w	r3, r3, #8
 800fbc4:	ee76 5a47 	vsub.f32	s11, s12, s14
 800fbc8:	edd3 4a05 	vldr	s9, [r3, #20]
 800fbcc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800fbd0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fbd4:	ed10 6a01 	vldr	s12, [r0, #-4]
 800fbd8:	f102 0208 	add.w	r2, r2, #8
 800fbdc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800fbe0:	f100 0008 	add.w	r0, r0, #8
 800fbe4:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800fbe8:	ee66 5a25 	vmul.f32	s11, s12, s11
 800fbec:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800fbf0:	ee37 7a63 	vsub.f32	s14, s14, s7
 800fbf4:	ee66 6a85 	vmul.f32	s13, s13, s10
 800fbf8:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fbfc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800fc00:	ee37 7a46 	vsub.f32	s14, s14, s12
 800fc04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc08:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fc0c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fc10:	ed02 7a04 	vstr	s14, [r2, #-16]
 800fc14:	ed42 7a03 	vstr	s15, [r2, #-12]
 800fc18:	d1c9      	bne.n	800fbae <merge_rfft_f32+0x3a>
 800fc1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <arm_rfft_fast_f32>:
 800fc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc24:	8a05      	ldrh	r5, [r0, #16]
 800fc26:	4604      	mov	r4, r0
 800fc28:	4617      	mov	r7, r2
 800fc2a:	461e      	mov	r6, r3
 800fc2c:	086d      	lsrs	r5, r5, #1
 800fc2e:	8005      	strh	r5, [r0, #0]
 800fc30:	b14b      	cbz	r3, 800fc46 <arm_rfft_fast_f32+0x26>
 800fc32:	f7ff ff9f 	bl	800fb74 <merge_rfft_f32>
 800fc36:	4632      	mov	r2, r6
 800fc38:	4639      	mov	r1, r7
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc42:	f000 bb35 	b.w	80102b0 <arm_cfft_f32>
 800fc46:	4688      	mov	r8, r1
 800fc48:	461a      	mov	r2, r3
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	f000 fb30 	bl	80102b0 <arm_cfft_f32>
 800fc50:	463a      	mov	r2, r7
 800fc52:	4641      	mov	r1, r8
 800fc54:	4620      	mov	r0, r4
 800fc56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5a:	f7ff bf2f 	b.w	800fabc <stage_rfft_f32>
 800fc5e:	bf00      	nop

0800fc60 <arm_cfft_radix8by2_f32>:
 800fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc64:	4607      	mov	r7, r0
 800fc66:	4608      	mov	r0, r1
 800fc68:	ed2d 8b06 	vpush	{d8-d10}
 800fc6c:	f8b7 c000 	ldrh.w	ip, [r7]
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800fc76:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800fc7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800fc7e:	f000 80ac 	beq.w	800fdda <arm_cfft_radix8by2_f32+0x17a>
 800fc82:	008c      	lsls	r4, r1, #2
 800fc84:	f100 0310 	add.w	r3, r0, #16
 800fc88:	3210      	adds	r2, #16
 800fc8a:	f108 0610 	add.w	r6, r8, #16
 800fc8e:	3410      	adds	r4, #16
 800fc90:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800fc94:	1905      	adds	r5, r0, r4
 800fc96:	4444      	add	r4, r8
 800fc98:	ed16 7a04 	vldr	s14, [r6, #-16]
 800fc9c:	3310      	adds	r3, #16
 800fc9e:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800fca2:	3510      	adds	r5, #16
 800fca4:	ed56 0a03 	vldr	s1, [r6, #-12]
 800fca8:	3210      	adds	r2, #16
 800fcaa:	ee74 9a87 	vadd.f32	s19, s9, s14
 800fcae:	ed56 7a02 	vldr	s15, [r6, #-8]
 800fcb2:	ed56 2a01 	vldr	s5, [r6, #-4]
 800fcb6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800fcba:	ed54 5a04 	vldr	s11, [r4, #-16]
 800fcbe:	3610      	adds	r6, #16
 800fcc0:	ed14 5a03 	vldr	s10, [r4, #-12]
 800fcc4:	3410      	adds	r4, #16
 800fcc6:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800fcca:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800fcce:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800fcd2:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800fcd6:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800fcda:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800fcde:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800fce2:	ee33 8a83 	vadd.f32	s16, s7, s6
 800fce6:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800fcea:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800fcee:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800fcf2:	ee34 0a06 	vadd.f32	s0, s8, s12
 800fcf6:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800fcfa:	ee77 aa20 	vadd.f32	s21, s14, s1
 800fcfe:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800fd02:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800fd06:	ee72 9a22 	vadd.f32	s19, s4, s5
 800fd0a:	ee71 8a05 	vadd.f32	s17, s2, s10
 800fd0e:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800fd12:	ee37 7a60 	vsub.f32	s14, s14, s1
 800fd16:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800fd1a:	ee35 5a41 	vsub.f32	s10, s10, s2
 800fd1e:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800fd22:	ee36 6a44 	vsub.f32	s12, s12, s8
 800fd26:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800fd2a:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800fd2e:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800fd32:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800fd36:	ee72 7a62 	vsub.f32	s15, s4, s5
 800fd3a:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800fd3e:	ee73 2a63 	vsub.f32	s5, s6, s7
 800fd42:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800fd46:	4563      	cmp	r3, ip
 800fd48:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800fd4c:	ee24 3a84 	vmul.f32	s6, s9, s8
 800fd50:	ee27 2a26 	vmul.f32	s4, s14, s13
 800fd54:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800fd58:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800fd5c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fd60:	ee65 5a84 	vmul.f32	s11, s11, s8
 800fd64:	ee65 6a26 	vmul.f32	s13, s10, s13
 800fd68:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fd6c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fd70:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fd74:	ee33 4a02 	vadd.f32	s8, s6, s4
 800fd78:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800fd7c:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800fd80:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800fd84:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800fd88:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800fd8c:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800fd90:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800fd94:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800fd98:	ee27 4a87 	vmul.f32	s8, s15, s14
 800fd9c:	ee61 5a87 	vmul.f32	s11, s3, s14
 800fda0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fda4:	ee22 5a87 	vmul.f32	s10, s5, s14
 800fda8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800fdac:	ee26 6a26 	vmul.f32	s12, s12, s13
 800fdb0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800fdb4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fdb8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fdbc:	ee35 6a46 	vsub.f32	s12, s10, s12
 800fdc0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fdc4:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800fdc8:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800fdcc:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800fdd0:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800fdd4:	f47f af60 	bne.w	800fc98 <arm_cfft_radix8by2_f32+0x38>
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	b28c      	uxth	r4, r1
 800fddc:	2302      	movs	r3, #2
 800fdde:	4621      	mov	r1, r4
 800fde0:	f000 fb04 	bl	80103ec <arm_radix8_butterfly_f32>
 800fde4:	4621      	mov	r1, r4
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	4640      	mov	r0, r8
 800fdea:	2302      	movs	r3, #2
 800fdec:	ecbd 8b06 	vpop	{d8-d10}
 800fdf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf4:	f000 bafa 	b.w	80103ec <arm_radix8_butterfly_f32>

0800fdf8 <arm_cfft_radix8by4_f32>:
 800fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfc:	ed2d 8b04 	vpush	{d8-d9}
 800fe00:	8804      	ldrh	r4, [r0, #0]
 800fe02:	b08d      	sub	sp, #52	; 0x34
 800fe04:	6842      	ldr	r2, [r0, #4]
 800fe06:	460d      	mov	r5, r1
 800fe08:	0864      	lsrs	r4, r4, #1
 800fe0a:	edd1 7a00 	vldr	s15, [r1]
 800fe0e:	edd1 5a01 	vldr	s11, [r1, #4]
 800fe12:	00a3      	lsls	r3, r4, #2
 800fe14:	18ce      	adds	r6, r1, r3
 800fe16:	18f7      	adds	r7, r6, r3
 800fe18:	ed96 7a00 	vldr	s14, [r6]
 800fe1c:	ed96 4a01 	vldr	s8, [r6, #4]
 800fe20:	ed97 6a00 	vldr	s12, [r7]
 800fe24:	edd7 4a01 	vldr	s9, [r7, #4]
 800fe28:	ee77 6a86 	vadd.f32	s13, s15, s12
 800fe2c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fe30:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800fe34:	ee77 2a26 	vadd.f32	s5, s14, s13
 800fe38:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800fe3c:	ee74 3a27 	vadd.f32	s7, s8, s15
 800fe40:	ee76 4a44 	vsub.f32	s9, s12, s8
 800fe44:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fe48:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800fe4c:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800fe50:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fe54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fe58:	0860      	lsrs	r0, r4, #1
 800fe5a:	f102 0408 	add.w	r4, r2, #8
 800fe5e:	9405      	str	r4, [sp, #20]
 800fe60:	f102 0410 	add.w	r4, r2, #16
 800fe64:	9009      	str	r0, [sp, #36]	; 0x24
 800fe66:	f1a0 0902 	sub.w	r9, r0, #2
 800fe6a:	9403      	str	r4, [sp, #12]
 800fe6c:	18fc      	adds	r4, r7, r3
 800fe6e:	f102 0018 	add.w	r0, r2, #24
 800fe72:	ed94 5a00 	vldr	s10, [r4]
 800fe76:	ed94 3a01 	vldr	s6, [r4, #4]
 800fe7a:	ee72 2a85 	vadd.f32	s5, s5, s10
 800fe7e:	9004      	str	r0, [sp, #16]
 800fe80:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800fe84:	4620      	mov	r0, r4
 800fe86:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800fe8a:	9408      	str	r4, [sp, #32]
 800fe8c:	ee12 ca90 	vmov	ip, s5
 800fe90:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800fe94:	ee77 7a83 	vadd.f32	s15, s15, s6
 800fe98:	f845 cb08 	str.w	ip, [r5], #8
 800fe9c:	ee13 ca90 	vmov	ip, s7
 800fea0:	ed96 2a01 	vldr	s4, [r6, #4]
 800fea4:	ee74 4a05 	vadd.f32	s9, s8, s10
 800fea8:	edd4 2a01 	vldr	s5, [r4, #4]
 800feac:	ee37 7a45 	vsub.f32	s14, s14, s10
 800feb0:	ee36 6a02 	vadd.f32	s12, s12, s4
 800feb4:	9500      	str	r5, [sp, #0]
 800feb6:	460d      	mov	r5, r1
 800feb8:	ee36 6a22 	vadd.f32	s12, s12, s5
 800febc:	ed81 6a01 	vstr	s12, [r1, #4]
 800fec0:	4631      	mov	r1, r6
 800fec2:	f841 cb08 	str.w	ip, [r1], #8
 800fec6:	ee16 ca90 	vmov	ip, s13
 800feca:	9106      	str	r1, [sp, #24]
 800fecc:	4639      	mov	r1, r7
 800fece:	edc6 4a01 	vstr	s9, [r6, #4]
 800fed2:	f841 cb08 	str.w	ip, [r1], #8
 800fed6:	9102      	str	r1, [sp, #8]
 800fed8:	ee17 1a90 	vmov	r1, s15
 800fedc:	edc7 5a01 	vstr	s11, [r7, #4]
 800fee0:	f840 1b08 	str.w	r1, [r0], #8
 800fee4:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800fee8:	9001      	str	r0, [sp, #4]
 800feea:	ed84 7a01 	vstr	s14, [r4, #4]
 800feee:	9107      	str	r1, [sp, #28]
 800fef0:	f000 8135 	beq.w	801015e <arm_cfft_radix8by4_f32+0x366>
 800fef4:	3b0c      	subs	r3, #12
 800fef6:	f102 0920 	add.w	r9, r2, #32
 800fefa:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800fefe:	4622      	mov	r2, r4
 800ff00:	468b      	mov	fp, r1
 800ff02:	f105 0e10 	add.w	lr, r5, #16
 800ff06:	4423      	add	r3, r4
 800ff08:	f1a6 0c0c 	sub.w	ip, r6, #12
 800ff0c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ff10:	f106 0010 	add.w	r0, r6, #16
 800ff14:	f1a7 010c 	sub.w	r1, r7, #12
 800ff18:	f107 0510 	add.w	r5, r7, #16
 800ff1c:	3c0c      	subs	r4, #12
 800ff1e:	3210      	adds	r2, #16
 800ff20:	ed15 7a02 	vldr	s14, [r5, #-8]
 800ff24:	f1bb 0b01 	subs.w	fp, fp, #1
 800ff28:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800ff2c:	f1ac 0c08 	sub.w	ip, ip, #8
 800ff30:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ff34:	f10e 0e08 	add.w	lr, lr, #8
 800ff38:	ee77 1a87 	vadd.f32	s3, s15, s14
 800ff3c:	ed52 4a02 	vldr	s9, [r2, #-8]
 800ff40:	ed55 5a01 	vldr	s11, [r5, #-4]
 800ff44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff48:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800ff4c:	f10a 0a08 	add.w	sl, sl, #8
 800ff50:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800ff54:	ed10 3a01 	vldr	s6, [r0, #-4]
 800ff58:	ee37 4a25 	vadd.f32	s8, s14, s11
 800ff5c:	ed52 3a01 	vldr	s7, [r2, #-4]
 800ff60:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ff64:	f100 0008 	add.w	r0, r0, #8
 800ff68:	ee36 6a24 	vadd.f32	s12, s12, s9
 800ff6c:	f1a1 0108 	sub.w	r1, r1, #8
 800ff70:	ee73 2a27 	vadd.f32	s5, s6, s15
 800ff74:	f109 0910 	add.w	r9, r9, #16
 800ff78:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ff7c:	f105 0508 	add.w	r5, r5, #8
 800ff80:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800ff84:	ee37 5a66 	vsub.f32	s10, s14, s13
 800ff88:	ed50 5a03 	vldr	s11, [r0, #-12]
 800ff8c:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800ff90:	ed12 6a01 	vldr	s12, [r2, #-4]
 800ff94:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ff98:	ee74 5a25 	vadd.f32	s11, s8, s11
 800ff9c:	f1a4 0408 	sub.w	r4, r4, #8
 800ffa0:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ffa4:	f108 0818 	add.w	r8, r8, #24
 800ffa8:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800ffac:	f102 0208 	add.w	r2, r2, #8
 800ffb0:	ee75 5a86 	vadd.f32	s11, s11, s12
 800ffb4:	f1a3 0308 	sub.w	r3, r3, #8
 800ffb8:	ee34 6a63 	vsub.f32	s12, s8, s7
 800ffbc:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800ffc0:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800ffc4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ffc8:	ed94 4a04 	vldr	s8, [r4, #16]
 800ffcc:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800ffd0:	ed9c 3a04 	vldr	s6, [ip, #16]
 800ffd4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ffd8:	edd1 7a04 	vldr	s15, [r1, #16]
 800ffdc:	ee73 6a04 	vadd.f32	s13, s6, s8
 800ffe0:	ed93 8a04 	vldr	s16, [r3, #16]
 800ffe4:	edd4 5a03 	vldr	s11, [r4, #12]
 800ffe8:	ee33 3a44 	vsub.f32	s6, s6, s8
 800ffec:	ed9c 2a03 	vldr	s4, [ip, #12]
 800fff0:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800fff4:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800fff8:	ed91 1a03 	vldr	s2, [r1, #12]
 800fffc:	ee32 4a25 	vadd.f32	s8, s4, s11
 8010000:	edd3 2a03 	vldr	s5, [r3, #12]
 8010004:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010008:	ee70 0a88 	vadd.f32	s1, s1, s16
 801000c:	ee73 4a41 	vsub.f32	s9, s6, s2
 8010010:	ee32 2a65 	vsub.f32	s4, s4, s11
 8010014:	edcc 0a04 	vstr	s1, [ip, #16]
 8010018:	ee74 0a41 	vsub.f32	s1, s8, s2
 801001c:	edd1 6a03 	vldr	s13, [r1, #12]
 8010020:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8010024:	ed93 9a03 	vldr	s18, [r3, #12]
 8010028:	ee78 5a82 	vadd.f32	s11, s17, s4
 801002c:	ee34 4a26 	vadd.f32	s8, s8, s13
 8010030:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8010034:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8010038:	ee34 4a09 	vadd.f32	s8, s8, s18
 801003c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8010040:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8010044:	ed8c 4a03 	vstr	s8, [ip, #12]
 8010048:	ee38 2ac2 	vsub.f32	s4, s17, s4
 801004c:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8010050:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8010054:	ee60 2a01 	vmul.f32	s5, s0, s2
 8010058:	ee64 6a81 	vmul.f32	s13, s9, s2
 801005c:	ee20 8a04 	vmul.f32	s16, s0, s8
 8010060:	ee64 4a84 	vmul.f32	s9, s9, s8
 8010064:	ee25 0a01 	vmul.f32	s0, s10, s2
 8010068:	ee25 5a04 	vmul.f32	s10, s10, s8
 801006c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8010070:	ee65 5a81 	vmul.f32	s11, s11, s2
 8010074:	ee35 5a62 	vsub.f32	s10, s10, s5
 8010078:	ee36 4ac4 	vsub.f32	s8, s13, s8
 801007c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010080:	ee38 1a00 	vadd.f32	s2, s16, s0
 8010084:	ed00 5a03 	vstr	s10, [r0, #-12]
 8010088:	ed00 1a04 	vstr	s2, [r0, #-16]
 801008c:	ed81 4a04 	vstr	s8, [r1, #16]
 8010090:	edc1 5a03 	vstr	s11, [r1, #12]
 8010094:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 8010098:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 801009c:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 80100a0:	ee66 2a25 	vmul.f32	s5, s12, s11
 80100a4:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80100a8:	ee21 4a85 	vmul.f32	s8, s3, s10
 80100ac:	ee60 7a85 	vmul.f32	s15, s1, s10
 80100b0:	ee61 1aa5 	vmul.f32	s3, s3, s11
 80100b4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80100b8:	ee60 5aa5 	vmul.f32	s11, s1, s11
 80100bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80100c0:	ee34 5a22 	vadd.f32	s10, s8, s5
 80100c4:	ee36 6a61 	vsub.f32	s12, s12, s3
 80100c8:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80100cc:	ed05 5a04 	vstr	s10, [r5, #-16]
 80100d0:	ed05 6a03 	vstr	s12, [r5, #-12]
 80100d4:	edc4 5a04 	vstr	s11, [r4, #16]
 80100d8:	edc4 6a03 	vstr	s13, [r4, #12]
 80100dc:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 80100e0:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 80100e4:	ee23 6aa2 	vmul.f32	s12, s7, s5
 80100e8:	ee67 5a27 	vmul.f32	s11, s14, s15
 80100ec:	ee63 6a27 	vmul.f32	s13, s6, s15
 80100f0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80100f4:	ee27 7a22 	vmul.f32	s14, s14, s5
 80100f8:	ee62 7a27 	vmul.f32	s15, s4, s15
 80100fc:	ee23 3a22 	vmul.f32	s6, s6, s5
 8010100:	ee22 2a22 	vmul.f32	s4, s4, s5
 8010104:	ee36 6a25 	vadd.f32	s12, s12, s11
 8010108:	ee37 7a63 	vsub.f32	s14, s14, s7
 801010c:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8010110:	ee77 7a83 	vadd.f32	s15, s15, s6
 8010114:	ed02 6a04 	vstr	s12, [r2, #-16]
 8010118:	ed02 7a03 	vstr	s14, [r2, #-12]
 801011c:	ed83 2a04 	vstr	s4, [r3, #16]
 8010120:	edc3 7a03 	vstr	s15, [r3, #12]
 8010124:	f47f aefc 	bne.w	800ff20 <arm_cfft_radix8by4_f32+0x128>
 8010128:	9907      	ldr	r1, [sp, #28]
 801012a:	9803      	ldr	r0, [sp, #12]
 801012c:	00cb      	lsls	r3, r1, #3
 801012e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010132:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010136:	9103      	str	r1, [sp, #12]
 8010138:	9900      	ldr	r1, [sp, #0]
 801013a:	4419      	add	r1, r3
 801013c:	9100      	str	r1, [sp, #0]
 801013e:	9905      	ldr	r1, [sp, #20]
 8010140:	4419      	add	r1, r3
 8010142:	9105      	str	r1, [sp, #20]
 8010144:	9906      	ldr	r1, [sp, #24]
 8010146:	4419      	add	r1, r3
 8010148:	9106      	str	r1, [sp, #24]
 801014a:	9902      	ldr	r1, [sp, #8]
 801014c:	4419      	add	r1, r3
 801014e:	9102      	str	r1, [sp, #8]
 8010150:	9901      	ldr	r1, [sp, #4]
 8010152:	4419      	add	r1, r3
 8010154:	9b04      	ldr	r3, [sp, #16]
 8010156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801015a:	9101      	str	r1, [sp, #4]
 801015c:	9304      	str	r3, [sp, #16]
 801015e:	9b00      	ldr	r3, [sp, #0]
 8010160:	9902      	ldr	r1, [sp, #8]
 8010162:	ed93 7a00 	vldr	s14, [r3]
 8010166:	edd1 7a00 	vldr	s15, [r1]
 801016a:	9a06      	ldr	r2, [sp, #24]
 801016c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010170:	9d01      	ldr	r5, [sp, #4]
 8010172:	edd2 6a00 	vldr	s13, [r2]
 8010176:	ee37 7a67 	vsub.f32	s14, s14, s15
 801017a:	9b02      	ldr	r3, [sp, #8]
 801017c:	ee76 3a86 	vadd.f32	s7, s13, s12
 8010180:	ed95 3a00 	vldr	s6, [r5]
 8010184:	ed93 5a01 	vldr	s10, [r3, #4]
 8010188:	ee36 6a66 	vsub.f32	s12, s12, s13
 801018c:	9b00      	ldr	r3, [sp, #0]
 801018e:	ee73 3a83 	vadd.f32	s7, s7, s6
 8010192:	edd5 2a01 	vldr	s5, [r5, #4]
 8010196:	ed93 4a01 	vldr	s8, [r3, #4]
 801019a:	ee36 6a43 	vsub.f32	s12, s12, s6
 801019e:	9b00      	ldr	r3, [sp, #0]
 80101a0:	ee74 5a05 	vadd.f32	s11, s8, s10
 80101a4:	edd2 7a01 	vldr	s15, [r2, #4]
 80101a8:	edc3 3a00 	vstr	s7, [r3]
 80101ac:	ee34 4a45 	vsub.f32	s8, s8, s10
 80101b0:	edd2 3a01 	vldr	s7, [r2, #4]
 80101b4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80101b8:	ed95 2a01 	vldr	s4, [r5, #4]
 80101bc:	ee75 3aa3 	vadd.f32	s7, s11, s7
 80101c0:	9d05      	ldr	r5, [sp, #20]
 80101c2:	ee34 5a66 	vsub.f32	s10, s8, s13
 80101c6:	9b00      	ldr	r3, [sp, #0]
 80101c8:	ee74 4ae2 	vsub.f32	s9, s9, s5
 80101cc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80101d0:	ee73 3a82 	vadd.f32	s7, s7, s4
 80101d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80101d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80101da:	4621      	mov	r1, r4
 80101dc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80101e0:	edc3 3a01 	vstr	s7, [r3, #4]
 80101e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101e8:	edd5 3a00 	vldr	s7, [r5]
 80101ec:	ee76 6a84 	vadd.f32	s13, s13, s8
 80101f0:	ed95 7a01 	vldr	s14, [r5, #4]
 80101f4:	ee75 5ae2 	vsub.f32	s11, s11, s5
 80101f8:	ee24 4aa3 	vmul.f32	s8, s9, s7
 80101fc:	2304      	movs	r3, #4
 80101fe:	ee64 4a87 	vmul.f32	s9, s9, s14
 8010202:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010206:	ee25 5a23 	vmul.f32	s10, s10, s7
 801020a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801020e:	ee34 7a07 	vadd.f32	s14, s8, s14
 8010212:	ee35 5a64 	vsub.f32	s10, s10, s9
 8010216:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801021a:	ed82 7a00 	vstr	s14, [r2]
 801021e:	ed82 5a01 	vstr	s10, [r2, #4]
 8010222:	9a03      	ldr	r2, [sp, #12]
 8010224:	edd2 4a01 	vldr	s9, [r2, #4]
 8010228:	ed92 7a00 	vldr	s14, [r2]
 801022c:	9a02      	ldr	r2, [sp, #8]
 801022e:	ee26 5a07 	vmul.f32	s10, s12, s14
 8010232:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010236:	ee25 7a87 	vmul.f32	s14, s11, s14
 801023a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801023e:	ee37 6a46 	vsub.f32	s12, s14, s12
 8010242:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010246:	edc2 5a00 	vstr	s11, [r2]
 801024a:	ed82 6a01 	vstr	s12, [r2, #4]
 801024e:	9a04      	ldr	r2, [sp, #16]
 8010250:	9d01      	ldr	r5, [sp, #4]
 8010252:	edd2 5a01 	vldr	s11, [r2, #4]
 8010256:	ed92 7a00 	vldr	s14, [r2]
 801025a:	ee27 6a87 	vmul.f32	s12, s15, s14
 801025e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010262:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010266:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801026a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801026e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010272:	edc5 7a01 	vstr	s15, [r5, #4]
 8010276:	edc5 6a00 	vstr	s13, [r5]
 801027a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801027c:	686a      	ldr	r2, [r5, #4]
 801027e:	f000 f8b5 	bl	80103ec <arm_radix8_butterfly_f32>
 8010282:	4630      	mov	r0, r6
 8010284:	4621      	mov	r1, r4
 8010286:	686a      	ldr	r2, [r5, #4]
 8010288:	2304      	movs	r3, #4
 801028a:	f000 f8af 	bl	80103ec <arm_radix8_butterfly_f32>
 801028e:	4638      	mov	r0, r7
 8010290:	4621      	mov	r1, r4
 8010292:	686a      	ldr	r2, [r5, #4]
 8010294:	2304      	movs	r3, #4
 8010296:	f000 f8a9 	bl	80103ec <arm_radix8_butterfly_f32>
 801029a:	4621      	mov	r1, r4
 801029c:	686a      	ldr	r2, [r5, #4]
 801029e:	2304      	movs	r3, #4
 80102a0:	9808      	ldr	r0, [sp, #32]
 80102a2:	b00d      	add	sp, #52	; 0x34
 80102a4:	ecbd 8b04 	vpop	{d8-d9}
 80102a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ac:	f000 b89e 	b.w	80103ec <arm_radix8_butterfly_f32>

080102b0 <arm_cfft_f32>:
 80102b0:	2a01      	cmp	r2, #1
 80102b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102b6:	4606      	mov	r6, r0
 80102b8:	4617      	mov	r7, r2
 80102ba:	460c      	mov	r4, r1
 80102bc:	4698      	mov	r8, r3
 80102be:	8805      	ldrh	r5, [r0, #0]
 80102c0:	d055      	beq.n	801036e <arm_cfft_f32+0xbe>
 80102c2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80102c6:	d061      	beq.n	801038c <arm_cfft_f32+0xdc>
 80102c8:	d916      	bls.n	80102f8 <arm_cfft_f32+0x48>
 80102ca:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80102ce:	d01a      	beq.n	8010306 <arm_cfft_f32+0x56>
 80102d0:	d946      	bls.n	8010360 <arm_cfft_f32+0xb0>
 80102d2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80102d6:	d059      	beq.n	801038c <arm_cfft_f32+0xdc>
 80102d8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80102dc:	d105      	bne.n	80102ea <arm_cfft_f32+0x3a>
 80102de:	2301      	movs	r3, #1
 80102e0:	6872      	ldr	r2, [r6, #4]
 80102e2:	4629      	mov	r1, r5
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 f881 	bl	80103ec <arm_radix8_butterfly_f32>
 80102ea:	f1b8 0f00 	cmp.w	r8, #0
 80102ee:	d111      	bne.n	8010314 <arm_cfft_f32+0x64>
 80102f0:	2f01      	cmp	r7, #1
 80102f2:	d016      	beq.n	8010322 <arm_cfft_f32+0x72>
 80102f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f8:	2d20      	cmp	r5, #32
 80102fa:	d047      	beq.n	801038c <arm_cfft_f32+0xdc>
 80102fc:	d934      	bls.n	8010368 <arm_cfft_f32+0xb8>
 80102fe:	2d40      	cmp	r5, #64	; 0x40
 8010300:	d0ed      	beq.n	80102de <arm_cfft_f32+0x2e>
 8010302:	2d80      	cmp	r5, #128	; 0x80
 8010304:	d1f1      	bne.n	80102ea <arm_cfft_f32+0x3a>
 8010306:	4621      	mov	r1, r4
 8010308:	4630      	mov	r0, r6
 801030a:	f7ff fca9 	bl	800fc60 <arm_cfft_radix8by2_f32>
 801030e:	f1b8 0f00 	cmp.w	r8, #0
 8010312:	d0ed      	beq.n	80102f0 <arm_cfft_f32+0x40>
 8010314:	68b2      	ldr	r2, [r6, #8]
 8010316:	4620      	mov	r0, r4
 8010318:	89b1      	ldrh	r1, [r6, #12]
 801031a:	f000 f83f 	bl	801039c <arm_bitreversal_32>
 801031e:	2f01      	cmp	r7, #1
 8010320:	d1e8      	bne.n	80102f4 <arm_cfft_f32+0x44>
 8010322:	ee07 5a90 	vmov	s15, r5
 8010326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801032a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801032e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010332:	2d00      	cmp	r5, #0
 8010334:	d0de      	beq.n	80102f4 <arm_cfft_f32+0x44>
 8010336:	f104 0108 	add.w	r1, r4, #8
 801033a:	2300      	movs	r3, #0
 801033c:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010340:	3301      	adds	r3, #1
 8010342:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010346:	3108      	adds	r1, #8
 8010348:	429d      	cmp	r5, r3
 801034a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801034e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010352:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010356:	ed41 7a03 	vstr	s15, [r1, #-12]
 801035a:	d1ef      	bne.n	801033c <arm_cfft_f32+0x8c>
 801035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010360:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010364:	d0bb      	beq.n	80102de <arm_cfft_f32+0x2e>
 8010366:	e7c0      	b.n	80102ea <arm_cfft_f32+0x3a>
 8010368:	2d10      	cmp	r5, #16
 801036a:	d0cc      	beq.n	8010306 <arm_cfft_f32+0x56>
 801036c:	e7bd      	b.n	80102ea <arm_cfft_f32+0x3a>
 801036e:	b195      	cbz	r5, 8010396 <arm_cfft_f32+0xe6>
 8010370:	f101 030c 	add.w	r3, r1, #12
 8010374:	2200      	movs	r2, #0
 8010376:	ed53 7a02 	vldr	s15, [r3, #-8]
 801037a:	3201      	adds	r2, #1
 801037c:	3308      	adds	r3, #8
 801037e:	eef1 7a67 	vneg.f32	s15, s15
 8010382:	4295      	cmp	r5, r2
 8010384:	ed43 7a04 	vstr	s15, [r3, #-16]
 8010388:	d1f5      	bne.n	8010376 <arm_cfft_f32+0xc6>
 801038a:	e79a      	b.n	80102c2 <arm_cfft_f32+0x12>
 801038c:	4621      	mov	r1, r4
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff fd32 	bl	800fdf8 <arm_cfft_radix8by4_f32>
 8010394:	e7a9      	b.n	80102ea <arm_cfft_f32+0x3a>
 8010396:	2b00      	cmp	r3, #0
 8010398:	d0ac      	beq.n	80102f4 <arm_cfft_f32+0x44>
 801039a:	e7bb      	b.n	8010314 <arm_cfft_f32+0x64>

0801039c <arm_bitreversal_32>:
 801039c:	b321      	cbz	r1, 80103e8 <arm_bitreversal_32+0x4c>
 801039e:	f102 0c02 	add.w	ip, r2, #2
 80103a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a6:	4690      	mov	r8, r2
 80103a8:	2500      	movs	r5, #0
 80103aa:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 80103ae:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 80103b2:	3502      	adds	r5, #2
 80103b4:	08a4      	lsrs	r4, r4, #2
 80103b6:	089b      	lsrs	r3, r3, #2
 80103b8:	428d      	cmp	r5, r1
 80103ba:	ea4f 0784 	mov.w	r7, r4, lsl #2
 80103be:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 80103c2:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80103c6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80103ca:	f107 0704 	add.w	r7, r7, #4
 80103ce:	f106 0604 	add.w	r6, r6, #4
 80103d2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80103d6:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 80103da:	59c4      	ldr	r4, [r0, r7]
 80103dc:	5983      	ldr	r3, [r0, r6]
 80103de:	51c3      	str	r3, [r0, r7]
 80103e0:	5184      	str	r4, [r0, r6]
 80103e2:	d3e2      	bcc.n	80103aa <arm_bitreversal_32+0xe>
 80103e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop

080103ec <arm_radix8_butterfly_f32>:
 80103ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f0:	ed2d 8b10 	vpush	{d8-d15}
 80103f4:	b095      	sub	sp, #84	; 0x54
 80103f6:	468a      	mov	sl, r1
 80103f8:	468b      	mov	fp, r1
 80103fa:	eddf 8abb 	vldr	s17, [pc, #748]	; 80106e8 <arm_radix8_butterfly_f32+0x2fc>
 80103fe:	9012      	str	r0, [sp, #72]	; 0x48
 8010400:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8010404:	4603      	mov	r3, r0
 8010406:	3304      	adds	r3, #4
 8010408:	9313      	str	r3, [sp, #76]	; 0x4c
 801040a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801040e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010414:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8010418:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801041c:	920f      	str	r2, [sp, #60]	; 0x3c
 801041e:	9303      	str	r3, [sp, #12]
 8010420:	0153      	lsls	r3, r2, #5
 8010422:	0114      	lsls	r4, r2, #4
 8010424:	eba9 0002 	sub.w	r0, r9, r2
 8010428:	18ce      	adds	r6, r1, r3
 801042a:	9302      	str	r3, [sp, #8]
 801042c:	0097      	lsls	r7, r2, #2
 801042e:	4613      	mov	r3, r2
 8010430:	eb06 0509 	add.w	r5, r6, r9
 8010434:	9004      	str	r0, [sp, #16]
 8010436:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 801043a:	1bd2      	subs	r2, r2, r7
 801043c:	eb05 0109 	add.w	r1, r5, r9
 8010440:	441f      	add	r7, r3
 8010442:	9405      	str	r4, [sp, #20]
 8010444:	f109 0004 	add.w	r0, r9, #4
 8010448:	9101      	str	r1, [sp, #4]
 801044a:	1d21      	adds	r1, r4, #4
 801044c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801044e:	f04f 0e00 	mov.w	lr, #0
 8010452:	9c01      	ldr	r4, [sp, #4]
 8010454:	4418      	add	r0, r3
 8010456:	4419      	add	r1, r3
 8010458:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801045c:	9b02      	ldr	r3, [sp, #8]
 801045e:	00fc      	lsls	r4, r7, #3
 8010460:	18d7      	adds	r7, r2, r3
 8010462:	9b04      	ldr	r3, [sp, #16]
 8010464:	9406      	str	r4, [sp, #24]
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	9c01      	ldr	r4, [sp, #4]
 801046a:	9307      	str	r3, [sp, #28]
 801046c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8010470:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010474:	9304      	str	r3, [sp, #16]
 8010476:	9b03      	ldr	r3, [sp, #12]
 8010478:	edd6 6a00 	vldr	s13, [r6]
 801047c:	44de      	add	lr, fp
 801047e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8010482:	ed94 7a00 	vldr	s14, [r4]
 8010486:	45f2      	cmp	sl, lr
 8010488:	ed10 6a01 	vldr	s12, [r0, #-4]
 801048c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8010490:	edd5 2a00 	vldr	s5, [r5]
 8010494:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010498:	edd7 3a00 	vldr	s7, [r7]
 801049c:	ed11 5a01 	vldr	s10, [r1, #-4]
 80104a0:	ee36 3a22 	vadd.f32	s6, s12, s5
 80104a4:	edd2 6a00 	vldr	s13, [r2]
 80104a8:	ee75 5a07 	vadd.f32	s11, s10, s14
 80104ac:	ee36 4aa3 	vadd.f32	s8, s13, s7
 80104b0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80104b4:	ee72 4a25 	vadd.f32	s9, s4, s11
 80104b8:	ee73 3a04 	vadd.f32	s7, s6, s8
 80104bc:	ee35 5a47 	vsub.f32	s10, s10, s14
 80104c0:	ee36 7a62 	vsub.f32	s14, s12, s5
 80104c4:	ee32 2a65 	vsub.f32	s4, s4, s11
 80104c8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 80104cc:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80104d0:	ee37 6a66 	vsub.f32	s12, s14, s13
 80104d4:	ed4c 5a01 	vstr	s11, [ip, #-4]
 80104d8:	ee33 3a44 	vsub.f32	s6, s6, s8
 80104dc:	edc6 4a00 	vstr	s9, [r6]
 80104e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80104e4:	ed97 4a01 	vldr	s8, [r7, #4]
 80104e8:	ee66 6a28 	vmul.f32	s13, s12, s17
 80104ec:	edd0 5a00 	vldr	s11, [r0]
 80104f0:	ed95 6a01 	vldr	s12, [r5, #4]
 80104f4:	ee27 7a28 	vmul.f32	s14, s14, s17
 80104f8:	edd2 3a01 	vldr	s7, [r2, #4]
 80104fc:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8010500:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8010504:	ed96 1a01 	vldr	s2, [r6, #4]
 8010508:	ee33 0ac4 	vsub.f32	s0, s7, s8
 801050c:	edd4 0a01 	vldr	s1, [r4, #4]
 8010510:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010514:	eddc 6a00 	vldr	s13, [ip]
 8010518:	ee75 5a86 	vadd.f32	s11, s11, s12
 801051c:	ed91 6a00 	vldr	s12, [r1]
 8010520:	ee73 3a84 	vadd.f32	s7, s7, s8
 8010524:	ee74 1a80 	vadd.f32	s3, s9, s0
 8010528:	ee36 4a81 	vadd.f32	s8, s13, s2
 801052c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010530:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8010534:	ee36 1a20 	vadd.f32	s2, s12, s1
 8010538:	ee61 1aa8 	vmul.f32	s3, s3, s17
 801053c:	ee36 6a60 	vsub.f32	s12, s12, s1
 8010540:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8010544:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8010548:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801054c:	ee74 3a01 	vadd.f32	s7, s8, s2
 8010550:	ee34 4a41 	vsub.f32	s8, s8, s2
 8010554:	ee36 1a21 	vadd.f32	s2, s12, s3
 8010558:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801055c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8010560:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8010564:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8010568:	ed8c 0a00 	vstr	s0, [ip]
 801056c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010570:	449c      	add	ip, r3
 8010572:	ee75 4a07 	vadd.f32	s9, s10, s14
 8010576:	edc6 3a01 	vstr	s7, [r6, #4]
 801057a:	ee35 7a47 	vsub.f32	s14, s10, s14
 801057e:	441e      	add	r6, r3
 8010580:	ee32 5a25 	vadd.f32	s10, s4, s11
 8010584:	ee72 5a65 	vsub.f32	s11, s4, s11
 8010588:	ee72 3a81 	vadd.f32	s7, s5, s2
 801058c:	ed01 5a01 	vstr	s10, [r1, #-4]
 8010590:	ee34 2a43 	vsub.f32	s4, s8, s6
 8010594:	edc4 5a00 	vstr	s11, [r4]
 8010598:	ee37 5a86 	vadd.f32	s10, s15, s12
 801059c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 80105a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80105a4:	ed81 2a00 	vstr	s4, [r1]
 80105a8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 80105ac:	4419      	add	r1, r3
 80105ae:	ee33 4a04 	vadd.f32	s8, s6, s8
 80105b2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 80105b6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 80105ba:	ee37 7a26 	vadd.f32	s14, s14, s13
 80105be:	ed84 4a01 	vstr	s8, [r4, #4]
 80105c2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80105c6:	441c      	add	r4, r3
 80105c8:	edc7 2a00 	vstr	s5, [r7]
 80105cc:	ed85 5a00 	vstr	s10, [r5]
 80105d0:	edc2 7a00 	vstr	s15, [r2]
 80105d4:	edc0 5a00 	vstr	s11, [r0]
 80105d8:	4418      	add	r0, r3
 80105da:	edc7 4a01 	vstr	s9, [r7, #4]
 80105de:	441f      	add	r7, r3
 80105e0:	ed85 6a01 	vstr	s12, [r5, #4]
 80105e4:	441d      	add	r5, r3
 80105e6:	ed82 7a01 	vstr	s14, [r2, #4]
 80105ea:	441a      	add	r2, r3
 80105ec:	f63f af44 	bhi.w	8010478 <arm_radix8_butterfly_f32+0x8c>
 80105f0:	469c      	mov	ip, r3
 80105f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105f4:	2b07      	cmp	r3, #7
 80105f6:	f240 81b6 	bls.w	8010966 <arm_radix8_butterfly_f32+0x57a>
 80105fa:	9a02      	ldr	r2, [sp, #8]
 80105fc:	f109 0608 	add.w	r6, r9, #8
 8010600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010602:	f108 0408 	add.w	r4, r8, #8
 8010606:	3208      	adds	r2, #8
 8010608:	9f06      	ldr	r7, [sp, #24]
 801060a:	9d04      	ldr	r5, [sp, #16]
 801060c:	189a      	adds	r2, r3, r2
 801060e:	3708      	adds	r7, #8
 8010610:	3508      	adds	r5, #8
 8010612:	9807      	ldr	r0, [sp, #28]
 8010614:	920c      	str	r2, [sp, #48]	; 0x30
 8010616:	199a      	adds	r2, r3, r6
 8010618:	9905      	ldr	r1, [sp, #20]
 801061a:	3008      	adds	r0, #8
 801061c:	920b      	str	r2, [sp, #44]	; 0x2c
 801061e:	19da      	adds	r2, r3, r7
 8010620:	310c      	adds	r1, #12
 8010622:	920a      	str	r2, [sp, #40]	; 0x28
 8010624:	195a      	adds	r2, r3, r5
 8010626:	9209      	str	r2, [sp, #36]	; 0x24
 8010628:	191a      	adds	r2, r3, r4
 801062a:	9208      	str	r2, [sp, #32]
 801062c:	181a      	adds	r2, r3, r0
 801062e:	9207      	str	r2, [sp, #28]
 8010630:	185a      	adds	r2, r3, r1
 8010632:	330c      	adds	r3, #12
 8010634:	9205      	str	r2, [sp, #20]
 8010636:	9306      	str	r3, [sp, #24]
 8010638:	2301      	movs	r3, #1
 801063a:	9304      	str	r3, [sp, #16]
 801063c:	2300      	movs	r3, #0
 801063e:	930d      	str	r3, [sp, #52]	; 0x34
 8010640:	4663      	mov	r3, ip
 8010642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010644:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010646:	f8dd c014 	ldr.w	ip, [sp, #20]
 801064a:	440a      	add	r2, r1
 801064c:	9f06      	ldr	r7, [sp, #24]
 801064e:	9e07      	ldr	r6, [sp, #28]
 8010650:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8010654:	920d      	str	r2, [sp, #52]	; 0x34
 8010656:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 801065a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801065c:	9d08      	ldr	r5, [sp, #32]
 801065e:	4442      	add	r2, r8
 8010660:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010662:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010664:	eb02 0108 	add.w	r1, r2, r8
 8010668:	ed92 ea00 	vldr	s28, [r2]
 801066c:	eb01 0208 	add.w	r2, r1, r8
 8010670:	edd1 da00 	vldr	s27, [r1]
 8010674:	eb02 0108 	add.w	r1, r2, r8
 8010678:	ed92 da00 	vldr	s26, [r2]
 801067c:	eb01 0208 	add.w	r2, r1, r8
 8010680:	edd1 ca00 	vldr	s25, [r1]
 8010684:	eb02 0108 	add.w	r1, r2, r8
 8010688:	ed92 ca00 	vldr	s24, [r2]
 801068c:	eb01 0208 	add.w	r2, r1, r8
 8010690:	edd1 ba00 	vldr	s23, [r1]
 8010694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010696:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 801069a:	ed92 ba00 	vldr	s22, [r2]
 801069e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106a0:	eb0e 0908 	add.w	r9, lr, r8
 80106a4:	910e      	str	r1, [sp, #56]	; 0x38
 80106a6:	9201      	str	r2, [sp, #4]
 80106a8:	eb09 0208 	add.w	r2, r9, r8
 80106ac:	ed99 aa01 	vldr	s20, [r9, #4]
 80106b0:	edde aa01 	vldr	s21, [lr, #4]
 80106b4:	eb02 0908 	add.w	r9, r2, r8
 80106b8:	edd2 9a01 	vldr	s19, [r2, #4]
 80106bc:	f8dd e010 	ldr.w	lr, [sp, #16]
 80106c0:	eb09 0208 	add.w	r2, r9, r8
 80106c4:	ed99 9a01 	vldr	s18, [r9, #4]
 80106c8:	eb02 0908 	add.w	r9, r2, r8
 80106cc:	ed92 8a01 	vldr	s16, [r2, #4]
 80106d0:	9a01      	ldr	r2, [sp, #4]
 80106d2:	edd9 7a01 	vldr	s15, [r9, #4]
 80106d6:	44c8      	add	r8, r9
 80106d8:	edcd 7a02 	vstr	s15, [sp, #8]
 80106dc:	edd8 7a01 	vldr	s15, [r8, #4]
 80106e0:	edcd 7a03 	vstr	s15, [sp, #12]
 80106e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80106e6:	e001      	b.n	80106ec <arm_radix8_butterfly_f32+0x300>
 80106e8:	3f3504f3 	.word	0x3f3504f3
 80106ec:	ed92 7a00 	vldr	s14, [r2]
 80106f0:	44de      	add	lr, fp
 80106f2:	ed17 1a01 	vldr	s2, [r7, #-4]
 80106f6:	ed90 5a00 	vldr	s10, [r0]
 80106fa:	45f2      	cmp	sl, lr
 80106fc:	ed1c fa01 	vldr	s30, [ip, #-4]
 8010700:	ee31 3a07 	vadd.f32	s6, s2, s14
 8010704:	edd6 5a00 	vldr	s11, [r6]
 8010708:	ee31 1a47 	vsub.f32	s2, s2, s14
 801070c:	edd4 7a00 	vldr	s15, [r4]
 8010710:	ed95 7a00 	vldr	s14, [r5]
 8010714:	ed91 4a00 	vldr	s8, [r1]
 8010718:	ee3f 6a27 	vadd.f32	s12, s30, s15
 801071c:	ee77 6a25 	vadd.f32	s13, s14, s11
 8010720:	edd7 ea00 	vldr	s29, [r7]
 8010724:	ee74 fa05 	vadd.f32	s31, s8, s10
 8010728:	ee73 1a06 	vadd.f32	s3, s6, s12
 801072c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8010730:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8010734:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010738:	ee33 3a46 	vsub.f32	s6, s6, s12
 801073c:	ee31 6a85 	vadd.f32	s12, s3, s10
 8010740:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8010744:	ee34 fa07 	vadd.f32	s30, s8, s14
 8010748:	ed07 6a01 	vstr	s12, [r7, #-4]
 801074c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010750:	edd5 3a01 	vldr	s7, [r5, #4]
 8010754:	ee7f fae6 	vsub.f32	s31, s31, s13
 8010758:	ed90 7a01 	vldr	s14, [r0, #4]
 801075c:	ee2f fa28 	vmul.f32	s30, s30, s17
 8010760:	edd1 5a01 	vldr	s11, [r1, #4]
 8010764:	ee24 4a28 	vmul.f32	s8, s8, s17
 8010768:	ed96 6a01 	vldr	s12, [r6, #4]
 801076c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8010770:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8010774:	edd2 6a01 	vldr	s13, [r2, #4]
 8010778:	ee73 2ac6 	vsub.f32	s5, s7, s12
 801077c:	edd4 4a01 	vldr	s9, [r4, #4]
 8010780:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010784:	ed9c 7a00 	vldr	s14, [ip]
 8010788:	ee37 2a8f 	vadd.f32	s4, s15, s30
 801078c:	ee33 6a86 	vadd.f32	s12, s7, s12
 8010790:	ee37 facf 	vsub.f32	s30, s15, s30
 8010794:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8010798:	ee70 7ae2 	vsub.f32	s15, s1, s5
 801079c:	ee7e eae6 	vsub.f32	s29, s29, s13
 80107a0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 80107a4:	ee77 6a24 	vadd.f32	s13, s14, s9
 80107a8:	ee75 0a86 	vadd.f32	s1, s11, s12
 80107ac:	ee37 7a64 	vsub.f32	s14, s14, s9
 80107b0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80107b4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80107b8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 80107bc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80107c0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80107c4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 80107c8:	ee77 4a22 	vadd.f32	s9, s14, s5
 80107cc:	ee7e eae7 	vsub.f32	s29, s29, s15
 80107d0:	ee77 7a62 	vsub.f32	s15, s14, s5
 80107d4:	ee71 2a04 	vadd.f32	s5, s2, s8
 80107d8:	ee31 7a44 	vsub.f32	s14, s2, s8
 80107dc:	ee30 1a60 	vsub.f32	s2, s0, s1
 80107e0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80107e4:	ee33 6a46 	vsub.f32	s12, s6, s12
 80107e8:	ee33 3aef 	vsub.f32	s6, s7, s31
 80107ec:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 80107f0:	ee3e 4acf 	vsub.f32	s8, s29, s30
 80107f4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80107f8:	ee72 5a25 	vadd.f32	s11, s4, s11
 80107fc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010800:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8010804:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010808:	ee37 7a67 	vsub.f32	s14, s14, s15
 801080c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8010810:	ee2c fa85 	vmul.f32	s30, s25, s10
 8010814:	ee69 ea01 	vmul.f32	s29, s18, s2
 8010818:	ee29 5a05 	vmul.f32	s10, s18, s10
 801081c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8010820:	ee6d faa1 	vmul.f32	s31, s27, s3
 8010824:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010828:	ee6a 1a21 	vmul.f32	s3, s20, s3
 801082c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8010830:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8010834:	edc7 0a00 	vstr	s1, [r7]
 8010838:	ee7f ea2e 	vadd.f32	s29, s30, s29
 801083c:	441f      	add	r7, r3
 801083e:	ee2a faa3 	vmul.f32	s30, s21, s7
 8010842:	ee31 5a45 	vsub.f32	s10, s2, s10
 8010846:	ee6e 3a23 	vmul.f32	s7, s28, s7
 801084a:	edc2 ea00 	vstr	s29, [r2]
 801084e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8010852:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010856:	ed82 5a01 	vstr	s10, [r2, #4]
 801085a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801085e:	edcd 3a01 	vstr	s7, [sp, #4]
 8010862:	ed9d 5a03 	vldr	s10, [sp, #12]
 8010866:	ee6b ea86 	vmul.f32	s29, s23, s12
 801086a:	eddd 3a02 	vldr	s7, [sp, #8]
 801086e:	ee6b fa24 	vmul.f32	s31, s22, s9
 8010872:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8010876:	ee65 4a24 	vmul.f32	s9, s10, s9
 801087a:	ed8c 3a00 	vstr	s6, [ip]
 801087e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8010882:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010886:	eddd 3a01 	vldr	s7, [sp, #4]
 801088a:	ee25 5a25 	vmul.f32	s10, s10, s11
 801088e:	441a      	add	r2, r3
 8010890:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8010894:	449c      	add	ip, r3
 8010896:	ee68 1a04 	vmul.f32	s3, s16, s8
 801089a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801089e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 80108a2:	ee29 faa7 	vmul.f32	s30, s19, s15
 80108a6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 80108aa:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 80108ae:	ee6b 5a25 	vmul.f32	s11, s22, s11
 80108b2:	ee68 2a22 	vmul.f32	s5, s16, s5
 80108b6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 80108ba:	ee29 7a87 	vmul.f32	s14, s19, s14
 80108be:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80108c2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80108c6:	ee7e ea81 	vadd.f32	s29, s29, s2
 80108ca:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80108ce:	ee3f 5a85 	vadd.f32	s10, s31, s10
 80108d2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80108d6:	edc4 ea00 	vstr	s29, [r4]
 80108da:	ee30 0a21 	vadd.f32	s0, s0, s3
 80108de:	ed84 6a01 	vstr	s12, [r4, #4]
 80108e2:	ee74 2a62 	vsub.f32	s5, s8, s5
 80108e6:	edc1 0a00 	vstr	s1, [r1]
 80108ea:	ee33 3a0f 	vadd.f32	s6, s6, s30
 80108ee:	edc1 3a01 	vstr	s7, [r1, #4]
 80108f2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80108f6:	ed86 5a00 	vstr	s10, [r6]
 80108fa:	edc6 4a01 	vstr	s9, [r6, #4]
 80108fe:	4419      	add	r1, r3
 8010900:	ed80 0a00 	vstr	s0, [r0]
 8010904:	441c      	add	r4, r3
 8010906:	edc0 2a01 	vstr	s5, [r0, #4]
 801090a:	441e      	add	r6, r3
 801090c:	ed85 3a00 	vstr	s6, [r5]
 8010910:	4418      	add	r0, r3
 8010912:	ed85 7a01 	vstr	s14, [r5, #4]
 8010916:	441d      	add	r5, r3
 8010918:	f63f aee8 	bhi.w	80106ec <arm_radix8_butterfly_f32+0x300>
 801091c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801091e:	9a04      	ldr	r2, [sp, #16]
 8010920:	3108      	adds	r1, #8
 8010922:	3201      	adds	r2, #1
 8010924:	910c      	str	r1, [sp, #48]	; 0x30
 8010926:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010928:	9204      	str	r2, [sp, #16]
 801092a:	3108      	adds	r1, #8
 801092c:	910b      	str	r1, [sp, #44]	; 0x2c
 801092e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010930:	3108      	adds	r1, #8
 8010932:	910a      	str	r1, [sp, #40]	; 0x28
 8010934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010936:	3108      	adds	r1, #8
 8010938:	9109      	str	r1, [sp, #36]	; 0x24
 801093a:	9908      	ldr	r1, [sp, #32]
 801093c:	3108      	adds	r1, #8
 801093e:	9108      	str	r1, [sp, #32]
 8010940:	9907      	ldr	r1, [sp, #28]
 8010942:	3108      	adds	r1, #8
 8010944:	9107      	str	r1, [sp, #28]
 8010946:	9906      	ldr	r1, [sp, #24]
 8010948:	3108      	adds	r1, #8
 801094a:	9106      	str	r1, [sp, #24]
 801094c:	9905      	ldr	r1, [sp, #20]
 801094e:	3108      	adds	r1, #8
 8010950:	9105      	str	r1, [sp, #20]
 8010952:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010954:	4291      	cmp	r1, r2
 8010956:	f47f ae74 	bne.w	8010642 <arm_radix8_butterfly_f32+0x256>
 801095a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801095c:	468b      	mov	fp, r1
 801095e:	00db      	lsls	r3, r3, #3
 8010960:	b29b      	uxth	r3, r3
 8010962:	9310      	str	r3, [sp, #64]	; 0x40
 8010964:	e551      	b.n	801040a <arm_radix8_butterfly_f32+0x1e>
 8010966:	b015      	add	sp, #84	; 0x54
 8010968:	ecbd 8b10 	vpop	{d8-d15}
 801096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010970 <__errno>:
 8010970:	4b01      	ldr	r3, [pc, #4]	; (8010978 <__errno+0x8>)
 8010972:	6818      	ldr	r0, [r3, #0]
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop
 8010978:	24000018 	.word	0x24000018

0801097c <__libc_init_array>:
 801097c:	b570      	push	{r4, r5, r6, lr}
 801097e:	4d0d      	ldr	r5, [pc, #52]	; (80109b4 <__libc_init_array+0x38>)
 8010980:	4c0d      	ldr	r4, [pc, #52]	; (80109b8 <__libc_init_array+0x3c>)
 8010982:	1b64      	subs	r4, r4, r5
 8010984:	10a4      	asrs	r4, r4, #2
 8010986:	2600      	movs	r6, #0
 8010988:	42a6      	cmp	r6, r4
 801098a:	d109      	bne.n	80109a0 <__libc_init_array+0x24>
 801098c:	4d0b      	ldr	r5, [pc, #44]	; (80109bc <__libc_init_array+0x40>)
 801098e:	4c0c      	ldr	r4, [pc, #48]	; (80109c0 <__libc_init_array+0x44>)
 8010990:	f000 f8e0 	bl	8010b54 <_init>
 8010994:	1b64      	subs	r4, r4, r5
 8010996:	10a4      	asrs	r4, r4, #2
 8010998:	2600      	movs	r6, #0
 801099a:	42a6      	cmp	r6, r4
 801099c:	d105      	bne.n	80109aa <__libc_init_array+0x2e>
 801099e:	bd70      	pop	{r4, r5, r6, pc}
 80109a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80109a4:	4798      	blx	r3
 80109a6:	3601      	adds	r6, #1
 80109a8:	e7ee      	b.n	8010988 <__libc_init_array+0xc>
 80109aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80109ae:	4798      	blx	r3
 80109b0:	3601      	adds	r6, #1
 80109b2:	e7f2      	b.n	801099a <__libc_init_array+0x1e>
 80109b4:	08023df8 	.word	0x08023df8
 80109b8:	08023df8 	.word	0x08023df8
 80109bc:	08023df8 	.word	0x08023df8
 80109c0:	08023dfc 	.word	0x08023dfc

080109c4 <memcpy>:
 80109c4:	440a      	add	r2, r1
 80109c6:	4291      	cmp	r1, r2
 80109c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80109cc:	d100      	bne.n	80109d0 <memcpy+0xc>
 80109ce:	4770      	bx	lr
 80109d0:	b510      	push	{r4, lr}
 80109d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109da:	4291      	cmp	r1, r2
 80109dc:	d1f9      	bne.n	80109d2 <memcpy+0xe>
 80109de:	bd10      	pop	{r4, pc}

080109e0 <memset>:
 80109e0:	4402      	add	r2, r0
 80109e2:	4603      	mov	r3, r0
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d100      	bne.n	80109ea <memset+0xa>
 80109e8:	4770      	bx	lr
 80109ea:	f803 1b01 	strb.w	r1, [r3], #1
 80109ee:	e7f9      	b.n	80109e4 <memset+0x4>

080109f0 <logf>:
 80109f0:	ee10 3a10 	vmov	r3, s0
 80109f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80109f8:	b410      	push	{r4}
 80109fa:	d055      	beq.n	8010aa8 <logf+0xb8>
 80109fc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8010a00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8010a04:	d31a      	bcc.n	8010a3c <logf+0x4c>
 8010a06:	005a      	lsls	r2, r3, #1
 8010a08:	d104      	bne.n	8010a14 <logf+0x24>
 8010a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a0e:	2001      	movs	r0, #1
 8010a10:	f000 b880 	b.w	8010b14 <__math_divzerof>
 8010a14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010a18:	d043      	beq.n	8010aa2 <logf+0xb2>
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	db02      	blt.n	8010a24 <logf+0x34>
 8010a1e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8010a22:	d303      	bcc.n	8010a2c <logf+0x3c>
 8010a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a28:	f000 b884 	b.w	8010b34 <__math_invalidf>
 8010a2c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8010ab0 <logf+0xc0>
 8010a30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a34:	ee10 3a10 	vmov	r3, s0
 8010a38:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8010a3c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8010a40:	491c      	ldr	r1, [pc, #112]	; (8010ab4 <logf+0xc4>)
 8010a42:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8010a46:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8010a4a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8010a4e:	0dd4      	lsrs	r4, r2, #23
 8010a50:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8010a54:	05e4      	lsls	r4, r4, #23
 8010a56:	ed90 6b00 	vldr	d6, [r0]
 8010a5a:	1b1b      	subs	r3, r3, r4
 8010a5c:	ee07 3a90 	vmov	s15, r3
 8010a60:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8010a64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010a68:	15d2      	asrs	r2, r2, #23
 8010a6a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010a6e:	ed90 6b02 	vldr	d6, [r0, #8]
 8010a72:	ee20 4b00 	vmul.f64	d4, d0, d0
 8010a76:	ee07 2a90 	vmov	s15, r2
 8010a7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a7e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a82:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8010a86:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8010a8a:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010a8e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8010a92:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010a96:	eea5 7b04 	vfma.f64	d7, d5, d4
 8010a9a:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010a9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010aa6:	4770      	bx	lr
 8010aa8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010ab8 <logf+0xc8>
 8010aac:	e7f9      	b.n	8010aa2 <logf+0xb2>
 8010aae:	bf00      	nop
 8010ab0:	4b000000 	.word	0x4b000000
 8010ab4:	08023cd0 	.word	0x08023cd0
 8010ab8:	00000000 	.word	0x00000000

08010abc <sqrtf>:
 8010abc:	b508      	push	{r3, lr}
 8010abe:	ed2d 8b02 	vpush	{d8}
 8010ac2:	eeb0 8a40 	vmov.f32	s16, s0
 8010ac6:	f000 f817 	bl	8010af8 <__ieee754_sqrtf>
 8010aca:	eeb4 8a48 	vcmp.f32	s16, s16
 8010ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad2:	d60c      	bvs.n	8010aee <sqrtf+0x32>
 8010ad4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010af4 <sqrtf+0x38>
 8010ad8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae0:	d505      	bpl.n	8010aee <sqrtf+0x32>
 8010ae2:	f7ff ff45 	bl	8010970 <__errno>
 8010ae6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010aea:	2321      	movs	r3, #33	; 0x21
 8010aec:	6003      	str	r3, [r0, #0]
 8010aee:	ecbd 8b02 	vpop	{d8}
 8010af2:	bd08      	pop	{r3, pc}
 8010af4:	00000000 	.word	0x00000000

08010af8 <__ieee754_sqrtf>:
 8010af8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010afc:	4770      	bx	lr

08010afe <with_errnof>:
 8010afe:	b513      	push	{r0, r1, r4, lr}
 8010b00:	4604      	mov	r4, r0
 8010b02:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010b06:	f7ff ff33 	bl	8010970 <__errno>
 8010b0a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010b0e:	6004      	str	r4, [r0, #0]
 8010b10:	b002      	add	sp, #8
 8010b12:	bd10      	pop	{r4, pc}

08010b14 <__math_divzerof>:
 8010b14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010b18:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8010b22:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010b30 <__math_divzerof+0x1c>
 8010b26:	2022      	movs	r0, #34	; 0x22
 8010b28:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010b2c:	f7ff bfe7 	b.w	8010afe <with_errnof>
 8010b30:	00000000 	.word	0x00000000

08010b34 <__math_invalidf>:
 8010b34:	eef0 7a40 	vmov.f32	s15, s0
 8010b38:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010b3c:	eef4 7a67 	vcmp.f32	s15, s15
 8010b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b44:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8010b48:	d602      	bvs.n	8010b50 <__math_invalidf+0x1c>
 8010b4a:	2021      	movs	r0, #33	; 0x21
 8010b4c:	f7ff bfd7 	b.w	8010afe <with_errnof>
 8010b50:	4770      	bx	lr
	...

08010b54 <_init>:
 8010b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b56:	bf00      	nop
 8010b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b5a:	bc08      	pop	{r3}
 8010b5c:	469e      	mov	lr, r3
 8010b5e:	4770      	bx	lr

08010b60 <_fini>:
 8010b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b62:	bf00      	nop
 8010b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b66:	bc08      	pop	{r3}
 8010b68:	469e      	mov	lr, r3
 8010b6a:	4770      	bx	lr
