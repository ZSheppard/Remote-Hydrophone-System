
RTOS_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106ec  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000132c8  080109a0  080109a0  000209a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023c68  08023c68  00033c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023c70  08023c70  00033c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023c74  08023c74  00033c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08023c78  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00016bd0  2400007c  08023cf4  0004007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24016c4c  08023cf4  00046c4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f9d3  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000523a  00000000  00000000  0006fa7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e48  00000000  00000000  00074cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c68  00000000  00000000  00076b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005423  00000000  00000000  00078768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026450  00000000  00000000  0007db8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160ab6  00000000  00000000  000a3fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c5  00000000  00000000  00204a91  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008218  00000000  00000000  00204b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000038ec  00000000  00000000  0020cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010984 	.word	0x08010984

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08010984 	.word	0x08010984

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 f8f2 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f8a4 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fab2 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fa90 	bl	8000b28 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fa86 	bl	8000b18 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060c:	f000 f912 	bl	8000834 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 fa36 	bl	8000a80 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000614:	f000 f988 	bl	8000928 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000618:	4833      	ldr	r0, [pc, #204]	; (80006e8 <main+0xf4>)
 800061a:	f009 f8b5 	bl	8009788 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4831      	ldr	r0, [pc, #196]	; (80006e8 <main+0xf4>)
 8000622:	f009 f9fb 	bl	8009a1c <HAL_TIM_OC_Start>

  float32_t maxValue;

  // Initialize RFFT
  arm_rfft_fast_init_f32(&fft_handler, REAL_FFT_SIZE);
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4830      	ldr	r0, [pc, #192]	; (80006ec <main+0xf8>)
 800062c:	f00f f92a 	bl	800f884 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000630:	f00b fd5a 	bl	800c0e8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AudioCapSem01 */
  AudioCapSem01Handle = osSemaphoreNew(1, 1, &AudioCapSem01_attributes);
 8000634:	4a2e      	ldr	r2, [pc, #184]	; (80006f0 <main+0xfc>)
 8000636:	2101      	movs	r1, #1
 8000638:	2001      	movs	r0, #1
 800063a:	f00b fe31 	bl	800c2a0 <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <main+0x100>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of FFTSem02 */
  FFTSem02Handle = osSemaphoreNew(1, 1, &FFTSem02_attributes);
 8000644:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <main+0x104>)
 8000646:	2101      	movs	r1, #1
 8000648:	2001      	movs	r0, #1
 800064a:	f00b fe29 	bl	800c2a0 <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a2a      	ldr	r2, [pc, #168]	; (80006fc <main+0x108>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of SendDataSem03 */
  SendDataSem03Handle = osSemaphoreNew(1, 1, &SendDataSem03_attributes);
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <main+0x10c>)
 8000656:	2101      	movs	r1, #1
 8000658:	2001      	movs	r0, #1
 800065a:	f00b fe21 	bl	800c2a0 <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <main+0x110>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Buffer0Sem04 */
  ADC_Buffer0Sem04Handle = osSemaphoreNew(1, 1, &ADC_Buffer0Sem04_attributes);
 8000664:	4a28      	ldr	r2, [pc, #160]	; (8000708 <main+0x114>)
 8000666:	2101      	movs	r1, #1
 8000668:	2001      	movs	r0, #1
 800066a:	f00b fe19 	bl	800c2a0 <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a26      	ldr	r2, [pc, #152]	; (800070c <main+0x118>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Buffer1Sem05 */
  ADC_Buffer1Sem05Handle = osSemaphoreNew(1, 1, &ADC_Buffer1Sem05_attributes);
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <main+0x11c>)
 8000676:	2101      	movs	r1, #1
 8000678:	2001      	movs	r0, #1
 800067a:	f00b fe11 	bl	800c2a0 <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a24      	ldr	r2, [pc, #144]	; (8000714 <main+0x120>)
 8000682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  // Initialize Sem values other than AudioCap to 0 before starting code
  osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <main+0x108>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f04f 31ff 	mov.w	r1, #4294967295
 800068c:	4618      	mov	r0, r3
 800068e:	f00b fe91 	bl	800c3b4 <osSemaphoreAcquire>
  osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <main+0x110>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f04f 31ff 	mov.w	r1, #4294967295
 800069a:	4618      	mov	r0, r3
 800069c:	f00b fe8a 	bl	800c3b4 <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <main+0x124>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	481d      	ldr	r0, [pc, #116]	; (800071c <main+0x128>)
 80006a6:	f00b fd69 	bl	800c17c <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <main+0x12c>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of AudioCapTask */
  AudioCapTaskHandle = osThreadNew(StartAudioCapTask, NULL, &AudioCapTask_attributes);
 80006b0:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <main+0x130>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	481c      	ldr	r0, [pc, #112]	; (8000728 <main+0x134>)
 80006b6:	f00b fd61 	bl	800c17c <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <main+0x138>)
 80006be:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <main+0x13c>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <main+0x140>)
 80006c6:	f00b fd59 	bl	800c17c <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <main+0x144>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* creation of SendDataTask */
  SendDataTaskHandle = osThreadNew(StartSendDataTask, NULL, &SendDataTask_attributes);
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <main+0x148>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	481a      	ldr	r0, [pc, #104]	; (8000740 <main+0x14c>)
 80006d6:	f00b fd51 	bl	800c17c <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a19      	ldr	r2, [pc, #100]	; (8000744 <main+0x150>)
 80006de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e0:	f00b fd26 	bl	800c130 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0xf0>
 80006e6:	bf00      	nop
 80006e8:	24000174 	.word	0x24000174
 80006ec:	24012294 	.word	0x24012294
 80006f0:	08010ad0 	.word	0x08010ad0
 80006f4:	24000264 	.word	0x24000264
 80006f8:	08010ae0 	.word	0x08010ae0
 80006fc:	24000268 	.word	0x24000268
 8000700:	08010af0 	.word	0x08010af0
 8000704:	2400026c 	.word	0x2400026c
 8000708:	08010b00 	.word	0x08010b00
 800070c:	24000270 	.word	0x24000270
 8000710:	08010b10 	.word	0x08010b10
 8000714:	24000274 	.word	0x24000274
 8000718:	08010a40 	.word	0x08010a40
 800071c:	08000f8d 	.word	0x08000f8d
 8000720:	24000254 	.word	0x24000254
 8000724:	08010a64 	.word	0x08010a64
 8000728:	08000f99 	.word	0x08000f99
 800072c:	24000258 	.word	0x24000258
 8000730:	08010a88 	.word	0x08010a88
 8000734:	080010a5 	.word	0x080010a5
 8000738:	2400025c 	.word	0x2400025c
 800073c:	08010aac 	.word	0x08010aac
 8000740:	080011cd 	.word	0x080011cd
 8000744:	24000260 	.word	0x24000260

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	; 0x70
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	224c      	movs	r2, #76	; 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f010 f85a 	bl	8010810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f010 f854 	bl	8010810 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000768:	4b30      	ldr	r3, [pc, #192]	; (800082c <SystemClock_Config+0xe4>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000772:	2004      	movs	r0, #4
 8000774:	f005 fb4c 	bl	8005e10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <SystemClock_Config+0xe8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <SystemClock_Config+0xe8>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xe8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000794:	bf00      	nop
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <SystemClock_Config+0xe8>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800079e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a2:	d1f8      	bne.n	8000796 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007a4:	2321      	movs	r3, #33	; 0x21
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ae:	2301      	movs	r3, #1
 80007b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007be:	2318      	movs	r3, #24
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ce:	230c      	movs	r3, #12
 80007d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 fb70 	bl	8005ec4 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ea:	f000 fd32 	bl	8001252 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	233f      	movs	r3, #63	; 0x3f
 80007f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2303      	movs	r3, #3
 80007f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800080c:	2340      	movs	r3, #64	; 0x40
 800080e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2102      	movs	r1, #2
 8000814:	4618      	mov	r0, r3
 8000816:	f005 ff87 	bl	8006728 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000820:	f000 fd17 	bl	8001252 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3770      	adds	r7, #112	; 0x70
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	58024400 	.word	0x58024400
 8000830:	58024800 	.word	0x58024800

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000858:	4b30      	ldr	r3, [pc, #192]	; (800091c <MX_ADC1_Init+0xe8>)
 800085a:	4a31      	ldr	r2, [pc, #196]	; (8000920 <MX_ADC1_Init+0xec>)
 800085c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <MX_ADC1_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <MX_ADC1_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <MX_ADC1_Init+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <MX_ADC1_Init+0xe8>)
 8000872:	2204      	movs	r2, #4
 8000874:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_ADC1_Init+0xe8>)
 8000878:	2200      	movs	r2, #0
 800087a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_ADC1_Init+0xe8>)
 800087e:	2200      	movs	r2, #0
 8000880:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_ADC1_Init+0xe8>)
 8000884:	2201      	movs	r2, #1
 8000886:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_ADC1_Init+0xe8>)
 800088a:	2200      	movs	r2, #0
 800088c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_ADC1_Init+0xe8>)
 8000890:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_ADC1_Init+0xe8>)
 8000898:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ADC1_Init+0xe8>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_ADC1_Init+0xe8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ADC1_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_ADC1_Init+0xe8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b8:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_ADC1_Init+0xe8>)
 80008ba:	f001 fa25 	bl	8001d08 <HAL_ADC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008c4:	f000 fcc5 	bl	8001252 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_ADC1_Init+0xe8>)
 80008d4:	f002 faa2 	bl	8002e1c <HAL_ADCEx_MultiModeConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008de:	f000 fcb8 	bl	8001252 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_ADC1_Init+0xf0>)
 80008e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e6:	2306      	movs	r3, #6
 80008e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f4:	2304      	movs	r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_ADC1_Init+0xe8>)
 8000906:	f001 fc83 	bl	8002210 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000910:	f000 fc9f 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24000098 	.word	0x24000098
 8000920:	40022000 	.word	0x40022000
 8000924:	3ef08000 	.word	0x3ef08000

08000928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09c      	sub	sp, #112	; 0x70
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f00f ff54 	bl	8010810 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000968:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <MX_TIM1_Init+0x150>)
 800096a:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <MX_TIM1_Init+0x154>)
 800096c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800096e:	4b42      	ldr	r3, [pc, #264]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 800097a:	4b3f      	ldr	r3, [pc, #252]	; (8000a78 <MX_TIM1_Init+0x150>)
 800097c:	f241 726f 	movw	r2, #5999	; 0x176f
 8000980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000988:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <MX_TIM1_Init+0x150>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000994:	4838      	ldr	r0, [pc, #224]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000996:	f008 fe9f 	bl	80096d8 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 fc57 	bl	8001252 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009ae:	4619      	mov	r1, r3
 80009b0:	4831      	ldr	r0, [pc, #196]	; (8000a78 <MX_TIM1_Init+0x150>)
 80009b2:	f009 fadb 	bl	8009f6c <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009bc:	f000 fc49 	bl	8001252 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009c0:	482d      	ldr	r0, [pc, #180]	; (8000a78 <MX_TIM1_Init+0x150>)
 80009c2:	f008 ffc9 	bl	8009958 <HAL_TIM_OC_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009cc:	f000 fc41 	bl	8001252 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009d0:	2320      	movs	r3, #32
 80009d2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e0:	4619      	mov	r1, r3
 80009e2:	4825      	ldr	r0, [pc, #148]	; (8000a78 <MX_TIM1_Init+0x150>)
 80009e4:	f00a f816 	bl	800aa14 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009ee:	f000 fc30 	bl	8001252 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009f2:	2330      	movs	r3, #48	; 0x30
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000a18:	f009 fa2e 	bl	8009e78 <HAL_TIM_OC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a22:	f000 fc16 	bl	8001252 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000a5c:	f00a f868 	bl	800ab30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a66:	f000 fbf4 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <MX_TIM1_Init+0x150>)
 8000a6c:	f000 fcdc 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000a70:	bf00      	nop
 8000a72:	3770      	adds	r7, #112	; 0x70
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24000174 	.word	0x24000174
 8000a7c:	40010000 	.word	0x40010000

08000a80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART3_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aca:	f00a f8ef 	bl	800acac <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 fbbd 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000adc:	f00b f9f5 	bl	800beca <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 fbb4 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aee:	f00b fa2a 	bl	800bf46 <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 fbab 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000afe:	f00b f9ab 	bl	800be58 <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 fba3 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	240001c0 	.word	0x240001c0
 8000b14:	40004800 	.word	0x40004800

08000b18 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b30:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b40:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2105      	movs	r1, #5
 8000b50:	200b      	movs	r0, #11
 8000b52:	f002 fab7 	bl	80030c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b56:	200b      	movs	r0, #11
 8000b58:	f002 face 	bl	80030f8 <HAL_NVIC_EnableIRQ>

}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58024400 	.word	0x58024400

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b80      	ldr	r3, [pc, #512]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	4a7e      	ldr	r2, [pc, #504]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8e:	4b7c      	ldr	r3, [pc, #496]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9c:	4b78      	ldr	r3, [pc, #480]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba2:	4a77      	ldr	r2, [pc, #476]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000ba4:	f043 0320 	orr.w	r3, r3, #32
 8000ba8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bac:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b71      	ldr	r3, [pc, #452]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc0:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bde:	4a68      	ldr	r2, [pc, #416]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be8:	4b65      	ldr	r3, [pc, #404]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b62      	ldr	r3, [pc, #392]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfc:	4a60      	ldr	r2, [pc, #384]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c06:	4b5e      	ldr	r3, [pc, #376]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c14:	4b5a      	ldr	r3, [pc, #360]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1a:	4a59      	ldr	r2, [pc, #356]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c24:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c38:	4a51      	ldr	r2, [pc, #324]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c42:	4b4f      	ldr	r3, [pc, #316]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c50:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c56:	4a4a      	ldr	r2, [pc, #296]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c60:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <MX_GPIO_Init+0x218>)
 8000c62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	4843      	ldr	r0, [pc, #268]	; (8000d84 <MX_GPIO_Init+0x21c>)
 8000c76:	f005 f897 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c80:	4841      	ldr	r0, [pc, #260]	; (8000d88 <MX_GPIO_Init+0x220>)
 8000c82:	f005 f891 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4840      	ldr	r0, [pc, #256]	; (8000d8c <MX_GPIO_Init+0x224>)
 8000c8c:	f005 f88c 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	483a      	ldr	r0, [pc, #232]	; (8000d90 <MX_GPIO_Init+0x228>)
 8000ca6:	f004 fecf 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4830      	ldr	r0, [pc, #192]	; (8000d84 <MX_GPIO_Init+0x21c>)
 8000cc4:	f004 fec0 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cc8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4829      	ldr	r0, [pc, #164]	; (8000d88 <MX_GPIO_Init+0x220>)
 8000ce2:	f004 feb1 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4826      	ldr	r0, [pc, #152]	; (8000d94 <MX_GPIO_Init+0x22c>)
 8000cfc:	f004 fea4 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4820      	ldr	r0, [pc, #128]	; (8000d98 <MX_GPIO_Init+0x230>)
 8000d16:	f004 fe97 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_GPIO_Init+0x230>)
 8000d38:	f004 fe86 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <MX_GPIO_Init+0x230>)
 8000d56:	f004 fe77 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_GPIO_Init+0x224>)
 8000d72:	f004 fe69 	bl	8005a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d76:	bf00      	nop
 8000d78:	3738      	adds	r7, #56	; 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58021400 	.word	0x58021400
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	58021000 	.word	0x58021000
 8000d90:	58020800 	.word	0x58020800
 8000d94:	58021800 	.word	0x58021800
 8000d98:	58020000 	.word	0x58020000

08000d9c <FrequencyDetected>:
 * @brief Function detects frequencies between (0 - 8kHz) and returns boolean
 * @param
 * @retval boolean true or false
 */
bool FrequencyDetected(float32_t data[REAL_FFT_SIZE])
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	// Process the data through the RFFT module. Will output elements that are Real and Imaginary
	// in fft_bufer as a single array same size as data[].
	//arm_rfft_fast_f32(&fft_handler, (float32_t *) data, fft_buffer, ifftFlag);
	arm_rfft_fast_f32(&fft_handler, adc_buffer_float, fft_buffer, ifftFlag);
 8000da4:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <FrequencyDetected+0x100>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4a3d      	ldr	r2, [pc, #244]	; (8000ea0 <FrequencyDetected+0x104>)
 8000dac:	493d      	ldr	r1, [pc, #244]	; (8000ea4 <FrequencyDetected+0x108>)
 8000dae:	483e      	ldr	r0, [pc, #248]	; (8000ea8 <FrequencyDetected+0x10c>)
 8000db0:	f00e fe4e 	bl	800fa50 <arm_rfft_fast_f32>

	// Reset bin value and offset
	bin_point = 0;
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <FrequencyDetected+0x110>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]

	// Calculate magnitude for each bin using real and Imaginary numbers from fft_buffer output
	 for (int i=0; i< REAL_FFT_SIZE; i=i+2) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e02b      	b.n	8000e18 <FrequencyDetected+0x7c>

		bin[bin_point] =((Magnitude(fft_buffer[i], fft_buffer[i+1])))-offset;
 8000dc0:	4a37      	ldr	r2, [pc, #220]	; (8000ea0 <FrequencyDetected+0x104>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	edd3 7a00 	vldr	s15, [r3]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a33      	ldr	r2, [pc, #204]	; (8000ea0 <FrequencyDetected+0x104>)
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	eef0 0a47 	vmov.f32	s1, s14
 8000dde:	eeb0 0a67 	vmov.f32	s0, s15
 8000de2:	f000 f86f 	bl	8000ec4 <Magnitude>
 8000de6:	eeb0 7a40 	vmov.f32	s14, s0
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <FrequencyDetected+0x114>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <FrequencyDetected+0x110>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <FrequencyDetected+0x118>)
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	edc3 7a00 	vstr	s15, [r3]
		{
			bin[bin_point]=0;
		}
		*/

		bin_point++;
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <FrequencyDetected+0x110>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <FrequencyDetected+0x110>)
 8000e10:	6013      	str	r3, [r2, #0]
	 for (int i=0; i< REAL_FFT_SIZE; i=i+2) {
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3302      	adds	r3, #2
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e1e:	dbcf      	blt.n	8000dc0 <FrequencyDetected+0x24>

	 }
	// Negate DC value
	bin[0] = 0;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <FrequencyDetected+0x118>)
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]

	// Check highest magnitude in bins
	arm_max_f32(bin, FFT_SIZE, &maxValue, &maxIndex);
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <FrequencyDetected+0x11c>)
 8000e2a:	4a24      	ldr	r2, [pc, #144]	; (8000ebc <FrequencyDetected+0x120>)
 8000e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e30:	4820      	ldr	r0, [pc, #128]	; (8000eb4 <FrequencyDetected+0x118>)
 8000e32:	f00e fbf3 	bl	800f61c <arm_max_f32>

	// Correct index
	maxIndex += 1;
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <FrequencyDetected+0x11c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <FrequencyDetected+0x11c>)
 8000e3e:	6013      	str	r3, [r2, #0]

	bool threshold_crossed = false;
 8000e40:	2300      	movs	r3, #0
 8000e42:	74fb      	strb	r3, [r7, #19]

	// Going through bin array, checking if a magnitude crosses threshold of 40
	for(int j=1; j < (FFT_SIZE); j++){
 8000e44:	2301      	movs	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e012      	b.n	8000e70 <FrequencyDetected+0xd4>

		if(bin[j] >= 40)
 8000e4a:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <FrequencyDetected+0x118>)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	edd3 7a00 	vldr	s15, [r3]
 8000e56:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ec0 <FrequencyDetected+0x124>
 8000e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e62:	db02      	blt.n	8000e6a <FrequencyDetected+0xce>
		{
			threshold_crossed = true;
 8000e64:	2301      	movs	r3, #1
 8000e66:	74fb      	strb	r3, [r7, #19]
			break;
 8000e68:	e006      	b.n	8000e78 <FrequencyDetected+0xdc>
	for(int j=1; j < (FFT_SIZE); j++){
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e76:	dbe8      	blt.n	8000e4a <FrequencyDetected+0xae>
		}
	}

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(threshold_crossed == true)
 8000e78:	7cfb      	ldrb	r3, [r7, #19]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <FrequencyDetected+0xe6>
	{
		   return true;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e007      	b.n	8000e92 <FrequencyDetected+0xf6>
	}
	// if highest magnitude is at desired bin (wanted frequency) return true
	else if(threshold_crossed == false)
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	f083 0301 	eor.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <FrequencyDetected+0xf6>
		{
			return false;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e7ff      	b.n	8000e92 <FrequencyDetected+0xf6>
		}
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	24012288 	.word	0x24012288
 8000ea0:	2400c27c 	.word	0x2400c27c
 8000ea4:	24000278 	.word	0x24000278
 8000ea8:	24012294 	.word	0x24012294
 8000eac:	2401227c 	.word	0x2401227c
 8000eb0:	24000000 	.word	0x24000000
 8000eb4:	2401027c 	.word	0x2401027c
 8000eb8:	24012284 	.word	0x24012284
 8000ebc:	24012280 	.word	0x24012280
 8000ec0:	42200000 	.word	0x42200000

08000ec4 <Magnitude>:
 * @brief Returns magnitude of FFT buffer outputs
 * @param Real & Complex elements of FFT output
 * @retval Magnitude at specific frequency
 */
float32_t Magnitude(float32_t real, float32_t compl)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ece:	edc7 0a00 	vstr	s1, [r7]

	float32_t sqrt_input = (real*real + compl*compl);
 8000ed2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eda:	edd7 7a00 	vldr	s15, [r7]
 8000ede:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t sqrt_output = 0;
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
	float32_t magnitude = 0;
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
	float32_t log_output = 0;
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f12:	db09      	blt.n	8000f28 <Magnitude+0x64>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8000f14:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f18:	f00f fce8 	bl	80108ec <sqrtf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000f26:	e004      	b.n	8000f32 <Magnitude+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f30:	bf00      	nop

	arm_sqrt_f32(sqrt_input, &sqrt_output);
	log_output = logf(sqrt_output);
 8000f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f36:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3a:	f00f fc71 	bl	8010820 <logf>
 8000f3e:	ed87 0a05 	vstr	s0, [r7, #20]
	magnitude = 20* (log_output);
 8000f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f46:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	edc7 7a06 	vstr	s15, [r7, #24]
	return magnitude;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	ee07 3a90 	vmov	s15, r3
}
 8000f58:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_ADC_ConvCpltCallback>:
 * @brief This function executes when adc buffer is full setting flag true
 * @param
 * @retval
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f72:	f004 ff32 	bl	8005dda <HAL_GPIO_TogglePin>
	flag_value = true;			// Set buffer conversion complete flag
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, adc_buff_size);
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	58020800 	.word	0x58020800
 8000f88:	2400c279 	.word	0x2400c279

08000f8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000f94:	e7fe      	b.n	8000f94 <StartDefaultTask+0x8>
	...

08000f98 <StartAudioCapTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioCapTask */
void StartAudioCapTask(void *argument)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioCapTask */
  
  //Fill ADC_Buffer1
  HAL_ADC_Start_DMA(&hadc1, adc_buffer_1, ADC_BUFFER_SIZE);
 8000fa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa4:	4937      	ldr	r1, [pc, #220]	; (8001084 <StartAudioCapTask+0xec>)
 8000fa6:	4838      	ldr	r0, [pc, #224]	; (8001088 <StartAudioCapTask+0xf0>)
 8000fa8:	f001 f808 	bl	8001fbc <HAL_ADC_Start_DMA>

  //wait for it to finish
  while(flag_value != true);
 8000fac:	bf00      	nop
 8000fae:	4b37      	ldr	r3, [pc, #220]	; (800108c <StartAudioCapTask+0xf4>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f8      	bne.n	8000fae <StartAudioCapTask+0x16>
  flag_value = false;
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <StartAudioCapTask+0xf4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

  //set initial adc buffer
  uint32_t adc_buffer_num = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  //set record mode REMOVE, THIS IS FOR TESTING ONLY
	  recording_mode = false;
 8000fc6:	4b32      	ldr	r3, [pc, #200]	; (8001090 <StartAudioCapTask+0xf8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	  /* Test Pin */
	  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	  // osDelay(500);

	  // Start ADC using alternating buffers
    if(adc_buffer_num == 0) {
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d12b      	bne.n	800102a <StartAudioCapTask+0x92>

      //obtain adc_buffer_0
      osSemaphoreAcquire(ADC_Buffer0Sem04Handle, osWaitForever);
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <StartAudioCapTask+0xfc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00b f9ea 	bl	800c3b4 <osSemaphoreAcquire>

      //set buffer to fill
		  HAL_ADC_Start_DMA(&hadc1, adc_buffer_0, ADC_BUFFER_SIZE);
 8000fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe4:	492c      	ldr	r1, [pc, #176]	; (8001098 <StartAudioCapTask+0x100>)
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <StartAudioCapTask+0xf0>)
 8000fe8:	f000 ffe8 	bl	8001fbc <HAL_ADC_Start_DMA>

      //release tasks to process buffer 1
      //check for record mode
      if (recording_mode) {
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <StartAudioCapTask+0xf8>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d104      	bne.n	8000ffe <StartAudioCapTask+0x66>
        //send the data
      }
      else  {

        // start fft task on adc buffer 1
        osSemaphoreRelease(FFTSem02Handle);
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <StartAudioCapTask+0x104>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00b fa2d 	bl	800c458 <osSemaphoreRelease>
      }

      //wait for buffer to fill
      while(flag_value != true);
 8000ffe:	bf00      	nop
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <StartAudioCapTask+0xf4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f8      	bne.n	8001000 <StartAudioCapTask+0x68>
      flag_value = false;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <StartAudioCapTask+0xf4>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

      // Stop ADC
      HAL_ADC_Stop_DMA(&hadc1);
 8001014:	481c      	ldr	r0, [pc, #112]	; (8001088 <StartAudioCapTask+0xf0>)
 8001016:	f001 f885 	bl	8002124 <HAL_ADC_Stop_DMA>
      
      //release adc_buffer_0
      osSemaphoreRelease(ADC_Buffer0Sem04Handle);
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <StartAudioCapTask+0xfc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f00b fa1a 	bl	800c458 <osSemaphoreRelease>

      //switch to other buffer on next loop
      adc_buffer_num = 1;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e7cd      	b.n	8000fc6 <StartAudioCapTask+0x2e>
      //Wait for FFT Task to Finish
    }
    else {

      //obtain adc_buffer_1
      osSemaphoreAcquire(ADC_Buffer1Sem05Handle, osWaitForever);
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <StartAudioCapTask+0x108>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f04f 31ff 	mov.w	r1, #4294967295
 8001032:	4618      	mov	r0, r3
 8001034:	f00b f9be 	bl	800c3b4 <osSemaphoreAcquire>

      //set buffer to fill
		  HAL_ADC_Start_DMA(&hadc1, adc_buffer_1, ADC_BUFFER_SIZE);
 8001038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800103c:	4911      	ldr	r1, [pc, #68]	; (8001084 <StartAudioCapTask+0xec>)
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <StartAudioCapTask+0xf0>)
 8001040:	f000 ffbc 	bl	8001fbc <HAL_ADC_Start_DMA>

      //release tasks to process buffer 0
      //check for record mode
      if (recording_mode) {
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <StartAudioCapTask+0xf8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <StartAudioCapTask+0xbe>
        //send the data
      }
      else  {

        // start fft task on adc buffer 1
        osSemaphoreRelease(FFTSem02Handle);
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <StartAudioCapTask+0x104>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f00b fa01 	bl	800c458 <osSemaphoreRelease>
      }

      //wait for buffer to fill
      while(flag_value != true);
 8001056:	bf00      	nop
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <StartAudioCapTask+0xf4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	f083 0301 	eor.w	r3, r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f8      	bne.n	8001058 <StartAudioCapTask+0xc0>
      flag_value = false;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <StartAudioCapTask+0xf4>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

      // Stop ADC
      HAL_ADC_Stop_DMA(&hadc1);
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <StartAudioCapTask+0xf0>)
 800106e:	f001 f859 	bl	8002124 <HAL_ADC_Stop_DMA>

      //release adc_buffer_1
      osSemaphoreRelease(ADC_Buffer1Sem05Handle);
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <StartAudioCapTask+0x108>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f00b f9ee 	bl	800c458 <osSemaphoreRelease>

      //switch to other buffer on next loop
      adc_buffer_num = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
	  recording_mode = false;
 8001080:	e7a1      	b.n	8000fc6 <StartAudioCapTask+0x2e>
 8001082:	bf00      	nop
 8001084:	24008278 	.word	0x24008278
 8001088:	24000098 	.word	0x24000098
 800108c:	2400c279 	.word	0x2400c279
 8001090:	2400c278 	.word	0x2400c278
 8001094:	24000270 	.word	0x24000270
 8001098:	24004278 	.word	0x24004278
 800109c:	24000268 	.word	0x24000268
 80010a0:	24000274 	.word	0x24000274

080010a4 <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

    // wait for audio cap task to tell this task to start
    osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <StartFFTTask+0x104>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00b f97d 	bl	800c3b4 <osSemaphoreAcquire>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80010ba:	2102      	movs	r1, #2
 80010bc:	483b      	ldr	r0, [pc, #236]	; (80011ac <StartFFTTask+0x108>)
 80010be:	f004 fe8c 	bl	8005dda <HAL_GPIO_TogglePin>
	  //osDelay(500);

    //check which adc buffer is available
    count0 = osSemaphoreGetCount(ADC_Buffer0Sem04Handle);
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <StartFFTTask+0x10c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00b fa0a 	bl	800c4e0 <osSemaphoreGetCount>
 80010cc:	6138      	str	r0, [r7, #16]
    count1 = osSemaphoreGetCount(ADC_Buffer1Sem05Handle);
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <StartFFTTask+0x110>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00b fa04 	bl	800c4e0 <osSemaphoreGetCount>
 80010d8:	60f8      	str	r0, [r7, #12]
    none_acquired = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]

    //acquire whichever is available
    if(count0 == 1) {
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d124      	bne.n	800112e <StartFFTTask+0x8a>
      osSemaphoreAcquire(ADC_Buffer0Sem04Handle, osWaitForever);
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <StartFFTTask+0x10c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00b f961 	bl	800c3b4 <osSemaphoreAcquire>

      // Convert samples to float as required by FFT
		  for(int i = 0; i < REAL_FFT_SIZE; i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	e010      	b.n	800111a <StartFFTTask+0x76>
			  adc_buffer_float[i] = adc_buffer_0[i];
 80010f8:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <StartFFTTask+0x114>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <StartFFTTask+0x118>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < REAL_FFT_SIZE; i++){
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	3301      	adds	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001120:	dbea      	blt.n	80010f8 <StartFFTTask+0x54>
		  }
      
      //release adc buffer
      osSemaphoreRelease(ADC_Buffer0Sem04Handle);
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <StartFFTTask+0x10c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f00b f996 	bl	800c458 <osSemaphoreRelease>
 800112c:	e029      	b.n	8001182 <StartFFTTask+0xde>
      
    }
    else if (count1 == 1) {
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d124      	bne.n	800117e <StartFFTTask+0xda>
      osSemaphoreAcquire(ADC_Buffer1Sem05Handle, osWaitForever);
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <StartFFTTask+0x110>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	4618      	mov	r0, r3
 800113e:	f00b f939 	bl	800c3b4 <osSemaphoreAcquire>

      // Convert samples to float as required by FFT
      for(int i = 0; i < REAL_FFT_SIZE; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e010      	b.n	800116a <StartFFTTask+0xc6>
			  adc_buffer_float[i] = adc_buffer_1[i];
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <StartFFTTask+0x11c>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001158:	4a18      	ldr	r2, [pc, #96]	; (80011bc <StartFFTTask+0x118>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	edc3 7a00 	vstr	s15, [r3]
      for(int i = 0; i < REAL_FFT_SIZE; i++){
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001170:	dbea      	blt.n	8001148 <StartFFTTask+0xa4>
		  }

      //release adc buffer
      osSemaphoreRelease(ADC_Buffer1Sem05Handle);
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <StartFFTTask+0x110>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f00b f96e 	bl	800c458 <osSemaphoreRelease>
 800117c:	e001      	b.n	8001182 <StartFFTTask+0xde>
      
    }
    else {
      none_acquired = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
    }

    if (!none_acquired) {
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d191      	bne.n	80010ac <StartFFTTask+0x8>
      
      /* Reset frequency_detected bool */
      //frequency_detected = false;

      /* Call FFT function that returns true if freqs between 0-8kHz are detected */
      frequency_detected = FrequencyDetected(adc_buffer_float);
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <StartFFTTask+0x118>)
 800118a:	f7ff fe07 	bl	8000d9c <FrequencyDetected>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <StartFFTTask+0x120>)
 8001194:	701a      	strb	r2, [r3, #0]
      if(frequency_detected == true){
        // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
        // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
      }

      if(frequency_detected == true){
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <StartFFTTask+0x120>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d086      	beq.n	80010ac <StartFFTTask+0x8>
        recording_mode = true;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <StartFFTTask+0x124>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
    osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 80011a4:	e782      	b.n	80010ac <StartFFTTask+0x8>
 80011a6:	bf00      	nop
 80011a8:	24000268 	.word	0x24000268
 80011ac:	58021000 	.word	0x58021000
 80011b0:	24000270 	.word	0x24000270
 80011b4:	24000274 	.word	0x24000274
 80011b8:	24004278 	.word	0x24004278
 80011bc:	24000278 	.word	0x24000278
 80011c0:	24008278 	.word	0x24008278
 80011c4:	2401228c 	.word	0x2401228c
 80011c8:	2400c278 	.word	0x2400c278

080011cc <StartSendDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendDataTask */
void StartSendDataTask(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendDataTask */
  /* Infinite loop */
  for(;;)
  {
	//wait for send data task to complete
	osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <StartSendDataTask+0x54>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	4618      	mov	r0, r3
 80011de:	f00b f8e9 	bl	800c3b4 <osSemaphoreAcquire>

	// TODO modify buffer to add escape characters

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	480f      	ldr	r0, [pc, #60]	; (8001224 <StartSendDataTask+0x58>)
 80011e8:	f004 fdf7 	bl	8005dda <HAL_GPIO_TogglePin>
	// Sending data via UART
	// TODO send buffer of uint8_t not float
	//HAL_UART_Transmit_DMA(&huart3, send_buffer_float, SEND_BUFFER_SIZE);

	// get and send data for 8 cycles
	counter++;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <StartSendDataTask+0x5c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <StartSendDataTask+0x5c>)
 80011f4:	6013      	str	r3, [r2, #0]
	if (counter == 8)
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <StartSendDataTask+0x5c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d109      	bne.n	8001212 <StartSendDataTask+0x46>
	{
		counter = 0;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <StartSendDataTask+0x5c>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
		recording_mode = false;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <StartSendDataTask+0x60>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800120a:	2101      	movs	r1, #1
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <StartSendDataTask+0x58>)
 800120e:	f004 fde4 	bl	8005dda <HAL_GPIO_TogglePin>
	}

	//start audio cap task
	osSemaphoreRelease(AudioCapSem01Handle);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <StartSendDataTask+0x64>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f00b f91e 	bl	800c458 <osSemaphoreRelease>
	osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 800121c:	e7da      	b.n	80011d4 <StartSendDataTask+0x8>
 800121e:	bf00      	nop
 8001220:	2400026c 	.word	0x2400026c
 8001224:	58020400 	.word	0x58020400
 8001228:	24012290 	.word	0x24012290
 800122c:	2400c278 	.word	0x2400c278
 8001230:	24000264 	.word	0x24000264

08001234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001246:	f000 fb07 	bl	8001858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001256:	b672      	cpsid	i
}
 8001258:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125a:	e7fe      	b.n	800125a <Error_Handler+0x8>

0800125c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_MspInit+0x38>)
 8001264:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_MspInit+0x38>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_MspInit+0x38>)
 8001274:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	210f      	movs	r1, #15
 8001284:	f06f 0001 	mvn.w	r0, #1
 8001288:	f001 ff1c 	bl	80030c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58024400 	.word	0x58024400

08001298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ba      	sub	sp, #232	; 0xe8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	22c0      	movs	r2, #192	; 0xc0
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00f faa9 	bl	8010810 <memset>
  if(hadc->Instance==ADC1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <HAL_ADC_MspInit+0x138>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d17e      	bne.n	80013c6 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80012d8:	2310      	movs	r3, #16
 80012da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 fde0 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800130a:	f7ff ffa2 	bl	8001252 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_ADC_MspInit+0x13c>)
 8001310:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001314:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <HAL_ADC_MspInit+0x13c>)
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_ADC_MspInit+0x13c>)
 8001320:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_ADC_MspInit+0x13c>)
 800132e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001332:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <HAL_ADC_MspInit+0x13c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_ADC_MspInit+0x13c>)
 800133e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800134a:	2308      	movs	r3, #8
 800134c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001360:	4619      	mov	r1, r3
 8001362:	481d      	ldr	r0, [pc, #116]	; (80013d8 <HAL_ADC_MspInit+0x140>)
 8001364:	f004 fb70 	bl	8005a48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0x144>)
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <HAL_ADC_MspInit+0x148>)
 800136c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_ADC_MspInit+0x144>)
 8001370:	2209      	movs	r2, #9
 8001372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_ADC_MspInit+0x144>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_ADC_MspInit+0x144>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_ADC_MspInit+0x144>)
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_ADC_MspInit+0x144>)
 800138a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_ADC_MspInit+0x144>)
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001396:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_ADC_MspInit+0x144>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_ADC_MspInit+0x144>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_ADC_MspInit+0x144>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_ADC_MspInit+0x144>)
 80013ac:	f001 feb2 	bl	8003114 <HAL_DMA_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 80013b6:	f7ff ff4c 	bl	8001252 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_ADC_MspInit+0x144>)
 80013be:	64da      	str	r2, [r3, #76]	; 0x4c
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_ADC_MspInit+0x144>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	37e8      	adds	r7, #232	; 0xe8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40022000 	.word	0x40022000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020000 	.word	0x58020000
 80013dc:	240000fc 	.word	0x240000fc
 80013e0:	40020010 	.word	0x40020010

080013e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <HAL_TIM_Base_MspInit+0x3c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10e      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_TIM_Base_MspInit+0x40>)
 80013f8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80013fc:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_TIM_Base_MspInit+0x40>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_TIM_Base_MspInit+0x40>)
 8001408:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40010000 	.word	0x40010000
 8001424:	58024400 	.word	0x58024400

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_TIM_MspPostInit+0x6c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11f      	bne.n	800148a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_TIM_MspPostInit+0x70>)
 800144c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_TIM_MspPostInit+0x70>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_TIM_MspPostInit+0x70>)
 800145c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800146c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800147a:	2301      	movs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_TIM_MspPostInit+0x74>)
 8001486:	f004 fadf 	bl	8005a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40010000 	.word	0x40010000
 8001498:	58024400 	.word	0x58024400
 800149c:	58021000 	.word	0x58021000

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0ba      	sub	sp, #232	; 0xe8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	22c0      	movs	r2, #192	; 0xc0
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00f f9a5 	bl	8010810 <memset>
  if(huart->Instance==USART3)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a27      	ldr	r2, [pc, #156]	; (8001568 <HAL_UART_MspInit+0xc8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d146      	bne.n	800155e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014d0:	f04f 0202 	mov.w	r2, #2
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 fcec 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014f2:	f7ff feae 	bl	8001252 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_UART_MspInit+0xcc>)
 80014f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_UART_MspInit+0xcc>)
 80014fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001502:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_UART_MspInit+0xcc>)
 8001508:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800150c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_UART_MspInit+0xcc>)
 8001516:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_UART_MspInit+0xcc>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_UART_MspInit+0xcc>)
 8001526:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001532:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800154c:	2307      	movs	r3, #7
 800154e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001552:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_UART_MspInit+0xd0>)
 800155a:	f004 fa75 	bl	8005a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	37e8      	adds	r7, #232	; 0xe8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40004800 	.word	0x40004800
 800156c:	58024400 	.word	0x58024400
 8001570:	58020c00 	.word	0x58020c00

08001574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	; 0x40
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d827      	bhi.n	80015d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8001582:	2200      	movs	r2, #0
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	201c      	movs	r0, #28
 8001588:	f001 fd9c 	bl	80030c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800158c:	201c      	movs	r0, #28
 800158e:	f001 fdb3 	bl	80030f8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001592:	4a29      	ldr	r2, [pc, #164]	; (8001638 <HAL_InitTick+0xc4>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_InitTick+0xc8>)
 800159a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800159e:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_InitTick+0xc8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_InitTick+0xc8>)
 80015aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015b6:	f107 0210 	add.w	r2, r7, #16
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 fc3d 	bl	8006e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <HAL_InitTick+0x6a>
 80015d0:	e001      	b.n	80015d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e02c      	b.n	8001630 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d6:	f005 fc07 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 80015da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015dc:	e004      	b.n	80015e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015de:	f005 fc03 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 80015e2:	4603      	mov	r3, r0
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_InitTick+0xcc>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	0c9b      	lsrs	r3, r3, #18
 80015f2:	3b01      	subs	r3, #1
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_InitTick+0xd0>)
 80015f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_InitTick+0xd0>)
 8001600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001604:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001606:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <HAL_InitTick+0xd0>)
 8001608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_InitTick+0xd0>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_InitTick+0xd0>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <HAL_InitTick+0xd0>)
 800161a:	f008 f85d 	bl	80096d8 <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d104      	bne.n	800162e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <HAL_InitTick+0xd0>)
 8001626:	f008 f91f 	bl	8009868 <HAL_TIM_Base_Start_IT>
 800162a:	4603      	mov	r3, r0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3740      	adds	r7, #64	; 0x40
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2400000c 	.word	0x2400000c
 800163c:	58024400 	.word	0x58024400
 8001640:	431bde83 	.word	0x431bde83
 8001644:	240122ac 	.word	0x240122ac

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA1_Stream0_IRQHandler+0x10>)
 800167a:	f002 fe63 	bl	8004344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	240000fc 	.word	0x240000fc

08001688 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM2_IRQHandler+0x10>)
 800168e:	f008 fad3 	bl	8009c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	240122ac 	.word	0x240122ac

0800169c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <SystemInit+0xd0>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	4a31      	ldr	r2, [pc, #196]	; (800176c <SystemInit+0xd0>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <SystemInit+0xd4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d807      	bhi.n	80016cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016bc:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <SystemInit+0xd4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 030f 	bic.w	r3, r3, #15
 80016c4:	4a2a      	ldr	r2, [pc, #168]	; (8001770 <SystemInit+0xd4>)
 80016c6:	f043 0303 	orr.w	r3, r3, #3
 80016ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <SystemInit+0xd8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a28      	ldr	r2, [pc, #160]	; (8001774 <SystemInit+0xd8>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <SystemInit+0xd8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <SystemInit+0xd8>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4924      	ldr	r1, [pc, #144]	; (8001774 <SystemInit+0xd8>)
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <SystemInit+0xdc>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <SystemInit+0xd4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <SystemInit+0xd4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 030f 	bic.w	r3, r3, #15
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <SystemInit+0xd4>)
 8001700:	f043 0303 	orr.w	r3, r3, #3
 8001704:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <SystemInit+0xd8>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <SystemInit+0xd8>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <SystemInit+0xd8>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <SystemInit+0xd8>)
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <SystemInit+0xe0>)
 800171c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <SystemInit+0xd8>)
 8001720:	4a17      	ldr	r2, [pc, #92]	; (8001780 <SystemInit+0xe4>)
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <SystemInit+0xd8>)
 8001726:	4a17      	ldr	r2, [pc, #92]	; (8001784 <SystemInit+0xe8>)
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <SystemInit+0xd8>)
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <SystemInit+0xd8>)
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <SystemInit+0xe8>)
 8001734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <SystemInit+0xd8>)
 8001738:	2200      	movs	r2, #0
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <SystemInit+0xd8>)
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <SystemInit+0xe8>)
 8001740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <SystemInit+0xd8>)
 8001744:	2200      	movs	r2, #0
 8001746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <SystemInit+0xd8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <SystemInit+0xd8>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <SystemInit+0xd8>)
 8001756:	2200      	movs	r2, #0
 8001758:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <SystemInit+0xec>)
 800175c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001760:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	52002000 	.word	0x52002000
 8001774:	58024400 	.word	0x58024400
 8001778:	eaf6ed7f 	.word	0xeaf6ed7f
 800177c:	02020200 	.word	0x02020200
 8001780:	01ff0000 	.word	0x01ff0000
 8001784:	01010280 	.word	0x01010280
 8001788:	52004000 	.word	0x52004000

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001790:	f7ff ff84 	bl	800169c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	; (80017d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f00e fff7 	bl	80107ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7fe ff19 	bl	80005f4 <main>
  bx  lr
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80017c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017cc:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80017d0:	08023c78 	.word	0x08023c78
  ldr r2, =_sbss
 80017d4:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80017d8:	24016c4c 	.word	0x24016c4c

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e6:	2003      	movs	r0, #3
 80017e8:	f001 fc61 	bl	80030ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80017ec:	f005 f952 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_Init+0x68>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	4913      	ldr	r1, [pc, #76]	; (800184c <HAL_Init+0x6c>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_Init+0x68>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_Init+0x6c>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_Init+0x70>)
 8001822:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_Init+0x74>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182a:	200f      	movs	r0, #15
 800182c:	f7ff fea2 	bl	8001574 <HAL_InitTick>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e002      	b.n	8001840 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800183a:	f7ff fd0f 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	58024400 	.word	0x58024400
 800184c:	08010b20 	.word	0x08010b20
 8001850:	24000008 	.word	0x24000008
 8001854:	24000004 	.word	0x24000004

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	24000010 	.word	0x24000010
 800187c:	240122f8 	.word	0x240122f8

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	240122f8 	.word	0x240122f8

08001898 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3360      	adds	r3, #96	; 0x60
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	430b      	orrs	r3, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	431a      	orrs	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001972:	b480      	push	{r7}
 8001974:	b087      	sub	sp, #28
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3360      	adds	r3, #96	; 0x60
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
  }
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b087      	sub	sp, #28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3330      	adds	r3, #48	; 0x30
 80019de:	461a      	mov	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	4413      	add	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	211f      	movs	r1, #31
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0e9b      	lsrs	r3, r3, #26
 8001a06:	f003 011f 	and.w	r1, r3, #31
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f023 0203 	bic.w	r2, r3, #3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	60da      	str	r2, [r3, #12]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	0e5b      	lsrs	r3, r3, #25
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	0d1b      	lsrs	r3, r3, #20
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2107      	movs	r1, #7
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	401a      	ands	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	0d1b      	lsrs	r3, r3, #20
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	431a      	orrs	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001abc:	43db      	mvns	r3, r3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0318 	and.w	r3, r3, #24
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ac8:	40d9      	lsrs	r1, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	400b      	ands	r3, r1
 8001ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	000fffff 	.word	0x000fffff

08001aec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 031f 	and.w	r3, r3, #31
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6093      	str	r3, [r2, #8]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	5fffffc0 	.word	0x5fffffc0

08001b2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	6fffffc0 	.word	0x6fffffc0

08001b7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <LL_ADC_Enable+0x24>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	7fffffc0 	.word	0x7fffffc0

08001bcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <LL_ADC_Disable+0x24>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	f043 0202 	orr.w	r2, r3, #2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	7fffffc0 	.word	0x7fffffc0

08001bf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <LL_ADC_IsEnabled+0x18>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_ADC_IsEnabled+0x1a>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsDisableOngoing+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsDisableOngoing+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <LL_ADC_REG_StartConversion+0x24>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	7fffffc0 	.word	0x7fffffc0

08001c68 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <LL_ADC_REG_StopConversion+0x24>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	7fffffc0 	.word	0x7fffffc0

08001c90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <LL_ADC_INJ_StopConversion+0x24>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	f043 0220 	orr.w	r2, r3, #32
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	7fffffc0 	.word	0x7fffffc0

08001ce0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e138      	b.n	8001f94 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fab1 	bl	8001298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff feef 	bl	8001b2c <LL_ADC_IsDeepPowerDownEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fed5 	bl	8001b08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff0a 	bl	8001b7c <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d114      	bne.n	8001d98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff feee 	bl	8001b54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d78:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <HAL_ADC_Init+0x294>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	4a88      	ldr	r2, [pc, #544]	; (8001fa0 <HAL_ADC_Init+0x298>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	3301      	adds	r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff feed 	bl	8001b7c <LL_ADC_IsInternalRegulatorEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff61 	bl	8001c90 <LL_ADC_REG_IsConversionOngoing>
 8001dce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 80d2 	bne.w	8001f82 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 80ce 	bne.w	8001f82 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fefa 	bl	8001bf4 <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d110      	bne.n	8001e28 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e06:	4867      	ldr	r0, [pc, #412]	; (8001fa4 <HAL_ADC_Init+0x29c>)
 8001e08:	f7ff fef4 	bl	8001bf4 <LL_ADC_IsEnabled>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	4866      	ldr	r0, [pc, #408]	; (8001fa8 <HAL_ADC_Init+0x2a0>)
 8001e10:	f7ff fef0 	bl	8001bf4 <LL_ADC_IsEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4323      	orrs	r3, r4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4862      	ldr	r0, [pc, #392]	; (8001fac <HAL_ADC_Init+0x2a4>)
 8001e24:	f7ff fd38 	bl	8001898 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7d5b      	ldrb	r3, [r3, #21]
 8001e2c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e32:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001e38:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7f1b      	ldrb	r3, [r3, #28]
 8001e3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7f1b      	ldrb	r3, [r3, #28]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	045b      	lsls	r3, r3, #17
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_ADC_Init+0x2a8>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fefe 	bl	8001c90 <LL_ADC_REG_IsConversionOngoing>
 8001e94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff20 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 8001ea0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d14a      	bne.n	8001f3e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d147      	bne.n	8001f3e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7d1b      	ldrb	r3, [r3, #20]
 8001eb2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <HAL_ADC_Init+0x2ac>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d11b      	bne.n	8001f12 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_ADC_Init+0x2b0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	0411      	lsls	r1, r2, #16
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f02:	430a      	orrs	r2, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	e007      	b.n	8001f22 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fe7b 	bl	8002c34 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10c      	bne.n	8001f60 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f023 010f 	bic.w	r1, r3, #15
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5e:	e007      	b.n	8001f70 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 020f 	bic.w	r2, r2, #15
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f023 0303 	bic.w	r3, r3, #3
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f80:	e007      	b.n	8001f92 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f043 0210 	orr.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3724      	adds	r7, #36	; 0x24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	24000004 	.word	0x24000004
 8001fa0:	053e2d63 	.word	0x053e2d63
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40022100 	.word	0x40022100
 8001fac:	40022300 	.word	0x40022300
 8001fb0:	fff0c003 	.word	0xfff0c003
 8001fb4:	ffffbffc 	.word	0xffffbffc
 8001fb8:	fc00f81e 	.word	0xfc00f81e

08001fbc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc8:	484f      	ldr	r0, [pc, #316]	; (8002108 <HAL_ADC_Start_DMA+0x14c>)
 8001fca:	f7ff fd8f 	bl	8001aec <LL_ADC_GetMultimode>
 8001fce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fe5b 	bl	8001c90 <LL_ADC_REG_IsConversionOngoing>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f040 808c 	bne.w	80020fa <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x34>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e087      	b.n	8002100 <HAL_ADC_Start_DMA+0x144>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d002      	beq.n	800200a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b09      	cmp	r3, #9
 8002008:	d170      	bne.n	80020ec <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fca2 	bl	8002954 <ADC_Enable>
 8002010:	4603      	mov	r3, r0
 8002012:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d163      	bne.n	80020e2 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800201e:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_ADC_Start_DMA+0x150>)
 8002020:	4013      	ands	r3, r2
 8002022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_ADC_Start_DMA+0x154>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d002      	beq.n	800203a <HAL_ADC_Start_DMA+0x7e>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	e000      	b.n	800203c <HAL_ADC_Start_DMA+0x80>
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_ADC_Start_DMA+0x158>)
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	4293      	cmp	r3, r2
 8002042:	d002      	beq.n	800204a <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f023 0206 	bic.w	r2, r3, #6
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	659a      	str	r2, [r3, #88]	; 0x58
 800206e:	e002      	b.n	8002076 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_ADC_Start_DMA+0x15c>)
 800207c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_ADC_Start_DMA+0x160>)
 8002084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	4a25      	ldr	r2, [pc, #148]	; (8002120 <HAL_ADC_Start_DMA+0x164>)
 800208c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	221c      	movs	r2, #28
 8002094:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0210 	orr.w	r2, r2, #16
 80020ac:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f7ff fcb4 	bl	8001a26 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3340      	adds	r3, #64	; 0x40
 80020c8:	4619      	mov	r1, r3
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f001 fbb1 	bl	8003834 <HAL_DMA_Start_IT>
 80020d2:	4603      	mov	r3, r0
 80020d4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fdb0 	bl	8001c40 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020e0:	e00d      	b.n	80020fe <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80020ea:	e008      	b.n	80020fe <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020f8:	e001      	b.n	80020fe <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40022300 	.word	0x40022300
 800210c:	fffff0fe 	.word	0xfffff0fe
 8002110:	40022100 	.word	0x40022100
 8002114:	40022000 	.word	0x40022000
 8002118:	08002b0b 	.word	0x08002b0b
 800211c:	08002be3 	.word	0x08002be3
 8002120:	08002bff 	.word	0x08002bff

08002124 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Stop_DMA+0x16>
 8002136:	2302      	movs	r3, #2
 8002138:	e04f      	b.n	80021da <HAL_ADC_Stop_DMA+0xb6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002142:	2103      	movs	r1, #3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fb49 	bl	80027dc <ADC_ConversionStop>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d13d      	bne.n	80021d0 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0203 	bic.w	r2, r2, #3
 8002162:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d10f      	bne.n	8002192 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fdc6 	bl	8003d08 <HAL_DMA_Abort>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0210 	bic.w	r2, r2, #16
 80021a0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fc4f 	bl	8002a4c <ADC_Disable>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e002      	b.n	80021ba <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fc49 	bl	8002a4c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_ADC_Stop_DMA+0xc0>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	ffffeefe 	.word	0xffffeefe

080021e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b0a1      	sub	sp, #132	; 0x84
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a9a      	ldr	r2, [pc, #616]	; (8002494 <HAL_ADC_ConfigChannel+0x284>)
 800222a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x2a>
 8002236:	2302      	movs	r3, #2
 8002238:	e2bc      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5a4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fd22 	bl	8001c90 <LL_ADC_REG_IsConversionOngoing>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 82a1 	bne.w	8002796 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225c:	2b00      	cmp	r3, #0
 800225e:	d108      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x62>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	e016      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002282:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800228e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2201      	movs	r2, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	69d1      	ldr	r1, [r2, #28]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f7ff fb87 	bl	80019ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fce3 	bl	8001c90 <LL_ADC_REG_IsConversionOngoing>
 80022ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fd05 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 80022d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 80a0 	bne.w	8002420 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 809c 	bne.w	8002420 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff fba9 	bl	8001a4c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x110>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	e00a      	b.n	8002336 <HAL_ADC_ConfigChannel+0x126>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d027      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800234e:	f7ff fad7 	bl	8001900 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7e5b      	ldrb	r3, [r3, #25]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x158>
 8002362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002366:	e000      	b.n	800236a <HAL_ADC_ConfigChannel+0x15a>
 8002368:	2300      	movs	r3, #0
 800236a:	461a      	mov	r2, r3
 800236c:	f7ff fb01 	bl	8001972 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6919      	ldr	r1, [r3, #16]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	7e1b      	ldrb	r3, [r3, #24]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d102      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x176>
 8002380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002384:	e000      	b.n	8002388 <HAL_ADC_ConfigChannel+0x178>
 8002386:	2300      	movs	r3, #0
 8002388:	461a      	mov	r2, r3
 800238a:	f7ff fad9 	bl	8001940 <LL_ADC_SetDataRightShift>
 800238e:	e047      	b.n	8002420 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023b2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023fa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	069b      	lsls	r3, r3, #26
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800241e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fbe5 	bl	8001bf4 <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 81bb 	bne.w	80027a8 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f7ff fb30 	bl	8001aa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_ADC_ConfigChannel+0x284>)
 800244a:	4293      	cmp	r3, r2
 800244c:	f040 8130 	bne.w	80026b0 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x268>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	3301      	adds	r3, #1
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b09      	cmp	r3, #9
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e01b      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x2a0>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002488:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800248a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e005      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x290>
 8002494:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b09      	cmp	r3, #9
 80024a8:	bf94      	ite	ls
 80024aa:	2301      	movls	r3, #1
 80024ac:	2300      	movhi	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x2c0>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	3301      	adds	r3, #1
 80024c8:	069b      	lsls	r3, r3, #26
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ce:	e015      	b.n	80024fc <HAL_ADC_ConfigChannel+0x2ec>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80024e8:	2320      	movs	r3, #32
 80024ea:	e003      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80024ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_ADC_ConfigChannel+0x30c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	e017      	b.n	800254c <HAL_ADC_ConfigChannel+0x33c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800252a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800252e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	ea42 0103 	orr.w	r1, r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x362>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	3301      	adds	r3, #1
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	051b      	lsls	r3, r3, #20
 8002570:	e018      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x394>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	430b      	orrs	r3, r1
 80025a6:	e07e      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x3b4>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	069b      	lsls	r3, r3, #26
 80025be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c2:	e015      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3e0>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e003      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	069b      	lsls	r3, r3, #26
 80025ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x400>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	e017      	b.n	8002640 <HAL_ADC_ConfigChannel+0x430>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	61bb      	str	r3, [r7, #24]
  return result;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e003      	b.n	8002634 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	ea42 0103 	orr.w	r1, r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_ADC_ConfigChannel+0x45c>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	3b1e      	subs	r3, #30
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800266a:	e01b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x494>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	60fb      	str	r3, [r7, #12]
  return result;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	051b      	lsls	r3, r3, #20
 80026a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a4:	430b      	orrs	r3, r1
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	6892      	ldr	r2, [r2, #8]
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7ff f9ce 	bl	8001a4c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da77      	bge.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b8:	4840      	ldr	r0, [pc, #256]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 80026ba:	f7ff f913 	bl	80018e4 <LL_ADC_GetCommonPathInternalCh>
 80026be:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c0:	483f      	ldr	r0, [pc, #252]	; (80027c0 <HAL_ADC_ConfigChannel+0x5b0>)
 80026c2:	f7ff fa97 	bl	8001bf4 <LL_ADC_IsEnabled>
 80026c6:	4604      	mov	r4, r0
 80026c8:	483e      	ldr	r0, [pc, #248]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 80026ca:	f7ff fa93 	bl	8001bf4 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4323      	orrs	r3, r4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d155      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_ADC_ConfigChannel+0x5b8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d122      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x516>
 80026e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11d      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d159      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026fa:	4619      	mov	r1, r3
 80026fc:	482f      	ldr	r0, [pc, #188]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 80026fe:	f7ff f8de 	bl	80018be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_ADC_ConfigChannel+0x5bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <HAL_ADC_ConfigChannel+0x5c0>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	3301      	adds	r3, #1
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002716:	e002      	b.n	800271e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3b01      	subs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002724:	e040      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2a      	ldr	r2, [pc, #168]	; (80027d4 <HAL_ADC_ConfigChannel+0x5c4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x544>
 8002730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10c      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d131      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	4619      	mov	r1, r3
 800274c:	481b      	ldr	r0, [pc, #108]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 800274e:	f7ff f8b6 	bl	80018be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002752:	e029      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_ADC_ConfigChannel+0x5c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d124      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
 800275e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d11f      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_ADC_ConfigChannel+0x5b4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d11a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002778:	4619      	mov	r1, r3
 800277a:	4810      	ldr	r0, [pc, #64]	; (80027bc <HAL_ADC_ConfigChannel+0x5ac>)
 800277c:	f7ff f89f 	bl	80018be <LL_ADC_SetCommonPathInternalCh>
 8002780:	e012      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002794:	e008      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3784      	adds	r7, #132	; 0x84
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	40022300 	.word	0x40022300
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40022100 	.word	0x40022100
 80027c8:	cb840000 	.word	0xcb840000
 80027cc:	24000004 	.word	0x24000004
 80027d0:	053e2d63 	.word	0x053e2d63
 80027d4:	bac04000 	.word	0xbac04000
 80027d8:	cfb80000 	.word	0xcfb80000

080027dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fa4c 	bl	8001c90 <LL_ADC_REG_IsConversionOngoing>
 80027f8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fa6e 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 8002804:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8098 	beq.w	8002944 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02a      	beq.n	8002878 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7d5b      	ldrb	r3, [r3, #21]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d126      	bne.n	8002878 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7d1b      	ldrb	r3, [r3, #20]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d122      	bne.n	8002878 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002836:	e014      	b.n	8002862 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4a45      	ldr	r2, [pc, #276]	; (8002950 <ADC_ConversionStop+0x174>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d90d      	bls.n	800285c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0210 	orr.w	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e074      	b.n	8002946 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d1e3      	bne.n	8002838 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d014      	beq.n	80028a8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fa04 	bl	8001c90 <LL_ADC_REG_IsConversionOngoing>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f9c1 	bl	8001c1a <LL_ADC_IsDisableOngoing>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f9e0 	bl	8001c68 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d014      	beq.n	80028d8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fa14 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f9a9 	bl	8001c1a <LL_ADC_IsDisableOngoing>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f9f0 	bl	8001cb8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d005      	beq.n	80028ea <ADC_ConversionStop+0x10e>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d105      	bne.n	80028f0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028e4:	230c      	movs	r3, #12
 80028e6:	617b      	str	r3, [r7, #20]
        break;
 80028e8:	e005      	b.n	80028f6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028ea:	2308      	movs	r3, #8
 80028ec:	617b      	str	r3, [r7, #20]
        break;
 80028ee:	e002      	b.n	80028f6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028f0:	2304      	movs	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]
        break;
 80028f4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028f6:	f7fe ffc3 	bl	8001880 <HAL_GetTick>
 80028fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028fc:	e01b      	b.n	8002936 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028fe:	f7fe ffbf 	bl	8001880 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b05      	cmp	r3, #5
 800290a:	d914      	bls.n	8002936 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e007      	b.n	8002946 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1dc      	bne.n	80028fe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	000cdbff 	.word	0x000cdbff

08002954 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff f947 	bl	8001bf4 <LL_ADC_IsEnabled>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d161      	bne.n	8002a30 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <ADC_Enable+0xe8>)
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e04d      	b.n	8002a32 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff f902 	bl	8001ba4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029a0:	f7fe ff6e 	bl	8001880 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a6:	4826      	ldr	r0, [pc, #152]	; (8002a40 <ADC_Enable+0xec>)
 80029a8:	f7ff f8a0 	bl	8001aec <LL_ADC_GetMultimode>
 80029ac:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <ADC_Enable+0xf0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d002      	beq.n	80029be <ADC_Enable+0x6a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e000      	b.n	80029c0 <ADC_Enable+0x6c>
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <ADC_Enable+0xf4>)
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d130      	bne.n	8002a30 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ce:	e028      	b.n	8002a22 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f90d 	bl	8001bf4 <LL_ADC_IsEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f8dd 	bl	8001ba4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ea:	f7fe ff49 	bl	8001880 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d914      	bls.n	8002a22 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d00d      	beq.n	8002a22 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e007      	b.n	8002a32 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d1cf      	bne.n	80029d0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	8000003f 	.word	0x8000003f
 8002a40:	40022300 	.word	0x40022300
 8002a44:	40022100 	.word	0x40022100
 8002a48:	40022000 	.word	0x40022000

08002a4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff f8de 	bl	8001c1a <LL_ADC_IsDisableOngoing>
 8002a5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f8c5 	bl	8001bf4 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d047      	beq.n	8002b00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d144      	bne.n	8002b00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030d 	and.w	r3, r3, #13
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10c      	bne.n	8002a9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f89f 	bl	8001bcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2203      	movs	r2, #3
 8002a94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a96:	f7fe fef3 	bl	8001880 <HAL_GetTick>
 8002a9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a9c:	e029      	b.n	8002af2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e023      	b.n	8002b02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aba:	f7fe fee1 	bl	8001880 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d914      	bls.n	8002af2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e007      	b.n	8002b02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1dc      	bne.n	8002aba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d14b      	bne.n	8002bbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d021      	beq.n	8002b82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ff30 	bl	80019a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d032      	beq.n	8002bb4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d12b      	bne.n	8002bb4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11f      	bne.n	8002bb4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b80:	e018      	b.n	8002bb4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7fe f9d5 	bl	8000f64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bba:	e00e      	b.n	8002bda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff fb17 	bl	80021fc <HAL_ADC_ErrorCallback>
}
 8002bce:	e004      	b.n	8002bda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff faf9 	bl	80021e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fae9 	bl	80021fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c3c:	4b60      	ldr	r3, [pc, #384]	; (8002dc0 <ADC_ConfigureBoostMode+0x18c>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01c      	beq.n	8002c82 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c48:	f004 f89e 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8002c4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c56:	d010      	beq.n	8002c7a <ADC_ConfigureBoostMode+0x46>
 8002c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c5c:	d873      	bhi.n	8002d46 <ADC_ConfigureBoostMode+0x112>
 8002c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c62:	d002      	beq.n	8002c6a <ADC_ConfigureBoostMode+0x36>
 8002c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c68:	d16d      	bne.n	8002d46 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	60fb      	str	r3, [r7, #12]
        break;
 8002c78:	e068      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	60fb      	str	r3, [r7, #12]
        break;
 8002c80:	e064      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c82:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	f005 fad9 	bl	8008240 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c8e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c98:	d051      	beq.n	8002d3e <ADC_ConfigureBoostMode+0x10a>
 8002c9a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c9e:	d854      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002ca0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ca4:	d047      	beq.n	8002d36 <ADC_ConfigureBoostMode+0x102>
 8002ca6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002caa:	d84e      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002cac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cb0:	d03d      	beq.n	8002d2e <ADC_ConfigureBoostMode+0xfa>
 8002cb2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cb6:	d848      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cbc:	d033      	beq.n	8002d26 <ADC_ConfigureBoostMode+0xf2>
 8002cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc2:	d842      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002cc4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cc8:	d029      	beq.n	8002d1e <ADC_ConfigureBoostMode+0xea>
 8002cca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cce:	d83c      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002cd0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cd4:	d01a      	beq.n	8002d0c <ADC_ConfigureBoostMode+0xd8>
 8002cd6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cda:	d836      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002cdc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ce0:	d014      	beq.n	8002d0c <ADC_ConfigureBoostMode+0xd8>
 8002ce2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ce6:	d830      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cec:	d00e      	beq.n	8002d0c <ADC_ConfigureBoostMode+0xd8>
 8002cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf2:	d82a      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002cf4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cf8:	d008      	beq.n	8002d0c <ADC_ConfigureBoostMode+0xd8>
 8002cfa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cfe:	d824      	bhi.n	8002d4a <ADC_ConfigureBoostMode+0x116>
 8002d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d04:	d002      	beq.n	8002d0c <ADC_ConfigureBoostMode+0xd8>
 8002d06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d0a:	d11e      	bne.n	8002d4a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	60fb      	str	r3, [r7, #12]
        break;
 8002d1c:	e016      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	60fb      	str	r3, [r7, #12]
        break;
 8002d24:	e012      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	60fb      	str	r3, [r7, #12]
        break;
 8002d2c:	e00e      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	60fb      	str	r3, [r7, #12]
        break;
 8002d34:	e00a      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	09db      	lsrs	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]
        break;
 8002d3c:	e006      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	60fb      	str	r3, [r7, #12]
        break;
 8002d44:	e002      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
        break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002d4a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <ADC_ConfigureBoostMode+0x190>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d808      	bhi.n	8002d6c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d68:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d6a:	e025      	b.n	8002db8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <ADC_ConfigureBoostMode+0x194>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d80a      	bhi.n	8002d8a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	e016      	b.n	8002db8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <ADC_ConfigureBoostMode+0x198>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d80a      	bhi.n	8002da8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	e007      	b.n	8002db8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40022300 	.word	0x40022300
 8002dc4:	005f5e10 	.word	0x005f5e10
 8002dc8:	00bebc20 	.word	0x00bebc20
 8002dcc:	017d7840 	.word	0x017d7840

08002dd0 <LL_ADC_IsEnabled>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_IsEnabled+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_IsEnabled+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b09f      	sub	sp, #124	; 0x7c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e080      	b.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a3d      	ldr	r2, [pc, #244]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d102      	bne.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e54:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e001      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e05f      	b.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ffb9 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ffb3 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d141      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d13e      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002e9e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eba:	4822      	ldr	r0, [pc, #136]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ebc:	f7ff ff88 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	4821      	ldr	r0, [pc, #132]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ec4:	f7ff ff84 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4323      	orrs	r3, r4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d12e      	bne.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	6811      	ldr	r1, [r2, #0]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	6892      	ldr	r2, [r2, #8]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee8:	e021      	b.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef6:	4813      	ldr	r0, [pc, #76]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ef8:	f7ff ff6a 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002efc:	4604      	mov	r4, r0
 8002efe:	4812      	ldr	r0, [pc, #72]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f00:	f7ff ff66 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4323      	orrs	r3, r4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d110      	bne.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f16:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f18:	e009      	b.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f2c:	e000      	b.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	377c      	adds	r7, #124	; 0x7c
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40022100 	.word	0x40022100
 8002f4c:	40022300 	.word	0x40022300
 8002f50:	fffff0e0 	.word	0xfffff0e0

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <__NVIC_SetPriorityGrouping+0x40>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <__NVIC_SetPriorityGrouping+0x40>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	05fa0000 	.word	0x05fa0000

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <__NVIC_EnableIRQ+0x38>)
 8002fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
         );
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ff4c 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030d2:	f7ff ff63 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 80030d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	6978      	ldr	r0, [r7, #20]
 80030de:	f7ff ffb3 	bl	8003048 <NVIC_EncodePriority>
 80030e2:	4602      	mov	r2, r0
 80030e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff82 	bl	8002ff4 <__NVIC_SetPriority>
}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff56 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7fe fbb0 	bl	8001880 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e37f      	b.n	800382c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a66      	ldr	r2, [pc, #408]	; (80032cc <HAL_DMA_Init+0x1b8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d04a      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_DMA_Init+0x1bc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d045      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_DMA_Init+0x1c0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d040      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a62      	ldr	r2, [pc, #392]	; (80032d8 <HAL_DMA_Init+0x1c4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d03b      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a60      	ldr	r2, [pc, #384]	; (80032dc <HAL_DMA_Init+0x1c8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d036      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5f      	ldr	r2, [pc, #380]	; (80032e0 <HAL_DMA_Init+0x1cc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d031      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5d      	ldr	r2, [pc, #372]	; (80032e4 <HAL_DMA_Init+0x1d0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02c      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5c      	ldr	r2, [pc, #368]	; (80032e8 <HAL_DMA_Init+0x1d4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d027      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5a      	ldr	r2, [pc, #360]	; (80032ec <HAL_DMA_Init+0x1d8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d022      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a59      	ldr	r2, [pc, #356]	; (80032f0 <HAL_DMA_Init+0x1dc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d01d      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_DMA_Init+0x1e0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d018      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_DMA_Init+0x1e4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a54      	ldr	r2, [pc, #336]	; (80032fc <HAL_DMA_Init+0x1e8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a53      	ldr	r2, [pc, #332]	; (8003300 <HAL_DMA_Init+0x1ec>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_DMA_Init+0x1f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_DMA_Init+0xb8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_DMA_Init+0x1f4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_DMA_Init+0xbc>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_DMA_Init+0xbe>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 813c 	beq.w	8003450 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_DMA_Init+0x1b8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04a      	beq.n	8003288 <HAL_DMA_Init+0x174>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a36      	ldr	r2, [pc, #216]	; (80032d0 <HAL_DMA_Init+0x1bc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d045      	beq.n	8003288 <HAL_DMA_Init+0x174>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a34      	ldr	r2, [pc, #208]	; (80032d4 <HAL_DMA_Init+0x1c0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d040      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <HAL_DMA_Init+0x1c4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d03b      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_DMA_Init+0x1c8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d036      	beq.n	8003288 <HAL_DMA_Init+0x174>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <HAL_DMA_Init+0x1cc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d031      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <HAL_DMA_Init+0x1d0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02c      	beq.n	8003288 <HAL_DMA_Init+0x174>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_DMA_Init+0x1d4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d027      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_DMA_Init+0x1d8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <HAL_DMA_Init+0x1dc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01d      	beq.n	8003288 <HAL_DMA_Init+0x174>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_DMA_Init+0x1e0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_DMA_Init+0x1e4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_DMA_Init+0x1e8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_DMA_Init+0x174>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_DMA_Init+0x1ec>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_DMA_Init+0x174>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_DMA_Init+0x1f0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_DMA_Init+0x174>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <HAL_DMA_Init+0x1f4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <HAL_DMA_Init+0x186>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_DMA_Init+0x196>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032aa:	e02f      	b.n	800330c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ac:	f7fe fae8 	bl	8001880 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d928      	bls.n	800330c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2203      	movs	r2, #3
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2af      	b.n	800382c <HAL_DMA_Init+0x718>
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1c8      	bne.n	80032ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <HAL_DMA_Init+0x3e0>)
 8003326:	4013      	ands	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003332:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	2b04      	cmp	r3, #4
 800335e:	d107      	bne.n	8003370 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	4313      	orrs	r3, r2
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b28      	cmp	r3, #40	; 0x28
 8003376:	d903      	bls.n	8003380 <HAL_DMA_Init+0x26c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b2e      	cmp	r3, #46	; 0x2e
 800337e:	d91f      	bls.n	80033c0 <HAL_DMA_Init+0x2ac>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b3e      	cmp	r3, #62	; 0x3e
 8003386:	d903      	bls.n	8003390 <HAL_DMA_Init+0x27c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b42      	cmp	r3, #66	; 0x42
 800338e:	d917      	bls.n	80033c0 <HAL_DMA_Init+0x2ac>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b46      	cmp	r3, #70	; 0x46
 8003396:	d903      	bls.n	80033a0 <HAL_DMA_Init+0x28c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b48      	cmp	r3, #72	; 0x48
 800339e:	d90f      	bls.n	80033c0 <HAL_DMA_Init+0x2ac>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b4e      	cmp	r3, #78	; 0x4e
 80033a6:	d903      	bls.n	80033b0 <HAL_DMA_Init+0x29c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b52      	cmp	r3, #82	; 0x52
 80033ae:	d907      	bls.n	80033c0 <HAL_DMA_Init+0x2ac>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b73      	cmp	r3, #115	; 0x73
 80033b6:	d905      	bls.n	80033c4 <HAL_DMA_Init+0x2b0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b77      	cmp	r3, #119	; 0x77
 80033be:	d801      	bhi.n	80033c4 <HAL_DMA_Init+0x2b0>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_DMA_Init+0x2b2>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d117      	bne.n	800342c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00e      	beq.n	800342c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f002 f990 	bl	8005734 <DMA_CheckFifoParam>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e1ff      	b.n	800382c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f002 f8cb 	bl	80055d0 <DMA_CalcBaseAndBitshift>
 800343a:	4603      	mov	r3, r0
 800343c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	223f      	movs	r2, #63	; 0x3f
 8003448:	409a      	lsls	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	e0fe      	b.n	800364e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_DMA_Init+0x3e4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d04a      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_DMA_Init+0x3e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d045      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	; (8003500 <HAL_DMA_Init+0x3ec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d040      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_DMA_Init+0x3f0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d03b      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_DMA_Init+0x3f4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d036      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_DMA_Init+0x3f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d031      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_DMA_Init+0x3fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d02c      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_DMA_Init+0x400>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d027      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_DMA_Init+0x404>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d022      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_DMA_Init+0x408>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d01d      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_DMA_Init+0x40c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d018      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_DMA_Init+0x410>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a16      	ldr	r2, [pc, #88]	; (8003528 <HAL_DMA_Init+0x414>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00e      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <HAL_DMA_Init+0x418>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_DMA_Init+0x41c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_DMA_Init+0x3dc>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <HAL_DMA_Init+0x420>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d123      	bne.n	8003538 <HAL_DMA_Init+0x424>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e022      	b.n	800353a <HAL_DMA_Init+0x426>
 80034f4:	fe10803f 	.word	0xfe10803f
 80034f8:	48022c08 	.word	0x48022c08
 80034fc:	48022c1c 	.word	0x48022c1c
 8003500:	48022c30 	.word	0x48022c30
 8003504:	48022c44 	.word	0x48022c44
 8003508:	48022c58 	.word	0x48022c58
 800350c:	48022c6c 	.word	0x48022c6c
 8003510:	48022c80 	.word	0x48022c80
 8003514:	48022c94 	.word	0x48022c94
 8003518:	58025408 	.word	0x58025408
 800351c:	5802541c 	.word	0x5802541c
 8003520:	58025430 	.word	0x58025430
 8003524:	58025444 	.word	0x58025444
 8003528:	58025458 	.word	0x58025458
 800352c:	5802546c 	.word	0x5802546c
 8003530:	58025480 	.word	0x58025480
 8003534:	58025494 	.word	0x58025494
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d07e      	beq.n	800363c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a80      	ldr	r2, [pc, #512]	; (8003744 <HAL_DMA_Init+0x630>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d021      	beq.n	800358c <HAL_DMA_Init+0x478>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a7e      	ldr	r2, [pc, #504]	; (8003748 <HAL_DMA_Init+0x634>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01c      	beq.n	800358c <HAL_DMA_Init+0x478>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7d      	ldr	r2, [pc, #500]	; (800374c <HAL_DMA_Init+0x638>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d017      	beq.n	800358c <HAL_DMA_Init+0x478>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a7b      	ldr	r2, [pc, #492]	; (8003750 <HAL_DMA_Init+0x63c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d012      	beq.n	800358c <HAL_DMA_Init+0x478>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7a      	ldr	r2, [pc, #488]	; (8003754 <HAL_DMA_Init+0x640>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00d      	beq.n	800358c <HAL_DMA_Init+0x478>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a78      	ldr	r2, [pc, #480]	; (8003758 <HAL_DMA_Init+0x644>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d008      	beq.n	800358c <HAL_DMA_Init+0x478>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a77      	ldr	r2, [pc, #476]	; (800375c <HAL_DMA_Init+0x648>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <HAL_DMA_Init+0x478>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a75      	ldr	r2, [pc, #468]	; (8003760 <HAL_DMA_Init+0x64c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4b6e      	ldr	r3, [pc, #440]	; (8003764 <HAL_DMA_Init+0x650>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d008      	beq.n	80035c8 <HAL_DMA_Init+0x4b4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d102      	bne.n	80035c4 <HAL_DMA_Init+0x4b0>
 80035be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035c2:	e002      	b.n	80035ca <HAL_DMA_Init+0x4b6>
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_DMA_Init+0x4b6>
 80035c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	4b56      	ldr	r3, [pc, #344]	; (8003768 <HAL_DMA_Init+0x654>)
 8003610:	4413      	add	r3, r2
 8003612:	4a56      	ldr	r2, [pc, #344]	; (800376c <HAL_DMA_Init+0x658>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f001 ffd5 	bl	80055d0 <DMA_CalcBaseAndBitshift>
 8003626:	4603      	mov	r3, r0
 8003628:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2201      	movs	r2, #1
 8003634:	409a      	lsls	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	e008      	b.n	800364e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2203      	movs	r2, #3
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0ee      	b.n	800382c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a47      	ldr	r2, [pc, #284]	; (8003770 <HAL_DMA_Init+0x65c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d072      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a45      	ldr	r2, [pc, #276]	; (8003774 <HAL_DMA_Init+0x660>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d06d      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a44      	ldr	r2, [pc, #272]	; (8003778 <HAL_DMA_Init+0x664>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d068      	beq.n	800373e <HAL_DMA_Init+0x62a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a42      	ldr	r2, [pc, #264]	; (800377c <HAL_DMA_Init+0x668>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d063      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a41      	ldr	r2, [pc, #260]	; (8003780 <HAL_DMA_Init+0x66c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d05e      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3f      	ldr	r2, [pc, #252]	; (8003784 <HAL_DMA_Init+0x670>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d059      	beq.n	800373e <HAL_DMA_Init+0x62a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <HAL_DMA_Init+0x674>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d054      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3c      	ldr	r2, [pc, #240]	; (800378c <HAL_DMA_Init+0x678>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04f      	beq.n	800373e <HAL_DMA_Init+0x62a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a3b      	ldr	r2, [pc, #236]	; (8003790 <HAL_DMA_Init+0x67c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04a      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a39      	ldr	r2, [pc, #228]	; (8003794 <HAL_DMA_Init+0x680>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d045      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a38      	ldr	r2, [pc, #224]	; (8003798 <HAL_DMA_Init+0x684>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d040      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a36      	ldr	r2, [pc, #216]	; (800379c <HAL_DMA_Init+0x688>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d03b      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <HAL_DMA_Init+0x68c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d036      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a33      	ldr	r2, [pc, #204]	; (80037a4 <HAL_DMA_Init+0x690>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a32      	ldr	r2, [pc, #200]	; (80037a8 <HAL_DMA_Init+0x694>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d02c      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a30      	ldr	r2, [pc, #192]	; (80037ac <HAL_DMA_Init+0x698>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d027      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a14      	ldr	r2, [pc, #80]	; (8003744 <HAL_DMA_Init+0x630>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_DMA_Init+0x62a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_DMA_Init+0x634>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01d      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a11      	ldr	r2, [pc, #68]	; (800374c <HAL_DMA_Init+0x638>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <HAL_DMA_Init+0x62a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_DMA_Init+0x63c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <HAL_DMA_Init+0x640>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_DMA_Init+0x644>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_DMA_Init+0x62a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <HAL_DMA_Init+0x648>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_DMA_Init+0x62a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_DMA_Init+0x64c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d138      	bne.n	80037b0 <HAL_DMA_Init+0x69c>
 800373e:	2301      	movs	r3, #1
 8003740:	e037      	b.n	80037b2 <HAL_DMA_Init+0x69e>
 8003742:	bf00      	nop
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494
 8003764:	fffe000f 	.word	0xfffe000f
 8003768:	a7fdabf8 	.word	0xa7fdabf8
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	40020010 	.word	0x40020010
 8003774:	40020028 	.word	0x40020028
 8003778:	40020040 	.word	0x40020040
 800377c:	40020058 	.word	0x40020058
 8003780:	40020070 	.word	0x40020070
 8003784:	40020088 	.word	0x40020088
 8003788:	400200a0 	.word	0x400200a0
 800378c:	400200b8 	.word	0x400200b8
 8003790:	40020410 	.word	0x40020410
 8003794:	40020428 	.word	0x40020428
 8003798:	40020440 	.word	0x40020440
 800379c:	40020458 	.word	0x40020458
 80037a0:	40020470 	.word	0x40020470
 80037a4:	40020488 	.word	0x40020488
 80037a8:	400204a0 	.word	0x400204a0
 80037ac:	400204b8 	.word	0x400204b8
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d032      	beq.n	800381c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f002 f838 	bl	800582c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b80      	cmp	r3, #128	; 0x80
 80037c2:	d102      	bne.n	80037ca <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037de:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_DMA_Init+0x6f6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d80c      	bhi.n	800380a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f002 f8b5 	bl	8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	e008      	b.n	800381c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e226      	b.n	8003c9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_DMA_Start_IT+0x2a>
 800385a:	2302      	movs	r3, #2
 800385c:	e21f      	b.n	8003c9e <HAL_DMA_Start_IT+0x46a>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	f040 820a 	bne.w	8003c88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a68      	ldr	r2, [pc, #416]	; (8003a28 <HAL_DMA_Start_IT+0x1f4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d04a      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a66      	ldr	r2, [pc, #408]	; (8003a2c <HAL_DMA_Start_IT+0x1f8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d045      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_DMA_Start_IT+0x1fc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d040      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a63      	ldr	r2, [pc, #396]	; (8003a34 <HAL_DMA_Start_IT+0x200>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d03b      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a62      	ldr	r2, [pc, #392]	; (8003a38 <HAL_DMA_Start_IT+0x204>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d036      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a60      	ldr	r2, [pc, #384]	; (8003a3c <HAL_DMA_Start_IT+0x208>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d031      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a5f      	ldr	r2, [pc, #380]	; (8003a40 <HAL_DMA_Start_IT+0x20c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d02c      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5d      	ldr	r2, [pc, #372]	; (8003a44 <HAL_DMA_Start_IT+0x210>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d027      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a5c      	ldr	r2, [pc, #368]	; (8003a48 <HAL_DMA_Start_IT+0x214>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5a      	ldr	r2, [pc, #360]	; (8003a4c <HAL_DMA_Start_IT+0x218>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a59      	ldr	r2, [pc, #356]	; (8003a50 <HAL_DMA_Start_IT+0x21c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a57      	ldr	r2, [pc, #348]	; (8003a54 <HAL_DMA_Start_IT+0x220>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a56      	ldr	r2, [pc, #344]	; (8003a58 <HAL_DMA_Start_IT+0x224>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a54      	ldr	r2, [pc, #336]	; (8003a5c <HAL_DMA_Start_IT+0x228>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a53      	ldr	r2, [pc, #332]	; (8003a60 <HAL_DMA_Start_IT+0x22c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_Start_IT+0xee>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a51      	ldr	r2, [pc, #324]	; (8003a64 <HAL_DMA_Start_IT+0x230>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <HAL_DMA_Start_IT+0x100>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e007      	b.n	8003944 <HAL_DMA_Start_IT+0x110>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 fc5c 	bl	8005208 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <HAL_DMA_Start_IT+0x1f4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d04a      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <HAL_DMA_Start_IT+0x1f8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d045      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a31      	ldr	r2, [pc, #196]	; (8003a30 <HAL_DMA_Start_IT+0x1fc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d040      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_DMA_Start_IT+0x200>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d03b      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2e      	ldr	r2, [pc, #184]	; (8003a38 <HAL_DMA_Start_IT+0x204>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d036      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <HAL_DMA_Start_IT+0x208>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d031      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <HAL_DMA_Start_IT+0x20c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d02c      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <HAL_DMA_Start_IT+0x210>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d027      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <HAL_DMA_Start_IT+0x214>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d022      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <HAL_DMA_Start_IT+0x218>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d01d      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <HAL_DMA_Start_IT+0x21c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d018      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <HAL_DMA_Start_IT+0x220>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d013      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a22      	ldr	r2, [pc, #136]	; (8003a58 <HAL_DMA_Start_IT+0x224>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_DMA_Start_IT+0x228>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d009      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <HAL_DMA_Start_IT+0x22c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <HAL_DMA_Start_IT+0x1bc>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <HAL_DMA_Start_IT+0x230>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Start_IT+0x1c0>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_DMA_Start_IT+0x1c2>
 80039f4:	2300      	movs	r3, #0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d036      	beq.n	8003a68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 021e 	bic.w	r2, r3, #30
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0216 	orr.w	r2, r2, #22
 8003a0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03e      	beq.n	8003a94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0208 	orr.w	r2, r2, #8
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e035      	b.n	8003a94 <HAL_DMA_Start_IT+0x260>
 8003a28:	40020010 	.word	0x40020010
 8003a2c:	40020028 	.word	0x40020028
 8003a30:	40020040 	.word	0x40020040
 8003a34:	40020058 	.word	0x40020058
 8003a38:	40020070 	.word	0x40020070
 8003a3c:	40020088 	.word	0x40020088
 8003a40:	400200a0 	.word	0x400200a0
 8003a44:	400200b8 	.word	0x400200b8
 8003a48:	40020410 	.word	0x40020410
 8003a4c:	40020428 	.word	0x40020428
 8003a50:	40020440 	.word	0x40020440
 8003a54:	40020458 	.word	0x40020458
 8003a58:	40020470 	.word	0x40020470
 8003a5c:	40020488 	.word	0x40020488
 8003a60:	400204a0 	.word	0x400204a0
 8003a64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 020e 	bic.w	r2, r3, #14
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 020a 	orr.w	r2, r2, #10
 8003a7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0204 	orr.w	r2, r2, #4
 8003a92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a83      	ldr	r2, [pc, #524]	; (8003ca8 <HAL_DMA_Start_IT+0x474>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d072      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a82      	ldr	r2, [pc, #520]	; (8003cac <HAL_DMA_Start_IT+0x478>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d06d      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a80      	ldr	r2, [pc, #512]	; (8003cb0 <HAL_DMA_Start_IT+0x47c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d068      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7f      	ldr	r2, [pc, #508]	; (8003cb4 <HAL_DMA_Start_IT+0x480>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d063      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a7d      	ldr	r2, [pc, #500]	; (8003cb8 <HAL_DMA_Start_IT+0x484>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d05e      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a7c      	ldr	r2, [pc, #496]	; (8003cbc <HAL_DMA_Start_IT+0x488>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d059      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a7a      	ldr	r2, [pc, #488]	; (8003cc0 <HAL_DMA_Start_IT+0x48c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d054      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a79      	ldr	r2, [pc, #484]	; (8003cc4 <HAL_DMA_Start_IT+0x490>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d04f      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a77      	ldr	r2, [pc, #476]	; (8003cc8 <HAL_DMA_Start_IT+0x494>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d04a      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a76      	ldr	r2, [pc, #472]	; (8003ccc <HAL_DMA_Start_IT+0x498>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d045      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a74      	ldr	r2, [pc, #464]	; (8003cd0 <HAL_DMA_Start_IT+0x49c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d040      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a73      	ldr	r2, [pc, #460]	; (8003cd4 <HAL_DMA_Start_IT+0x4a0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d03b      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a71      	ldr	r2, [pc, #452]	; (8003cd8 <HAL_DMA_Start_IT+0x4a4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d036      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a70      	ldr	r2, [pc, #448]	; (8003cdc <HAL_DMA_Start_IT+0x4a8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d031      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6e      	ldr	r2, [pc, #440]	; (8003ce0 <HAL_DMA_Start_IT+0x4ac>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02c      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a6d      	ldr	r2, [pc, #436]	; (8003ce4 <HAL_DMA_Start_IT+0x4b0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d027      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6b      	ldr	r2, [pc, #428]	; (8003ce8 <HAL_DMA_Start_IT+0x4b4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6a      	ldr	r2, [pc, #424]	; (8003cec <HAL_DMA_Start_IT+0x4b8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d01d      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a68      	ldr	r2, [pc, #416]	; (8003cf0 <HAL_DMA_Start_IT+0x4bc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a67      	ldr	r2, [pc, #412]	; (8003cf4 <HAL_DMA_Start_IT+0x4c0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a65      	ldr	r2, [pc, #404]	; (8003cf8 <HAL_DMA_Start_IT+0x4c4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a64      	ldr	r2, [pc, #400]	; (8003cfc <HAL_DMA_Start_IT+0x4c8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a62      	ldr	r2, [pc, #392]	; (8003d00 <HAL_DMA_Start_IT+0x4cc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_DMA_Start_IT+0x350>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a61      	ldr	r2, [pc, #388]	; (8003d04 <HAL_DMA_Start_IT+0x4d0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_DMA_Start_IT+0x354>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_DMA_Start_IT+0x356>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01a      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003baa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a37      	ldr	r2, [pc, #220]	; (8003ca8 <HAL_DMA_Start_IT+0x474>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d04a      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a36      	ldr	r2, [pc, #216]	; (8003cac <HAL_DMA_Start_IT+0x478>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d045      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <HAL_DMA_Start_IT+0x47c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d040      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a33      	ldr	r2, [pc, #204]	; (8003cb4 <HAL_DMA_Start_IT+0x480>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d03b      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a31      	ldr	r2, [pc, #196]	; (8003cb8 <HAL_DMA_Start_IT+0x484>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d036      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a30      	ldr	r2, [pc, #192]	; (8003cbc <HAL_DMA_Start_IT+0x488>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d031      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <HAL_DMA_Start_IT+0x48c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02c      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2d      	ldr	r2, [pc, #180]	; (8003cc4 <HAL_DMA_Start_IT+0x490>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d027      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2b      	ldr	r2, [pc, #172]	; (8003cc8 <HAL_DMA_Start_IT+0x494>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d022      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_DMA_Start_IT+0x498>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d01d      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <HAL_DMA_Start_IT+0x49c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d018      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <HAL_DMA_Start_IT+0x4a0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <HAL_DMA_Start_IT+0x4a4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00e      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <HAL_DMA_Start_IT+0x4a8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a22      	ldr	r2, [pc, #136]	; (8003ce0 <HAL_DMA_Start_IT+0x4ac>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_DMA_Start_IT+0x430>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <HAL_DMA_Start_IT+0x4b0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <HAL_DMA_Start_IT+0x442>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e012      	b.n	8003c9c <HAL_DMA_Start_IT+0x468>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e009      	b.n	8003c9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40020010 	.word	0x40020010
 8003cac:	40020028 	.word	0x40020028
 8003cb0:	40020040 	.word	0x40020040
 8003cb4:	40020058 	.word	0x40020058
 8003cb8:	40020070 	.word	0x40020070
 8003cbc:	40020088 	.word	0x40020088
 8003cc0:	400200a0 	.word	0x400200a0
 8003cc4:	400200b8 	.word	0x400200b8
 8003cc8:	40020410 	.word	0x40020410
 8003ccc:	40020428 	.word	0x40020428
 8003cd0:	40020440 	.word	0x40020440
 8003cd4:	40020458 	.word	0x40020458
 8003cd8:	40020470 	.word	0x40020470
 8003cdc:	40020488 	.word	0x40020488
 8003ce0:	400204a0 	.word	0x400204a0
 8003ce4:	400204b8 	.word	0x400204b8
 8003ce8:	58025408 	.word	0x58025408
 8003cec:	5802541c 	.word	0x5802541c
 8003cf0:	58025430 	.word	0x58025430
 8003cf4:	58025444 	.word	0x58025444
 8003cf8:	58025458 	.word	0x58025458
 8003cfc:	5802546c 	.word	0x5802546c
 8003d00:	58025480 	.word	0x58025480
 8003d04:	58025494 	.word	0x58025494

08003d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7fd fdb6 	bl	8001880 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e2dc      	b.n	80042da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d008      	beq.n	8003d3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e2cd      	b.n	80042da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a76      	ldr	r2, [pc, #472]	; (8003f1c <HAL_DMA_Abort+0x214>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04a      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a74      	ldr	r2, [pc, #464]	; (8003f20 <HAL_DMA_Abort+0x218>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d045      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a73      	ldr	r2, [pc, #460]	; (8003f24 <HAL_DMA_Abort+0x21c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d040      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a71      	ldr	r2, [pc, #452]	; (8003f28 <HAL_DMA_Abort+0x220>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d03b      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a70      	ldr	r2, [pc, #448]	; (8003f2c <HAL_DMA_Abort+0x224>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d036      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6e      	ldr	r2, [pc, #440]	; (8003f30 <HAL_DMA_Abort+0x228>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d031      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6d      	ldr	r2, [pc, #436]	; (8003f34 <HAL_DMA_Abort+0x22c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d02c      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6b      	ldr	r2, [pc, #428]	; (8003f38 <HAL_DMA_Abort+0x230>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d027      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6a      	ldr	r2, [pc, #424]	; (8003f3c <HAL_DMA_Abort+0x234>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a68      	ldr	r2, [pc, #416]	; (8003f40 <HAL_DMA_Abort+0x238>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01d      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a67      	ldr	r2, [pc, #412]	; (8003f44 <HAL_DMA_Abort+0x23c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_DMA_Abort+0x240>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a64      	ldr	r2, [pc, #400]	; (8003f4c <HAL_DMA_Abort+0x244>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a62      	ldr	r2, [pc, #392]	; (8003f50 <HAL_DMA_Abort+0x248>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a61      	ldr	r2, [pc, #388]	; (8003f54 <HAL_DMA_Abort+0x24c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_Abort+0xd6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a5f      	ldr	r2, [pc, #380]	; (8003f58 <HAL_DMA_Abort+0x250>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_DMA_Abort+0xda>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_DMA_Abort+0xdc>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 021e 	bic.w	r2, r2, #30
 8003df6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e00a      	b.n	8003e26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 020e 	bic.w	r2, r2, #14
 8003e1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3c      	ldr	r2, [pc, #240]	; (8003f1c <HAL_DMA_Abort+0x214>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d072      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3a      	ldr	r2, [pc, #232]	; (8003f20 <HAL_DMA_Abort+0x218>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d06d      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a39      	ldr	r2, [pc, #228]	; (8003f24 <HAL_DMA_Abort+0x21c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d068      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a37      	ldr	r2, [pc, #220]	; (8003f28 <HAL_DMA_Abort+0x220>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d063      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a36      	ldr	r2, [pc, #216]	; (8003f2c <HAL_DMA_Abort+0x224>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d05e      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a34      	ldr	r2, [pc, #208]	; (8003f30 <HAL_DMA_Abort+0x228>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d059      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a33      	ldr	r2, [pc, #204]	; (8003f34 <HAL_DMA_Abort+0x22c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d054      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a31      	ldr	r2, [pc, #196]	; (8003f38 <HAL_DMA_Abort+0x230>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d04f      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <HAL_DMA_Abort+0x234>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04a      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2e      	ldr	r2, [pc, #184]	; (8003f40 <HAL_DMA_Abort+0x238>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d045      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <HAL_DMA_Abort+0x23c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d040      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <HAL_DMA_Abort+0x240>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <HAL_DMA_Abort+0x244>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d036      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <HAL_DMA_Abort+0x248>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d031      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <HAL_DMA_Abort+0x24c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d02c      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a25      	ldr	r2, [pc, #148]	; (8003f58 <HAL_DMA_Abort+0x250>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d027      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <HAL_DMA_Abort+0x254>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <HAL_DMA_Abort+0x258>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <HAL_DMA_Abort+0x25c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <HAL_DMA_Abort+0x260>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <HAL_DMA_Abort+0x264>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_DMA_Abort+0x268>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <HAL_DMA_Abort+0x26c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_DMA_Abort+0x20e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <HAL_DMA_Abort+0x270>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d132      	bne.n	8003f7c <HAL_DMA_Abort+0x274>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e031      	b.n	8003f7e <HAL_DMA_Abort+0x276>
 8003f1a:	bf00      	nop
 8003f1c:	40020010 	.word	0x40020010
 8003f20:	40020028 	.word	0x40020028
 8003f24:	40020040 	.word	0x40020040
 8003f28:	40020058 	.word	0x40020058
 8003f2c:	40020070 	.word	0x40020070
 8003f30:	40020088 	.word	0x40020088
 8003f34:	400200a0 	.word	0x400200a0
 8003f38:	400200b8 	.word	0x400200b8
 8003f3c:	40020410 	.word	0x40020410
 8003f40:	40020428 	.word	0x40020428
 8003f44:	40020440 	.word	0x40020440
 8003f48:	40020458 	.word	0x40020458
 8003f4c:	40020470 	.word	0x40020470
 8003f50:	40020488 	.word	0x40020488
 8003f54:	400204a0 	.word	0x400204a0
 8003f58:	400204b8 	.word	0x400204b8
 8003f5c:	58025408 	.word	0x58025408
 8003f60:	5802541c 	.word	0x5802541c
 8003f64:	58025430 	.word	0x58025430
 8003f68:	58025444 	.word	0x58025444
 8003f6c:	58025458 	.word	0x58025458
 8003f70:	5802546c 	.word	0x5802546c
 8003f74:	58025480 	.word	0x58025480
 8003f78:	58025494 	.word	0x58025494
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6d      	ldr	r2, [pc, #436]	; (800414c <HAL_DMA_Abort+0x444>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d04a      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6b      	ldr	r2, [pc, #428]	; (8004150 <HAL_DMA_Abort+0x448>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d045      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6a      	ldr	r2, [pc, #424]	; (8004154 <HAL_DMA_Abort+0x44c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d040      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a68      	ldr	r2, [pc, #416]	; (8004158 <HAL_DMA_Abort+0x450>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d03b      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a67      	ldr	r2, [pc, #412]	; (800415c <HAL_DMA_Abort+0x454>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d036      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a65      	ldr	r2, [pc, #404]	; (8004160 <HAL_DMA_Abort+0x458>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a64      	ldr	r2, [pc, #400]	; (8004164 <HAL_DMA_Abort+0x45c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d02c      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a62      	ldr	r2, [pc, #392]	; (8004168 <HAL_DMA_Abort+0x460>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d027      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a61      	ldr	r2, [pc, #388]	; (800416c <HAL_DMA_Abort+0x464>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a5f      	ldr	r2, [pc, #380]	; (8004170 <HAL_DMA_Abort+0x468>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01d      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a5e      	ldr	r2, [pc, #376]	; (8004174 <HAL_DMA_Abort+0x46c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5c      	ldr	r2, [pc, #368]	; (8004178 <HAL_DMA_Abort+0x470>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5b      	ldr	r2, [pc, #364]	; (800417c <HAL_DMA_Abort+0x474>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a59      	ldr	r2, [pc, #356]	; (8004180 <HAL_DMA_Abort+0x478>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_DMA_Abort+0x47c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_DMA_Abort+0x32a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a56      	ldr	r2, [pc, #344]	; (8004188 <HAL_DMA_Abort+0x480>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <HAL_DMA_Abort+0x33c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e007      	b.n	8004054 <HAL_DMA_Abort+0x34c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004054:	e013      	b.n	800407e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004056:	f7fd fc13 	bl	8001880 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b05      	cmp	r3, #5
 8004062:	d90c      	bls.n	800407e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e12d      	b.n	80042da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2f      	ldr	r2, [pc, #188]	; (800414c <HAL_DMA_Abort+0x444>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d04a      	beq.n	800412a <HAL_DMA_Abort+0x422>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <HAL_DMA_Abort+0x448>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d045      	beq.n	800412a <HAL_DMA_Abort+0x422>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <HAL_DMA_Abort+0x44c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d040      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <HAL_DMA_Abort+0x450>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d03b      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_DMA_Abort+0x454>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d036      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <HAL_DMA_Abort+0x458>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d031      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a26      	ldr	r2, [pc, #152]	; (8004164 <HAL_DMA_Abort+0x45c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d02c      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <HAL_DMA_Abort+0x460>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d027      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_DMA_Abort+0x464>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d022      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a21      	ldr	r2, [pc, #132]	; (8004170 <HAL_DMA_Abort+0x468>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01d      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_DMA_Abort+0x46c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <HAL_DMA_Abort+0x422>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <HAL_DMA_Abort+0x470>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_DMA_Abort+0x422>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_DMA_Abort+0x474>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_DMA_Abort+0x422>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <HAL_DMA_Abort+0x478>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_DMA_Abort+0x422>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_DMA_Abort+0x47c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_DMA_Abort+0x422>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_DMA_Abort+0x480>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_DMA_Abort+0x426>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_DMA_Abort+0x428>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02b      	beq.n	800418c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	223f      	movs	r2, #63	; 0x3f
 8004144:	409a      	lsls	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	e02a      	b.n	80041a2 <HAL_DMA_Abort+0x49a>
 800414c:	40020010 	.word	0x40020010
 8004150:	40020028 	.word	0x40020028
 8004154:	40020040 	.word	0x40020040
 8004158:	40020058 	.word	0x40020058
 800415c:	40020070 	.word	0x40020070
 8004160:	40020088 	.word	0x40020088
 8004164:	400200a0 	.word	0x400200a0
 8004168:	400200b8 	.word	0x400200b8
 800416c:	40020410 	.word	0x40020410
 8004170:	40020428 	.word	0x40020428
 8004174:	40020440 	.word	0x40020440
 8004178:	40020458 	.word	0x40020458
 800417c:	40020470 	.word	0x40020470
 8004180:	40020488 	.word	0x40020488
 8004184:	400204a0 	.word	0x400204a0
 8004188:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	2201      	movs	r2, #1
 800419c:	409a      	lsls	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a4f      	ldr	r2, [pc, #316]	; (80042e4 <HAL_DMA_Abort+0x5dc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d072      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a4d      	ldr	r2, [pc, #308]	; (80042e8 <HAL_DMA_Abort+0x5e0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d06d      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a4c      	ldr	r2, [pc, #304]	; (80042ec <HAL_DMA_Abort+0x5e4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d068      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a4a      	ldr	r2, [pc, #296]	; (80042f0 <HAL_DMA_Abort+0x5e8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d063      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a49      	ldr	r2, [pc, #292]	; (80042f4 <HAL_DMA_Abort+0x5ec>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d05e      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a47      	ldr	r2, [pc, #284]	; (80042f8 <HAL_DMA_Abort+0x5f0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d059      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a46      	ldr	r2, [pc, #280]	; (80042fc <HAL_DMA_Abort+0x5f4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d054      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a44      	ldr	r2, [pc, #272]	; (8004300 <HAL_DMA_Abort+0x5f8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d04f      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a43      	ldr	r2, [pc, #268]	; (8004304 <HAL_DMA_Abort+0x5fc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d04a      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a41      	ldr	r2, [pc, #260]	; (8004308 <HAL_DMA_Abort+0x600>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d045      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a40      	ldr	r2, [pc, #256]	; (800430c <HAL_DMA_Abort+0x604>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a3e      	ldr	r2, [pc, #248]	; (8004310 <HAL_DMA_Abort+0x608>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d03b      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a3d      	ldr	r2, [pc, #244]	; (8004314 <HAL_DMA_Abort+0x60c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d036      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3b      	ldr	r2, [pc, #236]	; (8004318 <HAL_DMA_Abort+0x610>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d031      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3a      	ldr	r2, [pc, #232]	; (800431c <HAL_DMA_Abort+0x614>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d02c      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a38      	ldr	r2, [pc, #224]	; (8004320 <HAL_DMA_Abort+0x618>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d027      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a37      	ldr	r2, [pc, #220]	; (8004324 <HAL_DMA_Abort+0x61c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d022      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a35      	ldr	r2, [pc, #212]	; (8004328 <HAL_DMA_Abort+0x620>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a34      	ldr	r2, [pc, #208]	; (800432c <HAL_DMA_Abort+0x624>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a32      	ldr	r2, [pc, #200]	; (8004330 <HAL_DMA_Abort+0x628>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a31      	ldr	r2, [pc, #196]	; (8004334 <HAL_DMA_Abort+0x62c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2f      	ldr	r2, [pc, #188]	; (8004338 <HAL_DMA_Abort+0x630>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2e      	ldr	r2, [pc, #184]	; (800433c <HAL_DMA_Abort+0x634>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_DMA_Abort+0x58a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <HAL_DMA_Abort+0x638>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_DMA_Abort+0x58e>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_DMA_Abort+0x590>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40020010 	.word	0x40020010
 80042e8:	40020028 	.word	0x40020028
 80042ec:	40020040 	.word	0x40020040
 80042f0:	40020058 	.word	0x40020058
 80042f4:	40020070 	.word	0x40020070
 80042f8:	40020088 	.word	0x40020088
 80042fc:	400200a0 	.word	0x400200a0
 8004300:	400200b8 	.word	0x400200b8
 8004304:	40020410 	.word	0x40020410
 8004308:	40020428 	.word	0x40020428
 800430c:	40020440 	.word	0x40020440
 8004310:	40020458 	.word	0x40020458
 8004314:	40020470 	.word	0x40020470
 8004318:	40020488 	.word	0x40020488
 800431c:	400204a0 	.word	0x400204a0
 8004320:	400204b8 	.word	0x400204b8
 8004324:	58025408 	.word	0x58025408
 8004328:	5802541c 	.word	0x5802541c
 800432c:	58025430 	.word	0x58025430
 8004330:	58025444 	.word	0x58025444
 8004334:	58025458 	.word	0x58025458
 8004338:	5802546c 	.word	0x5802546c
 800433c:	58025480 	.word	0x58025480
 8004340:	58025494 	.word	0x58025494

08004344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004350:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <HAL_DMA_IRQHandler+0x1ac>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a67      	ldr	r2, [pc, #412]	; (80044f4 <HAL_DMA_IRQHandler+0x1b0>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a9b      	lsrs	r3, r3, #10
 800435c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5f      	ldr	r2, [pc, #380]	; (80044f8 <HAL_DMA_IRQHandler+0x1b4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d04a      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5d      	ldr	r2, [pc, #372]	; (80044fc <HAL_DMA_IRQHandler+0x1b8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d045      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5c      	ldr	r2, [pc, #368]	; (8004500 <HAL_DMA_IRQHandler+0x1bc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d040      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5a      	ldr	r2, [pc, #360]	; (8004504 <HAL_DMA_IRQHandler+0x1c0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d03b      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a59      	ldr	r2, [pc, #356]	; (8004508 <HAL_DMA_IRQHandler+0x1c4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d036      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a57      	ldr	r2, [pc, #348]	; (800450c <HAL_DMA_IRQHandler+0x1c8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d031      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a56      	ldr	r2, [pc, #344]	; (8004510 <HAL_DMA_IRQHandler+0x1cc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d02c      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a54      	ldr	r2, [pc, #336]	; (8004514 <HAL_DMA_IRQHandler+0x1d0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d027      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a53      	ldr	r2, [pc, #332]	; (8004518 <HAL_DMA_IRQHandler+0x1d4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a51      	ldr	r2, [pc, #324]	; (800451c <HAL_DMA_IRQHandler+0x1d8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a50      	ldr	r2, [pc, #320]	; (8004520 <HAL_DMA_IRQHandler+0x1dc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a4e      	ldr	r2, [pc, #312]	; (8004524 <HAL_DMA_IRQHandler+0x1e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4d      	ldr	r2, [pc, #308]	; (8004528 <HAL_DMA_IRQHandler+0x1e4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_DMA_IRQHandler+0x1e8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <HAL_DMA_IRQHandler+0x1ec>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a48      	ldr	r2, [pc, #288]	; (8004534 <HAL_DMA_IRQHandler+0x1f0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_DMA_IRQHandler+0xd6>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_DMA_IRQHandler+0xd8>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 842b 	beq.w	8004c78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2208      	movs	r2, #8
 800442c:	409a      	lsls	r2, r3
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a2 	beq.w	800457c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_DMA_IRQHandler+0x1b4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d04a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <HAL_DMA_IRQHandler+0x1b8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d045      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2b      	ldr	r2, [pc, #172]	; (8004500 <HAL_DMA_IRQHandler+0x1bc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d040      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2a      	ldr	r2, [pc, #168]	; (8004504 <HAL_DMA_IRQHandler+0x1c0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d03b      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <HAL_DMA_IRQHandler+0x1c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d036      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <HAL_DMA_IRQHandler+0x1c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d031      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HAL_DMA_IRQHandler+0x1cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02c      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a24      	ldr	r2, [pc, #144]	; (8004514 <HAL_DMA_IRQHandler+0x1d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d027      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_DMA_IRQHandler+0x1d4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_DMA_IRQHandler+0x1d8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01d      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_DMA_IRQHandler+0x1dc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_DMA_IRQHandler+0x1e0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_DMA_IRQHandler+0x1e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_DMA_IRQHandler+0x1e8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_DMA_IRQHandler+0x1ec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_DMA_IRQHandler+0x1f0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d12f      	bne.n	8004538 <HAL_DMA_IRQHandler+0x1f4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e02e      	b.n	800454c <HAL_DMA_IRQHandler+0x208>
 80044ee:	bf00      	nop
 80044f0:	24000004 	.word	0x24000004
 80044f4:	1b4e81b5 	.word	0x1b4e81b5
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2208      	movs	r2, #8
 800456a:	409a      	lsls	r2, r3
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d06e      	beq.n	8004670 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <HAL_DMA_IRQHandler+0x3f8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d04a      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a67      	ldr	r2, [pc, #412]	; (8004740 <HAL_DMA_IRQHandler+0x3fc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d045      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a66      	ldr	r2, [pc, #408]	; (8004744 <HAL_DMA_IRQHandler+0x400>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d040      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a64      	ldr	r2, [pc, #400]	; (8004748 <HAL_DMA_IRQHandler+0x404>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d03b      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a63      	ldr	r2, [pc, #396]	; (800474c <HAL_DMA_IRQHandler+0x408>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d036      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a61      	ldr	r2, [pc, #388]	; (8004750 <HAL_DMA_IRQHandler+0x40c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d031      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a60      	ldr	r2, [pc, #384]	; (8004754 <HAL_DMA_IRQHandler+0x410>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d02c      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5e      	ldr	r2, [pc, #376]	; (8004758 <HAL_DMA_IRQHandler+0x414>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d027      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5d      	ldr	r2, [pc, #372]	; (800475c <HAL_DMA_IRQHandler+0x418>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5b      	ldr	r2, [pc, #364]	; (8004760 <HAL_DMA_IRQHandler+0x41c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5a      	ldr	r2, [pc, #360]	; (8004764 <HAL_DMA_IRQHandler+0x420>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a58      	ldr	r2, [pc, #352]	; (8004768 <HAL_DMA_IRQHandler+0x424>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a57      	ldr	r2, [pc, #348]	; (800476c <HAL_DMA_IRQHandler+0x428>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a55      	ldr	r2, [pc, #340]	; (8004770 <HAL_DMA_IRQHandler+0x42c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a54      	ldr	r2, [pc, #336]	; (8004774 <HAL_DMA_IRQHandler+0x430>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_DMA_IRQHandler+0x434>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10a      	bne.n	8004648 <HAL_DMA_IRQHandler+0x304>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e003      	b.n	8004650 <HAL_DMA_IRQHandler+0x30c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f043 0202 	orr.w	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2204      	movs	r2, #4
 800467a:	409a      	lsls	r2, r3
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 808f 	beq.w	80047a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2c      	ldr	r2, [pc, #176]	; (800473c <HAL_DMA_IRQHandler+0x3f8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04a      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <HAL_DMA_IRQHandler+0x3fc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d045      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a29      	ldr	r2, [pc, #164]	; (8004744 <HAL_DMA_IRQHandler+0x400>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a27      	ldr	r2, [pc, #156]	; (8004748 <HAL_DMA_IRQHandler+0x404>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d03b      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_DMA_IRQHandler+0x408>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d036      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <HAL_DMA_IRQHandler+0x40c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d031      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a23      	ldr	r2, [pc, #140]	; (8004754 <HAL_DMA_IRQHandler+0x410>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a21      	ldr	r2, [pc, #132]	; (8004758 <HAL_DMA_IRQHandler+0x414>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a20      	ldr	r2, [pc, #128]	; (800475c <HAL_DMA_IRQHandler+0x418>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_DMA_IRQHandler+0x41c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_DMA_IRQHandler+0x420>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_DMA_IRQHandler+0x424>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_DMA_IRQHandler+0x428>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_DMA_IRQHandler+0x42c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a17      	ldr	r2, [pc, #92]	; (8004774 <HAL_DMA_IRQHandler+0x430>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_DMA_IRQHandler+0x434>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d12a      	bne.n	800477c <HAL_DMA_IRQHandler+0x438>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e023      	b.n	8004784 <HAL_DMA_IRQHandler+0x440>
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2204      	movs	r2, #4
 8004792:	409a      	lsls	r2, r3
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f043 0204 	orr.w	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2210      	movs	r2, #16
 80047ae:	409a      	lsls	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a6 	beq.w	8004906 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a85      	ldr	r2, [pc, #532]	; (80049d4 <HAL_DMA_IRQHandler+0x690>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d04a      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a83      	ldr	r2, [pc, #524]	; (80049d8 <HAL_DMA_IRQHandler+0x694>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d045      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a82      	ldr	r2, [pc, #520]	; (80049dc <HAL_DMA_IRQHandler+0x698>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d040      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a80      	ldr	r2, [pc, #512]	; (80049e0 <HAL_DMA_IRQHandler+0x69c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d03b      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7f      	ldr	r2, [pc, #508]	; (80049e4 <HAL_DMA_IRQHandler+0x6a0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d036      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7d      	ldr	r2, [pc, #500]	; (80049e8 <HAL_DMA_IRQHandler+0x6a4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d031      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7c      	ldr	r2, [pc, #496]	; (80049ec <HAL_DMA_IRQHandler+0x6a8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d02c      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7a      	ldr	r2, [pc, #488]	; (80049f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d027      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d022      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a77      	ldr	r2, [pc, #476]	; (80049f8 <HAL_DMA_IRQHandler+0x6b4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01d      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a76      	ldr	r2, [pc, #472]	; (80049fc <HAL_DMA_IRQHandler+0x6b8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a74      	ldr	r2, [pc, #464]	; (8004a00 <HAL_DMA_IRQHandler+0x6bc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a73      	ldr	r2, [pc, #460]	; (8004a04 <HAL_DMA_IRQHandler+0x6c0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a71      	ldr	r2, [pc, #452]	; (8004a08 <HAL_DMA_IRQHandler+0x6c4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a70      	ldr	r2, [pc, #448]	; (8004a0c <HAL_DMA_IRQHandler+0x6c8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6e      	ldr	r2, [pc, #440]	; (8004a10 <HAL_DMA_IRQHandler+0x6cc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10a      	bne.n	8004870 <HAL_DMA_IRQHandler+0x52c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e009      	b.n	8004884 <HAL_DMA_IRQHandler+0x540>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03e      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2210      	movs	r2, #16
 8004892:	409a      	lsls	r2, r3
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d018      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d024      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
 80048c4:	e01f      	b.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
 80048d6:	e016      	b.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2220      	movs	r2, #32
 8004910:	409a      	lsls	r2, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8110 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <HAL_DMA_IRQHandler+0x690>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <HAL_DMA_IRQHandler+0x694>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d045      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_DMA_IRQHandler+0x698>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d040      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_DMA_IRQHandler+0x69c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d03b      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <HAL_DMA_IRQHandler+0x6a0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d036      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <HAL_DMA_IRQHandler+0x6a4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_DMA_IRQHandler+0x6a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02c      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d027      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <HAL_DMA_IRQHandler+0x6b4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <HAL_DMA_IRQHandler+0x6b8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_DMA_IRQHandler+0x6bc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <HAL_DMA_IRQHandler+0x6c0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <HAL_DMA_IRQHandler+0x6c4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_DMA_IRQHandler+0x6c8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <HAL_DMA_IRQHandler+0x6cc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d12b      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x6d0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e02a      	b.n	8004a28 <HAL_DMA_IRQHandler+0x6e4>
 80049d2:	bf00      	nop
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8087 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2220      	movs	r2, #32
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d139      	bne.n	8004abe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0216 	bic.w	r2, r2, #22
 8004a58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <HAL_DMA_IRQHandler+0x736>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0208 	bic.w	r2, r2, #8
 8004a88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	223f      	movs	r2, #63	; 0x3f
 8004a94:	409a      	lsls	r2, r3
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8382 	beq.w	80051b8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
          }
          return;
 8004abc:	e37c      	b.n	80051b8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02c      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
 8004aea:	e027      	b.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d023      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e01e      	b.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0210 	bic.w	r2, r2, #16
 8004b1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 833e 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8088 	beq.w	8004c64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2204      	movs	r2, #4
 8004b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a89      	ldr	r2, [pc, #548]	; (8004d88 <HAL_DMA_IRQHandler+0xa44>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d04a      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a88      	ldr	r2, [pc, #544]	; (8004d8c <HAL_DMA_IRQHandler+0xa48>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d045      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a86      	ldr	r2, [pc, #536]	; (8004d90 <HAL_DMA_IRQHandler+0xa4c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d040      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a85      	ldr	r2, [pc, #532]	; (8004d94 <HAL_DMA_IRQHandler+0xa50>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d03b      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a83      	ldr	r2, [pc, #524]	; (8004d98 <HAL_DMA_IRQHandler+0xa54>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d036      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a82      	ldr	r2, [pc, #520]	; (8004d9c <HAL_DMA_IRQHandler+0xa58>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d031      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a80      	ldr	r2, [pc, #512]	; (8004da0 <HAL_DMA_IRQHandler+0xa5c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02c      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a7f      	ldr	r2, [pc, #508]	; (8004da4 <HAL_DMA_IRQHandler+0xa60>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d027      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7d      	ldr	r2, [pc, #500]	; (8004da8 <HAL_DMA_IRQHandler+0xa64>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a7c      	ldr	r2, [pc, #496]	; (8004dac <HAL_DMA_IRQHandler+0xa68>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a7a      	ldr	r2, [pc, #488]	; (8004db0 <HAL_DMA_IRQHandler+0xa6c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a79      	ldr	r2, [pc, #484]	; (8004db4 <HAL_DMA_IRQHandler+0xa70>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a77      	ldr	r2, [pc, #476]	; (8004db8 <HAL_DMA_IRQHandler+0xa74>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a76      	ldr	r2, [pc, #472]	; (8004dbc <HAL_DMA_IRQHandler+0xa78>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a74      	ldr	r2, [pc, #464]	; (8004dc0 <HAL_DMA_IRQHandler+0xa7c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a73      	ldr	r2, [pc, #460]	; (8004dc4 <HAL_DMA_IRQHandler+0xa80>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <HAL_DMA_IRQHandler+0x8ca>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e007      	b.n	8004c1e <HAL_DMA_IRQHandler+0x8da>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d307      	bcc.n	8004c3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f2      	bne.n	8004c1e <HAL_DMA_IRQHandler+0x8da>
 8004c38:	e000      	b.n	8004c3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c52:	e003      	b.n	8004c5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 82aa 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	e2a4      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_DMA_IRQHandler+0xa84>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d04a      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a51      	ldr	r2, [pc, #324]	; (8004dcc <HAL_DMA_IRQHandler+0xa88>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d045      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a4f      	ldr	r2, [pc, #316]	; (8004dd0 <HAL_DMA_IRQHandler+0xa8c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d040      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a4e      	ldr	r2, [pc, #312]	; (8004dd4 <HAL_DMA_IRQHandler+0xa90>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d03b      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a4c      	ldr	r2, [pc, #304]	; (8004dd8 <HAL_DMA_IRQHandler+0xa94>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d036      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4b      	ldr	r2, [pc, #300]	; (8004ddc <HAL_DMA_IRQHandler+0xa98>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d031      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a49      	ldr	r2, [pc, #292]	; (8004de0 <HAL_DMA_IRQHandler+0xa9c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02c      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a48      	ldr	r2, [pc, #288]	; (8004de4 <HAL_DMA_IRQHandler+0xaa0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d027      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a46      	ldr	r2, [pc, #280]	; (8004de8 <HAL_DMA_IRQHandler+0xaa4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a45      	ldr	r2, [pc, #276]	; (8004dec <HAL_DMA_IRQHandler+0xaa8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d01d      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a43      	ldr	r2, [pc, #268]	; (8004df0 <HAL_DMA_IRQHandler+0xaac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a42      	ldr	r2, [pc, #264]	; (8004df4 <HAL_DMA_IRQHandler+0xab0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a40      	ldr	r2, [pc, #256]	; (8004df8 <HAL_DMA_IRQHandler+0xab4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a3f      	ldr	r2, [pc, #252]	; (8004dfc <HAL_DMA_IRQHandler+0xab8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a3d      	ldr	r2, [pc, #244]	; (8004e00 <HAL_DMA_IRQHandler+0xabc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x9d4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <HAL_DMA_IRQHandler+0xac0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d101      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x9d8>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_DMA_IRQHandler+0x9da>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 824f 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2204      	movs	r2, #4
 8004d36:	409a      	lsls	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80dd 	beq.w	8004efc <HAL_DMA_IRQHandler+0xbb8>
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80d7 	beq.w	8004efc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	2204      	movs	r2, #4
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d059      	beq.n	8004e1c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d14a      	bne.n	8004e08 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8220 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d84:	e21a      	b.n	80051bc <HAL_DMA_IRQHandler+0xe78>
 8004d86:	bf00      	nop
 8004d88:	40020010 	.word	0x40020010
 8004d8c:	40020028 	.word	0x40020028
 8004d90:	40020040 	.word	0x40020040
 8004d94:	40020058 	.word	0x40020058
 8004d98:	40020070 	.word	0x40020070
 8004d9c:	40020088 	.word	0x40020088
 8004da0:	400200a0 	.word	0x400200a0
 8004da4:	400200b8 	.word	0x400200b8
 8004da8:	40020410 	.word	0x40020410
 8004dac:	40020428 	.word	0x40020428
 8004db0:	40020440 	.word	0x40020440
 8004db4:	40020458 	.word	0x40020458
 8004db8:	40020470 	.word	0x40020470
 8004dbc:	40020488 	.word	0x40020488
 8004dc0:	400204a0 	.word	0x400204a0
 8004dc4:	400204b8 	.word	0x400204b8
 8004dc8:	48022c08 	.word	0x48022c08
 8004dcc:	48022c1c 	.word	0x48022c1c
 8004dd0:	48022c30 	.word	0x48022c30
 8004dd4:	48022c44 	.word	0x48022c44
 8004dd8:	48022c58 	.word	0x48022c58
 8004ddc:	48022c6c 	.word	0x48022c6c
 8004de0:	48022c80 	.word	0x48022c80
 8004de4:	48022c94 	.word	0x48022c94
 8004de8:	58025408 	.word	0x58025408
 8004dec:	5802541c 	.word	0x5802541c
 8004df0:	58025430 	.word	0x58025430
 8004df4:	58025444 	.word	0x58025444
 8004df8:	58025458 	.word	0x58025458
 8004dfc:	5802546c 	.word	0x5802546c
 8004e00:	58025480 	.word	0x58025480
 8004e04:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 81d5 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e1a:	e1cf      	b.n	80051bc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d160      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a7f      	ldr	r2, [pc, #508]	; (8005028 <HAL_DMA_IRQHandler+0xce4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d04a      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a7d      	ldr	r2, [pc, #500]	; (800502c <HAL_DMA_IRQHandler+0xce8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d045      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a7c      	ldr	r2, [pc, #496]	; (8005030 <HAL_DMA_IRQHandler+0xcec>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d040      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a7a      	ldr	r2, [pc, #488]	; (8005034 <HAL_DMA_IRQHandler+0xcf0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d03b      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a79      	ldr	r2, [pc, #484]	; (8005038 <HAL_DMA_IRQHandler+0xcf4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d036      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a77      	ldr	r2, [pc, #476]	; (800503c <HAL_DMA_IRQHandler+0xcf8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d031      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a76      	ldr	r2, [pc, #472]	; (8005040 <HAL_DMA_IRQHandler+0xcfc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d02c      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a74      	ldr	r2, [pc, #464]	; (8005044 <HAL_DMA_IRQHandler+0xd00>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d027      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a73      	ldr	r2, [pc, #460]	; (8005048 <HAL_DMA_IRQHandler+0xd04>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a71      	ldr	r2, [pc, #452]	; (800504c <HAL_DMA_IRQHandler+0xd08>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01d      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a70      	ldr	r2, [pc, #448]	; (8005050 <HAL_DMA_IRQHandler+0xd0c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d018      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a6e      	ldr	r2, [pc, #440]	; (8005054 <HAL_DMA_IRQHandler+0xd10>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6d      	ldr	r2, [pc, #436]	; (8005058 <HAL_DMA_IRQHandler+0xd14>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a6b      	ldr	r2, [pc, #428]	; (800505c <HAL_DMA_IRQHandler+0xd18>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d009      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a6a      	ldr	r2, [pc, #424]	; (8005060 <HAL_DMA_IRQHandler+0xd1c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb82>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a68      	ldr	r2, [pc, #416]	; (8005064 <HAL_DMA_IRQHandler+0xd20>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d108      	bne.n	8004ed8 <HAL_DMA_IRQHandler+0xb94>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0208 	bic.w	r2, r2, #8
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e007      	b.n	8004ee8 <HAL_DMA_IRQHandler+0xba4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0204 	bic.w	r2, r2, #4
 8004ee6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8165 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004efa:	e15f      	b.n	80051bc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2202      	movs	r2, #2
 8004f06:	409a      	lsls	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80c5 	beq.w	800509c <HAL_DMA_IRQHandler+0xd58>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80bf 	beq.w	800509c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2202      	movs	r2, #2
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d018      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 813a 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f54:	e134      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8130 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f68:	e12a      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 8089 	bne.w	8005088 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2b      	ldr	r2, [pc, #172]	; (8005028 <HAL_DMA_IRQHandler+0xce4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d04a      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <HAL_DMA_IRQHandler+0xce8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d045      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a28      	ldr	r2, [pc, #160]	; (8005030 <HAL_DMA_IRQHandler+0xcec>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d040      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a26      	ldr	r2, [pc, #152]	; (8005034 <HAL_DMA_IRQHandler+0xcf0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d03b      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a25      	ldr	r2, [pc, #148]	; (8005038 <HAL_DMA_IRQHandler+0xcf4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d036      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a23      	ldr	r2, [pc, #140]	; (800503c <HAL_DMA_IRQHandler+0xcf8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d031      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a22      	ldr	r2, [pc, #136]	; (8005040 <HAL_DMA_IRQHandler+0xcfc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d02c      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <HAL_DMA_IRQHandler+0xd00>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d027      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_DMA_IRQHandler+0xd04>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <HAL_DMA_IRQHandler+0xd08>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01d      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <HAL_DMA_IRQHandler+0xd0c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <HAL_DMA_IRQHandler+0xd10>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_DMA_IRQHandler+0xd14>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a17      	ldr	r2, [pc, #92]	; (800505c <HAL_DMA_IRQHandler+0xd18>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a16      	ldr	r2, [pc, #88]	; (8005060 <HAL_DMA_IRQHandler+0xd1c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_DMA_IRQHandler+0xcd2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <HAL_DMA_IRQHandler+0xd20>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d128      	bne.n	8005068 <HAL_DMA_IRQHandler+0xd24>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0214 	bic.w	r2, r2, #20
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e027      	b.n	8005078 <HAL_DMA_IRQHandler+0xd34>
 8005028:	40020010 	.word	0x40020010
 800502c:	40020028 	.word	0x40020028
 8005030:	40020040 	.word	0x40020040
 8005034:	40020058 	.word	0x40020058
 8005038:	40020070 	.word	0x40020070
 800503c:	40020088 	.word	0x40020088
 8005040:	400200a0 	.word	0x400200a0
 8005044:	400200b8 	.word	0x400200b8
 8005048:	40020410 	.word	0x40020410
 800504c:	40020428 	.word	0x40020428
 8005050:	40020440 	.word	0x40020440
 8005054:	40020458 	.word	0x40020458
 8005058:	40020470 	.word	0x40020470
 800505c:	40020488 	.word	0x40020488
 8005060:	400204a0 	.word	0x400204a0
 8005064:	400204b8 	.word	0x400204b8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 020a 	bic.w	r2, r2, #10
 8005076:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8097 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800509a:	e091      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2208      	movs	r2, #8
 80050a6:	409a      	lsls	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8088 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe7e>
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8082 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a41      	ldr	r2, [pc, #260]	; (80051c8 <HAL_DMA_IRQHandler+0xe84>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3f      	ldr	r2, [pc, #252]	; (80051cc <HAL_DMA_IRQHandler+0xe88>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <HAL_DMA_IRQHandler+0xe8c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <HAL_DMA_IRQHandler+0xe90>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3b      	ldr	r2, [pc, #236]	; (80051d8 <HAL_DMA_IRQHandler+0xe94>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a39      	ldr	r2, [pc, #228]	; (80051dc <HAL_DMA_IRQHandler+0xe98>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a38      	ldr	r2, [pc, #224]	; (80051e0 <HAL_DMA_IRQHandler+0xe9c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a36      	ldr	r2, [pc, #216]	; (80051e4 <HAL_DMA_IRQHandler+0xea0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a35      	ldr	r2, [pc, #212]	; (80051e8 <HAL_DMA_IRQHandler+0xea4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a33      	ldr	r2, [pc, #204]	; (80051ec <HAL_DMA_IRQHandler+0xea8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <HAL_DMA_IRQHandler+0xeac>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <HAL_DMA_IRQHandler+0xeb0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <HAL_DMA_IRQHandler+0xeb4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <HAL_DMA_IRQHandler+0xeb8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <HAL_DMA_IRQHandler+0xebc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_IRQHandler+0xe1a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <HAL_DMA_IRQHandler+0xec0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <HAL_DMA_IRQHandler+0xe2c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 021c 	bic.w	r2, r2, #28
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e007      	b.n	8005180 <HAL_DMA_IRQHandler+0xe3c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 020e 	bic.w	r2, r2, #14
 800517e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	e004      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80051b8:	bf00      	nop
 80051ba:	e002      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40020010 	.word	0x40020010
 80051cc:	40020028 	.word	0x40020028
 80051d0:	40020040 	.word	0x40020040
 80051d4:	40020058 	.word	0x40020058
 80051d8:	40020070 	.word	0x40020070
 80051dc:	40020088 	.word	0x40020088
 80051e0:	400200a0 	.word	0x400200a0
 80051e4:	400200b8 	.word	0x400200b8
 80051e8:	40020410 	.word	0x40020410
 80051ec:	40020428 	.word	0x40020428
 80051f0:	40020440 	.word	0x40020440
 80051f4:	40020458 	.word	0x40020458
 80051f8:	40020470 	.word	0x40020470
 80051fc:	40020488 	.word	0x40020488
 8005200:	400204a0 	.word	0x400204a0
 8005204:	400204b8 	.word	0x400204b8

08005208 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7f      	ldr	r2, [pc, #508]	; (8005424 <DMA_SetConfig+0x21c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d072      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a7d      	ldr	r2, [pc, #500]	; (8005428 <DMA_SetConfig+0x220>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d06d      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a7c      	ldr	r2, [pc, #496]	; (800542c <DMA_SetConfig+0x224>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d068      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a7a      	ldr	r2, [pc, #488]	; (8005430 <DMA_SetConfig+0x228>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d063      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a79      	ldr	r2, [pc, #484]	; (8005434 <DMA_SetConfig+0x22c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d05e      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a77      	ldr	r2, [pc, #476]	; (8005438 <DMA_SetConfig+0x230>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d059      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a76      	ldr	r2, [pc, #472]	; (800543c <DMA_SetConfig+0x234>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d054      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a74      	ldr	r2, [pc, #464]	; (8005440 <DMA_SetConfig+0x238>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d04f      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a73      	ldr	r2, [pc, #460]	; (8005444 <DMA_SetConfig+0x23c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d04a      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a71      	ldr	r2, [pc, #452]	; (8005448 <DMA_SetConfig+0x240>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d045      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a70      	ldr	r2, [pc, #448]	; (800544c <DMA_SetConfig+0x244>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d040      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a6e      	ldr	r2, [pc, #440]	; (8005450 <DMA_SetConfig+0x248>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d03b      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a6d      	ldr	r2, [pc, #436]	; (8005454 <DMA_SetConfig+0x24c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d036      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a6b      	ldr	r2, [pc, #428]	; (8005458 <DMA_SetConfig+0x250>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d031      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6a      	ldr	r2, [pc, #424]	; (800545c <DMA_SetConfig+0x254>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d02c      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a68      	ldr	r2, [pc, #416]	; (8005460 <DMA_SetConfig+0x258>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d027      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a67      	ldr	r2, [pc, #412]	; (8005464 <DMA_SetConfig+0x25c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a65      	ldr	r2, [pc, #404]	; (8005468 <DMA_SetConfig+0x260>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01d      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a64      	ldr	r2, [pc, #400]	; (800546c <DMA_SetConfig+0x264>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d018      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a62      	ldr	r2, [pc, #392]	; (8005470 <DMA_SetConfig+0x268>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a61      	ldr	r2, [pc, #388]	; (8005474 <DMA_SetConfig+0x26c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a5f      	ldr	r2, [pc, #380]	; (8005478 <DMA_SetConfig+0x270>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a5e      	ldr	r2, [pc, #376]	; (800547c <DMA_SetConfig+0x274>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a5c      	ldr	r2, [pc, #368]	; (8005480 <DMA_SetConfig+0x278>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <DMA_SetConfig+0x10e>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <DMA_SetConfig+0x110>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005324:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005336:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a39      	ldr	r2, [pc, #228]	; (8005424 <DMA_SetConfig+0x21c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a38      	ldr	r2, [pc, #224]	; (8005428 <DMA_SetConfig+0x220>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a36      	ldr	r2, [pc, #216]	; (800542c <DMA_SetConfig+0x224>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a35      	ldr	r2, [pc, #212]	; (8005430 <DMA_SetConfig+0x228>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a33      	ldr	r2, [pc, #204]	; (8005434 <DMA_SetConfig+0x22c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a32      	ldr	r2, [pc, #200]	; (8005438 <DMA_SetConfig+0x230>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a30      	ldr	r2, [pc, #192]	; (800543c <DMA_SetConfig+0x234>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <DMA_SetConfig+0x238>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <DMA_SetConfig+0x23c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2c      	ldr	r2, [pc, #176]	; (8005448 <DMA_SetConfig+0x240>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2a      	ldr	r2, [pc, #168]	; (800544c <DMA_SetConfig+0x244>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a29      	ldr	r2, [pc, #164]	; (8005450 <DMA_SetConfig+0x248>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a27      	ldr	r2, [pc, #156]	; (8005454 <DMA_SetConfig+0x24c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a26      	ldr	r2, [pc, #152]	; (8005458 <DMA_SetConfig+0x250>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a24      	ldr	r2, [pc, #144]	; (800545c <DMA_SetConfig+0x254>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a23      	ldr	r2, [pc, #140]	; (8005460 <DMA_SetConfig+0x258>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <DMA_SetConfig+0x1d4>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <DMA_SetConfig+0x1d6>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d059      	beq.n	8005496 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	223f      	movs	r2, #63	; 0x3f
 80053ec:	409a      	lsls	r2, r3
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005400:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d138      	bne.n	8005484 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005422:	e0ae      	b.n	8005582 <DMA_SetConfig+0x37a>
 8005424:	40020010 	.word	0x40020010
 8005428:	40020028 	.word	0x40020028
 800542c:	40020040 	.word	0x40020040
 8005430:	40020058 	.word	0x40020058
 8005434:	40020070 	.word	0x40020070
 8005438:	40020088 	.word	0x40020088
 800543c:	400200a0 	.word	0x400200a0
 8005440:	400200b8 	.word	0x400200b8
 8005444:	40020410 	.word	0x40020410
 8005448:	40020428 	.word	0x40020428
 800544c:	40020440 	.word	0x40020440
 8005450:	40020458 	.word	0x40020458
 8005454:	40020470 	.word	0x40020470
 8005458:	40020488 	.word	0x40020488
 800545c:	400204a0 	.word	0x400204a0
 8005460:	400204b8 	.word	0x400204b8
 8005464:	58025408 	.word	0x58025408
 8005468:	5802541c 	.word	0x5802541c
 800546c:	58025430 	.word	0x58025430
 8005470:	58025444 	.word	0x58025444
 8005474:	58025458 	.word	0x58025458
 8005478:	5802546c 	.word	0x5802546c
 800547c:	58025480 	.word	0x58025480
 8005480:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]
}
 8005494:	e075      	b.n	8005582 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a3d      	ldr	r2, [pc, #244]	; (8005590 <DMA_SetConfig+0x388>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d04a      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a3b      	ldr	r2, [pc, #236]	; (8005594 <DMA_SetConfig+0x38c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d045      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a3a      	ldr	r2, [pc, #232]	; (8005598 <DMA_SetConfig+0x390>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d040      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a38      	ldr	r2, [pc, #224]	; (800559c <DMA_SetConfig+0x394>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d03b      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a37      	ldr	r2, [pc, #220]	; (80055a0 <DMA_SetConfig+0x398>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d036      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a35      	ldr	r2, [pc, #212]	; (80055a4 <DMA_SetConfig+0x39c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a34      	ldr	r2, [pc, #208]	; (80055a8 <DMA_SetConfig+0x3a0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d02c      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a32      	ldr	r2, [pc, #200]	; (80055ac <DMA_SetConfig+0x3a4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d027      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a31      	ldr	r2, [pc, #196]	; (80055b0 <DMA_SetConfig+0x3a8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2f      	ldr	r2, [pc, #188]	; (80055b4 <DMA_SetConfig+0x3ac>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <DMA_SetConfig+0x32e>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2e      	ldr	r2, [pc, #184]	; (80055b8 <DMA_SetConfig+0x3b0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <DMA_SetConfig+0x32e>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2c      	ldr	r2, [pc, #176]	; (80055bc <DMA_SetConfig+0x3b4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <DMA_SetConfig+0x32e>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2b      	ldr	r2, [pc, #172]	; (80055c0 <DMA_SetConfig+0x3b8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <DMA_SetConfig+0x32e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a29      	ldr	r2, [pc, #164]	; (80055c4 <DMA_SetConfig+0x3bc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <DMA_SetConfig+0x32e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <DMA_SetConfig+0x3c0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <DMA_SetConfig+0x32e>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <DMA_SetConfig+0x3c4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <DMA_SetConfig+0x332>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <DMA_SetConfig+0x334>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d020      	beq.n	8005582 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	2201      	movs	r2, #1
 800554a:	409a      	lsls	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d108      	bne.n	8005572 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	60da      	str	r2, [r3, #12]
}
 8005570:	e007      	b.n	8005582 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	48022c08 	.word	0x48022c08
 8005594:	48022c1c 	.word	0x48022c1c
 8005598:	48022c30 	.word	0x48022c30
 800559c:	48022c44 	.word	0x48022c44
 80055a0:	48022c58 	.word	0x48022c58
 80055a4:	48022c6c 	.word	0x48022c6c
 80055a8:	48022c80 	.word	0x48022c80
 80055ac:	48022c94 	.word	0x48022c94
 80055b0:	58025408 	.word	0x58025408
 80055b4:	5802541c 	.word	0x5802541c
 80055b8:	58025430 	.word	0x58025430
 80055bc:	58025444 	.word	0x58025444
 80055c0:	58025458 	.word	0x58025458
 80055c4:	5802546c 	.word	0x5802546c
 80055c8:	58025480 	.word	0x58025480
 80055cc:	58025494 	.word	0x58025494

080055d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a42      	ldr	r2, [pc, #264]	; (80056e8 <DMA_CalcBaseAndBitshift+0x118>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d04a      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a41      	ldr	r2, [pc, #260]	; (80056ec <DMA_CalcBaseAndBitshift+0x11c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d045      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3f      	ldr	r2, [pc, #252]	; (80056f0 <DMA_CalcBaseAndBitshift+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d040      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3e      	ldr	r2, [pc, #248]	; (80056f4 <DMA_CalcBaseAndBitshift+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d03b      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a3c      	ldr	r2, [pc, #240]	; (80056f8 <DMA_CalcBaseAndBitshift+0x128>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d036      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <DMA_CalcBaseAndBitshift+0x12c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d031      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a39      	ldr	r2, [pc, #228]	; (8005700 <DMA_CalcBaseAndBitshift+0x130>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02c      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a38      	ldr	r2, [pc, #224]	; (8005704 <DMA_CalcBaseAndBitshift+0x134>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d027      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a36      	ldr	r2, [pc, #216]	; (8005708 <DMA_CalcBaseAndBitshift+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d022      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a35      	ldr	r2, [pc, #212]	; (800570c <DMA_CalcBaseAndBitshift+0x13c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d01d      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a33      	ldr	r2, [pc, #204]	; (8005710 <DMA_CalcBaseAndBitshift+0x140>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a32      	ldr	r2, [pc, #200]	; (8005714 <DMA_CalcBaseAndBitshift+0x144>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a30      	ldr	r2, [pc, #192]	; (8005718 <DMA_CalcBaseAndBitshift+0x148>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2f      	ldr	r2, [pc, #188]	; (800571c <DMA_CalcBaseAndBitshift+0x14c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a2d      	ldr	r2, [pc, #180]	; (8005720 <DMA_CalcBaseAndBitshift+0x150>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2c      	ldr	r2, [pc, #176]	; (8005724 <DMA_CalcBaseAndBitshift+0x154>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <DMA_CalcBaseAndBitshift+0xac>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <DMA_CalcBaseAndBitshift+0xae>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d024      	beq.n	80056cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3b10      	subs	r3, #16
 800568a:	4a27      	ldr	r2, [pc, #156]	; (8005728 <DMA_CalcBaseAndBitshift+0x158>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	4a24      	ldr	r2, [pc, #144]	; (800572c <DMA_CalcBaseAndBitshift+0x15c>)
 800569c:	5cd3      	ldrb	r3, [r2, r3]
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d908      	bls.n	80056bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <DMA_CalcBaseAndBitshift+0x160>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	659a      	str	r2, [r3, #88]	; 0x58
 80056ba:	e00d      	b.n	80056d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <DMA_CalcBaseAndBitshift+0x160>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6593      	str	r3, [r2, #88]	; 0x58
 80056ca:	e005      	b.n	80056d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40020010 	.word	0x40020010
 80056ec:	40020028 	.word	0x40020028
 80056f0:	40020040 	.word	0x40020040
 80056f4:	40020058 	.word	0x40020058
 80056f8:	40020070 	.word	0x40020070
 80056fc:	40020088 	.word	0x40020088
 8005700:	400200a0 	.word	0x400200a0
 8005704:	400200b8 	.word	0x400200b8
 8005708:	40020410 	.word	0x40020410
 800570c:	40020428 	.word	0x40020428
 8005710:	40020440 	.word	0x40020440
 8005714:	40020458 	.word	0x40020458
 8005718:	40020470 	.word	0x40020470
 800571c:	40020488 	.word	0x40020488
 8005720:	400204a0 	.word	0x400204a0
 8005724:	400204b8 	.word	0x400204b8
 8005728:	aaaaaaab 	.word	0xaaaaaaab
 800572c:	08010b30 	.word	0x08010b30
 8005730:	fffffc00 	.word	0xfffffc00

08005734 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d120      	bne.n	800578a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	2b03      	cmp	r3, #3
 800574e:	d858      	bhi.n	8005802 <DMA_CheckFifoParam+0xce>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <DMA_CheckFifoParam+0x24>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005769 	.word	0x08005769
 800575c:	0800577b 	.word	0x0800577b
 8005760:	08005769 	.word	0x08005769
 8005764:	08005803 	.word	0x08005803
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d048      	beq.n	8005806 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005778:	e045      	b.n	8005806 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005782:	d142      	bne.n	800580a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005788:	e03f      	b.n	800580a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005792:	d123      	bne.n	80057dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	2b03      	cmp	r3, #3
 800579a:	d838      	bhi.n	800580e <DMA_CheckFifoParam+0xda>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <DMA_CheckFifoParam+0x70>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057bb 	.word	0x080057bb
 80057ac:	080057b5 	.word	0x080057b5
 80057b0:	080057cd 	.word	0x080057cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
        break;
 80057b8:	e030      	b.n	800581c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d025      	beq.n	8005812 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057ca:	e022      	b.n	8005812 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057d4:	d11f      	bne.n	8005816 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057da:	e01c      	b.n	8005816 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d902      	bls.n	80057ea <DMA_CheckFifoParam+0xb6>
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d003      	beq.n	80057f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057e8:	e018      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
        break;
 80057ee:	e015      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00e      	beq.n	800581a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005800:	e00b      	b.n	800581a <DMA_CheckFifoParam+0xe6>
        break;
 8005802:	bf00      	nop
 8005804:	e00a      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 8005806:	bf00      	nop
 8005808:	e008      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 800580a:	bf00      	nop
 800580c:	e006      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 800580e:	bf00      	nop
 8005810:	e004      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <DMA_CheckFifoParam+0xe8>
    break;
 800581a:	bf00      	nop
    }
  }

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a38      	ldr	r2, [pc, #224]	; (8005920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a36      	ldr	r2, [pc, #216]	; (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a35      	ldr	r2, [pc, #212]	; (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a33      	ldr	r2, [pc, #204]	; (800592c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a32      	ldr	r2, [pc, #200]	; (8005930 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a30      	ldr	r2, [pc, #192]	; (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2f      	ldr	r2, [pc, #188]	; (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2d      	ldr	r2, [pc, #180]	; (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01a      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	3b08      	subs	r3, #8
 800589c:	4a28      	ldr	r2, [pc, #160]	; (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800589e:	fba2 2303 	umull	r2, r3, r2, r3
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4b26      	ldr	r3, [pc, #152]	; (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a24      	ldr	r2, [pc, #144]	; (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2201      	movs	r2, #1
 80058c2:	409a      	lsls	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058c8:	e024      	b.n	8005914 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	3b10      	subs	r3, #16
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d806      	bhi.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d902      	bls.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3308      	adds	r3, #8
 80058f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a16      	ldr	r2, [pc, #88]	; (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005904:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	2201      	movs	r2, #1
 800590e:	409a      	lsls	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	58025408 	.word	0x58025408
 8005924:	5802541c 	.word	0x5802541c
 8005928:	58025430 	.word	0x58025430
 800592c:	58025444 	.word	0x58025444
 8005930:	58025458 	.word	0x58025458
 8005934:	5802546c 	.word	0x5802546c
 8005938:	58025480 	.word	0x58025480
 800593c:	58025494 	.word	0x58025494
 8005940:	cccccccd 	.word	0xcccccccd
 8005944:	16009600 	.word	0x16009600
 8005948:	58025880 	.word	0x58025880
 800594c:	aaaaaaab 	.word	0xaaaaaaab
 8005950:	400204b8 	.word	0x400204b8
 8005954:	4002040f 	.word	0x4002040f
 8005958:	10008200 	.word	0x10008200
 800595c:	40020880 	.word	0x40020880

08005960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d04a      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d847      	bhi.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a25      	ldr	r2, [pc, #148]	; (8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d022      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d01d      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059e8:	671a      	str	r2, [r3, #112]	; 0x70
 80059ea:	e009      	b.n	8005a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	2201      	movs	r2, #1
 8005a06:	409a      	lsls	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	58025408 	.word	0x58025408
 8005a1c:	5802541c 	.word	0x5802541c
 8005a20:	58025430 	.word	0x58025430
 8005a24:	58025444 	.word	0x58025444
 8005a28:	58025458 	.word	0x58025458
 8005a2c:	5802546c 	.word	0x5802546c
 8005a30:	58025480 	.word	0x58025480
 8005a34:	58025494 	.word	0x58025494
 8005a38:	1600963f 	.word	0x1600963f
 8005a3c:	58025940 	.word	0x58025940
 8005a40:	1000823f 	.word	0x1000823f
 8005a44:	40020940 	.word	0x40020940

08005a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	; 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a56:	4b89      	ldr	r3, [pc, #548]	; (8005c7c <HAL_GPIO_Init+0x234>)
 8005a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a5a:	e194      	b.n	8005d86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2101      	movs	r1, #1
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	4013      	ands	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8186 	beq.w	8005d80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d005      	beq.n	8005a8c <HAL_GPIO_Init+0x44>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d130      	bne.n	8005aee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	2203      	movs	r2, #3
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 0201 	and.w	r2, r3, #1
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d017      	beq.n	8005b2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	2203      	movs	r2, #3
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d123      	bne.n	8005b7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	08da      	lsrs	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3208      	adds	r2, #8
 8005b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	08da      	lsrs	r2, r3, #3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3208      	adds	r2, #8
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	2203      	movs	r2, #3
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0203 	and.w	r2, r3, #3
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80e0 	beq.w	8005d80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc0:	4b2f      	ldr	r3, [pc, #188]	; (8005c80 <HAL_GPIO_Init+0x238>)
 8005bc2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005bc6:	4a2e      	ldr	r2, [pc, #184]	; (8005c80 <HAL_GPIO_Init+0x238>)
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_GPIO_Init+0x238>)
 8005bd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bde:	4a29      	ldr	r2, [pc, #164]	; (8005c84 <HAL_GPIO_Init+0x23c>)
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	3302      	adds	r3, #2
 8005be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	220f      	movs	r2, #15
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <HAL_GPIO_Init+0x240>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d052      	beq.n	8005cb0 <HAL_GPIO_Init+0x268>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1f      	ldr	r2, [pc, #124]	; (8005c8c <HAL_GPIO_Init+0x244>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d031      	beq.n	8005c76 <HAL_GPIO_Init+0x22e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <HAL_GPIO_Init+0x248>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02b      	beq.n	8005c72 <HAL_GPIO_Init+0x22a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <HAL_GPIO_Init+0x24c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d025      	beq.n	8005c6e <HAL_GPIO_Init+0x226>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <HAL_GPIO_Init+0x250>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <HAL_GPIO_Init+0x222>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_GPIO_Init+0x254>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d019      	beq.n	8005c66 <HAL_GPIO_Init+0x21e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <HAL_GPIO_Init+0x258>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_GPIO_Init+0x21a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <HAL_GPIO_Init+0x25c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00d      	beq.n	8005c5e <HAL_GPIO_Init+0x216>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <HAL_GPIO_Init+0x260>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <HAL_GPIO_Init+0x212>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	; (8005cac <HAL_GPIO_Init+0x264>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_GPIO_Init+0x20e>
 8005c52:	2309      	movs	r3, #9
 8005c54:	e02d      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c56:	230a      	movs	r3, #10
 8005c58:	e02b      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	e029      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c5e:	2307      	movs	r3, #7
 8005c60:	e027      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c62:	2306      	movs	r3, #6
 8005c64:	e025      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c66:	2305      	movs	r3, #5
 8005c68:	e023      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c6a:	2304      	movs	r3, #4
 8005c6c:	e021      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e01f      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e01d      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e01b      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c7a:	bf00      	nop
 8005c7c:	58000080 	.word	0x58000080
 8005c80:	58024400 	.word	0x58024400
 8005c84:	58000400 	.word	0x58000400
 8005c88:	58020000 	.word	0x58020000
 8005c8c:	58020400 	.word	0x58020400
 8005c90:	58020800 	.word	0x58020800
 8005c94:	58020c00 	.word	0x58020c00
 8005c98:	58021000 	.word	0x58021000
 8005c9c:	58021400 	.word	0x58021400
 8005ca0:	58021800 	.word	0x58021800
 8005ca4:	58021c00 	.word	0x58021c00
 8005ca8:	58022000 	.word	0x58022000
 8005cac:	58022400 	.word	0x58022400
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	f002 0203 	and.w	r2, r2, #3
 8005cb8:	0092      	lsls	r2, r2, #2
 8005cba:	4093      	lsls	r3, r2
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cc2:	4938      	ldr	r1, [pc, #224]	; (8005da4 <HAL_GPIO_Init+0x35c>)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	3302      	adds	r3, #2
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f47f ae63 	bne.w	8005a5c <HAL_GPIO_Init+0x14>
  }
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	3724      	adds	r7, #36	; 0x24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	58000400 	.word	0x58000400

08005da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
 8005db4:	4613      	mov	r3, r2
 8005db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005db8:	787b      	ldrb	r3, [r7, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005dc4:	e003      	b.n	8005dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dc6:	887b      	ldrh	r3, [r7, #2]
 8005dc8:	041a      	lsls	r2, r3, #16
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dec:	887a      	ldrh	r2, [r7, #2]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4013      	ands	r3, r2
 8005df2:	041a      	lsls	r2, r3, #16
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	43d9      	mvns	r1, r3
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	400b      	ands	r3, r1
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	619a      	str	r2, [r3, #24]
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005e18:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	2b06      	cmp	r3, #6
 8005e22:	d00a      	beq.n	8005e3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e24:	4b26      	ldr	r3, [pc, #152]	; (8005ec0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d001      	beq.n	8005e36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e040      	b.n	8005eb8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e03e      	b.n	8005eb8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e3a:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005e42:	491f      	ldr	r1, [pc, #124]	; (8005ec0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e4a:	f7fb fd19 	bl	8001880 <HAL_GetTick>
 8005e4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e50:	e009      	b.n	8005e66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e52:	f7fb fd15 	bl	8001880 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e60:	d901      	bls.n	8005e66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e028      	b.n	8005eb8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e66:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e72:	d1ee      	bne.n	8005e52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b1e      	cmp	r3, #30
 8005e78:	d008      	beq.n	8005e8c <HAL_PWREx_ConfigSupply+0x7c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e7e:	d005      	beq.n	8005e8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b1d      	cmp	r3, #29
 8005e84:	d002      	beq.n	8005e8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b2d      	cmp	r3, #45	; 0x2d
 8005e8a:	d114      	bne.n	8005eb6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005e8c:	f7fb fcf8 	bl	8001880 <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e92:	e009      	b.n	8005ea8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e94:	f7fb fcf4 	bl	8001880 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea2:	d901      	bls.n	8005ea8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e007      	b.n	8005eb8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb4:	d1ee      	bne.n	8005e94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	58024800 	.word	0x58024800

08005ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08c      	sub	sp, #48	; 0x30
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f000 bc1f 	b.w	8006716 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80b3 	beq.w	800604c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee6:	4b95      	ldr	r3, [pc, #596]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ef0:	4b92      	ldr	r3, [pc, #584]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d007      	beq.n	8005f0c <HAL_RCC_OscConfig+0x48>
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	2b18      	cmp	r3, #24
 8005f00:	d112      	bne.n	8005f28 <HAL_RCC_OscConfig+0x64>
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d10d      	bne.n	8005f28 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	4b8b      	ldr	r3, [pc, #556]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8098 	beq.w	800604a <HAL_RCC_OscConfig+0x186>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 8093 	bne.w	800604a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e3f6      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	d106      	bne.n	8005f40 <HAL_RCC_OscConfig+0x7c>
 8005f32:	4b82      	ldr	r3, [pc, #520]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a81      	ldr	r2, [pc, #516]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	e058      	b.n	8005ff2 <HAL_RCC_OscConfig+0x12e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d112      	bne.n	8005f6e <HAL_RCC_OscConfig+0xaa>
 8005f48:	4b7c      	ldr	r3, [pc, #496]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a7b      	ldr	r2, [pc, #492]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	4b79      	ldr	r3, [pc, #484]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a78      	ldr	r2, [pc, #480]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	4b76      	ldr	r3, [pc, #472]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a75      	ldr	r2, [pc, #468]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	e041      	b.n	8005ff2 <HAL_RCC_OscConfig+0x12e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f76:	d112      	bne.n	8005f9e <HAL_RCC_OscConfig+0xda>
 8005f78:	4b70      	ldr	r3, [pc, #448]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a6f      	ldr	r2, [pc, #444]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	4b6d      	ldr	r3, [pc, #436]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a6c      	ldr	r2, [pc, #432]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	4b6a      	ldr	r3, [pc, #424]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a69      	ldr	r2, [pc, #420]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	e029      	b.n	8005ff2 <HAL_RCC_OscConfig+0x12e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005fa6:	d112      	bne.n	8005fce <HAL_RCC_OscConfig+0x10a>
 8005fa8:	4b64      	ldr	r3, [pc, #400]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a63      	ldr	r2, [pc, #396]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	4b61      	ldr	r3, [pc, #388]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a60      	ldr	r2, [pc, #384]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	4b5e      	ldr	r3, [pc, #376]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a5d      	ldr	r2, [pc, #372]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e011      	b.n	8005ff2 <HAL_RCC_OscConfig+0x12e>
 8005fce:	4b5b      	ldr	r3, [pc, #364]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5a      	ldr	r2, [pc, #360]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4b58      	ldr	r3, [pc, #352]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a57      	ldr	r2, [pc, #348]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b55      	ldr	r3, [pc, #340]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a54      	ldr	r2, [pc, #336]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8005fec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ff0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d013      	beq.n	8006022 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffa:	f7fb fc41 	bl	8001880 <HAL_GetTick>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006002:	f7fb fc3d 	bl	8001880 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b64      	cmp	r3, #100	; 0x64
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e380      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006014:	4b49      	ldr	r3, [pc, #292]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <HAL_RCC_OscConfig+0x13e>
 8006020:	e014      	b.n	800604c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006022:	f7fb fc2d 	bl	8001880 <HAL_GetTick>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800602a:	f7fb fc29 	bl	8001880 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b64      	cmp	r3, #100	; 0x64
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e36c      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800603c:	4b3f      	ldr	r3, [pc, #252]	; (800613c <HAL_RCC_OscConfig+0x278>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f0      	bne.n	800602a <HAL_RCC_OscConfig+0x166>
 8006048:	e000      	b.n	800604c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 808c 	beq.w	8006172 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605a:	4b38      	ldr	r3, [pc, #224]	; (800613c <HAL_RCC_OscConfig+0x278>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006062:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006064:	4b35      	ldr	r3, [pc, #212]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_RCC_OscConfig+0x1bc>
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2b18      	cmp	r3, #24
 8006074:	d137      	bne.n	80060e6 <HAL_RCC_OscConfig+0x222>
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d132      	bne.n	80060e6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006080:	4b2e      	ldr	r3, [pc, #184]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_RCC_OscConfig+0x1d4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e33e      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006098:	4b28      	ldr	r3, [pc, #160]	; (800613c <HAL_RCC_OscConfig+0x278>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 0219 	bic.w	r2, r3, #25
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4925      	ldr	r1, [pc, #148]	; (800613c <HAL_RCC_OscConfig+0x278>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060aa:	f7fb fbe9 	bl	8001880 <HAL_GetTick>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b2:	f7fb fbe5 	bl	8001880 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e328      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060c4:	4b1d      	ldr	r3, [pc, #116]	; (800613c <HAL_RCC_OscConfig+0x278>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f0      	beq.n	80060b2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d0:	4b1a      	ldr	r3, [pc, #104]	; (800613c <HAL_RCC_OscConfig+0x278>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	4917      	ldr	r1, [pc, #92]	; (800613c <HAL_RCC_OscConfig+0x278>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e4:	e045      	b.n	8006172 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d028      	beq.n	8006140 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_RCC_OscConfig+0x278>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 0219 	bic.w	r2, r3, #25
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4910      	ldr	r1, [pc, #64]	; (800613c <HAL_RCC_OscConfig+0x278>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fb fbbe 	bl	8001880 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006108:	f7fb fbba 	bl	8001880 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e2fd      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800611a:	4b08      	ldr	r3, [pc, #32]	; (800613c <HAL_RCC_OscConfig+0x278>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	061b      	lsls	r3, r3, #24
 8006134:	4901      	ldr	r1, [pc, #4]	; (800613c <HAL_RCC_OscConfig+0x278>)
 8006136:	4313      	orrs	r3, r2
 8006138:	604b      	str	r3, [r1, #4]
 800613a:	e01a      	b.n	8006172 <HAL_RCC_OscConfig+0x2ae>
 800613c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006140:	4b97      	ldr	r3, [pc, #604]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a96      	ldr	r2, [pc, #600]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006146:	f023 0301 	bic.w	r3, r3, #1
 800614a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fb fb98 	bl	8001880 <HAL_GetTick>
 8006150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006154:	f7fb fb94 	bl	8001880 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e2d7      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006166:	4b8e      	ldr	r3, [pc, #568]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b00      	cmp	r3, #0
 800617c:	d06a      	beq.n	8006254 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617e:	4b88      	ldr	r3, [pc, #544]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006186:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006188:	4b85      	ldr	r3, [pc, #532]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b08      	cmp	r3, #8
 8006192:	d007      	beq.n	80061a4 <HAL_RCC_OscConfig+0x2e0>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b18      	cmp	r3, #24
 8006198:	d11b      	bne.n	80061d2 <HAL_RCC_OscConfig+0x30e>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d116      	bne.n	80061d2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061a4:	4b7e      	ldr	r3, [pc, #504]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_OscConfig+0x2f8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	2b80      	cmp	r3, #128	; 0x80
 80061b6:	d001      	beq.n	80061bc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e2ac      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061bc:	4b78      	ldr	r3, [pc, #480]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	061b      	lsls	r3, r3, #24
 80061ca:	4975      	ldr	r1, [pc, #468]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061d0:	e040      	b.n	8006254 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d023      	beq.n	8006222 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061da:	4b71      	ldr	r3, [pc, #452]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a70      	ldr	r2, [pc, #448]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fb fb4b 	bl	8001880 <HAL_GetTick>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061ee:	f7fb fb47 	bl	8001880 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e28a      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006200:	4b67      	ldr	r3, [pc, #412]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800620c:	4b64      	ldr	r3, [pc, #400]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	4961      	ldr	r1, [pc, #388]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800621c:	4313      	orrs	r3, r2
 800621e:	60cb      	str	r3, [r1, #12]
 8006220:	e018      	b.n	8006254 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006222:	4b5f      	ldr	r3, [pc, #380]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a5e      	ldr	r2, [pc, #376]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fb fb27 	bl	8001880 <HAL_GetTick>
 8006232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006236:	f7fb fb23 	bl	8001880 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e266      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006248:	4b55      	ldr	r3, [pc, #340]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d036      	beq.n	80062ce <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d019      	beq.n	800629c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006268:	4b4d      	ldr	r3, [pc, #308]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800626a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626c:	4a4c      	ldr	r2, [pc, #304]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fb fb04 	bl	8001880 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627c:	f7fb fb00 	bl	8001880 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e243      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800628e:	4b44      	ldr	r3, [pc, #272]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x3b8>
 800629a:	e018      	b.n	80062ce <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800629c:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800629e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a0:	4a3f      	ldr	r2, [pc, #252]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a8:	f7fb faea 	bl	8001880 <HAL_GetTick>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b0:	f7fb fae6 	bl	8001880 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e229      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062c2:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d036      	beq.n	8006348 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d019      	beq.n	8006316 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062e2:	4b2f      	ldr	r3, [pc, #188]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 80062e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ee:	f7fb fac7 	bl	8001880 <HAL_GetTick>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062f6:	f7fb fac3 	bl	8001880 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e206      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006308:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x432>
 8006314:	e018      	b.n	8006348 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006316:	4b22      	ldr	r3, [pc, #136]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a21      	ldr	r2, [pc, #132]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800631c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006322:	f7fb faad 	bl	8001880 <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800632a:	f7fb faa9 	bl	8001880 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e1ec      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800633c:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f0      	bne.n	800632a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80af 	beq.w	80064b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <HAL_RCC_OscConfig+0x4e0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <HAL_RCC_OscConfig+0x4e0>)
 800635c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006360:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006362:	f7fb fa8d 	bl	8001880 <HAL_GetTick>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636a:	f7fb fa89 	bl	8001880 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b64      	cmp	r3, #100	; 0x64
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e1cc      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <HAL_RCC_OscConfig+0x4e0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f0      	beq.n	800636a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d10b      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4e4>
 8006390:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	4a02      	ldr	r2, [pc, #8]	; (80063a0 <HAL_RCC_OscConfig+0x4dc>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6713      	str	r3, [r2, #112]	; 0x70
 800639c:	e05b      	b.n	8006456 <HAL_RCC_OscConfig+0x592>
 800639e:	bf00      	nop
 80063a0:	58024400 	.word	0x58024400
 80063a4:	58024800 	.word	0x58024800
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d112      	bne.n	80063d6 <HAL_RCC_OscConfig+0x512>
 80063b0:	4b9d      	ldr	r3, [pc, #628]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	4a9c      	ldr	r2, [pc, #624]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	6713      	str	r3, [r2, #112]	; 0x70
 80063bc:	4b9a      	ldr	r3, [pc, #616]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	4a99      	ldr	r2, [pc, #612]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c6:	6713      	str	r3, [r2, #112]	; 0x70
 80063c8:	4b97      	ldr	r3, [pc, #604]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a96      	ldr	r2, [pc, #600]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063ce:	f023 0304 	bic.w	r3, r3, #4
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
 80063d4:	e03f      	b.n	8006456 <HAL_RCC_OscConfig+0x592>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d112      	bne.n	8006404 <HAL_RCC_OscConfig+0x540>
 80063de:	4b92      	ldr	r3, [pc, #584]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	4a91      	ldr	r2, [pc, #580]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063e4:	f043 0304 	orr.w	r3, r3, #4
 80063e8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ea:	4b8f      	ldr	r3, [pc, #572]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	4a8e      	ldr	r2, [pc, #568]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f4:	6713      	str	r3, [r2, #112]	; 0x70
 80063f6:	4b8c      	ldr	r3, [pc, #560]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a8b      	ldr	r2, [pc, #556]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
 8006402:	e028      	b.n	8006456 <HAL_RCC_OscConfig+0x592>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b85      	cmp	r3, #133	; 0x85
 800640a:	d112      	bne.n	8006432 <HAL_RCC_OscConfig+0x56e>
 800640c:	4b86      	ldr	r3, [pc, #536]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006410:	4a85      	ldr	r2, [pc, #532]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006412:	f043 0304 	orr.w	r3, r3, #4
 8006416:	6713      	str	r3, [r2, #112]	; 0x70
 8006418:	4b83      	ldr	r3, [pc, #524]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	4a82      	ldr	r2, [pc, #520]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800641e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006422:	6713      	str	r3, [r2, #112]	; 0x70
 8006424:	4b80      	ldr	r3, [pc, #512]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006428:	4a7f      	ldr	r2, [pc, #508]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	6713      	str	r3, [r2, #112]	; 0x70
 8006430:	e011      	b.n	8006456 <HAL_RCC_OscConfig+0x592>
 8006432:	4b7d      	ldr	r3, [pc, #500]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	4a7c      	ldr	r2, [pc, #496]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	6713      	str	r3, [r2, #112]	; 0x70
 800643e:	4b7a      	ldr	r3, [pc, #488]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	4a79      	ldr	r2, [pc, #484]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006444:	f023 0304 	bic.w	r3, r3, #4
 8006448:	6713      	str	r3, [r2, #112]	; 0x70
 800644a:	4b77      	ldr	r3, [pc, #476]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4a76      	ldr	r2, [pc, #472]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d015      	beq.n	800648a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645e:	f7fb fa0f 	bl	8001880 <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006464:	e00a      	b.n	800647c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006466:	f7fb fa0b 	bl	8001880 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	f241 3288 	movw	r2, #5000	; 0x1388
 8006474:	4293      	cmp	r3, r2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e14c      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800647c:	4b6a      	ldr	r3, [pc, #424]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0ee      	beq.n	8006466 <HAL_RCC_OscConfig+0x5a2>
 8006488:	e014      	b.n	80064b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648a:	f7fb f9f9 	bl	8001880 <HAL_GetTick>
 800648e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006490:	e00a      	b.n	80064a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006492:	f7fb f9f5 	bl	8001880 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e136      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064a8:	4b5f      	ldr	r3, [pc, #380]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1ee      	bne.n	8006492 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 812b 	beq.w	8006714 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064be:	4b5a      	ldr	r3, [pc, #360]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c6:	2b18      	cmp	r3, #24
 80064c8:	f000 80bb 	beq.w	8006642 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	f040 8095 	bne.w	8006600 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d6:	4b54      	ldr	r3, [pc, #336]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a53      	ldr	r2, [pc, #332]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80064dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fb f9cd 	bl	8001880 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ea:	f7fb f9c9 	bl	8001880 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e10c      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064fc:	4b4a      	ldr	r3, [pc, #296]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f0      	bne.n	80064ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006508:	4b47      	ldr	r3, [pc, #284]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800650a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800650c:	4b47      	ldr	r3, [pc, #284]	; (800662c <HAL_RCC_OscConfig+0x768>)
 800650e:	4013      	ands	r3, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006518:	0112      	lsls	r2, r2, #4
 800651a:	430a      	orrs	r2, r1
 800651c:	4942      	ldr	r1, [pc, #264]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800651e:	4313      	orrs	r3, r2
 8006520:	628b      	str	r3, [r1, #40]	; 0x28
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	3b01      	subs	r3, #1
 8006528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	3b01      	subs	r3, #1
 8006532:	025b      	lsls	r3, r3, #9
 8006534:	b29b      	uxth	r3, r3
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	3b01      	subs	r3, #1
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	3b01      	subs	r3, #1
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006552:	4935      	ldr	r1, [pc, #212]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006554:	4313      	orrs	r3, r2
 8006556:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006558:	4b33      	ldr	r3, [pc, #204]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4a32      	ldr	r2, [pc, #200]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800655e:	f023 0301 	bic.w	r3, r3, #1
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006564:	4b30      	ldr	r3, [pc, #192]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006568:	4b31      	ldr	r3, [pc, #196]	; (8006630 <HAL_RCC_OscConfig+0x76c>)
 800656a:	4013      	ands	r3, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006570:	00d2      	lsls	r2, r2, #3
 8006572:	492d      	ldr	r1, [pc, #180]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006574:	4313      	orrs	r3, r2
 8006576:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006578:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	f023 020c 	bic.w	r2, r3, #12
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	4928      	ldr	r1, [pc, #160]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006586:	4313      	orrs	r3, r2
 8006588:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800658a:	4b27      	ldr	r3, [pc, #156]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	f023 0202 	bic.w	r2, r3, #2
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	4924      	ldr	r1, [pc, #144]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006598:	4313      	orrs	r3, r2
 800659a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800659c:	4b22      	ldr	r3, [pc, #136]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a21      	ldr	r2, [pc, #132]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a8:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065b4:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065c0:	4b19      	ldr	r3, [pc, #100]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065cc:	4b16      	ldr	r3, [pc, #88]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a15      	ldr	r2, [pc, #84]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fb f952 	bl	8001880 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fb f94e 	bl	8001880 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e091      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCC_OscConfig+0x71c>
 80065fe:	e089      	b.n	8006714 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a08      	ldr	r2, [pc, #32]	; (8006628 <HAL_RCC_OscConfig+0x764>)
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fb f938 	bl	8001880 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006612:	e00f      	b.n	8006634 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fb f934 	bl	8001880 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d908      	bls.n	8006634 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e077      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
 800662c:	fffffc0c 	.word	0xfffffc0c
 8006630:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006634:	4b3a      	ldr	r3, [pc, #232]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e9      	bne.n	8006614 <HAL_RCC_OscConfig+0x750>
 8006640:	e068      	b.n	8006714 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006642:	4b37      	ldr	r3, [pc, #220]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006648:	4b35      	ldr	r3, [pc, #212]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	2b01      	cmp	r3, #1
 8006654:	d031      	beq.n	80066ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f003 0203 	and.w	r2, r3, #3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006660:	429a      	cmp	r2, r3
 8006662:	d12a      	bne.n	80066ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d122      	bne.n	80066ba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006680:	429a      	cmp	r2, r3
 8006682:	d11a      	bne.n	80066ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	0a5b      	lsrs	r3, r3, #9
 8006688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006692:	429a      	cmp	r2, r3
 8006694:	d111      	bne.n	80066ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	0c1b      	lsrs	r3, r3, #16
 800669a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d108      	bne.n	80066ba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	0e1b      	lsrs	r3, r3, #24
 80066ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d001      	beq.n	80066be <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e02b      	b.n	8006716 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066be:	4b18      	ldr	r3, [pc, #96]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 80066c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c2:	08db      	lsrs	r3, r3, #3
 80066c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066c8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d01f      	beq.n	8006714 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	4a11      	ldr	r2, [pc, #68]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066e0:	f7fb f8ce 	bl	8001880 <HAL_GetTick>
 80066e4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80066e6:	bf00      	nop
 80066e8:	f7fb f8ca 	bl	8001880 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d0f9      	beq.n	80066e8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066f4:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 80066f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <HAL_RCC_OscConfig+0x860>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006700:	00d2      	lsls	r2, r2, #3
 8006702:	4907      	ldr	r1, [pc, #28]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	4a04      	ldr	r2, [pc, #16]	; (8006720 <HAL_RCC_OscConfig+0x85c>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3730      	adds	r7, #48	; 0x30
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	58024400 	.word	0x58024400
 8006724:	ffff0007 	.word	0xffff0007

08006728 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e19c      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800673c:	4b8a      	ldr	r3, [pc, #552]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d910      	bls.n	800676c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674a:	4b87      	ldr	r3, [pc, #540]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f023 020f 	bic.w	r2, r3, #15
 8006752:	4985      	ldr	r1, [pc, #532]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	4313      	orrs	r3, r2
 8006758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800675a:	4b83      	ldr	r3, [pc, #524]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e184      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d010      	beq.n	800679a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	4b7b      	ldr	r3, [pc, #492]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006784:	429a      	cmp	r2, r3
 8006786:	d908      	bls.n	800679a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006788:	4b78      	ldr	r3, [pc, #480]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	4975      	ldr	r1, [pc, #468]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006796:	4313      	orrs	r3, r2
 8006798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d010      	beq.n	80067c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	4b70      	ldr	r3, [pc, #448]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d908      	bls.n	80067c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067b6:	4b6d      	ldr	r3, [pc, #436]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	496a      	ldr	r1, [pc, #424]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d010      	beq.n	80067f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699a      	ldr	r2, [r3, #24]
 80067d8:	4b64      	ldr	r3, [pc, #400]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d908      	bls.n	80067f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067e4:	4b61      	ldr	r3, [pc, #388]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	495e      	ldr	r1, [pc, #376]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d010      	beq.n	8006824 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	4b59      	ldr	r3, [pc, #356]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800680e:	429a      	cmp	r2, r3
 8006810:	d908      	bls.n	8006824 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006812:	4b56      	ldr	r3, [pc, #344]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	4953      	ldr	r1, [pc, #332]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006820:	4313      	orrs	r3, r2
 8006822:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	4b4d      	ldr	r3, [pc, #308]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	429a      	cmp	r2, r3
 800683e:	d908      	bls.n	8006852 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006840:	4b4a      	ldr	r3, [pc, #296]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f023 020f 	bic.w	r2, r3, #15
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4947      	ldr	r1, [pc, #284]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 800684e:	4313      	orrs	r3, r2
 8006850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d055      	beq.n	800690a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800685e:	4b43      	ldr	r3, [pc, #268]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	4940      	ldr	r1, [pc, #256]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 800686c:	4313      	orrs	r3, r2
 800686e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d107      	bne.n	8006888 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006878:	4b3c      	ldr	r3, [pc, #240]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d121      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0f6      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d107      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006890:	4b36      	ldr	r3, [pc, #216]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d115      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0ea      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0de      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068b8:	4b2c      	ldr	r3, [pc, #176]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0d6      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068c8:	4b28      	ldr	r3, [pc, #160]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f023 0207 	bic.w	r2, r3, #7
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4925      	ldr	r1, [pc, #148]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068da:	f7fa ffd1 	bl	8001880 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e0:	e00a      	b.n	80068f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e2:	f7fa ffcd 	bl	8001880 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e0be      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f8:	4b1c      	ldr	r3, [pc, #112]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	429a      	cmp	r2, r3
 8006908:	d1eb      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d010      	beq.n	8006938 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	4b14      	ldr	r3, [pc, #80]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f003 030f 	and.w	r3, r3, #15
 8006922:	429a      	cmp	r2, r3
 8006924:	d208      	bcs.n	8006938 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f023 020f 	bic.w	r2, r3, #15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	490e      	ldr	r1, [pc, #56]	; (800696c <HAL_RCC_ClockConfig+0x244>)
 8006934:	4313      	orrs	r3, r2
 8006936:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006938:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d214      	bcs.n	8006970 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006946:	4b08      	ldr	r3, [pc, #32]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 020f 	bic.w	r2, r3, #15
 800694e:	4906      	ldr	r1, [pc, #24]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <HAL_RCC_ClockConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e086      	b.n	8006a76 <HAL_RCC_ClockConfig+0x34e>
 8006968:	52002000 	.word	0x52002000
 800696c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	4b3f      	ldr	r3, [pc, #252]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006988:	429a      	cmp	r2, r3
 800698a:	d208      	bcs.n	800699e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800698c:	4b3c      	ldr	r3, [pc, #240]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	4939      	ldr	r1, [pc, #228]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 800699a:	4313      	orrs	r3, r2
 800699c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d010      	beq.n	80069cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	4b34      	ldr	r3, [pc, #208]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d208      	bcs.n	80069cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069ba:	4b31      	ldr	r3, [pc, #196]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	492e      	ldr	r1, [pc, #184]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d010      	beq.n	80069fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	4b28      	ldr	r3, [pc, #160]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d208      	bcs.n	80069fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069e8:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	4922      	ldr	r1, [pc, #136]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d208      	bcs.n	8006a28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a16:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	4917      	ldr	r1, [pc, #92]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006a28:	f000 f834 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	4912      	ldr	r1, [pc, #72]	; (8006a84 <HAL_RCC_ClockConfig+0x35c>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a46:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <HAL_RCC_ClockConfig+0x358>)
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	4a0d      	ldr	r2, [pc, #52]	; (8006a84 <HAL_RCC_ClockConfig+0x35c>)
 8006a50:	5cd3      	ldrb	r3, [r2, r3]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5c:	4a0a      	ldr	r2, [pc, #40]	; (8006a88 <HAL_RCC_ClockConfig+0x360>)
 8006a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a60:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <HAL_RCC_ClockConfig+0x364>)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <HAL_RCC_ClockConfig+0x368>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fa fd82 	bl	8001574 <HAL_InitTick>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
 8006a84:	08010b20 	.word	0x08010b20
 8006a88:	24000008 	.word	0x24000008
 8006a8c:	24000004 	.word	0x24000004
 8006a90:	2400000c 	.word	0x2400000c

08006a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b089      	sub	sp, #36	; 0x24
 8006a98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a9a:	4bb3      	ldr	r3, [pc, #716]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aa2:	2b18      	cmp	r3, #24
 8006aa4:	f200 8155 	bhi.w	8006d52 <HAL_RCC_GetSysClockFreq+0x2be>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006b15 	.word	0x08006b15
 8006ab4:	08006d53 	.word	0x08006d53
 8006ab8:	08006d53 	.word	0x08006d53
 8006abc:	08006d53 	.word	0x08006d53
 8006ac0:	08006d53 	.word	0x08006d53
 8006ac4:	08006d53 	.word	0x08006d53
 8006ac8:	08006d53 	.word	0x08006d53
 8006acc:	08006d53 	.word	0x08006d53
 8006ad0:	08006b3b 	.word	0x08006b3b
 8006ad4:	08006d53 	.word	0x08006d53
 8006ad8:	08006d53 	.word	0x08006d53
 8006adc:	08006d53 	.word	0x08006d53
 8006ae0:	08006d53 	.word	0x08006d53
 8006ae4:	08006d53 	.word	0x08006d53
 8006ae8:	08006d53 	.word	0x08006d53
 8006aec:	08006d53 	.word	0x08006d53
 8006af0:	08006b41 	.word	0x08006b41
 8006af4:	08006d53 	.word	0x08006d53
 8006af8:	08006d53 	.word	0x08006d53
 8006afc:	08006d53 	.word	0x08006d53
 8006b00:	08006d53 	.word	0x08006d53
 8006b04:	08006d53 	.word	0x08006d53
 8006b08:	08006d53 	.word	0x08006d53
 8006b0c:	08006d53 	.word	0x08006d53
 8006b10:	08006b47 	.word	0x08006b47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b14:	4b94      	ldr	r3, [pc, #592]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b20:	4b91      	ldr	r3, [pc, #580]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	08db      	lsrs	r3, r3, #3
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	4a90      	ldr	r2, [pc, #576]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b32:	e111      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b34:	4b8d      	ldr	r3, [pc, #564]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b36:	61bb      	str	r3, [r7, #24]
      break;
 8006b38:	e10e      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b3a:	4b8d      	ldr	r3, [pc, #564]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b3c:	61bb      	str	r3, [r7, #24]
      break;
 8006b3e:	e10b      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b40:	4b8c      	ldr	r3, [pc, #560]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b42:	61bb      	str	r3, [r7, #24]
      break;
 8006b44:	e108      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b46:	4b88      	ldr	r3, [pc, #544]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b50:	4b85      	ldr	r3, [pc, #532]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b5c:	4b82      	ldr	r3, [pc, #520]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b66:	4b80      	ldr	r3, [pc, #512]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6a:	08db      	lsrs	r3, r3, #3
 8006b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80e1 	beq.w	8006d4c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	f000 8083 	beq.w	8006c98 <HAL_RCC_GetSysClockFreq+0x204>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	f200 80a1 	bhi.w	8006cdc <HAL_RCC_GetSysClockFreq+0x248>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x114>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d056      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ba6:	e099      	b.n	8006cdc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ba8:	4b6f      	ldr	r3, [pc, #444]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02d      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb4:	4b6c      	ldr	r3, [pc, #432]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	08db      	lsrs	r3, r3, #3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	4a6b      	ldr	r2, [pc, #428]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b62      	ldr	r3, [pc, #392]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bf2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c0e:	e087      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b51      	ldr	r3, [pc, #324]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c52:	e065      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b40      	ldr	r3, [pc, #256]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c96:	e043      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006caa:	4b2f      	ldr	r3, [pc, #188]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cbe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cda:	e021      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cee:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d20:	4b11      	ldr	r3, [pc, #68]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	0a5b      	lsrs	r3, r3, #9
 8006d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d44:	ee17 3a90 	vmov	r3, s15
 8006d48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d4a:	e005      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61bb      	str	r3, [r7, #24]
      break;
 8006d50:	e002      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d54:	61bb      	str	r3, [r7, #24]
      break;
 8006d56:	bf00      	nop
  }

  return sysclockfreq;
 8006d58:	69bb      	ldr	r3, [r7, #24]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3724      	adds	r7, #36	; 0x24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	58024400 	.word	0x58024400
 8006d6c:	03d09000 	.word	0x03d09000
 8006d70:	003d0900 	.word	0x003d0900
 8006d74:	007a1200 	.word	0x007a1200
 8006d78:	46000000 	.word	0x46000000
 8006d7c:	4c742400 	.word	0x4c742400
 8006d80:	4a742400 	.word	0x4a742400
 8006d84:	4af42400 	.word	0x4af42400

08006d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006d8e:	f7ff fe81 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006d92:	4602      	mov	r2, r0
 8006d94:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	490f      	ldr	r1, [pc, #60]	; (8006ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8006da0:	5ccb      	ldrb	r3, [r1, r3]
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	fa22 f303 	lsr.w	r3, r2, r3
 8006daa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <HAL_RCC_GetHCLKFreq+0x54>)
 8006db6:	5cd3      	ldrb	r3, [r2, r3]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	4a07      	ldr	r2, [pc, #28]	; (8006de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dc6:	4a07      	ldr	r2, [pc, #28]	; (8006de4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dcc:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dce:	681b      	ldr	r3, [r3, #0]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	08010b20 	.word	0x08010b20
 8006de0:	24000008 	.word	0x24000008
 8006de4:	24000004 	.word	0x24000004

08006de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006dec:	f7ff ffcc 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	4904      	ldr	r1, [pc, #16]	; (8006e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dfe:	5ccb      	ldrb	r3, [r1, r3]
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	58024400 	.word	0x58024400
 8006e10:	08010b20 	.word	0x08010b20

08006e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006e18:	f7ff ffb6 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4904      	ldr	r1, [pc, #16]	; (8006e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	08010b20 	.word	0x08010b20

08006e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	223f      	movs	r2, #63	; 0x3f
 8006e4e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e50:	4b1a      	ldr	r3, [pc, #104]	; (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0207 	and.w	r2, r3, #7
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8006e5c:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f003 020f 	and.w	r2, r3, #15
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8006e74:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8006e80:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <HAL_RCC_GetClockConfig+0x7c>)
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <HAL_RCC_GetClockConfig+0x80>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	52002000 	.word	0x52002000

08006ec4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec8:	b0c8      	sub	sp, #288	; 0x120
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006ee8:	2500      	movs	r5, #0
 8006eea:	ea54 0305 	orrs.w	r3, r4, r5
 8006eee:	d049      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006efa:	d02f      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f00:	d828      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f06:	d01a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0c:	d822      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f16:	d007      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f18:	e01c      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1a:	4ba7      	ldr	r3, [pc, #668]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1e:	4aa6      	ldr	r2, [pc, #664]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f26:	e01a      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 fa6d 	bl	8009410 <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f3c:	e00f      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f42:	3328      	adds	r3, #40	; 0x28
 8006f44:	2102      	movs	r1, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 fb14 	bl	8009574 <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f52:	e004      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f5a:	e000      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f66:	4b94      	ldr	r3, [pc, #592]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f74:	4a90      	ldr	r2, [pc, #576]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f76:	430b      	orrs	r3, r1
 8006f78:	6513      	str	r3, [r2, #80]	; 0x50
 8006f7a:	e003      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006f90:	f04f 0900 	mov.w	r9, #0
 8006f94:	ea58 0309 	orrs.w	r3, r8, r9
 8006f98:	d047      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d82a      	bhi.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006fa4:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fc1 	.word	0x08006fc1
 8006fb0:	08006fcf 	.word	0x08006fcf
 8006fb4:	08006fe5 	.word	0x08006fe5
 8006fb8:	08007003 	.word	0x08007003
 8006fbc:	08007003 	.word	0x08007003
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4b7d      	ldr	r3, [pc, #500]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a7c      	ldr	r2, [pc, #496]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fcc:	e01a      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 fa1a 	bl	8009410 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fe2:	e00f      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe8:	3328      	adds	r3, #40	; 0x28
 8006fea:	2100      	movs	r1, #0
 8006fec:	4618      	mov	r0, r3
 8006fee:	f002 fac1 	bl	8009574 <RCCEx_PLL3_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ff8:	e004      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007000:	e000      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007004:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800700c:	4b6a      	ldr	r3, [pc, #424]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800700e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007010:	f023 0107 	bic.w	r1, r3, #7
 8007014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	4a67      	ldr	r2, [pc, #412]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800701c:	430b      	orrs	r3, r1
 800701e:	6513      	str	r3, [r2, #80]	; 0x50
 8007020:	e003      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007026:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800702a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007036:	f04f 0b00 	mov.w	fp, #0
 800703a:	ea5a 030b 	orrs.w	r3, sl, fp
 800703e:	d054      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800704a:	d036      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800704c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007050:	d82f      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007056:	d032      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705c:	d829      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800705e:	2bc0      	cmp	r3, #192	; 0xc0
 8007060:	d02f      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007062:	2bc0      	cmp	r3, #192	; 0xc0
 8007064:	d825      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d018      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800706a:	2b80      	cmp	r3, #128	; 0x80
 800706c:	d821      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d007      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007076:	e01c      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007078:	4b4f      	ldr	r3, [pc, #316]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	4a4e      	ldr	r2, [pc, #312]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800707e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007084:	e01e      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800708a:	3308      	adds	r3, #8
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f002 f9be 	bl	8009410 <RCCEx_PLL2_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800709a:	e013      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800709c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070a0:	3328      	adds	r3, #40	; 0x28
 80070a2:	2100      	movs	r1, #0
 80070a4:	4618      	mov	r0, r3
 80070a6:	f002 fa65 	bl	8009574 <RCCEx_PLL3_Config>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80070b0:	e008      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80070b8:	e004      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80070ba:	bf00      	nop
 80070bc:	e002      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80070be:	bf00      	nop
 80070c0:	e000      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80070c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80070cc:	4b3a      	ldr	r3, [pc, #232]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80070d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	4a37      	ldr	r2, [pc, #220]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	6513      	str	r3, [r2, #80]	; 0x50
 80070e0:	e003      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80070ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80070f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070fa:	2300      	movs	r3, #0
 80070fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007100:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007104:	460b      	mov	r3, r1
 8007106:	4313      	orrs	r3, r2
 8007108:	d05c      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800710a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800710e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007110:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007114:	d03b      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007116:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800711a:	d834      	bhi.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800711c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007120:	d037      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007126:	d82e      	bhi.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007128:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800712c:	d033      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800712e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007132:	d828      	bhi.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007138:	d01a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800713a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713e:	d822      	bhi.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007148:	d007      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800714a:	e01c      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800714c:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a19      	ldr	r2, [pc, #100]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007158:	e01e      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800715a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800715e:	3308      	adds	r3, #8
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f002 f954 	bl	8009410 <RCCEx_PLL2_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800716e:	e013      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007174:	3328      	adds	r3, #40	; 0x28
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f002 f9fb 	bl	8009574 <RCCEx_PLL3_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007184:	e008      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800718c:	e004      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800718e:	bf00      	nop
 8007190:	e002      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007192:	bf00      	nop
 8007194:	e000      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10d      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80071a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ae:	4a02      	ldr	r2, [pc, #8]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071b0:	430b      	orrs	r3, r1
 80071b2:	6513      	str	r3, [r2, #80]	; 0x50
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80071b6:	bf00      	nop
 80071b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80071c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80071d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80071de:	460b      	mov	r3, r1
 80071e0:	4313      	orrs	r3, r2
 80071e2:	d03a      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ea:	2b30      	cmp	r3, #48	; 0x30
 80071ec:	d01f      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80071ee:	2b30      	cmp	r3, #48	; 0x30
 80071f0:	d819      	bhi.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d00c      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d815      	bhi.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d019      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80071fe:	2b10      	cmp	r3, #16
 8007200:	d111      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007202:	4bae      	ldr	r3, [pc, #696]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	4aad      	ldr	r2, [pc, #692]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800720c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800720e:	e011      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007214:	3308      	adds	r3, #8
 8007216:	2102      	movs	r1, #2
 8007218:	4618      	mov	r0, r3
 800721a:	f002 f8f9 	bl	8009410 <RCCEx_PLL2_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007224:	e006      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800722c:	e002      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800722e:	bf00      	nop
 8007230:	e000      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007234:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800723c:	4b9f      	ldr	r3, [pc, #636]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800723e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007240:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724a:	4a9c      	ldr	r2, [pc, #624]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800724c:	430b      	orrs	r3, r1
 800724e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007250:	e003      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007256:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800725a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007266:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800726a:	2300      	movs	r3, #0
 800726c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007270:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007274:	460b      	mov	r3, r1
 8007276:	4313      	orrs	r3, r2
 8007278:	d051      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800727a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800727e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007284:	d035      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800728a:	d82e      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800728c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007290:	d031      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007296:	d828      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800729c:	d01a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800729e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a2:	d822      	bhi.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80072a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ac:	d007      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80072ae:	e01c      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b0:	4b82      	ldr	r3, [pc, #520]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	4a81      	ldr	r2, [pc, #516]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072bc:	e01c      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c2:	3308      	adds	r3, #8
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f002 f8a2 	bl	8009410 <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072d2:	e011      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d8:	3328      	adds	r3, #40	; 0x28
 80072da:	2100      	movs	r1, #0
 80072dc:	4618      	mov	r0, r3
 80072de:	f002 f949 	bl	8009574 <RCCEx_PLL3_Config>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072e8:	e006      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80072f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007300:	4b6e      	ldr	r3, [pc, #440]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800730c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800730e:	4a6b      	ldr	r2, [pc, #428]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007310:	430b      	orrs	r3, r1
 8007312:	6513      	str	r3, [r2, #80]	; 0x50
 8007314:	e003      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800731a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800731e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800732a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800732e:	2300      	movs	r3, #0
 8007330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007334:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007338:	460b      	mov	r3, r1
 800733a:	4313      	orrs	r3, r2
 800733c:	d053      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800733e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007348:	d033      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800734a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800734e:	d82c      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007350:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007354:	d02f      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007356:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800735a:	d826      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800735c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007360:	d02b      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007362:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007366:	d820      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800736c:	d012      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800736e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007372:	d81a      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d022      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800737c:	d115      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800737e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007382:	3308      	adds	r3, #8
 8007384:	2101      	movs	r1, #1
 8007386:	4618      	mov	r0, r3
 8007388:	f002 f842 	bl	8009410 <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007392:	e015      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007398:	3328      	adds	r3, #40	; 0x28
 800739a:	2101      	movs	r1, #1
 800739c:	4618      	mov	r0, r3
 800739e:	f002 f8e9 	bl	8009574 <RCCEx_PLL3_Config>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073a8:	e00a      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80073b0:	e006      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80073b2:	bf00      	nop
 80073b4:	e004      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80073b6:	bf00      	nop
 80073b8:	e002      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80073ba:	bf00      	nop
 80073bc:	e000      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80073be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073c8:	4b3c      	ldr	r3, [pc, #240]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80073d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d6:	4a39      	ldr	r2, [pc, #228]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073d8:	430b      	orrs	r3, r1
 80073da:	6513      	str	r3, [r2, #80]	; 0x50
 80073dc:	e003      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80073f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073f6:	2300      	movs	r3, #0
 80073f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007400:	460b      	mov	r3, r1
 8007402:	4313      	orrs	r3, r2
 8007404:	d060      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800740a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800740e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007412:	d039      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007414:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007418:	d832      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800741a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800741e:	d035      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007424:	d82c      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742a:	d031      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800742c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007430:	d826      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007432:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007436:	d02d      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800743c:	d820      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800743e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007442:	d012      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007448:	d81a      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d024      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800744e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007452:	d115      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007458:	3308      	adds	r3, #8
 800745a:	2101      	movs	r1, #1
 800745c:	4618      	mov	r0, r3
 800745e:	f001 ffd7 	bl	8009410 <RCCEx_PLL2_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007468:	e017      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800746a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800746e:	3328      	adds	r3, #40	; 0x28
 8007470:	2101      	movs	r1, #1
 8007472:	4618      	mov	r0, r3
 8007474:	f002 f87e 	bl	8009574 <RCCEx_PLL3_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800747e:	e00c      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007486:	e008      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007488:	bf00      	nop
 800748a:	e006      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800748c:	bf00      	nop
 800748e:	e004      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007490:	bf00      	nop
 8007492:	e002      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007494:	bf00      	nop
 8007496:	e000      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10e      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074a2:	4b06      	ldr	r3, [pc, #24]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074b2:	4a02      	ldr	r2, [pc, #8]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074b4:	430b      	orrs	r3, r1
 80074b6:	6593      	str	r3, [r2, #88]	; 0x58
 80074b8:	e006      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80074ba:	bf00      	nop
 80074bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80074d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074e2:	460b      	mov	r3, r1
 80074e4:	4313      	orrs	r3, r2
 80074e6:	d037      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f2:	d00e      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80074f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f8:	d816      	bhi.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80074fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007502:	d111      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007504:	4bc4      	ldr	r3, [pc, #784]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	4ac3      	ldr	r2, [pc, #780]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800750a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800750e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007510:	e00f      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007516:	3308      	adds	r3, #8
 8007518:	2101      	movs	r1, #1
 800751a:	4618      	mov	r0, r3
 800751c:	f001 ff78 	bl	8009410 <RCCEx_PLL2_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007526:	e004      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800752e:	e000      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007532:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800753a:	4bb7      	ldr	r3, [pc, #732]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800753c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007548:	4ab3      	ldr	r2, [pc, #716]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800754a:	430b      	orrs	r3, r1
 800754c:	6513      	str	r3, [r2, #80]	; 0x50
 800754e:	e003      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007550:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007554:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007568:	2300      	movs	r3, #0
 800756a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800756e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007572:	460b      	mov	r3, r1
 8007574:	4313      	orrs	r3, r2
 8007576:	d039      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800757c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757e:	2b03      	cmp	r3, #3
 8007580:	d81c      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075c5 	.word	0x080075c5
 800758c:	08007599 	.word	0x08007599
 8007590:	080075a7 	.word	0x080075a7
 8007594:	080075c5 	.word	0x080075c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007598:	4b9f      	ldr	r3, [pc, #636]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	4a9e      	ldr	r2, [pc, #632]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800759e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075a4:	e00f      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075aa:	3308      	adds	r3, #8
 80075ac:	2102      	movs	r1, #2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 ff2e 	bl	8009410 <RCCEx_PLL2_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075ba:	e004      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075c2:	e000      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80075c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80075ce:	4b92      	ldr	r3, [pc, #584]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d2:	f023 0103 	bic.w	r1, r3, #3
 80075d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075dc:	4a8e      	ldr	r2, [pc, #568]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075de:	430b      	orrs	r3, r1
 80075e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80075f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075fc:	2300      	movs	r3, #0
 80075fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007602:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	f000 8099 	beq.w	8007740 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800760e:	4b83      	ldr	r3, [pc, #524]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a82      	ldr	r2, [pc, #520]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800761a:	f7fa f931 	bl	8001880 <HAL_GetTick>
 800761e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007622:	e00b      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007624:	f7fa f92c 	bl	8001880 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b64      	cmp	r3, #100	; 0x64
 8007632:	d903      	bls.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800763a:	e005      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800763c:	4b77      	ldr	r3, [pc, #476]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0ed      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007648:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800764c:	2b00      	cmp	r3, #0
 800764e:	d173      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007650:	4b71      	ldr	r3, [pc, #452]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007658:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800765c:	4053      	eors	r3, r2
 800765e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007662:	2b00      	cmp	r3, #0
 8007664:	d015      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007666:	4b6c      	ldr	r3, [pc, #432]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007672:	4b69      	ldr	r3, [pc, #420]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	4a68      	ldr	r2, [pc, #416]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800767e:	4b66      	ldr	r3, [pc, #408]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007682:	4a65      	ldr	r2, [pc, #404]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007688:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800768a:	4a63      	ldr	r2, [pc, #396]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007690:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800769a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800769e:	d118      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a0:	f7fa f8ee 	bl	8001880 <HAL_GetTick>
 80076a4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076a8:	e00d      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076aa:	f7fa f8e9 	bl	8001880 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d903      	bls.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80076c4:	e005      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076c6:	4b54      	ldr	r3, [pc, #336]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0eb      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80076d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d129      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ea:	d10e      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80076ec:	4b4a      	ldr	r3, [pc, #296]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80076f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076fc:	091a      	lsrs	r2, r3, #4
 80076fe:	4b48      	ldr	r3, [pc, #288]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007700:	4013      	ands	r3, r2
 8007702:	4a45      	ldr	r2, [pc, #276]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007704:	430b      	orrs	r3, r1
 8007706:	6113      	str	r3, [r2, #16]
 8007708:	e005      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800770a:	4b43      	ldr	r3, [pc, #268]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	4a42      	ldr	r2, [pc, #264]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007710:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007714:	6113      	str	r3, [r2, #16]
 8007716:	4b40      	ldr	r3, [pc, #256]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007718:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800771a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800771e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007726:	4a3c      	ldr	r2, [pc, #240]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007728:	430b      	orrs	r3, r1
 800772a:	6713      	str	r3, [r2, #112]	; 0x70
 800772c:	e008      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800772e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007732:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007736:	e003      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800773c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f002 0301 	and.w	r3, r2, #1
 800774c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007750:	2300      	movs	r3, #0
 8007752:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007756:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800775a:	460b      	mov	r3, r1
 800775c:	4313      	orrs	r3, r2
 800775e:	f000 8090 	beq.w	8007882 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776a:	2b28      	cmp	r3, #40	; 0x28
 800776c:	d870      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007859 	.word	0x08007859
 8007778:	08007851 	.word	0x08007851
 800777c:	08007851 	.word	0x08007851
 8007780:	08007851 	.word	0x08007851
 8007784:	08007851 	.word	0x08007851
 8007788:	08007851 	.word	0x08007851
 800778c:	08007851 	.word	0x08007851
 8007790:	08007851 	.word	0x08007851
 8007794:	08007825 	.word	0x08007825
 8007798:	08007851 	.word	0x08007851
 800779c:	08007851 	.word	0x08007851
 80077a0:	08007851 	.word	0x08007851
 80077a4:	08007851 	.word	0x08007851
 80077a8:	08007851 	.word	0x08007851
 80077ac:	08007851 	.word	0x08007851
 80077b0:	08007851 	.word	0x08007851
 80077b4:	0800783b 	.word	0x0800783b
 80077b8:	08007851 	.word	0x08007851
 80077bc:	08007851 	.word	0x08007851
 80077c0:	08007851 	.word	0x08007851
 80077c4:	08007851 	.word	0x08007851
 80077c8:	08007851 	.word	0x08007851
 80077cc:	08007851 	.word	0x08007851
 80077d0:	08007851 	.word	0x08007851
 80077d4:	08007859 	.word	0x08007859
 80077d8:	08007851 	.word	0x08007851
 80077dc:	08007851 	.word	0x08007851
 80077e0:	08007851 	.word	0x08007851
 80077e4:	08007851 	.word	0x08007851
 80077e8:	08007851 	.word	0x08007851
 80077ec:	08007851 	.word	0x08007851
 80077f0:	08007851 	.word	0x08007851
 80077f4:	08007859 	.word	0x08007859
 80077f8:	08007851 	.word	0x08007851
 80077fc:	08007851 	.word	0x08007851
 8007800:	08007851 	.word	0x08007851
 8007804:	08007851 	.word	0x08007851
 8007808:	08007851 	.word	0x08007851
 800780c:	08007851 	.word	0x08007851
 8007810:	08007851 	.word	0x08007851
 8007814:	08007859 	.word	0x08007859
 8007818:	58024400 	.word	0x58024400
 800781c:	58024800 	.word	0x58024800
 8007820:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007828:	3308      	adds	r3, #8
 800782a:	2101      	movs	r1, #1
 800782c:	4618      	mov	r0, r3
 800782e:	f001 fdef 	bl	8009410 <RCCEx_PLL2_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007838:	e00f      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800783a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800783e:	3328      	adds	r3, #40	; 0x28
 8007840:	2101      	movs	r1, #1
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fe96 	bl	8009574 <RCCEx_PLL3_Config>
 8007848:	4603      	mov	r3, r0
 800784a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800784e:	e004      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007856:	e000      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10b      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007862:	4bc0      	ldr	r3, [pc, #768]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800786a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800786e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007872:	4abc      	ldr	r2, [pc, #752]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007874:	430b      	orrs	r3, r1
 8007876:	6553      	str	r3, [r2, #84]	; 0x54
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800787e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f002 0302 	and.w	r3, r2, #2
 800788e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007892:	2300      	movs	r3, #0
 8007894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007898:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800789c:	460b      	mov	r3, r1
 800789e:	4313      	orrs	r3, r2
 80078a0:	d043      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80078a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d824      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80078ae:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	08007901 	.word	0x08007901
 80078b8:	080078cd 	.word	0x080078cd
 80078bc:	080078e3 	.word	0x080078e3
 80078c0:	08007901 	.word	0x08007901
 80078c4:	08007901 	.word	0x08007901
 80078c8:	08007901 	.word	0x08007901
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078d0:	3308      	adds	r3, #8
 80078d2:	2101      	movs	r1, #1
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 fd9b 	bl	8009410 <RCCEx_PLL2_Config>
 80078da:	4603      	mov	r3, r0
 80078dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078e0:	e00f      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078e6:	3328      	adds	r3, #40	; 0x28
 80078e8:	2101      	movs	r1, #1
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fe42 	bl	8009574 <RCCEx_PLL3_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078f6:	e004      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078fe:	e000      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007902:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800790a:	4b96      	ldr	r3, [pc, #600]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	f023 0107 	bic.w	r1, r3, #7
 8007912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800791a:	4a92      	ldr	r2, [pc, #584]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800791c:	430b      	orrs	r3, r1
 800791e:	6553      	str	r3, [r2, #84]	; 0x54
 8007920:	e003      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007922:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007926:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800792a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f002 0304 	and.w	r3, r2, #4
 8007936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800793a:	2300      	movs	r3, #0
 800793c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007940:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007944:	460b      	mov	r3, r1
 8007946:	4313      	orrs	r3, r2
 8007948:	d043      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800794a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800794e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007952:	2b05      	cmp	r3, #5
 8007954:	d824      	bhi.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	080079a9 	.word	0x080079a9
 8007960:	08007975 	.word	0x08007975
 8007964:	0800798b 	.word	0x0800798b
 8007968:	080079a9 	.word	0x080079a9
 800796c:	080079a9 	.word	0x080079a9
 8007970:	080079a9 	.word	0x080079a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007978:	3308      	adds	r3, #8
 800797a:	2101      	movs	r1, #1
 800797c:	4618      	mov	r0, r3
 800797e:	f001 fd47 	bl	8009410 <RCCEx_PLL2_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007988:	e00f      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800798a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800798e:	3328      	adds	r3, #40	; 0x28
 8007990:	2101      	movs	r1, #1
 8007992:	4618      	mov	r0, r3
 8007994:	f001 fdee 	bl	8009574 <RCCEx_PLL3_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800799e:	e004      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80079a6:	e000      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80079a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10b      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079b2:	4b6c      	ldr	r3, [pc, #432]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80079b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b6:	f023 0107 	bic.w	r1, r3, #7
 80079ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079c2:	4a68      	ldr	r2, [pc, #416]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80079c4:	430b      	orrs	r3, r1
 80079c6:	6593      	str	r3, [r2, #88]	; 0x58
 80079c8:	e003      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f002 0320 	and.w	r3, r2, #32
 80079de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079e2:	2300      	movs	r3, #0
 80079e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079ec:	460b      	mov	r3, r1
 80079ee:	4313      	orrs	r3, r2
 80079f0:	d055      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079fe:	d033      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a04:	d82c      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0a:	d02f      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a10:	d826      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007a12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a16:	d02b      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a1c:	d820      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a22:	d012      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a28:	d81a      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d022      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a32:	d115      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a38:	3308      	adds	r3, #8
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 fce7 	bl	8009410 <RCCEx_PLL2_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a48:	e015      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a4e:	3328      	adds	r3, #40	; 0x28
 8007a50:	2102      	movs	r1, #2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 fd8e 	bl	8009574 <RCCEx_PLL3_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a5e:	e00a      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a66:	e006      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a68:	bf00      	nop
 8007a6a:	e004      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a6c:	bf00      	nop
 8007a6e:	e002      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a70:	bf00      	nop
 8007a72:	e000      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10b      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a7e:	4b39      	ldr	r3, [pc, #228]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a8e:	4a35      	ldr	r2, [pc, #212]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6553      	str	r3, [r2, #84]	; 0x54
 8007a94:	e003      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ab4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d058      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ac6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007aca:	d033      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007acc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ad0:	d82c      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad6:	d02f      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007adc:	d826      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae2:	d02b      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae8:	d820      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aee:	d012      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af4:	d81a      	bhi.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d022      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007afe:	d115      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b04:	3308      	adds	r3, #8
 8007b06:	2100      	movs	r1, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fc81 	bl	8009410 <RCCEx_PLL2_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b14:	e015      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b1a:	3328      	adds	r3, #40	; 0x28
 8007b1c:	2102      	movs	r1, #2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 fd28 	bl	8009574 <RCCEx_PLL3_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007b32:	e006      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007b34:	bf00      	nop
 8007b36:	e004      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007b38:	bf00      	nop
 8007b3a:	e002      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007b3c:	bf00      	nop
 8007b3e:	e000      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10e      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b4a:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b5a:	4a02      	ldr	r2, [pc, #8]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007b60:	e006      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007b62:	bf00      	nop
 8007b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b80:	2300      	movs	r3, #0
 8007b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	d055      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b9c:	d033      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ba2:	d82c      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba8:	d02f      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bae:	d826      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007bb0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bb4:	d02b      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007bb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bba:	d820      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc0:	d012      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc6:	d81a      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d022      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd0:	d115      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 fc18 	bl	8009410 <RCCEx_PLL2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007be6:	e015      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bec:	3328      	adds	r3, #40	; 0x28
 8007bee:	2102      	movs	r1, #2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 fcbf 	bl	8009574 <RCCEx_PLL3_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bfc:	e00a      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007c04:	e006      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007c06:	bf00      	nop
 8007c08:	e004      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007c0a:	bf00      	nop
 8007c0c:	e002      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007c0e:	bf00      	nop
 8007c10:	e000      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c1c:	4ba1      	ldr	r3, [pc, #644]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c20:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c2c:	4a9d      	ldr	r2, [pc, #628]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	6593      	str	r3, [r2, #88]	; 0x58
 8007c32:	e003      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f002 0308 	and.w	r3, r2, #8
 8007c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007c56:	460b      	mov	r3, r1
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	d01e      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c68:	d10c      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c6e:	3328      	adds	r3, #40	; 0x28
 8007c70:	2102      	movs	r1, #2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 fc7e 	bl	8009574 <RCCEx_PLL3_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c84:	4b87      	ldr	r3, [pc, #540]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c94:	4a83      	ldr	r2, [pc, #524]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c96:	430b      	orrs	r3, r1
 8007c98:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f002 0310 	and.w	r3, r2, #16
 8007ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007caa:	2300      	movs	r3, #0
 8007cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	d01e      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ccc:	3328      	adds	r3, #40	; 0x28
 8007cce:	2102      	movs	r1, #2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 fc4f 	bl	8009574 <RCCEx_PLL3_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ce2:	4b70      	ldr	r3, [pc, #448]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cf2:	4a6c      	ldr	r2, [pc, #432]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007d12:	460b      	mov	r3, r1
 8007d14:	4313      	orrs	r3, r2
 8007d16:	d03e      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d24:	d022      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2a:	d81b      	bhi.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d34:	d00b      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007d36:	e015      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 fb65 	bl	8009410 <RCCEx_PLL2_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d4c:	e00f      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d52:	3328      	adds	r3, #40	; 0x28
 8007d54:	2102      	movs	r1, #2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 fc0c 	bl	8009574 <RCCEx_PLL3_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d62:	e004      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007d6a:	e000      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10b      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d76:	4b4b      	ldr	r3, [pc, #300]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d86:	4a47      	ldr	r2, [pc, #284]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d8c:	e003      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007da2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007da4:	2300      	movs	r3, #0
 8007da6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007da8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007dac:	460b      	mov	r3, r1
 8007dae:	4313      	orrs	r3, r2
 8007db0:	d03b      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dbe:	d01f      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dc4:	d818      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dca:	d003      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd0:	d007      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007dd2:	e011      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd4:	4b33      	ldr	r3, [pc, #204]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	4a32      	ldr	r2, [pc, #200]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007de0:	e00f      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007de6:	3328      	adds	r3, #40	; 0x28
 8007de8:	2101      	movs	r1, #1
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 fbc2 	bl	8009574 <RCCEx_PLL3_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007df6:	e004      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007dfe:	e000      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10b      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e0a:	4b26      	ldr	r3, [pc, #152]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1a:	4a22      	ldr	r2, [pc, #136]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6553      	str	r3, [r2, #84]	; 0x54
 8007e20:	e003      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007e36:	673b      	str	r3, [r7, #112]	; 0x70
 8007e38:	2300      	movs	r3, #0
 8007e3a:	677b      	str	r3, [r7, #116]	; 0x74
 8007e3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007e40:	460b      	mov	r3, r1
 8007e42:	4313      	orrs	r3, r2
 8007e44:	d034      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e54:	d007      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007e56:	e011      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e58:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a11      	ldr	r2, [pc, #68]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e64:	e00e      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	2102      	movs	r1, #2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f001 face 	bl	8009410 <RCCEx_PLL2_Config>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e7a:	e003      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10d      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9a:	4a02      	ldr	r2, [pc, #8]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ea0:	e006      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007ea2:	bf00      	nop
 8007ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007eac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ec2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	d00c      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ed0:	3328      	adds	r3, #40	; 0x28
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fb4d 	bl	8009574 <RCCEx_PLL3_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8007ef8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d038      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f0e:	d018      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f14:	d811      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f1a:	d014      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f20:	d80b      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d011      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f2a:	d106      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f2c:	4bc3      	ldr	r3, [pc, #780]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	4ac2      	ldr	r2, [pc, #776]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f38:	e008      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007f40:	e004      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007f42:	bf00      	nop
 8007f44:	e002      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007f46:	bf00      	nop
 8007f48:	e000      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10b      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f54:	4bb9      	ldr	r3, [pc, #740]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	4ab5      	ldr	r2, [pc, #724]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f66:	430b      	orrs	r3, r1
 8007f68:	6553      	str	r3, [r2, #84]	; 0x54
 8007f6a:	e003      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007f80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f82:	2300      	movs	r3, #0
 8007f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	d009      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f90:	4baa      	ldr	r3, [pc, #680]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9e:	4aa7      	ldr	r2, [pc, #668]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	657b      	str	r3, [r7, #84]	; 0x54
 8007fb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d009      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fc0:	4b9e      	ldr	r3, [pc, #632]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	4a9b      	ldr	r2, [pc, #620]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007fea:	460b      	mov	r3, r1
 8007fec:	4313      	orrs	r3, r2
 8007fee:	d009      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007ff0:	4b92      	ldr	r3, [pc, #584]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffe:	4a8f      	ldr	r2, [pc, #572]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008000:	430b      	orrs	r3, r1
 8008002:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008010:	643b      	str	r3, [r7, #64]	; 0x40
 8008012:	2300      	movs	r3, #0
 8008014:	647b      	str	r3, [r7, #68]	; 0x44
 8008016:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800801a:	460b      	mov	r3, r1
 800801c:	4313      	orrs	r3, r2
 800801e:	d00e      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008020:	4b86      	ldr	r3, [pc, #536]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	4a85      	ldr	r2, [pc, #532]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008026:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800802a:	6113      	str	r3, [r2, #16]
 800802c:	4b83      	ldr	r3, [pc, #524]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800802e:	6919      	ldr	r1, [r3, #16]
 8008030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008034:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008038:	4a80      	ldr	r2, [pc, #512]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800803a:	430b      	orrs	r3, r1
 800803c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800804a:	63bb      	str	r3, [r7, #56]	; 0x38
 800804c:	2300      	movs	r3, #0
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008050:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008054:	460b      	mov	r3, r1
 8008056:	4313      	orrs	r3, r2
 8008058:	d009      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800805a:	4b78      	ldr	r3, [pc, #480]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800805c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008068:	4a74      	ldr	r2, [pc, #464]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800806a:	430b      	orrs	r3, r1
 800806c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800806e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800807a:	633b      	str	r3, [r7, #48]	; 0x30
 800807c:	2300      	movs	r3, #0
 800807e:	637b      	str	r3, [r7, #52]	; 0x34
 8008080:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800808a:	4b6c      	ldr	r3, [pc, #432]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800808c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800809a:	4a68      	ldr	r2, [pc, #416]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800809c:	430b      	orrs	r3, r1
 800809e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	2100      	movs	r1, #0
 80080aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80080b6:	460b      	mov	r3, r1
 80080b8:	4313      	orrs	r3, r2
 80080ba:	d011      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080c0:	3308      	adds	r3, #8
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 f9a3 	bl	8009410 <RCCEx_PLL2_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80080d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80080e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	2100      	movs	r1, #0
 80080ea:	6239      	str	r1, [r7, #32]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
 80080f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080f6:	460b      	mov	r3, r1
 80080f8:	4313      	orrs	r3, r2
 80080fa:	d011      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008100:	3308      	adds	r3, #8
 8008102:	2101      	movs	r1, #1
 8008104:	4618      	mov	r0, r3
 8008106:	f001 f983 	bl	8009410 <RCCEx_PLL2_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008110:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800811c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	2100      	movs	r1, #0
 800812a:	61b9      	str	r1, [r7, #24]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008136:	460b      	mov	r3, r1
 8008138:	4313      	orrs	r3, r2
 800813a:	d011      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800813c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008140:	3308      	adds	r3, #8
 8008142:	2102      	movs	r1, #2
 8008144:	4618      	mov	r0, r3
 8008146:	f001 f963 	bl	8009410 <RCCEx_PLL2_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008150:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008158:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800815c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	2100      	movs	r1, #0
 800816a:	6139      	str	r1, [r7, #16]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008176:	460b      	mov	r3, r1
 8008178:	4313      	orrs	r3, r2
 800817a:	d011      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800817c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008180:	3328      	adds	r3, #40	; 0x28
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f001 f9f5 	bl	8009574 <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8008190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008198:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800819c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80081a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	2100      	movs	r1, #0
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081b6:	460b      	mov	r3, r1
 80081b8:	4313      	orrs	r3, r2
 80081ba:	d011      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081c0:	3328      	adds	r3, #40	; 0x28
 80081c2:	2101      	movs	r1, #1
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 f9d5 	bl	8009574 <RCCEx_PLL3_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80081d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80081dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80081e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	2100      	movs	r1, #0
 80081ea:	6039      	str	r1, [r7, #0]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	607b      	str	r3, [r7, #4]
 80081f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081f6:	460b      	mov	r3, r1
 80081f8:	4313      	orrs	r3, r2
 80081fa:	d011      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008200:	3328      	adds	r3, #40	; 0x28
 8008202:	2102      	movs	r1, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f001 f9b5 	bl	8009574 <RCCEx_PLL3_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800821c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8008220:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	e000      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
}
 800822e:	4618      	mov	r0, r3
 8008230:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008234:	46bd      	mov	sp, r7
 8008236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800823a:	bf00      	nop
 800823c:	58024400 	.word	0x58024400

08008240 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b090      	sub	sp, #64	; 0x40
 8008244:	af00      	add	r7, sp, #0
 8008246:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800824a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800824e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008252:	430b      	orrs	r3, r1
 8008254:	f040 8094 	bne.w	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008258:	4b97      	ldr	r3, [pc, #604]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800825a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2b04      	cmp	r3, #4
 8008266:	f200 8087 	bhi.w	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800826a:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008285 	.word	0x08008285
 8008274:	080082ad 	.word	0x080082ad
 8008278:	080082d5 	.word	0x080082d5
 800827c:	08008371 	.word	0x08008371
 8008280:	080082fd 	.word	0x080082fd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008284:	4b8c      	ldr	r3, [pc, #560]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008290:	d108      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008296:	4618      	mov	r0, r3
 8008298:	f000 ff68 	bl	800916c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a0:	f000 bc97 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a8:	f000 bc93 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082ac:	4b82      	ldr	r3, [pc, #520]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082b8:	d108      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ba:	f107 0318 	add.w	r3, r7, #24
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fcac 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082c8:	f000 bc83 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d0:	f000 bc7f 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082d4:	4b78      	ldr	r3, [pc, #480]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e0:	d108      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082e2:	f107 030c 	add.w	r3, r7, #12
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fdec 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082f0:	f000 bc6f 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f8:	f000 bc6b 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082fc:	4b6e      	ldr	r3, [pc, #440]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008304:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008306:	4b6c      	ldr	r3, [pc, #432]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b04      	cmp	r3, #4
 8008310:	d10c      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	2b00      	cmp	r3, #0
 8008316:	d109      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008318:	4b67      	ldr	r3, [pc, #412]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	08db      	lsrs	r3, r3, #3
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	4a66      	ldr	r2, [pc, #408]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832a:	e01f      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800832c:	4b62      	ldr	r3, [pc, #392]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008338:	d106      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800833a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008340:	d102      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008342:	4b5f      	ldr	r3, [pc, #380]	; (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008346:	e011      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008348:	4b5b      	ldr	r3, [pc, #364]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008354:	d106      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800835c:	d102      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800835e:	4b59      	ldr	r3, [pc, #356]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008362:	e003      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008368:	f000 bc33 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800836c:	f000 bc31 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008370:	4b55      	ldr	r3, [pc, #340]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008374:	f000 bc2d 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800837c:	f000 bc29 	b.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008384:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008388:	430b      	orrs	r3, r1
 800838a:	f040 809f 	bne.w	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800838e:	4b4a      	ldr	r3, [pc, #296]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008392:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008396:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800839e:	d04d      	beq.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a6:	f200 8084 	bhi.w	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	2bc0      	cmp	r3, #192	; 0xc0
 80083ae:	d07d      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2bc0      	cmp	r3, #192	; 0xc0
 80083b4:	d87d      	bhi.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	2b80      	cmp	r3, #128	; 0x80
 80083ba:	d02d      	beq.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	2b80      	cmp	r3, #128	; 0x80
 80083c0:	d877      	bhi.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d012      	beq.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80083ce:	e070      	b.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083d0:	4b39      	ldr	r3, [pc, #228]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083dc:	d107      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fec2 	bl	800916c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ec:	e3f1      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f2:	e3ee      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083f4:	4b30      	ldr	r3, [pc, #192]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008400:	d107      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008402:	f107 0318 	add.w	r3, r7, #24
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fc08 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008410:	e3df      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008416:	e3dc      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008418:	4b27      	ldr	r3, [pc, #156]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008424:	d107      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008426:	f107 030c 	add.w	r3, r7, #12
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fd4a 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008434:	e3cd      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843a:	e3ca      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800843c:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800843e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008444:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008446:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0304 	and.w	r3, r3, #4
 800844e:	2b04      	cmp	r3, #4
 8008450:	d10c      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	2b00      	cmp	r3, #0
 8008456:	d109      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008458:	4b17      	ldr	r3, [pc, #92]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	08db      	lsrs	r3, r3, #3
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008464:	fa22 f303 	lsr.w	r3, r2, r3
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800846a:	e01e      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008478:	d106      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800847a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008480:	d102      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008486:	e010      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008488:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008494:	d106      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849c:	d102      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a2:	e002      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80084a8:	e393      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80084aa:	e392      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b0:	e38f      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b6:	e38c      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80084b8:	58024400 	.word	0x58024400
 80084bc:	03d09000 	.word	0x03d09000
 80084c0:	003d0900 	.word	0x003d0900
 80084c4:	007a1200 	.word	0x007a1200
 80084c8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80084cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80084d4:	430b      	orrs	r3, r1
 80084d6:	f040 809c 	bne.w	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80084da:	4b9e      	ldr	r3, [pc, #632]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084de:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ea:	d054      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084f2:	f200 808b 	bhi.w	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084fc:	f000 8083 	beq.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008506:	f200 8081 	bhi.w	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008510:	d02f      	beq.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008518:	d878      	bhi.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008526:	d012      	beq.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008528:	e070      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800852a:	4b8a      	ldr	r3, [pc, #552]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008536:	d107      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fe15 	bl	800916c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008546:	e344      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854c:	e341      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800854e:	4b81      	ldr	r3, [pc, #516]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800855a:	d107      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800855c:	f107 0318 	add.w	r3, r7, #24
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fb5b 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856a:	e332      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008570:	e32f      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008572:	4b78      	ldr	r3, [pc, #480]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800857a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857e:	d107      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008580:	f107 030c 	add.w	r3, r7, #12
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fc9d 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800858e:	e320      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008594:	e31d      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008596:	4b6f      	ldr	r3, [pc, #444]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800859e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085a0:	4b6c      	ldr	r3, [pc, #432]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d10c      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80085ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085b2:	4b68      	ldr	r3, [pc, #416]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	08db      	lsrs	r3, r3, #3
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	4a66      	ldr	r2, [pc, #408]	; (8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80085be:	fa22 f303 	lsr.w	r3, r2, r3
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c4:	e01e      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085c6:	4b63      	ldr	r3, [pc, #396]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d2:	d106      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085da:	d102      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085dc:	4b5f      	ldr	r3, [pc, #380]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e0:	e010      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085e2:	4b5c      	ldr	r3, [pc, #368]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ee:	d106      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80085f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f6:	d102      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085f8:	4b59      	ldr	r3, [pc, #356]	; (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085fc:	e002      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8008602:	e2e6      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008604:	e2e5      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008606:	4b57      	ldr	r3, [pc, #348]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860a:	e2e2      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008610:	e2df      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008616:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800861a:	430b      	orrs	r3, r1
 800861c:	f040 80a7 	bne.w	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008620:	4b4c      	ldr	r3, [pc, #304]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008624:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008628:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008630:	d055      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008638:	f200 8096 	bhi.w	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008642:	f000 8084 	beq.w	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800864c:	f200 808c 	bhi.w	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008656:	d030      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865e:	f200 8083 	bhi.w	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866e:	d012      	beq.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008670:	e07a      	b.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008672:	4b38      	ldr	r3, [pc, #224]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800867e:	d107      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fd71 	bl	800916c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868e:	e2a0      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008694:	e29d      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008696:	4b2f      	ldr	r3, [pc, #188]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800869e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086a2:	d107      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a4:	f107 0318 	add.w	r3, r7, #24
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fab7 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b2:	e28e      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b8:	e28b      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086ba:	4b26      	ldr	r3, [pc, #152]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c6:	d107      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c8:	f107 030c 	add.w	r3, r7, #12
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fbf9 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d6:	e27c      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086dc:	e279      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086de:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086e8:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d10c      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80086f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086fa:	4b16      	ldr	r3, [pc, #88]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	08db      	lsrs	r3, r3, #3
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	4a14      	ldr	r2, [pc, #80]	; (8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008706:	fa22 f303 	lsr.w	r3, r2, r3
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800870c:	e01e      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871a:	d106      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800871c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008722:	d102      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008724:	4b0d      	ldr	r3, [pc, #52]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008728:	e010      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800872a:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008736:	d106      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873e:	d102      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008744:	e002      	b.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800874a:	e242      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800874c:	e241      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800874e:	4b05      	ldr	r3, [pc, #20]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008752:	e23e      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008754:	58024400 	.word	0x58024400
 8008758:	03d09000 	.word	0x03d09000
 800875c:	003d0900 	.word	0x003d0900
 8008760:	007a1200 	.word	0x007a1200
 8008764:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876c:	e231      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800876e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008772:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008776:	430b      	orrs	r3, r1
 8008778:	f040 8085 	bne.w	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800877c:	4b9c      	ldr	r3, [pc, #624]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800877e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008780:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800878c:	d06b      	beq.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008794:	d874      	bhi.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800879c:	d056      	beq.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087a4:	d86c      	bhi.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087ac:	d03b      	beq.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087b4:	d864      	bhi.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087bc:	d021      	beq.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c4:	d85c      	bhi.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80087cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d2:	d004      	beq.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80087d4:	e054      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80087d6:	f7fe fb07 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 80087da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087dc:	e1f9      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087de:	4b84      	ldr	r3, [pc, #528]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ea:	d107      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ec:	f107 0318 	add.w	r3, r7, #24
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fa13 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087fa:	e1ea      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008800:	e1e7      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008802:	4b7b      	ldr	r3, [pc, #492]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800880a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880e:	d107      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fb55 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881e:	e1d8      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008824:	e1d5      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008826:	4b72      	ldr	r3, [pc, #456]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b04      	cmp	r3, #4
 8008830:	d109      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008832:	4b6f      	ldr	r3, [pc, #444]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	4a6d      	ldr	r2, [pc, #436]	; (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800883e:	fa22 f303 	lsr.w	r3, r2, r3
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008844:	e1c5      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884a:	e1c2      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800884c:	4b68      	ldr	r3, [pc, #416]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008858:	d102      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800885a:	4b67      	ldr	r3, [pc, #412]	; (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800885e:	e1b8      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008864:	e1b5      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008866:	4b62      	ldr	r3, [pc, #392]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008872:	d102      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008874:	4b61      	ldr	r3, [pc, #388]	; (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008878:	e1ab      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887e:	e1a8      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008884:	e1a5      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800888a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800888e:	430b      	orrs	r3, r1
 8008890:	d173      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008892:	4b57      	ldr	r3, [pc, #348]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008896:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800889a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088a2:	d02f      	beq.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088aa:	d863      	bhi.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b8:	d012      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80088ba:	e05b      	b.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088bc:	4b4c      	ldr	r3, [pc, #304]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088c8:	d107      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ca:	f107 0318 	add.w	r3, r7, #24
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f9a4 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d8:	e17b      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088de:	e178      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e0:	4b43      	ldr	r3, [pc, #268]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ec:	d107      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ee:	f107 030c 	add.w	r3, r7, #12
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fae6 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fc:	e169      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008902:	e166      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008904:	4b3a      	ldr	r3, [pc, #232]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800890c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800890e:	4b38      	ldr	r3, [pc, #224]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	2b04      	cmp	r3, #4
 8008918:	d10c      	bne.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	2b00      	cmp	r3, #0
 800891e:	d109      	bne.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008920:	4b33      	ldr	r3, [pc, #204]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	08db      	lsrs	r3, r3, #3
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	4a32      	ldr	r2, [pc, #200]	; (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008932:	e01e      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008934:	4b2e      	ldr	r3, [pc, #184]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008940:	d106      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008948:	d102      	bne.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800894a:	4b2b      	ldr	r3, [pc, #172]	; (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800894e:	e010      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008950:	4b27      	ldr	r3, [pc, #156]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800895c:	d106      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008964:	d102      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008966:	4b25      	ldr	r3, [pc, #148]	; (80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800896a:	e002      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008970:	e12f      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008972:	e12e      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008978:	e12b      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800897a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008982:	430b      	orrs	r3, r1
 8008984:	d13c      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008986:	4b1a      	ldr	r3, [pc, #104]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800898e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d012      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800899e:	e023      	b.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089a0:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089ac:	d107      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fbda 	bl	800916c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089bc:	e109      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c2:	e106      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089c4:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089d0:	d107      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0318 	add.w	r3, r7, #24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f920 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e0:	e0f7      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e6:	e0f4      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ec:	e0f1      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80089ee:	bf00      	nop
 80089f0:	58024400 	.word	0x58024400
 80089f4:	03d09000 	.word	0x03d09000
 80089f8:	003d0900 	.word	0x003d0900
 80089fc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a04:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	f040 8091 	bne.w	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a0e:	4b73      	ldr	r3, [pc, #460]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a16:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008a1e:	f000 8081 	beq.w	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008a28:	d87f      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a30:	d06b      	beq.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a38:	d877      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a40:	d056      	beq.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a48:	d86f      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a50:	d03b      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a58:	d867      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a60:	d021      	beq.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a68:	d85f      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d004      	beq.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a76:	d004      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008a78:	e057      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a7a:	f000 f8b9 	bl	8008bf0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a80:	e0a7      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a82:	4b56      	ldr	r3, [pc, #344]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a8e:	d107      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a90:	f107 0318 	add.w	r3, r7, #24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 f8c1 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a9e:	e098      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa4:	e095      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aa6:	4b4d      	ldr	r3, [pc, #308]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab2:	d107      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 fa03 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac2:	e086      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ac8:	e083      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008aca:	4b44      	ldr	r3, [pc, #272]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d109      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ad6:	4b41      	ldr	r3, [pc, #260]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	08db      	lsrs	r3, r3, #3
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	4a3f      	ldr	r2, [pc, #252]	; (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae8:	e073      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aee:	e070      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008af0:	4b3a      	ldr	r3, [pc, #232]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008afc:	d102      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008afe:	4b39      	ldr	r3, [pc, #228]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b02:	e066      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b08:	e063      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b0a:	4b34      	ldr	r3, [pc, #208]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b16:	d102      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008b18:	4b33      	ldr	r3, [pc, #204]	; (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b1c:	e059      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b22:	e056      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b24:	4b31      	ldr	r3, [pc, #196]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b28:	e053      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b2e:	e050      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	d148      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b3c:	4b27      	ldr	r3, [pc, #156]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b4c:	d02a      	beq.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b54:	d838      	bhi.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b62:	d00d      	beq.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008b64:	e030      	b.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b66:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b72:	d102      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008b74:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b78:	e02b      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b7e:	e028      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b80:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b8c:	d107      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 faea 	bl	800916c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9c:	e019      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba2:	e016      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ba4:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bb0:	d107      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bb2:	f107 0318 	add.w	r3, r7, #24
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f830 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc0:	e007      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc6:	e004      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bcc:	e001      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3740      	adds	r7, #64	; 0x40
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	03d09000 	.word	0x03d09000
 8008be4:	003d0900 	.word	0x003d0900
 8008be8:	007a1200 	.word	0x007a1200
 8008bec:	00bb8000 	.word	0x00bb8000

08008bf0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008bf4:	f7fe f8c8 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	091b      	lsrs	r3, r3, #4
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	4904      	ldr	r1, [pc, #16]	; (8008c18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c06:	5ccb      	ldrb	r3, [r1, r3]
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	58024400 	.word	0x58024400
 8008c18:	08010b20 	.word	0x08010b20

08008c1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b089      	sub	sp, #36	; 0x24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c24:	4ba1      	ldr	r3, [pc, #644]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c2e:	4b9f      	ldr	r3, [pc, #636]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	0b1b      	lsrs	r3, r3, #12
 8008c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c3a:	4b9c      	ldr	r3, [pc, #624]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	091b      	lsrs	r3, r3, #4
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c46:	4b99      	ldr	r3, [pc, #612]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	08db      	lsrs	r3, r3, #3
 8008c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	fb02 f303 	mul.w	r3, r2, r3
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 8111 	beq.w	8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	f000 8083 	beq.w	8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	f200 80a1 	bhi.w	8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d056      	beq.n	8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c86:	e099      	b.n	8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c88:	4b88      	ldr	r3, [pc, #544]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d02d      	beq.n	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c94:	4b85      	ldr	r3, [pc, #532]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	08db      	lsrs	r3, r3, #3
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	4a84      	ldr	r2, [pc, #528]	; (8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cbe:	4b7b      	ldr	r3, [pc, #492]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cee:	e087      	b.n	8008e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d02:	4b6a      	ldr	r3, [pc, #424]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d32:	e065      	b.n	8008e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d46:	4b59      	ldr	r3, [pc, #356]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d76:	e043      	b.n	8008e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8a:	4b48      	ldr	r3, [pc, #288]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dba:	e021      	b.n	8008e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dce:	4b37      	ldr	r3, [pc, #220]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008de2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e00:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	0a5b      	lsrs	r3, r3, #9
 8008e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e26:	ee17 2a90 	vmov	r2, s15
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e2e:	4b1f      	ldr	r3, [pc, #124]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e54:	ee17 2a90 	vmov	r2, s15
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e5c:	4b13      	ldr	r3, [pc, #76]	; (8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	0e1b      	lsrs	r3, r3, #24
 8008e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e82:	ee17 2a90 	vmov	r2, s15
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e8a:	e008      	b.n	8008e9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	609a      	str	r2, [r3, #8]
}
 8008e9e:	bf00      	nop
 8008ea0:	3724      	adds	r7, #36	; 0x24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	03d09000 	.word	0x03d09000
 8008eb4:	46000000 	.word	0x46000000
 8008eb8:	4c742400 	.word	0x4c742400
 8008ebc:	4a742400 	.word	0x4a742400
 8008ec0:	4af42400 	.word	0x4af42400

08008ec4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b089      	sub	sp, #36	; 0x24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ecc:	4ba1      	ldr	r3, [pc, #644]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed0:	f003 0303 	and.w	r3, r3, #3
 8008ed4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ed6:	4b9f      	ldr	r3, [pc, #636]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	0d1b      	lsrs	r3, r3, #20
 8008edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ee0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ee2:	4b9c      	ldr	r3, [pc, #624]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008eee:	4b99      	ldr	r3, [pc, #612]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef2:	08db      	lsrs	r3, r3, #3
 8008ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	fb02 f303 	mul.w	r3, r2, r3
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8111 	beq.w	8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	f000 8083 	beq.w	8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	f200 80a1 	bhi.w	8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d056      	beq.n	8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f2e:	e099      	b.n	8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f30:	4b88      	ldr	r3, [pc, #544]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d02d      	beq.n	8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f3c:	4b85      	ldr	r3, [pc, #532]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	08db      	lsrs	r3, r3, #3
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	4a84      	ldr	r2, [pc, #528]	; (8009158 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f48:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	ee07 3a90 	vmov	s15, r3
 8008f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f66:	4b7b      	ldr	r3, [pc, #492]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800915c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f96:	e087      	b.n	80090a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009160 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008faa:	4b6a      	ldr	r3, [pc, #424]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800915c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fda:	e065      	b.n	80090a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fee:	4b59      	ldr	r3, [pc, #356]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009002:	eddf 5a56 	vldr	s11, [pc, #344]	; 800915c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800900e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800901e:	e043      	b.n	80090a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800902e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009032:	4b48      	ldr	r3, [pc, #288]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009042:	ed97 6a03 	vldr	s12, [r7, #12]
 8009046:	eddf 5a45 	vldr	s11, [pc, #276]	; 800915c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800904a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800904e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009062:	e021      	b.n	80090a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009076:	4b37      	ldr	r3, [pc, #220]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009086:	ed97 6a03 	vldr	s12, [r7, #12]
 800908a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800915c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800908e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800909a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090a8:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	0a5b      	lsrs	r3, r3, #9
 80090ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ce:	ee17 2a90 	vmov	r2, s15
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090d6:	4b1f      	ldr	r3, [pc, #124]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	0c1b      	lsrs	r3, r3, #16
 80090dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fc:	ee17 2a90 	vmov	r2, s15
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009104:	4b13      	ldr	r3, [pc, #76]	; (8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	0e1b      	lsrs	r3, r3, #24
 800910a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800911a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800911e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912a:	ee17 2a90 	vmov	r2, s15
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009132:	e008      	b.n	8009146 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	609a      	str	r2, [r3, #8]
}
 8009146:	bf00      	nop
 8009148:	3724      	adds	r7, #36	; 0x24
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	58024400 	.word	0x58024400
 8009158:	03d09000 	.word	0x03d09000
 800915c:	46000000 	.word	0x46000000
 8009160:	4c742400 	.word	0x4c742400
 8009164:	4a742400 	.word	0x4a742400
 8009168:	4af42400 	.word	0x4af42400

0800916c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800916c:	b480      	push	{r7}
 800916e:	b089      	sub	sp, #36	; 0x24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009174:	4ba0      	ldr	r3, [pc, #640]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800917e:	4b9e      	ldr	r3, [pc, #632]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009182:	091b      	lsrs	r3, r3, #4
 8009184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009188:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800918a:	4b9b      	ldr	r3, [pc, #620]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800918c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009194:	4b98      	ldr	r3, [pc, #608]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009198:	08db      	lsrs	r3, r3, #3
 800919a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
 80091a4:	ee07 3a90 	vmov	s15, r3
 80091a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8111 	beq.w	80093da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	f000 8083 	beq.w	80092c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	f200 80a1 	bhi.w	800930a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d056      	beq.n	8009282 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80091d4:	e099      	b.n	800930a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d6:	4b88      	ldr	r3, [pc, #544]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d02d      	beq.n	800923e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091e2:	4b85      	ldr	r3, [pc, #532]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	08db      	lsrs	r3, r3, #3
 80091e8:	f003 0303 	and.w	r3, r3, #3
 80091ec:	4a83      	ldr	r2, [pc, #524]	; (80093fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80091ee:	fa22 f303 	lsr.w	r3, r2, r3
 80091f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	ee07 3a90 	vmov	s15, r3
 8009204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920c:	4b7a      	ldr	r3, [pc, #488]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800920e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009214:	ee07 3a90 	vmov	s15, r3
 8009218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009220:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800922c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009238:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800923c:	e087      	b.n	800934e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009248:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009404 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800924c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009250:	4b69      	ldr	r3, [pc, #420]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009260:	ed97 6a03 	vldr	s12, [r7, #12]
 8009264:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009280:	e065      	b.n	800934e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	ee07 3a90 	vmov	s15, r3
 8009288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009408 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009294:	4b58      	ldr	r3, [pc, #352]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092c4:	e043      	b.n	800934e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800940c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80092d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d8:	4b47      	ldr	r3, [pc, #284]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009304:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009308:	e021      	b.n	800934e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009314:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009404 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931c:	4b36      	ldr	r3, [pc, #216]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009330:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800934c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800934e:	4b2a      	ldr	r3, [pc, #168]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009352:	0a5b      	lsrs	r3, r3, #9
 8009354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009358:	ee07 3a90 	vmov	s15, r3
 800935c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009364:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009368:	edd7 6a07 	vldr	s13, [r7, #28]
 800936c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009374:	ee17 2a90 	vmov	r2, s15
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800937c:	4b1e      	ldr	r3, [pc, #120]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	0c1b      	lsrs	r3, r3, #16
 8009382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009396:	edd7 6a07 	vldr	s13, [r7, #28]
 800939a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a2:	ee17 2a90 	vmov	r2, s15
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80093aa:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ae:	0e1b      	lsrs	r3, r3, #24
 80093b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d0:	ee17 2a90 	vmov	r2, s15
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093d8:	e008      	b.n	80093ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	609a      	str	r2, [r3, #8]
}
 80093ec:	bf00      	nop
 80093ee:	3724      	adds	r7, #36	; 0x24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	58024400 	.word	0x58024400
 80093fc:	03d09000 	.word	0x03d09000
 8009400:	46000000 	.word	0x46000000
 8009404:	4c742400 	.word	0x4c742400
 8009408:	4a742400 	.word	0x4a742400
 800940c:	4af42400 	.word	0x4af42400

08009410 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800941e:	4b53      	ldr	r3, [pc, #332]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d101      	bne.n	800942e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e099      	b.n	8009562 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800942e:	4b4f      	ldr	r3, [pc, #316]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a4e      	ldr	r2, [pc, #312]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009434:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800943a:	f7f8 fa21 	bl	8001880 <HAL_GetTick>
 800943e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009440:	e008      	b.n	8009454 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009442:	f7f8 fa1d 	bl	8001880 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	2b02      	cmp	r3, #2
 800944e:	d901      	bls.n	8009454 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e086      	b.n	8009562 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009454:	4b45      	ldr	r3, [pc, #276]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f0      	bne.n	8009442 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009460:	4b42      	ldr	r3, [pc, #264]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	031b      	lsls	r3, r3, #12
 800946e:	493f      	ldr	r1, [pc, #252]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009470:	4313      	orrs	r3, r2
 8009472:	628b      	str	r3, [r1, #40]	; 0x28
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	3b01      	subs	r3, #1
 800947a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	3b01      	subs	r3, #1
 8009484:	025b      	lsls	r3, r3, #9
 8009486:	b29b      	uxth	r3, r3
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	3b01      	subs	r3, #1
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	3b01      	subs	r3, #1
 800949e:	061b      	lsls	r3, r3, #24
 80094a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094a4:	4931      	ldr	r1, [pc, #196]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094aa:	4b30      	ldr	r3, [pc, #192]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	492d      	ldr	r1, [pc, #180]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80094bc:	4b2b      	ldr	r3, [pc, #172]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	f023 0220 	bic.w	r2, r3, #32
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	4928      	ldr	r1, [pc, #160]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80094ce:	4b27      	ldr	r3, [pc, #156]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	4a26      	ldr	r2, [pc, #152]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094d4:	f023 0310 	bic.w	r3, r3, #16
 80094d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094da:	4b24      	ldr	r3, [pc, #144]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094de:	4b24      	ldr	r3, [pc, #144]	; (8009570 <RCCEx_PLL2_Config+0x160>)
 80094e0:	4013      	ands	r3, r2
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	69d2      	ldr	r2, [r2, #28]
 80094e6:	00d2      	lsls	r2, r2, #3
 80094e8:	4920      	ldr	r1, [pc, #128]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094ee:	4b1f      	ldr	r3, [pc, #124]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	4a1e      	ldr	r2, [pc, #120]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 80094f4:	f043 0310 	orr.w	r3, r3, #16
 80094f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d106      	bne.n	800950e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009500:	4b1a      	ldr	r3, [pc, #104]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	4a19      	ldr	r2, [pc, #100]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800950a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800950c:	e00f      	b.n	800952e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d106      	bne.n	8009522 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009514:	4b15      	ldr	r3, [pc, #84]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	4a14      	ldr	r2, [pc, #80]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 800951a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800951e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009520:	e005      	b.n	800952e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009522:	4b12      	ldr	r3, [pc, #72]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	4a11      	ldr	r2, [pc, #68]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800952c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a0e      	ldr	r2, [pc, #56]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800953a:	f7f8 f9a1 	bl	8001880 <HAL_GetTick>
 800953e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009540:	e008      	b.n	8009554 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009542:	f7f8 f99d 	bl	8001880 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	2b02      	cmp	r3, #2
 800954e:	d901      	bls.n	8009554 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e006      	b.n	8009562 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <RCCEx_PLL2_Config+0x15c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d0f0      	beq.n	8009542 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	58024400 	.word	0x58024400
 8009570:	ffff0007 	.word	0xffff0007

08009574 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009582:	4b53      	ldr	r3, [pc, #332]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b03      	cmp	r3, #3
 800958c:	d101      	bne.n	8009592 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e099      	b.n	80096c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009592:	4b4f      	ldr	r3, [pc, #316]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a4e      	ldr	r2, [pc, #312]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800959c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800959e:	f7f8 f96f 	bl	8001880 <HAL_GetTick>
 80095a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095a4:	e008      	b.n	80095b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095a6:	f7f8 f96b 	bl	8001880 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d901      	bls.n	80095b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e086      	b.n	80096c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095b8:	4b45      	ldr	r3, [pc, #276]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1f0      	bne.n	80095a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80095c4:	4b42      	ldr	r3, [pc, #264]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	051b      	lsls	r3, r3, #20
 80095d2:	493f      	ldr	r1, [pc, #252]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	628b      	str	r3, [r1, #40]	; 0x28
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	3b01      	subs	r3, #1
 80095de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	025b      	lsls	r3, r3, #9
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	041b      	lsls	r3, r3, #16
 80095f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	3b01      	subs	r3, #1
 8009602:	061b      	lsls	r3, r3, #24
 8009604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009608:	4931      	ldr	r1, [pc, #196]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800960a:	4313      	orrs	r3, r2
 800960c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800960e:	4b30      	ldr	r3, [pc, #192]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	492d      	ldr	r1, [pc, #180]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800961c:	4313      	orrs	r3, r2
 800961e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009620:	4b2b      	ldr	r3, [pc, #172]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	4928      	ldr	r1, [pc, #160]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800962e:	4313      	orrs	r3, r2
 8009630:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009632:	4b27      	ldr	r3, [pc, #156]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009636:	4a26      	ldr	r2, [pc, #152]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800963c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800963e:	4b24      	ldr	r3, [pc, #144]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009642:	4b24      	ldr	r3, [pc, #144]	; (80096d4 <RCCEx_PLL3_Config+0x160>)
 8009644:	4013      	ands	r3, r2
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	69d2      	ldr	r2, [r2, #28]
 800964a:	00d2      	lsls	r2, r2, #3
 800964c:	4920      	ldr	r1, [pc, #128]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800964e:	4313      	orrs	r3, r2
 8009650:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009652:	4b1f      	ldr	r3, [pc, #124]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	4a1e      	ldr	r2, [pc, #120]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800965c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009664:	4b1a      	ldr	r3, [pc, #104]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a19      	ldr	r2, [pc, #100]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800966a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800966e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009670:	e00f      	b.n	8009692 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d106      	bne.n	8009686 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009678:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800967e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009684:	e005      	b.n	8009692 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009686:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968a:	4a11      	ldr	r2, [pc, #68]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 800968c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009690:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a0e      	ldr	r2, [pc, #56]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 8009698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800969c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969e:	f7f8 f8ef 	bl	8001880 <HAL_GetTick>
 80096a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096a4:	e008      	b.n	80096b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096a6:	f7f8 f8eb 	bl	8001880 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e006      	b.n	80096c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096b8:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <RCCEx_PLL3_Config+0x15c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0f0      	beq.n	80096a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	58024400 	.word	0x58024400
 80096d4:	ffff0007 	.word	0xffff0007

080096d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e049      	b.n	800977e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7f7 fe70 	bl	80013e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2202      	movs	r2, #2
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	4619      	mov	r1, r3
 8009716:	4610      	mov	r0, r2
 8009718:	f000 fd48 	bl	800a1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b01      	cmp	r3, #1
 800979a:	d001      	beq.n	80097a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e04c      	b.n	800983a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a26      	ldr	r2, [pc, #152]	; (8009848 <HAL_TIM_Base_Start+0xc0>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d022      	beq.n	80097f8 <HAL_TIM_Base_Start+0x70>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ba:	d01d      	beq.n	80097f8 <HAL_TIM_Base_Start+0x70>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a22      	ldr	r2, [pc, #136]	; (800984c <HAL_TIM_Base_Start+0xc4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d018      	beq.n	80097f8 <HAL_TIM_Base_Start+0x70>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a21      	ldr	r2, [pc, #132]	; (8009850 <HAL_TIM_Base_Start+0xc8>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d013      	beq.n	80097f8 <HAL_TIM_Base_Start+0x70>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a1f      	ldr	r2, [pc, #124]	; (8009854 <HAL_TIM_Base_Start+0xcc>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00e      	beq.n	80097f8 <HAL_TIM_Base_Start+0x70>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a1e      	ldr	r2, [pc, #120]	; (8009858 <HAL_TIM_Base_Start+0xd0>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d009      	beq.n	80097f8 <HAL_TIM_Base_Start+0x70>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a1c      	ldr	r2, [pc, #112]	; (800985c <HAL_TIM_Base_Start+0xd4>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d004      	beq.n	80097f8 <HAL_TIM_Base_Start+0x70>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a1b      	ldr	r2, [pc, #108]	; (8009860 <HAL_TIM_Base_Start+0xd8>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d115      	bne.n	8009824 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	4b19      	ldr	r3, [pc, #100]	; (8009864 <HAL_TIM_Base_Start+0xdc>)
 8009800:	4013      	ands	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b06      	cmp	r3, #6
 8009808:	d015      	beq.n	8009836 <HAL_TIM_Base_Start+0xae>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009810:	d011      	beq.n	8009836 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0201 	orr.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009822:	e008      	b.n	8009836 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e000      	b.n	8009838 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40010000 	.word	0x40010000
 800984c:	40000400 	.word	0x40000400
 8009850:	40000800 	.word	0x40000800
 8009854:	40000c00 	.word	0x40000c00
 8009858:	40010400 	.word	0x40010400
 800985c:	40001800 	.word	0x40001800
 8009860:	40014000 	.word	0x40014000
 8009864:	00010007 	.word	0x00010007

08009868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b01      	cmp	r3, #1
 800987a:	d001      	beq.n	8009880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e054      	b.n	800992a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0201 	orr.w	r2, r2, #1
 8009896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a26      	ldr	r2, [pc, #152]	; (8009938 <HAL_TIM_Base_Start_IT+0xd0>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d022      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0x80>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098aa:	d01d      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0x80>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a22      	ldr	r2, [pc, #136]	; (800993c <HAL_TIM_Base_Start_IT+0xd4>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d018      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0x80>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a21      	ldr	r2, [pc, #132]	; (8009940 <HAL_TIM_Base_Start_IT+0xd8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d013      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0x80>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a1f      	ldr	r2, [pc, #124]	; (8009944 <HAL_TIM_Base_Start_IT+0xdc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00e      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0x80>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a1e      	ldr	r2, [pc, #120]	; (8009948 <HAL_TIM_Base_Start_IT+0xe0>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d009      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0x80>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a1c      	ldr	r2, [pc, #112]	; (800994c <HAL_TIM_Base_Start_IT+0xe4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d004      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0x80>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a1b      	ldr	r2, [pc, #108]	; (8009950 <HAL_TIM_Base_Start_IT+0xe8>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d115      	bne.n	8009914 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	4b19      	ldr	r3, [pc, #100]	; (8009954 <HAL_TIM_Base_Start_IT+0xec>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b06      	cmp	r3, #6
 80098f8:	d015      	beq.n	8009926 <HAL_TIM_Base_Start_IT+0xbe>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009900:	d011      	beq.n	8009926 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f042 0201 	orr.w	r2, r2, #1
 8009910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009912:	e008      	b.n	8009926 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0201 	orr.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	e000      	b.n	8009928 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	40010000 	.word	0x40010000
 800993c:	40000400 	.word	0x40000400
 8009940:	40000800 	.word	0x40000800
 8009944:	40000c00 	.word	0x40000c00
 8009948:	40010400 	.word	0x40010400
 800994c:	40001800 	.word	0x40001800
 8009950:	40014000 	.word	0x40014000
 8009954:	00010007 	.word	0x00010007

08009958 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e049      	b.n	80099fe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f841 	bl	8009a06 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3304      	adds	r3, #4
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f000 fc08 	bl	800a1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
	...

08009a1c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d109      	bne.n	8009a40 <HAL_TIM_OC_Start+0x24>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e03c      	b.n	8009aba <HAL_TIM_OC_Start+0x9e>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d109      	bne.n	8009a5a <HAL_TIM_OC_Start+0x3e>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	bf14      	ite	ne
 8009a52:	2301      	movne	r3, #1
 8009a54:	2300      	moveq	r3, #0
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	e02f      	b.n	8009aba <HAL_TIM_OC_Start+0x9e>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d109      	bne.n	8009a74 <HAL_TIM_OC_Start+0x58>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	bf14      	ite	ne
 8009a6c:	2301      	movne	r3, #1
 8009a6e:	2300      	moveq	r3, #0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	e022      	b.n	8009aba <HAL_TIM_OC_Start+0x9e>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b0c      	cmp	r3, #12
 8009a78:	d109      	bne.n	8009a8e <HAL_TIM_OC_Start+0x72>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	bf14      	ite	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	2300      	moveq	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	e015      	b.n	8009aba <HAL_TIM_OC_Start+0x9e>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	d109      	bne.n	8009aa8 <HAL_TIM_OC_Start+0x8c>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	bf14      	ite	ne
 8009aa0:	2301      	movne	r3, #1
 8009aa2:	2300      	moveq	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	e008      	b.n	8009aba <HAL_TIM_OC_Start+0x9e>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	bf14      	ite	ne
 8009ab4:	2301      	movne	r3, #1
 8009ab6:	2300      	moveq	r3, #0
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e0a1      	b.n	8009c06 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <HAL_TIM_OC_Start+0xb6>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ad0:	e023      	b.n	8009b1a <HAL_TIM_OC_Start+0xfe>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d104      	bne.n	8009ae2 <HAL_TIM_OC_Start+0xc6>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ae0:	e01b      	b.n	8009b1a <HAL_TIM_OC_Start+0xfe>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d104      	bne.n	8009af2 <HAL_TIM_OC_Start+0xd6>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009af0:	e013      	b.n	8009b1a <HAL_TIM_OC_Start+0xfe>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b0c      	cmp	r3, #12
 8009af6:	d104      	bne.n	8009b02 <HAL_TIM_OC_Start+0xe6>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b00:	e00b      	b.n	8009b1a <HAL_TIM_OC_Start+0xfe>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b10      	cmp	r3, #16
 8009b06:	d104      	bne.n	8009b12 <HAL_TIM_OC_Start+0xf6>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b10:	e003      	b.n	8009b1a <HAL_TIM_OC_Start+0xfe>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2202      	movs	r2, #2
 8009b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 ff50 	bl	800a9c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a38      	ldr	r2, [pc, #224]	; (8009c10 <HAL_TIM_OC_Start+0x1f4>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d013      	beq.n	8009b5a <HAL_TIM_OC_Start+0x13e>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a37      	ldr	r2, [pc, #220]	; (8009c14 <HAL_TIM_OC_Start+0x1f8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00e      	beq.n	8009b5a <HAL_TIM_OC_Start+0x13e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a35      	ldr	r2, [pc, #212]	; (8009c18 <HAL_TIM_OC_Start+0x1fc>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d009      	beq.n	8009b5a <HAL_TIM_OC_Start+0x13e>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a34      	ldr	r2, [pc, #208]	; (8009c1c <HAL_TIM_OC_Start+0x200>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d004      	beq.n	8009b5a <HAL_TIM_OC_Start+0x13e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a32      	ldr	r2, [pc, #200]	; (8009c20 <HAL_TIM_OC_Start+0x204>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d101      	bne.n	8009b5e <HAL_TIM_OC_Start+0x142>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e000      	b.n	8009b60 <HAL_TIM_OC_Start+0x144>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a25      	ldr	r2, [pc, #148]	; (8009c10 <HAL_TIM_OC_Start+0x1f4>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d022      	beq.n	8009bc4 <HAL_TIM_OC_Start+0x1a8>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b86:	d01d      	beq.n	8009bc4 <HAL_TIM_OC_Start+0x1a8>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a25      	ldr	r2, [pc, #148]	; (8009c24 <HAL_TIM_OC_Start+0x208>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d018      	beq.n	8009bc4 <HAL_TIM_OC_Start+0x1a8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a24      	ldr	r2, [pc, #144]	; (8009c28 <HAL_TIM_OC_Start+0x20c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d013      	beq.n	8009bc4 <HAL_TIM_OC_Start+0x1a8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a22      	ldr	r2, [pc, #136]	; (8009c2c <HAL_TIM_OC_Start+0x210>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d00e      	beq.n	8009bc4 <HAL_TIM_OC_Start+0x1a8>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a1a      	ldr	r2, [pc, #104]	; (8009c14 <HAL_TIM_OC_Start+0x1f8>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d009      	beq.n	8009bc4 <HAL_TIM_OC_Start+0x1a8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a1e      	ldr	r2, [pc, #120]	; (8009c30 <HAL_TIM_OC_Start+0x214>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d004      	beq.n	8009bc4 <HAL_TIM_OC_Start+0x1a8>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <HAL_TIM_OC_Start+0x1fc>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d115      	bne.n	8009bf0 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689a      	ldr	r2, [r3, #8]
 8009bca:	4b1a      	ldr	r3, [pc, #104]	; (8009c34 <HAL_TIM_OC_Start+0x218>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b06      	cmp	r3, #6
 8009bd4:	d015      	beq.n	8009c02 <HAL_TIM_OC_Start+0x1e6>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bdc:	d011      	beq.n	8009c02 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0201 	orr.w	r2, r2, #1
 8009bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bee:	e008      	b.n	8009c02 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	e000      	b.n	8009c04 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400
 8009c18:	40014000 	.word	0x40014000
 8009c1c:	40014400 	.word	0x40014400
 8009c20:	40014800 	.word	0x40014800
 8009c24:	40000400 	.word	0x40000400
 8009c28:	40000800 	.word	0x40000800
 8009c2c:	40000c00 	.word	0x40000c00
 8009c30:	40001800 	.word	0x40001800
 8009c34:	00010007 	.word	0x00010007

08009c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d122      	bne.n	8009c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d11b      	bne.n	8009c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f06f 0202 	mvn.w	r2, #2
 8009c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa78 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009c80:	e005      	b.n	8009c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa6a 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa7b 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	d122      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f003 0304 	and.w	r3, r3, #4
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d11b      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0204 	mvn.w	r2, #4
 8009cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fa4e 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009cd4:	e005      	b.n	8009ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa40 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fa51 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0308 	and.w	r3, r3, #8
 8009cf2:	2b08      	cmp	r3, #8
 8009cf4:	d122      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d11b      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0208 	mvn.w	r2, #8
 8009d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2204      	movs	r2, #4
 8009d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa24 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009d28:	e005      	b.n	8009d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa16 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fa27 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d122      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f003 0310 	and.w	r3, r3, #16
 8009d54:	2b10      	cmp	r3, #16
 8009d56:	d11b      	bne.n	8009d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0210 	mvn.w	r2, #16
 8009d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2208      	movs	r2, #8
 8009d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f9fa 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009d7c:	e005      	b.n	8009d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9ec 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f9fd 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d10e      	bne.n	8009dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d107      	bne.n	8009dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f06f 0201 	mvn.w	r2, #1
 8009db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7f7 fa3c 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc6:	2b80      	cmp	r3, #128	; 0x80
 8009dc8:	d10e      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd4:	2b80      	cmp	r3, #128	; 0x80
 8009dd6:	d107      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 ff4e 	bl	800ac84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df6:	d10e      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e02:	2b80      	cmp	r3, #128	; 0x80
 8009e04:	d107      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 ff41 	bl	800ac98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e20:	2b40      	cmp	r3, #64	; 0x40
 8009e22:	d10e      	bne.n	8009e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2e:	2b40      	cmp	r3, #64	; 0x40
 8009e30:	d107      	bne.n	8009e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f9ab 	bl	800a198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	d10e      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b20      	cmp	r3, #32
 8009e5c:	d107      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f06f 0220 	mvn.w	r2, #32
 8009e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 ff01 	bl	800ac70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d101      	bne.n	8009e96 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009e92:	2302      	movs	r3, #2
 8009e94:	e066      	b.n	8009f64 <HAL_TIM_OC_ConfigChannel+0xec>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b14      	cmp	r3, #20
 8009ea2:	d857      	bhi.n	8009f54 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009ea4:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <HAL_TIM_OC_ConfigChannel+0x34>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009f55 	.word	0x08009f55
 8009eb4:	08009f55 	.word	0x08009f55
 8009eb8:	08009f55 	.word	0x08009f55
 8009ebc:	08009f0f 	.word	0x08009f0f
 8009ec0:	08009f55 	.word	0x08009f55
 8009ec4:	08009f55 	.word	0x08009f55
 8009ec8:	08009f55 	.word	0x08009f55
 8009ecc:	08009f1d 	.word	0x08009f1d
 8009ed0:	08009f55 	.word	0x08009f55
 8009ed4:	08009f55 	.word	0x08009f55
 8009ed8:	08009f55 	.word	0x08009f55
 8009edc:	08009f2b 	.word	0x08009f2b
 8009ee0:	08009f55 	.word	0x08009f55
 8009ee4:	08009f55 	.word	0x08009f55
 8009ee8:	08009f55 	.word	0x08009f55
 8009eec:	08009f39 	.word	0x08009f39
 8009ef0:	08009f55 	.word	0x08009f55
 8009ef4:	08009f55 	.word	0x08009f55
 8009ef8:	08009f55 	.word	0x08009f55
 8009efc:	08009f47 	.word	0x08009f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68b9      	ldr	r1, [r7, #8]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 f9ea 	bl	800a2e0 <TIM_OC1_SetConfig>
      break;
 8009f0c:	e025      	b.n	8009f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fa73 	bl	800a400 <TIM_OC2_SetConfig>
      break;
 8009f1a:	e01e      	b.n	8009f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68b9      	ldr	r1, [r7, #8]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 faf6 	bl	800a514 <TIM_OC3_SetConfig>
      break;
 8009f28:	e017      	b.n	8009f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fb77 	bl	800a624 <TIM_OC4_SetConfig>
      break;
 8009f36:	e010      	b.n	8009f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fbda 	bl	800a6f8 <TIM_OC5_SetConfig>
      break;
 8009f44:	e009      	b.n	8009f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68b9      	ldr	r1, [r7, #8]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fc37 	bl	800a7c0 <TIM_OC6_SetConfig>
      break;
 8009f52:	e002      	b.n	8009f5a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
      break;
 8009f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d101      	bne.n	8009f88 <HAL_TIM_ConfigClockSource+0x1c>
 8009f84:	2302      	movs	r3, #2
 8009f86:	e0dc      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x1d6>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	4b6a      	ldr	r3, [pc, #424]	; (800a14c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a64      	ldr	r2, [pc, #400]	; (800a150 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	f000 80a9 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fc4:	4a62      	ldr	r2, [pc, #392]	; (800a150 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	f200 80ae 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fcc:	4a61      	ldr	r2, [pc, #388]	; (800a154 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	f000 80a1 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fd4:	4a5f      	ldr	r2, [pc, #380]	; (800a154 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	f200 80a6 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fdc:	4a5e      	ldr	r2, [pc, #376]	; (800a158 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	f000 8099 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fe4:	4a5c      	ldr	r2, [pc, #368]	; (800a158 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	f200 809e 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ff0:	f000 8091 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ff8:	f200 8096 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a000:	f000 8089 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a008:	f200 808e 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a010:	d03e      	beq.n	800a090 <HAL_TIM_ConfigClockSource+0x124>
 800a012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a016:	f200 8087 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a01e:	f000 8086 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x1c2>
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a026:	d87f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a028:	2b70      	cmp	r3, #112	; 0x70
 800a02a:	d01a      	beq.n	800a062 <HAL_TIM_ConfigClockSource+0xf6>
 800a02c:	2b70      	cmp	r3, #112	; 0x70
 800a02e:	d87b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a030:	2b60      	cmp	r3, #96	; 0x60
 800a032:	d050      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x16a>
 800a034:	2b60      	cmp	r3, #96	; 0x60
 800a036:	d877      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a038:	2b50      	cmp	r3, #80	; 0x50
 800a03a:	d03c      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x14a>
 800a03c:	2b50      	cmp	r3, #80	; 0x50
 800a03e:	d873      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	d058      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x18a>
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d86f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a048:	2b30      	cmp	r3, #48	; 0x30
 800a04a:	d064      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a04c:	2b30      	cmp	r3, #48	; 0x30
 800a04e:	d86b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a050:	2b20      	cmp	r3, #32
 800a052:	d060      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a054:	2b20      	cmp	r3, #32
 800a056:	d867      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d05c      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	d05a      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a060:	e062      	b.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6899      	ldr	r1, [r3, #8]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f000 fc89 	bl	800a988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	609a      	str	r2, [r3, #8]
      break;
 800a08e:	e04f      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	6899      	ldr	r1, [r3, #8]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f000 fc72 	bl	800a988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0b2:	609a      	str	r2, [r3, #8]
      break;
 800a0b4:	e03c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6859      	ldr	r1, [r3, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f000 fbe2 	bl	800a88c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2150      	movs	r1, #80	; 0x50
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fc3c 	bl	800a94c <TIM_ITRx_SetConfig>
      break;
 800a0d4:	e02c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6859      	ldr	r1, [r3, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f000 fc01 	bl	800a8ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2160      	movs	r1, #96	; 0x60
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fc2c 	bl	800a94c <TIM_ITRx_SetConfig>
      break;
 800a0f4:	e01c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	6859      	ldr	r1, [r3, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	461a      	mov	r2, r3
 800a104:	f000 fbc2 	bl	800a88c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2140      	movs	r1, #64	; 0x40
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fc1c 	bl	800a94c <TIM_ITRx_SetConfig>
      break;
 800a114:	e00c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f000 fc13 	bl	800a94c <TIM_ITRx_SetConfig>
      break;
 800a126:	e003      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
      break;
 800a12c:	e000      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a12e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	ffceff88 	.word	0xffceff88
 800a150:	00100040 	.word	0x00100040
 800a154:	00100030 	.word	0x00100030
 800a158:	00100020 	.word	0x00100020

0800a15c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a40      	ldr	r2, [pc, #256]	; (800a2c0 <TIM_Base_SetConfig+0x114>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d013      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ca:	d00f      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a3d      	ldr	r2, [pc, #244]	; (800a2c4 <TIM_Base_SetConfig+0x118>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d00b      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a3c      	ldr	r2, [pc, #240]	; (800a2c8 <TIM_Base_SetConfig+0x11c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d007      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a3b      	ldr	r2, [pc, #236]	; (800a2cc <TIM_Base_SetConfig+0x120>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d003      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a3a      	ldr	r2, [pc, #232]	; (800a2d0 <TIM_Base_SetConfig+0x124>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d108      	bne.n	800a1fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a2f      	ldr	r2, [pc, #188]	; (800a2c0 <TIM_Base_SetConfig+0x114>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d01f      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a20c:	d01b      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a2c      	ldr	r2, [pc, #176]	; (800a2c4 <TIM_Base_SetConfig+0x118>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d017      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a2b      	ldr	r2, [pc, #172]	; (800a2c8 <TIM_Base_SetConfig+0x11c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d013      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a2a      	ldr	r2, [pc, #168]	; (800a2cc <TIM_Base_SetConfig+0x120>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d00f      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a29      	ldr	r2, [pc, #164]	; (800a2d0 <TIM_Base_SetConfig+0x124>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00b      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a28      	ldr	r2, [pc, #160]	; (800a2d4 <TIM_Base_SetConfig+0x128>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d007      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a27      	ldr	r2, [pc, #156]	; (800a2d8 <TIM_Base_SetConfig+0x12c>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <TIM_Base_SetConfig+0x9a>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a26      	ldr	r2, [pc, #152]	; (800a2dc <TIM_Base_SetConfig+0x130>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d108      	bne.n	800a258 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a24c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a10      	ldr	r2, [pc, #64]	; (800a2c0 <TIM_Base_SetConfig+0x114>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d00f      	beq.n	800a2a4 <TIM_Base_SetConfig+0xf8>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a12      	ldr	r2, [pc, #72]	; (800a2d0 <TIM_Base_SetConfig+0x124>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00b      	beq.n	800a2a4 <TIM_Base_SetConfig+0xf8>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a11      	ldr	r2, [pc, #68]	; (800a2d4 <TIM_Base_SetConfig+0x128>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d007      	beq.n	800a2a4 <TIM_Base_SetConfig+0xf8>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a10      	ldr	r2, [pc, #64]	; (800a2d8 <TIM_Base_SetConfig+0x12c>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d003      	beq.n	800a2a4 <TIM_Base_SetConfig+0xf8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a0f      	ldr	r2, [pc, #60]	; (800a2dc <TIM_Base_SetConfig+0x130>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d103      	bne.n	800a2ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	691a      	ldr	r2, [r3, #16]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	615a      	str	r2, [r3, #20]
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	40010000 	.word	0x40010000
 800a2c4:	40000400 	.word	0x40000400
 800a2c8:	40000800 	.word	0x40000800
 800a2cc:	40000c00 	.word	0x40000c00
 800a2d0:	40010400 	.word	0x40010400
 800a2d4:	40014000 	.word	0x40014000
 800a2d8:	40014400 	.word	0x40014400
 800a2dc:	40014800 	.word	0x40014800

0800a2e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	f023 0201 	bic.w	r2, r3, #1
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	4b37      	ldr	r3, [pc, #220]	; (800a3e8 <TIM_OC1_SetConfig+0x108>)
 800a30c:	4013      	ands	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f023 0303 	bic.w	r3, r3, #3
 800a316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4313      	orrs	r3, r2
 800a320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f023 0302 	bic.w	r3, r3, #2
 800a328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a2d      	ldr	r2, [pc, #180]	; (800a3ec <TIM_OC1_SetConfig+0x10c>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00f      	beq.n	800a35c <TIM_OC1_SetConfig+0x7c>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a2c      	ldr	r2, [pc, #176]	; (800a3f0 <TIM_OC1_SetConfig+0x110>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00b      	beq.n	800a35c <TIM_OC1_SetConfig+0x7c>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a2b      	ldr	r2, [pc, #172]	; (800a3f4 <TIM_OC1_SetConfig+0x114>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d007      	beq.n	800a35c <TIM_OC1_SetConfig+0x7c>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a2a      	ldr	r2, [pc, #168]	; (800a3f8 <TIM_OC1_SetConfig+0x118>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d003      	beq.n	800a35c <TIM_OC1_SetConfig+0x7c>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a29      	ldr	r2, [pc, #164]	; (800a3fc <TIM_OC1_SetConfig+0x11c>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d10c      	bne.n	800a376 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f023 0308 	bic.w	r3, r3, #8
 800a362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f023 0304 	bic.w	r3, r3, #4
 800a374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a1c      	ldr	r2, [pc, #112]	; (800a3ec <TIM_OC1_SetConfig+0x10c>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d00f      	beq.n	800a39e <TIM_OC1_SetConfig+0xbe>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a1b      	ldr	r2, [pc, #108]	; (800a3f0 <TIM_OC1_SetConfig+0x110>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00b      	beq.n	800a39e <TIM_OC1_SetConfig+0xbe>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a1a      	ldr	r2, [pc, #104]	; (800a3f4 <TIM_OC1_SetConfig+0x114>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d007      	beq.n	800a39e <TIM_OC1_SetConfig+0xbe>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a19      	ldr	r2, [pc, #100]	; (800a3f8 <TIM_OC1_SetConfig+0x118>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d003      	beq.n	800a39e <TIM_OC1_SetConfig+0xbe>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a18      	ldr	r2, [pc, #96]	; (800a3fc <TIM_OC1_SetConfig+0x11c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d111      	bne.n	800a3c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	621a      	str	r2, [r3, #32]
}
 800a3dc:	bf00      	nop
 800a3de:	371c      	adds	r7, #28
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	fffeff8f 	.word	0xfffeff8f
 800a3ec:	40010000 	.word	0x40010000
 800a3f0:	40010400 	.word	0x40010400
 800a3f4:	40014000 	.word	0x40014000
 800a3f8:	40014400 	.word	0x40014400
 800a3fc:	40014800 	.word	0x40014800

0800a400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	f023 0210 	bic.w	r2, r3, #16
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	4b34      	ldr	r3, [pc, #208]	; (800a4fc <TIM_OC2_SetConfig+0xfc>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	021b      	lsls	r3, r3, #8
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4313      	orrs	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f023 0320 	bic.w	r3, r3, #32
 800a44a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	011b      	lsls	r3, r3, #4
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	4313      	orrs	r3, r2
 800a456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a29      	ldr	r2, [pc, #164]	; (800a500 <TIM_OC2_SetConfig+0x100>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d003      	beq.n	800a468 <TIM_OC2_SetConfig+0x68>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a28      	ldr	r2, [pc, #160]	; (800a504 <TIM_OC2_SetConfig+0x104>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d10d      	bne.n	800a484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a46e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4313      	orrs	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a1e      	ldr	r2, [pc, #120]	; (800a500 <TIM_OC2_SetConfig+0x100>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d00f      	beq.n	800a4ac <TIM_OC2_SetConfig+0xac>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a1d      	ldr	r2, [pc, #116]	; (800a504 <TIM_OC2_SetConfig+0x104>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d00b      	beq.n	800a4ac <TIM_OC2_SetConfig+0xac>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a1c      	ldr	r2, [pc, #112]	; (800a508 <TIM_OC2_SetConfig+0x108>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d007      	beq.n	800a4ac <TIM_OC2_SetConfig+0xac>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a1b      	ldr	r2, [pc, #108]	; (800a50c <TIM_OC2_SetConfig+0x10c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d003      	beq.n	800a4ac <TIM_OC2_SetConfig+0xac>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a1a      	ldr	r2, [pc, #104]	; (800a510 <TIM_OC2_SetConfig+0x110>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d113      	bne.n	800a4d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	621a      	str	r2, [r3, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	feff8fff 	.word	0xfeff8fff
 800a500:	40010000 	.word	0x40010000
 800a504:	40010400 	.word	0x40010400
 800a508:	40014000 	.word	0x40014000
 800a50c:	40014400 	.word	0x40014400
 800a510:	40014800 	.word	0x40014800

0800a514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a514:	b480      	push	{r7}
 800a516:	b087      	sub	sp, #28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4b33      	ldr	r3, [pc, #204]	; (800a60c <TIM_OC3_SetConfig+0xf8>)
 800a540:	4013      	ands	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0303 	bic.w	r3, r3, #3
 800a54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a28      	ldr	r2, [pc, #160]	; (800a610 <TIM_OC3_SetConfig+0xfc>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d003      	beq.n	800a57a <TIM_OC3_SetConfig+0x66>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a27      	ldr	r2, [pc, #156]	; (800a614 <TIM_OC3_SetConfig+0x100>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d10d      	bne.n	800a596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1d      	ldr	r2, [pc, #116]	; (800a610 <TIM_OC3_SetConfig+0xfc>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00f      	beq.n	800a5be <TIM_OC3_SetConfig+0xaa>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1c      	ldr	r2, [pc, #112]	; (800a614 <TIM_OC3_SetConfig+0x100>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <TIM_OC3_SetConfig+0xaa>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a1b      	ldr	r2, [pc, #108]	; (800a618 <TIM_OC3_SetConfig+0x104>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d007      	beq.n	800a5be <TIM_OC3_SetConfig+0xaa>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a1a      	ldr	r2, [pc, #104]	; (800a61c <TIM_OC3_SetConfig+0x108>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d003      	beq.n	800a5be <TIM_OC3_SetConfig+0xaa>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a19      	ldr	r2, [pc, #100]	; (800a620 <TIM_OC3_SetConfig+0x10c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d113      	bne.n	800a5e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	011b      	lsls	r3, r3, #4
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	621a      	str	r2, [r3, #32]
}
 800a600:	bf00      	nop
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	fffeff8f 	.word	0xfffeff8f
 800a610:	40010000 	.word	0x40010000
 800a614:	40010400 	.word	0x40010400
 800a618:	40014000 	.word	0x40014000
 800a61c:	40014400 	.word	0x40014400
 800a620:	40014800 	.word	0x40014800

0800a624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	4b24      	ldr	r3, [pc, #144]	; (800a6e0 <TIM_OC4_SetConfig+0xbc>)
 800a650:	4013      	ands	r3, r2
 800a652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a66e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	031b      	lsls	r3, r3, #12
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	4313      	orrs	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a19      	ldr	r2, [pc, #100]	; (800a6e4 <TIM_OC4_SetConfig+0xc0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d00f      	beq.n	800a6a4 <TIM_OC4_SetConfig+0x80>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a18      	ldr	r2, [pc, #96]	; (800a6e8 <TIM_OC4_SetConfig+0xc4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00b      	beq.n	800a6a4 <TIM_OC4_SetConfig+0x80>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a17      	ldr	r2, [pc, #92]	; (800a6ec <TIM_OC4_SetConfig+0xc8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d007      	beq.n	800a6a4 <TIM_OC4_SetConfig+0x80>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a16      	ldr	r2, [pc, #88]	; (800a6f0 <TIM_OC4_SetConfig+0xcc>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d003      	beq.n	800a6a4 <TIM_OC4_SetConfig+0x80>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a15      	ldr	r2, [pc, #84]	; (800a6f4 <TIM_OC4_SetConfig+0xd0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d109      	bne.n	800a6b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	019b      	lsls	r3, r3, #6
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	621a      	str	r2, [r3, #32]
}
 800a6d2:	bf00      	nop
 800a6d4:	371c      	adds	r7, #28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	feff8fff 	.word	0xfeff8fff
 800a6e4:	40010000 	.word	0x40010000
 800a6e8:	40010400 	.word	0x40010400
 800a6ec:	40014000 	.word	0x40014000
 800a6f0:	40014400 	.word	0x40014400
 800a6f4:	40014800 	.word	0x40014800

0800a6f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4b21      	ldr	r3, [pc, #132]	; (800a7a8 <TIM_OC5_SetConfig+0xb0>)
 800a724:	4013      	ands	r3, r2
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	041b      	lsls	r3, r3, #16
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a18      	ldr	r2, [pc, #96]	; (800a7ac <TIM_OC5_SetConfig+0xb4>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00f      	beq.n	800a76e <TIM_OC5_SetConfig+0x76>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a17      	ldr	r2, [pc, #92]	; (800a7b0 <TIM_OC5_SetConfig+0xb8>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00b      	beq.n	800a76e <TIM_OC5_SetConfig+0x76>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a16      	ldr	r2, [pc, #88]	; (800a7b4 <TIM_OC5_SetConfig+0xbc>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d007      	beq.n	800a76e <TIM_OC5_SetConfig+0x76>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a15      	ldr	r2, [pc, #84]	; (800a7b8 <TIM_OC5_SetConfig+0xc0>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d003      	beq.n	800a76e <TIM_OC5_SetConfig+0x76>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a14      	ldr	r2, [pc, #80]	; (800a7bc <TIM_OC5_SetConfig+0xc4>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d109      	bne.n	800a782 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	021b      	lsls	r3, r3, #8
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	621a      	str	r2, [r3, #32]
}
 800a79c:	bf00      	nop
 800a79e:	371c      	adds	r7, #28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	fffeff8f 	.word	0xfffeff8f
 800a7ac:	40010000 	.word	0x40010000
 800a7b0:	40010400 	.word	0x40010400
 800a7b4:	40014000 	.word	0x40014000
 800a7b8:	40014400 	.word	0x40014400
 800a7bc:	40014800 	.word	0x40014800

0800a7c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a1b      	ldr	r3, [r3, #32]
 800a7da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	4b22      	ldr	r3, [pc, #136]	; (800a874 <TIM_OC6_SetConfig+0xb4>)
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	021b      	lsls	r3, r3, #8
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	051b      	lsls	r3, r3, #20
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a19      	ldr	r2, [pc, #100]	; (800a878 <TIM_OC6_SetConfig+0xb8>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d00f      	beq.n	800a838 <TIM_OC6_SetConfig+0x78>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a18      	ldr	r2, [pc, #96]	; (800a87c <TIM_OC6_SetConfig+0xbc>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d00b      	beq.n	800a838 <TIM_OC6_SetConfig+0x78>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a17      	ldr	r2, [pc, #92]	; (800a880 <TIM_OC6_SetConfig+0xc0>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d007      	beq.n	800a838 <TIM_OC6_SetConfig+0x78>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a16      	ldr	r2, [pc, #88]	; (800a884 <TIM_OC6_SetConfig+0xc4>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d003      	beq.n	800a838 <TIM_OC6_SetConfig+0x78>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a15      	ldr	r2, [pc, #84]	; (800a888 <TIM_OC6_SetConfig+0xc8>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d109      	bne.n	800a84c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a83e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	029b      	lsls	r3, r3, #10
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	621a      	str	r2, [r3, #32]
}
 800a866:	bf00      	nop
 800a868:	371c      	adds	r7, #28
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	feff8fff 	.word	0xfeff8fff
 800a878:	40010000 	.word	0x40010000
 800a87c:	40010400 	.word	0x40010400
 800a880:	40014000 	.word	0x40014000
 800a884:	40014400 	.word	0x40014400
 800a888:	40014800 	.word	0x40014800

0800a88c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	f023 0201 	bic.w	r2, r3, #1
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	011b      	lsls	r3, r3, #4
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f023 030a 	bic.w	r3, r3, #10
 800a8c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	621a      	str	r2, [r3, #32]
}
 800a8de:	bf00      	nop
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b087      	sub	sp, #28
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	f023 0210 	bic.w	r2, r3, #16
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6a1b      	ldr	r3, [r3, #32]
 800a90c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	031b      	lsls	r3, r3, #12
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	011b      	lsls	r3, r3, #4
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	4313      	orrs	r3, r2
 800a930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	621a      	str	r2, [r3, #32]
}
 800a93e:	bf00      	nop
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
	...

0800a94c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4b09      	ldr	r3, [pc, #36]	; (800a984 <TIM_ITRx_SetConfig+0x38>)
 800a960:	4013      	ands	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4313      	orrs	r3, r2
 800a96a:	f043 0307 	orr.w	r3, r3, #7
 800a96e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	609a      	str	r2, [r3, #8]
}
 800a976:	bf00      	nop
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	ffcfff8f 	.word	0xffcfff8f

0800a988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a988:	b480      	push	{r7}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	021a      	lsls	r2, r3, #8
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	609a      	str	r2, [r3, #8]
}
 800a9bc:	bf00      	nop
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f003 031f 	and.w	r3, r3, #31
 800a9da:	2201      	movs	r2, #1
 800a9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6a1a      	ldr	r2, [r3, #32]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	43db      	mvns	r3, r3
 800a9ea:	401a      	ands	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a1a      	ldr	r2, [r3, #32]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	f003 031f 	and.w	r3, r3, #31
 800a9fa:	6879      	ldr	r1, [r7, #4]
 800a9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800aa00:	431a      	orrs	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	621a      	str	r2, [r3, #32]
}
 800aa06:	bf00      	nop
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
	...

0800aa14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d101      	bne.n	800aa2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e06d      	b.n	800ab08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2202      	movs	r2, #2
 800aa38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a30      	ldr	r2, [pc, #192]	; (800ab14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d004      	beq.n	800aa60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a2f      	ldr	r2, [pc, #188]	; (800ab18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d108      	bne.n	800aa72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a20      	ldr	r2, [pc, #128]	; (800ab14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d022      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa9e:	d01d      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a1d      	ldr	r2, [pc, #116]	; (800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d018      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a1c      	ldr	r2, [pc, #112]	; (800ab20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d013      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d00e      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a15      	ldr	r2, [pc, #84]	; (800ab18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d009      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a16      	ldr	r2, [pc, #88]	; (800ab28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d004      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a15      	ldr	r2, [pc, #84]	; (800ab2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d10c      	bne.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	40010000 	.word	0x40010000
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40000400 	.word	0x40000400
 800ab20:	40000800 	.word	0x40000800
 800ab24:	40000c00 	.word	0x40000c00
 800ab28:	40001800 	.word	0x40001800
 800ab2c:	40014000 	.word	0x40014000

0800ab30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d101      	bne.n	800ab4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e087      	b.n	800ac5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	041b      	lsls	r3, r3, #16
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a27      	ldr	r2, [pc, #156]	; (800ac68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d004      	beq.n	800abda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a25      	ldr	r2, [pc, #148]	; (800ac6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d106      	bne.n	800abe8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	69db      	ldr	r3, [r3, #28]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a1e      	ldr	r2, [pc, #120]	; (800ac68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d004      	beq.n	800abfc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a1d      	ldr	r2, [pc, #116]	; (800ac6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d126      	bne.n	800ac4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	051b      	lsls	r3, r3, #20
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	4313      	orrs	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a0e      	ldr	r2, [pc, #56]	; (800ac68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d004      	beq.n	800ac3c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a0d      	ldr	r2, [pc, #52]	; (800ac6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d106      	bne.n	800ac4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40010400 	.word	0x40010400

0800ac70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e042      	b.n	800ad44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d106      	bne.n	800acd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7f6 fbe5 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2224      	movs	r2, #36	; 0x24
 800acda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f022 0201 	bic.w	r2, r2, #1
 800acec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f82c 	bl	800ad4c <UART_SetConfig>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d101      	bne.n	800acfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e022      	b.n	800ad44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d002      	beq.n	800ad0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fe8c 	bl	800ba24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689a      	ldr	r2, [r3, #8]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0201 	orr.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 ff13 	bl	800bb68 <UART_CheckIdleState>
 800ad42:	4603      	mov	r3, r0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad50:	b092      	sub	sp, #72	; 0x48
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	689a      	ldr	r2, [r3, #8]
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	431a      	orrs	r2, r3
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4bbe      	ldr	r3, [pc, #760]	; (800b074 <UART_SetConfig+0x328>)
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	6812      	ldr	r2, [r2, #0]
 800ad82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad84:	430b      	orrs	r3, r1
 800ad86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4ab3      	ldr	r2, [pc, #716]	; (800b078 <UART_SetConfig+0x32c>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d004      	beq.n	800adb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adb4:	4313      	orrs	r3, r2
 800adb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689a      	ldr	r2, [r3, #8]
 800adbe:	4baf      	ldr	r3, [pc, #700]	; (800b07c <UART_SetConfig+0x330>)
 800adc0:	4013      	ands	r3, r2
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	6812      	ldr	r2, [r2, #0]
 800adc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800adc8:	430b      	orrs	r3, r1
 800adca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add2:	f023 010f 	bic.w	r1, r3, #15
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4aa6      	ldr	r2, [pc, #664]	; (800b080 <UART_SetConfig+0x334>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d177      	bne.n	800aedc <UART_SetConfig+0x190>
 800adec:	4ba5      	ldr	r3, [pc, #660]	; (800b084 <UART_SetConfig+0x338>)
 800adee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adf4:	2b28      	cmp	r3, #40	; 0x28
 800adf6:	d86d      	bhi.n	800aed4 <UART_SetConfig+0x188>
 800adf8:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <UART_SetConfig+0xb4>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800aea5 	.word	0x0800aea5
 800ae04:	0800aed5 	.word	0x0800aed5
 800ae08:	0800aed5 	.word	0x0800aed5
 800ae0c:	0800aed5 	.word	0x0800aed5
 800ae10:	0800aed5 	.word	0x0800aed5
 800ae14:	0800aed5 	.word	0x0800aed5
 800ae18:	0800aed5 	.word	0x0800aed5
 800ae1c:	0800aed5 	.word	0x0800aed5
 800ae20:	0800aead 	.word	0x0800aead
 800ae24:	0800aed5 	.word	0x0800aed5
 800ae28:	0800aed5 	.word	0x0800aed5
 800ae2c:	0800aed5 	.word	0x0800aed5
 800ae30:	0800aed5 	.word	0x0800aed5
 800ae34:	0800aed5 	.word	0x0800aed5
 800ae38:	0800aed5 	.word	0x0800aed5
 800ae3c:	0800aed5 	.word	0x0800aed5
 800ae40:	0800aeb5 	.word	0x0800aeb5
 800ae44:	0800aed5 	.word	0x0800aed5
 800ae48:	0800aed5 	.word	0x0800aed5
 800ae4c:	0800aed5 	.word	0x0800aed5
 800ae50:	0800aed5 	.word	0x0800aed5
 800ae54:	0800aed5 	.word	0x0800aed5
 800ae58:	0800aed5 	.word	0x0800aed5
 800ae5c:	0800aed5 	.word	0x0800aed5
 800ae60:	0800aebd 	.word	0x0800aebd
 800ae64:	0800aed5 	.word	0x0800aed5
 800ae68:	0800aed5 	.word	0x0800aed5
 800ae6c:	0800aed5 	.word	0x0800aed5
 800ae70:	0800aed5 	.word	0x0800aed5
 800ae74:	0800aed5 	.word	0x0800aed5
 800ae78:	0800aed5 	.word	0x0800aed5
 800ae7c:	0800aed5 	.word	0x0800aed5
 800ae80:	0800aec5 	.word	0x0800aec5
 800ae84:	0800aed5 	.word	0x0800aed5
 800ae88:	0800aed5 	.word	0x0800aed5
 800ae8c:	0800aed5 	.word	0x0800aed5
 800ae90:	0800aed5 	.word	0x0800aed5
 800ae94:	0800aed5 	.word	0x0800aed5
 800ae98:	0800aed5 	.word	0x0800aed5
 800ae9c:	0800aed5 	.word	0x0800aed5
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	2301      	movs	r3, #1
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e326      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e322      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeba:	e31e      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e31a      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aec4:	2320      	movs	r3, #32
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeca:	e316      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aed2:	e312      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aed4:	2380      	movs	r3, #128	; 0x80
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeda:	e30e      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a69      	ldr	r2, [pc, #420]	; (800b088 <UART_SetConfig+0x33c>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d130      	bne.n	800af48 <UART_SetConfig+0x1fc>
 800aee6:	4b67      	ldr	r3, [pc, #412]	; (800b084 <UART_SetConfig+0x338>)
 800aee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	d826      	bhi.n	800af40 <UART_SetConfig+0x1f4>
 800aef2:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <UART_SetConfig+0x1ac>)
 800aef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef8:	0800af11 	.word	0x0800af11
 800aefc:	0800af19 	.word	0x0800af19
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af31 	.word	0x0800af31
 800af0c:	0800af39 	.word	0x0800af39
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af16:	e2f0      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1e:	e2ec      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af26:	e2e8      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2e:	e2e4      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af30:	2320      	movs	r3, #32
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af36:	e2e0      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af38:	2340      	movs	r3, #64	; 0x40
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3e:	e2dc      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af40:	2380      	movs	r3, #128	; 0x80
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af46:	e2d8      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a4f      	ldr	r2, [pc, #316]	; (800b08c <UART_SetConfig+0x340>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d130      	bne.n	800afb4 <UART_SetConfig+0x268>
 800af52:	4b4c      	ldr	r3, [pc, #304]	; (800b084 <UART_SetConfig+0x338>)
 800af54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d826      	bhi.n	800afac <UART_SetConfig+0x260>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <UART_SetConfig+0x218>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af7d 	.word	0x0800af7d
 800af68:	0800af85 	.word	0x0800af85
 800af6c:	0800af8d 	.word	0x0800af8d
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800af9d 	.word	0x0800af9d
 800af78:	0800afa5 	.word	0x0800afa5
 800af7c:	2300      	movs	r3, #0
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af82:	e2ba      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af84:	2304      	movs	r3, #4
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8a:	e2b6      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af8c:	2308      	movs	r3, #8
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af92:	e2b2      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af94:	2310      	movs	r3, #16
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9a:	e2ae      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800af9c:	2320      	movs	r3, #32
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa2:	e2aa      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800afa4:	2340      	movs	r3, #64	; 0x40
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afaa:	e2a6      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afb2:	e2a2      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a35      	ldr	r2, [pc, #212]	; (800b090 <UART_SetConfig+0x344>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d130      	bne.n	800b020 <UART_SetConfig+0x2d4>
 800afbe:	4b31      	ldr	r3, [pc, #196]	; (800b084 <UART_SetConfig+0x338>)
 800afc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	2b05      	cmp	r3, #5
 800afc8:	d826      	bhi.n	800b018 <UART_SetConfig+0x2cc>
 800afca:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <UART_SetConfig+0x284>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800afe9 	.word	0x0800afe9
 800afd4:	0800aff1 	.word	0x0800aff1
 800afd8:	0800aff9 	.word	0x0800aff9
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b009 	.word	0x0800b009
 800afe4:	0800b011 	.word	0x0800b011
 800afe8:	2300      	movs	r3, #0
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afee:	e284      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aff0:	2304      	movs	r3, #4
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff6:	e280      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800aff8:	2308      	movs	r3, #8
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affe:	e27c      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b000:	2310      	movs	r3, #16
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b006:	e278      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b008:	2320      	movs	r3, #32
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00e:	e274      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b010:	2340      	movs	r3, #64	; 0x40
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b016:	e270      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b018:	2380      	movs	r3, #128	; 0x80
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01e:	e26c      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a1b      	ldr	r2, [pc, #108]	; (800b094 <UART_SetConfig+0x348>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d142      	bne.n	800b0b0 <UART_SetConfig+0x364>
 800b02a:	4b16      	ldr	r3, [pc, #88]	; (800b084 <UART_SetConfig+0x338>)
 800b02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02e:	f003 0307 	and.w	r3, r3, #7
 800b032:	2b05      	cmp	r3, #5
 800b034:	d838      	bhi.n	800b0a8 <UART_SetConfig+0x35c>
 800b036:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <UART_SetConfig+0x2f0>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b055 	.word	0x0800b055
 800b040:	0800b05d 	.word	0x0800b05d
 800b044:	0800b065 	.word	0x0800b065
 800b048:	0800b06d 	.word	0x0800b06d
 800b04c:	0800b099 	.word	0x0800b099
 800b050:	0800b0a1 	.word	0x0800b0a1
 800b054:	2300      	movs	r3, #0
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05a:	e24e      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b05c:	2304      	movs	r3, #4
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b062:	e24a      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b064:	2308      	movs	r3, #8
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e246      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b06c:	2310      	movs	r3, #16
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e242      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b074:	cfff69f3 	.word	0xcfff69f3
 800b078:	58000c00 	.word	0x58000c00
 800b07c:	11fff4ff 	.word	0x11fff4ff
 800b080:	40011000 	.word	0x40011000
 800b084:	58024400 	.word	0x58024400
 800b088:	40004400 	.word	0x40004400
 800b08c:	40004800 	.word	0x40004800
 800b090:	40004c00 	.word	0x40004c00
 800b094:	40005000 	.word	0x40005000
 800b098:	2320      	movs	r3, #32
 800b09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09e:	e22c      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b0a0:	2340      	movs	r3, #64	; 0x40
 800b0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0a6:	e228      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b0a8:	2380      	movs	r3, #128	; 0x80
 800b0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ae:	e224      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4ab1      	ldr	r2, [pc, #708]	; (800b37c <UART_SetConfig+0x630>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d176      	bne.n	800b1a8 <UART_SetConfig+0x45c>
 800b0ba:	4bb1      	ldr	r3, [pc, #708]	; (800b380 <UART_SetConfig+0x634>)
 800b0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0c2:	2b28      	cmp	r3, #40	; 0x28
 800b0c4:	d86c      	bhi.n	800b1a0 <UART_SetConfig+0x454>
 800b0c6:	a201      	add	r2, pc, #4	; (adr r2, 800b0cc <UART_SetConfig+0x380>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b171 	.word	0x0800b171
 800b0d0:	0800b1a1 	.word	0x0800b1a1
 800b0d4:	0800b1a1 	.word	0x0800b1a1
 800b0d8:	0800b1a1 	.word	0x0800b1a1
 800b0dc:	0800b1a1 	.word	0x0800b1a1
 800b0e0:	0800b1a1 	.word	0x0800b1a1
 800b0e4:	0800b1a1 	.word	0x0800b1a1
 800b0e8:	0800b1a1 	.word	0x0800b1a1
 800b0ec:	0800b179 	.word	0x0800b179
 800b0f0:	0800b1a1 	.word	0x0800b1a1
 800b0f4:	0800b1a1 	.word	0x0800b1a1
 800b0f8:	0800b1a1 	.word	0x0800b1a1
 800b0fc:	0800b1a1 	.word	0x0800b1a1
 800b100:	0800b1a1 	.word	0x0800b1a1
 800b104:	0800b1a1 	.word	0x0800b1a1
 800b108:	0800b1a1 	.word	0x0800b1a1
 800b10c:	0800b181 	.word	0x0800b181
 800b110:	0800b1a1 	.word	0x0800b1a1
 800b114:	0800b1a1 	.word	0x0800b1a1
 800b118:	0800b1a1 	.word	0x0800b1a1
 800b11c:	0800b1a1 	.word	0x0800b1a1
 800b120:	0800b1a1 	.word	0x0800b1a1
 800b124:	0800b1a1 	.word	0x0800b1a1
 800b128:	0800b1a1 	.word	0x0800b1a1
 800b12c:	0800b189 	.word	0x0800b189
 800b130:	0800b1a1 	.word	0x0800b1a1
 800b134:	0800b1a1 	.word	0x0800b1a1
 800b138:	0800b1a1 	.word	0x0800b1a1
 800b13c:	0800b1a1 	.word	0x0800b1a1
 800b140:	0800b1a1 	.word	0x0800b1a1
 800b144:	0800b1a1 	.word	0x0800b1a1
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b191 	.word	0x0800b191
 800b150:	0800b1a1 	.word	0x0800b1a1
 800b154:	0800b1a1 	.word	0x0800b1a1
 800b158:	0800b1a1 	.word	0x0800b1a1
 800b15c:	0800b1a1 	.word	0x0800b1a1
 800b160:	0800b1a1 	.word	0x0800b1a1
 800b164:	0800b1a1 	.word	0x0800b1a1
 800b168:	0800b1a1 	.word	0x0800b1a1
 800b16c:	0800b199 	.word	0x0800b199
 800b170:	2301      	movs	r3, #1
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b176:	e1c0      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b178:	2304      	movs	r3, #4
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17e:	e1bc      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b180:	2308      	movs	r3, #8
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b186:	e1b8      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b188:	2310      	movs	r3, #16
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18e:	e1b4      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b190:	2320      	movs	r3, #32
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b196:	e1b0      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b198:	2340      	movs	r3, #64	; 0x40
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19e:	e1ac      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b1a0:	2380      	movs	r3, #128	; 0x80
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a6:	e1a8      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a75      	ldr	r2, [pc, #468]	; (800b384 <UART_SetConfig+0x638>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d130      	bne.n	800b214 <UART_SetConfig+0x4c8>
 800b1b2:	4b73      	ldr	r3, [pc, #460]	; (800b380 <UART_SetConfig+0x634>)
 800b1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b6:	f003 0307 	and.w	r3, r3, #7
 800b1ba:	2b05      	cmp	r3, #5
 800b1bc:	d826      	bhi.n	800b20c <UART_SetConfig+0x4c0>
 800b1be:	a201      	add	r2, pc, #4	; (adr r2, 800b1c4 <UART_SetConfig+0x478>)
 800b1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c4:	0800b1dd 	.word	0x0800b1dd
 800b1c8:	0800b1e5 	.word	0x0800b1e5
 800b1cc:	0800b1ed 	.word	0x0800b1ed
 800b1d0:	0800b1f5 	.word	0x0800b1f5
 800b1d4:	0800b1fd 	.word	0x0800b1fd
 800b1d8:	0800b205 	.word	0x0800b205
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e2:	e18a      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b1e4:	2304      	movs	r3, #4
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ea:	e186      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b1ec:	2308      	movs	r3, #8
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f2:	e182      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b1f4:	2310      	movs	r3, #16
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fa:	e17e      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b1fc:	2320      	movs	r3, #32
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b202:	e17a      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b204:	2340      	movs	r3, #64	; 0x40
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20a:	e176      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b20c:	2380      	movs	r3, #128	; 0x80
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b212:	e172      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a5b      	ldr	r2, [pc, #364]	; (800b388 <UART_SetConfig+0x63c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d130      	bne.n	800b280 <UART_SetConfig+0x534>
 800b21e:	4b58      	ldr	r3, [pc, #352]	; (800b380 <UART_SetConfig+0x634>)
 800b220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	2b05      	cmp	r3, #5
 800b228:	d826      	bhi.n	800b278 <UART_SetConfig+0x52c>
 800b22a:	a201      	add	r2, pc, #4	; (adr r2, 800b230 <UART_SetConfig+0x4e4>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b249 	.word	0x0800b249
 800b234:	0800b251 	.word	0x0800b251
 800b238:	0800b259 	.word	0x0800b259
 800b23c:	0800b261 	.word	0x0800b261
 800b240:	0800b269 	.word	0x0800b269
 800b244:	0800b271 	.word	0x0800b271
 800b248:	2300      	movs	r3, #0
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24e:	e154      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b250:	2304      	movs	r3, #4
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b256:	e150      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b258:	2308      	movs	r3, #8
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25e:	e14c      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b260:	2310      	movs	r3, #16
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b266:	e148      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b268:	2320      	movs	r3, #32
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26e:	e144      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b270:	2340      	movs	r3, #64	; 0x40
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b276:	e140      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b278:	2380      	movs	r3, #128	; 0x80
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27e:	e13c      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a41      	ldr	r2, [pc, #260]	; (800b38c <UART_SetConfig+0x640>)
 800b286:	4293      	cmp	r3, r2
 800b288:	f040 8082 	bne.w	800b390 <UART_SetConfig+0x644>
 800b28c:	4b3c      	ldr	r3, [pc, #240]	; (800b380 <UART_SetConfig+0x634>)
 800b28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b294:	2b28      	cmp	r3, #40	; 0x28
 800b296:	d86d      	bhi.n	800b374 <UART_SetConfig+0x628>
 800b298:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <UART_SetConfig+0x554>)
 800b29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29e:	bf00      	nop
 800b2a0:	0800b345 	.word	0x0800b345
 800b2a4:	0800b375 	.word	0x0800b375
 800b2a8:	0800b375 	.word	0x0800b375
 800b2ac:	0800b375 	.word	0x0800b375
 800b2b0:	0800b375 	.word	0x0800b375
 800b2b4:	0800b375 	.word	0x0800b375
 800b2b8:	0800b375 	.word	0x0800b375
 800b2bc:	0800b375 	.word	0x0800b375
 800b2c0:	0800b34d 	.word	0x0800b34d
 800b2c4:	0800b375 	.word	0x0800b375
 800b2c8:	0800b375 	.word	0x0800b375
 800b2cc:	0800b375 	.word	0x0800b375
 800b2d0:	0800b375 	.word	0x0800b375
 800b2d4:	0800b375 	.word	0x0800b375
 800b2d8:	0800b375 	.word	0x0800b375
 800b2dc:	0800b375 	.word	0x0800b375
 800b2e0:	0800b355 	.word	0x0800b355
 800b2e4:	0800b375 	.word	0x0800b375
 800b2e8:	0800b375 	.word	0x0800b375
 800b2ec:	0800b375 	.word	0x0800b375
 800b2f0:	0800b375 	.word	0x0800b375
 800b2f4:	0800b375 	.word	0x0800b375
 800b2f8:	0800b375 	.word	0x0800b375
 800b2fc:	0800b375 	.word	0x0800b375
 800b300:	0800b35d 	.word	0x0800b35d
 800b304:	0800b375 	.word	0x0800b375
 800b308:	0800b375 	.word	0x0800b375
 800b30c:	0800b375 	.word	0x0800b375
 800b310:	0800b375 	.word	0x0800b375
 800b314:	0800b375 	.word	0x0800b375
 800b318:	0800b375 	.word	0x0800b375
 800b31c:	0800b375 	.word	0x0800b375
 800b320:	0800b365 	.word	0x0800b365
 800b324:	0800b375 	.word	0x0800b375
 800b328:	0800b375 	.word	0x0800b375
 800b32c:	0800b375 	.word	0x0800b375
 800b330:	0800b375 	.word	0x0800b375
 800b334:	0800b375 	.word	0x0800b375
 800b338:	0800b375 	.word	0x0800b375
 800b33c:	0800b375 	.word	0x0800b375
 800b340:	0800b36d 	.word	0x0800b36d
 800b344:	2301      	movs	r3, #1
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34a:	e0d6      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b34c:	2304      	movs	r3, #4
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e0d2      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b354:	2308      	movs	r3, #8
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35a:	e0ce      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b35c:	2310      	movs	r3, #16
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b362:	e0ca      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b364:	2320      	movs	r3, #32
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36a:	e0c6      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b36c:	2340      	movs	r3, #64	; 0x40
 800b36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b372:	e0c2      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b374:	2380      	movs	r3, #128	; 0x80
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37a:	e0be      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b37c:	40011400 	.word	0x40011400
 800b380:	58024400 	.word	0x58024400
 800b384:	40007800 	.word	0x40007800
 800b388:	40007c00 	.word	0x40007c00
 800b38c:	40011800 	.word	0x40011800
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4aad      	ldr	r2, [pc, #692]	; (800b64c <UART_SetConfig+0x900>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d176      	bne.n	800b488 <UART_SetConfig+0x73c>
 800b39a:	4bad      	ldr	r3, [pc, #692]	; (800b650 <UART_SetConfig+0x904>)
 800b39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3a2:	2b28      	cmp	r3, #40	; 0x28
 800b3a4:	d86c      	bhi.n	800b480 <UART_SetConfig+0x734>
 800b3a6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <UART_SetConfig+0x660>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b451 	.word	0x0800b451
 800b3b0:	0800b481 	.word	0x0800b481
 800b3b4:	0800b481 	.word	0x0800b481
 800b3b8:	0800b481 	.word	0x0800b481
 800b3bc:	0800b481 	.word	0x0800b481
 800b3c0:	0800b481 	.word	0x0800b481
 800b3c4:	0800b481 	.word	0x0800b481
 800b3c8:	0800b481 	.word	0x0800b481
 800b3cc:	0800b459 	.word	0x0800b459
 800b3d0:	0800b481 	.word	0x0800b481
 800b3d4:	0800b481 	.word	0x0800b481
 800b3d8:	0800b481 	.word	0x0800b481
 800b3dc:	0800b481 	.word	0x0800b481
 800b3e0:	0800b481 	.word	0x0800b481
 800b3e4:	0800b481 	.word	0x0800b481
 800b3e8:	0800b481 	.word	0x0800b481
 800b3ec:	0800b461 	.word	0x0800b461
 800b3f0:	0800b481 	.word	0x0800b481
 800b3f4:	0800b481 	.word	0x0800b481
 800b3f8:	0800b481 	.word	0x0800b481
 800b3fc:	0800b481 	.word	0x0800b481
 800b400:	0800b481 	.word	0x0800b481
 800b404:	0800b481 	.word	0x0800b481
 800b408:	0800b481 	.word	0x0800b481
 800b40c:	0800b469 	.word	0x0800b469
 800b410:	0800b481 	.word	0x0800b481
 800b414:	0800b481 	.word	0x0800b481
 800b418:	0800b481 	.word	0x0800b481
 800b41c:	0800b481 	.word	0x0800b481
 800b420:	0800b481 	.word	0x0800b481
 800b424:	0800b481 	.word	0x0800b481
 800b428:	0800b481 	.word	0x0800b481
 800b42c:	0800b471 	.word	0x0800b471
 800b430:	0800b481 	.word	0x0800b481
 800b434:	0800b481 	.word	0x0800b481
 800b438:	0800b481 	.word	0x0800b481
 800b43c:	0800b481 	.word	0x0800b481
 800b440:	0800b481 	.word	0x0800b481
 800b444:	0800b481 	.word	0x0800b481
 800b448:	0800b481 	.word	0x0800b481
 800b44c:	0800b479 	.word	0x0800b479
 800b450:	2301      	movs	r3, #1
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b456:	e050      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b458:	2304      	movs	r3, #4
 800b45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45e:	e04c      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b460:	2308      	movs	r3, #8
 800b462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b466:	e048      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b468:	2310      	movs	r3, #16
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46e:	e044      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b470:	2320      	movs	r3, #32
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b476:	e040      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b478:	2340      	movs	r3, #64	; 0x40
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47e:	e03c      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b480:	2380      	movs	r3, #128	; 0x80
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b486:	e038      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a71      	ldr	r2, [pc, #452]	; (800b654 <UART_SetConfig+0x908>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d130      	bne.n	800b4f4 <UART_SetConfig+0x7a8>
 800b492:	4b6f      	ldr	r3, [pc, #444]	; (800b650 <UART_SetConfig+0x904>)
 800b494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b496:	f003 0307 	and.w	r3, r3, #7
 800b49a:	2b05      	cmp	r3, #5
 800b49c:	d826      	bhi.n	800b4ec <UART_SetConfig+0x7a0>
 800b49e:	a201      	add	r2, pc, #4	; (adr r2, 800b4a4 <UART_SetConfig+0x758>)
 800b4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a4:	0800b4bd 	.word	0x0800b4bd
 800b4a8:	0800b4c5 	.word	0x0800b4c5
 800b4ac:	0800b4cd 	.word	0x0800b4cd
 800b4b0:	0800b4d5 	.word	0x0800b4d5
 800b4b4:	0800b4dd 	.word	0x0800b4dd
 800b4b8:	0800b4e5 	.word	0x0800b4e5
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c2:	e01a      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ca:	e016      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d2:	e012      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4da:	e00e      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b4dc:	2320      	movs	r3, #32
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4e2:	e00a      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b4e4:	2340      	movs	r3, #64	; 0x40
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ea:	e006      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b4ec:	2380      	movs	r3, #128	; 0x80
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4f2:	e002      	b.n	800b4fa <UART_SetConfig+0x7ae>
 800b4f4:	2380      	movs	r3, #128	; 0x80
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a55      	ldr	r2, [pc, #340]	; (800b654 <UART_SetConfig+0x908>)
 800b500:	4293      	cmp	r3, r2
 800b502:	f040 80f8 	bne.w	800b6f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b506:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	dc46      	bgt.n	800b59c <UART_SetConfig+0x850>
 800b50e:	2b02      	cmp	r3, #2
 800b510:	db75      	blt.n	800b5fe <UART_SetConfig+0x8b2>
 800b512:	3b02      	subs	r3, #2
 800b514:	2b1e      	cmp	r3, #30
 800b516:	d872      	bhi.n	800b5fe <UART_SetConfig+0x8b2>
 800b518:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <UART_SetConfig+0x7d4>)
 800b51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51e:	bf00      	nop
 800b520:	0800b5a3 	.word	0x0800b5a3
 800b524:	0800b5ff 	.word	0x0800b5ff
 800b528:	0800b5ab 	.word	0x0800b5ab
 800b52c:	0800b5ff 	.word	0x0800b5ff
 800b530:	0800b5ff 	.word	0x0800b5ff
 800b534:	0800b5ff 	.word	0x0800b5ff
 800b538:	0800b5bb 	.word	0x0800b5bb
 800b53c:	0800b5ff 	.word	0x0800b5ff
 800b540:	0800b5ff 	.word	0x0800b5ff
 800b544:	0800b5ff 	.word	0x0800b5ff
 800b548:	0800b5ff 	.word	0x0800b5ff
 800b54c:	0800b5ff 	.word	0x0800b5ff
 800b550:	0800b5ff 	.word	0x0800b5ff
 800b554:	0800b5ff 	.word	0x0800b5ff
 800b558:	0800b5cb 	.word	0x0800b5cb
 800b55c:	0800b5ff 	.word	0x0800b5ff
 800b560:	0800b5ff 	.word	0x0800b5ff
 800b564:	0800b5ff 	.word	0x0800b5ff
 800b568:	0800b5ff 	.word	0x0800b5ff
 800b56c:	0800b5ff 	.word	0x0800b5ff
 800b570:	0800b5ff 	.word	0x0800b5ff
 800b574:	0800b5ff 	.word	0x0800b5ff
 800b578:	0800b5ff 	.word	0x0800b5ff
 800b57c:	0800b5ff 	.word	0x0800b5ff
 800b580:	0800b5ff 	.word	0x0800b5ff
 800b584:	0800b5ff 	.word	0x0800b5ff
 800b588:	0800b5ff 	.word	0x0800b5ff
 800b58c:	0800b5ff 	.word	0x0800b5ff
 800b590:	0800b5ff 	.word	0x0800b5ff
 800b594:	0800b5ff 	.word	0x0800b5ff
 800b598:	0800b5f1 	.word	0x0800b5f1
 800b59c:	2b40      	cmp	r3, #64	; 0x40
 800b59e:	d02a      	beq.n	800b5f6 <UART_SetConfig+0x8aa>
 800b5a0:	e02d      	b.n	800b5fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b5a2:	f7fd fb25 	bl	8008bf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5a8:	e02f      	b.n	800b60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fd fb34 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5b8:	e027      	b.n	800b60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5ba:	f107 0318 	add.w	r3, r7, #24
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fd fc80 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5c8:	e01f      	b.n	800b60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5ca:	4b21      	ldr	r3, [pc, #132]	; (800b650 <UART_SetConfig+0x904>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0320 	and.w	r3, r3, #32
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d009      	beq.n	800b5ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5d6:	4b1e      	ldr	r3, [pc, #120]	; (800b650 <UART_SetConfig+0x904>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	08db      	lsrs	r3, r3, #3
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	4a1d      	ldr	r2, [pc, #116]	; (800b658 <UART_SetConfig+0x90c>)
 800b5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5e8:	e00f      	b.n	800b60a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <UART_SetConfig+0x90c>)
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ee:	e00c      	b.n	800b60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5f0:	4b1a      	ldr	r3, [pc, #104]	; (800b65c <UART_SetConfig+0x910>)
 800b5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5f4:	e009      	b.n	800b60a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5fc:	e005      	b.n	800b60a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b608:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f000 81ee 	beq.w	800b9ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	4a12      	ldr	r2, [pc, #72]	; (800b660 <UART_SetConfig+0x914>)
 800b618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b61c:	461a      	mov	r2, r3
 800b61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b620:	fbb3 f3f2 	udiv	r3, r3, r2
 800b624:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	4613      	mov	r3, r2
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	4413      	add	r3, r2
 800b630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b632:	429a      	cmp	r2, r3
 800b634:	d305      	bcc.n	800b642 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b63e:	429a      	cmp	r2, r3
 800b640:	d910      	bls.n	800b664 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b648:	e1d1      	b.n	800b9ee <UART_SetConfig+0xca2>
 800b64a:	bf00      	nop
 800b64c:	40011c00 	.word	0x40011c00
 800b650:	58024400 	.word	0x58024400
 800b654:	58000c00 	.word	0x58000c00
 800b658:	03d09000 	.word	0x03d09000
 800b65c:	003d0900 	.word	0x003d0900
 800b660:	08010b38 	.word	0x08010b38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b666:	2200      	movs	r2, #0
 800b668:	60bb      	str	r3, [r7, #8]
 800b66a:	60fa      	str	r2, [r7, #12]
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	4ac0      	ldr	r2, [pc, #768]	; (800b974 <UART_SetConfig+0xc28>)
 800b672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b676:	b29b      	uxth	r3, r3
 800b678:	2200      	movs	r2, #0
 800b67a:	603b      	str	r3, [r7, #0]
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b686:	f7f4 fe33 	bl	80002f0 <__aeabi_uldivmod>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	4610      	mov	r0, r2
 800b690:	4619      	mov	r1, r3
 800b692:	f04f 0200 	mov.w	r2, #0
 800b696:	f04f 0300 	mov.w	r3, #0
 800b69a:	020b      	lsls	r3, r1, #8
 800b69c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6a0:	0202      	lsls	r2, r0, #8
 800b6a2:	6979      	ldr	r1, [r7, #20]
 800b6a4:	6849      	ldr	r1, [r1, #4]
 800b6a6:	0849      	lsrs	r1, r1, #1
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	eb12 0804 	adds.w	r8, r2, r4
 800b6b2:	eb43 0905 	adc.w	r9, r3, r5
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	469a      	mov	sl, r3
 800b6be:	4693      	mov	fp, r2
 800b6c0:	4652      	mov	r2, sl
 800b6c2:	465b      	mov	r3, fp
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	f7f4 fe12 	bl	80002f0 <__aeabi_uldivmod>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6da:	d308      	bcc.n	800b6ee <UART_SetConfig+0x9a2>
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6e2:	d204      	bcs.n	800b6ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ea:	60da      	str	r2, [r3, #12]
 800b6ec:	e17f      	b.n	800b9ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6f4:	e17b      	b.n	800b9ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	69db      	ldr	r3, [r3, #28]
 800b6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6fe:	f040 80bd 	bne.w	800b87c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b702:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b706:	2b20      	cmp	r3, #32
 800b708:	dc48      	bgt.n	800b79c <UART_SetConfig+0xa50>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	db7b      	blt.n	800b806 <UART_SetConfig+0xaba>
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d879      	bhi.n	800b806 <UART_SetConfig+0xaba>
 800b712:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <UART_SetConfig+0x9cc>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b7a3 	.word	0x0800b7a3
 800b71c:	0800b7ab 	.word	0x0800b7ab
 800b720:	0800b807 	.word	0x0800b807
 800b724:	0800b807 	.word	0x0800b807
 800b728:	0800b7b3 	.word	0x0800b7b3
 800b72c:	0800b807 	.word	0x0800b807
 800b730:	0800b807 	.word	0x0800b807
 800b734:	0800b807 	.word	0x0800b807
 800b738:	0800b7c3 	.word	0x0800b7c3
 800b73c:	0800b807 	.word	0x0800b807
 800b740:	0800b807 	.word	0x0800b807
 800b744:	0800b807 	.word	0x0800b807
 800b748:	0800b807 	.word	0x0800b807
 800b74c:	0800b807 	.word	0x0800b807
 800b750:	0800b807 	.word	0x0800b807
 800b754:	0800b807 	.word	0x0800b807
 800b758:	0800b7d3 	.word	0x0800b7d3
 800b75c:	0800b807 	.word	0x0800b807
 800b760:	0800b807 	.word	0x0800b807
 800b764:	0800b807 	.word	0x0800b807
 800b768:	0800b807 	.word	0x0800b807
 800b76c:	0800b807 	.word	0x0800b807
 800b770:	0800b807 	.word	0x0800b807
 800b774:	0800b807 	.word	0x0800b807
 800b778:	0800b807 	.word	0x0800b807
 800b77c:	0800b807 	.word	0x0800b807
 800b780:	0800b807 	.word	0x0800b807
 800b784:	0800b807 	.word	0x0800b807
 800b788:	0800b807 	.word	0x0800b807
 800b78c:	0800b807 	.word	0x0800b807
 800b790:	0800b807 	.word	0x0800b807
 800b794:	0800b807 	.word	0x0800b807
 800b798:	0800b7f9 	.word	0x0800b7f9
 800b79c:	2b40      	cmp	r3, #64	; 0x40
 800b79e:	d02e      	beq.n	800b7fe <UART_SetConfig+0xab2>
 800b7a0:	e031      	b.n	800b806 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7a2:	f7fb fb21 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 800b7a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7a8:	e033      	b.n	800b812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7aa:	f7fb fb33 	bl	8006e14 <HAL_RCC_GetPCLK2Freq>
 800b7ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7b0:	e02f      	b.n	800b812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fd fa30 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c0:	e027      	b.n	800b812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7c2:	f107 0318 	add.w	r3, r7, #24
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fd fb7c 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7d0:	e01f      	b.n	800b812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d2:	4b69      	ldr	r3, [pc, #420]	; (800b978 <UART_SetConfig+0xc2c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7de:	4b66      	ldr	r3, [pc, #408]	; (800b978 <UART_SetConfig+0xc2c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	08db      	lsrs	r3, r3, #3
 800b7e4:	f003 0303 	and.w	r3, r3, #3
 800b7e8:	4a64      	ldr	r2, [pc, #400]	; (800b97c <UART_SetConfig+0xc30>)
 800b7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7f0:	e00f      	b.n	800b812 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b7f2:	4b62      	ldr	r3, [pc, #392]	; (800b97c <UART_SetConfig+0xc30>)
 800b7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7f6:	e00c      	b.n	800b812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7f8:	4b61      	ldr	r3, [pc, #388]	; (800b980 <UART_SetConfig+0xc34>)
 800b7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7fc:	e009      	b.n	800b812 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b804:	e005      	b.n	800b812 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 80ea 	beq.w	800b9ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	4a55      	ldr	r2, [pc, #340]	; (800b974 <UART_SetConfig+0xc28>)
 800b820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b824:	461a      	mov	r2, r3
 800b826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b828:	fbb3 f3f2 	udiv	r3, r3, r2
 800b82c:	005a      	lsls	r2, r3, #1
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	441a      	add	r2, r3
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b83e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b842:	2b0f      	cmp	r3, #15
 800b844:	d916      	bls.n	800b874 <UART_SetConfig+0xb28>
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b84c:	d212      	bcs.n	800b874 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	b29b      	uxth	r3, r3
 800b852:	f023 030f 	bic.w	r3, r3, #15
 800b856:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	f003 0307 	and.w	r3, r3, #7
 800b862:	b29a      	uxth	r2, r3
 800b864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b866:	4313      	orrs	r3, r2
 800b868:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b870:	60da      	str	r2, [r3, #12]
 800b872:	e0bc      	b.n	800b9ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b87a:	e0b8      	b.n	800b9ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b87c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b880:	2b20      	cmp	r3, #32
 800b882:	dc4b      	bgt.n	800b91c <UART_SetConfig+0xbd0>
 800b884:	2b00      	cmp	r3, #0
 800b886:	f2c0 8087 	blt.w	800b998 <UART_SetConfig+0xc4c>
 800b88a:	2b20      	cmp	r3, #32
 800b88c:	f200 8084 	bhi.w	800b998 <UART_SetConfig+0xc4c>
 800b890:	a201      	add	r2, pc, #4	; (adr r2, 800b898 <UART_SetConfig+0xb4c>)
 800b892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b896:	bf00      	nop
 800b898:	0800b923 	.word	0x0800b923
 800b89c:	0800b92b 	.word	0x0800b92b
 800b8a0:	0800b999 	.word	0x0800b999
 800b8a4:	0800b999 	.word	0x0800b999
 800b8a8:	0800b933 	.word	0x0800b933
 800b8ac:	0800b999 	.word	0x0800b999
 800b8b0:	0800b999 	.word	0x0800b999
 800b8b4:	0800b999 	.word	0x0800b999
 800b8b8:	0800b943 	.word	0x0800b943
 800b8bc:	0800b999 	.word	0x0800b999
 800b8c0:	0800b999 	.word	0x0800b999
 800b8c4:	0800b999 	.word	0x0800b999
 800b8c8:	0800b999 	.word	0x0800b999
 800b8cc:	0800b999 	.word	0x0800b999
 800b8d0:	0800b999 	.word	0x0800b999
 800b8d4:	0800b999 	.word	0x0800b999
 800b8d8:	0800b953 	.word	0x0800b953
 800b8dc:	0800b999 	.word	0x0800b999
 800b8e0:	0800b999 	.word	0x0800b999
 800b8e4:	0800b999 	.word	0x0800b999
 800b8e8:	0800b999 	.word	0x0800b999
 800b8ec:	0800b999 	.word	0x0800b999
 800b8f0:	0800b999 	.word	0x0800b999
 800b8f4:	0800b999 	.word	0x0800b999
 800b8f8:	0800b999 	.word	0x0800b999
 800b8fc:	0800b999 	.word	0x0800b999
 800b900:	0800b999 	.word	0x0800b999
 800b904:	0800b999 	.word	0x0800b999
 800b908:	0800b999 	.word	0x0800b999
 800b90c:	0800b999 	.word	0x0800b999
 800b910:	0800b999 	.word	0x0800b999
 800b914:	0800b999 	.word	0x0800b999
 800b918:	0800b98b 	.word	0x0800b98b
 800b91c:	2b40      	cmp	r3, #64	; 0x40
 800b91e:	d037      	beq.n	800b990 <UART_SetConfig+0xc44>
 800b920:	e03a      	b.n	800b998 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b922:	f7fb fa61 	bl	8006de8 <HAL_RCC_GetPCLK1Freq>
 800b926:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b928:	e03c      	b.n	800b9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b92a:	f7fb fa73 	bl	8006e14 <HAL_RCC_GetPCLK2Freq>
 800b92e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b930:	e038      	b.n	800b9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b936:	4618      	mov	r0, r3
 800b938:	f7fd f970 	bl	8008c1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b940:	e030      	b.n	800b9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b942:	f107 0318 	add.w	r3, r7, #24
 800b946:	4618      	mov	r0, r3
 800b948:	f7fd fabc 	bl	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b950:	e028      	b.n	800b9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b952:	4b09      	ldr	r3, [pc, #36]	; (800b978 <UART_SetConfig+0xc2c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0320 	and.w	r3, r3, #32
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d012      	beq.n	800b984 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b95e:	4b06      	ldr	r3, [pc, #24]	; (800b978 <UART_SetConfig+0xc2c>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	08db      	lsrs	r3, r3, #3
 800b964:	f003 0303 	and.w	r3, r3, #3
 800b968:	4a04      	ldr	r2, [pc, #16]	; (800b97c <UART_SetConfig+0xc30>)
 800b96a:	fa22 f303 	lsr.w	r3, r2, r3
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b970:	e018      	b.n	800b9a4 <UART_SetConfig+0xc58>
 800b972:	bf00      	nop
 800b974:	08010b38 	.word	0x08010b38
 800b978:	58024400 	.word	0x58024400
 800b97c:	03d09000 	.word	0x03d09000
 800b980:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b984:	4b24      	ldr	r3, [pc, #144]	; (800ba18 <UART_SetConfig+0xccc>)
 800b986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b988:	e00c      	b.n	800b9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b98a:	4b24      	ldr	r3, [pc, #144]	; (800ba1c <UART_SetConfig+0xcd0>)
 800b98c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b98e:	e009      	b.n	800b9a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b996:	e005      	b.n	800b9a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b998:	2300      	movs	r3, #0
 800b99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b9a2:	bf00      	nop
    }

    if (pclk != 0U)
 800b9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d021      	beq.n	800b9ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	4a1c      	ldr	r2, [pc, #112]	; (800ba20 <UART_SetConfig+0xcd4>)
 800b9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	085b      	lsrs	r3, r3, #1
 800b9c2:	441a      	add	r2, r3
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	2b0f      	cmp	r3, #15
 800b9d2:	d909      	bls.n	800b9e8 <UART_SetConfig+0xc9c>
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9da:	d205      	bcs.n	800b9e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	60da      	str	r2, [r3, #12]
 800b9e6:	e002      	b.n	800b9ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2200      	movs	r2, #0
 800ba02:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2200      	movs	r2, #0
 800ba08:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ba0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3748      	adds	r7, #72	; 0x48
 800ba12:	46bd      	mov	sp, r7
 800ba14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba18:	03d09000 	.word	0x03d09000
 800ba1c:	003d0900 	.word	0x003d0900
 800ba20:	08010b38 	.word	0x08010b38

0800ba24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00a      	beq.n	800ba4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	430a      	orrs	r2, r1
 800ba90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba96:	f003 0308 	and.w	r3, r3, #8
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab8:	f003 0310 	and.w	r3, r3, #16
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00a      	beq.n	800bad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bada:	f003 0320 	and.w	r3, r3, #32
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	430a      	orrs	r2, r1
 800baf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d01a      	beq.n	800bb3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	430a      	orrs	r2, r1
 800bb18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb22:	d10a      	bne.n	800bb3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	430a      	orrs	r2, r1
 800bb38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00a      	beq.n	800bb5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	605a      	str	r2, [r3, #4]
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b098      	sub	sp, #96	; 0x60
 800bb6c:	af02      	add	r7, sp, #8
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb78:	f7f5 fe82 	bl	8001880 <HAL_GetTick>
 800bb7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 0308 	and.w	r3, r3, #8
 800bb88:	2b08      	cmp	r3, #8
 800bb8a:	d12f      	bne.n	800bbec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb94:	2200      	movs	r2, #0
 800bb96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f88e 	bl	800bcbc <UART_WaitOnFlagUntilTimeout>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d022      	beq.n	800bbec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	e853 3f00 	ldrex	r3, [r3]
 800bbb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbba:	653b      	str	r3, [r7, #80]	; 0x50
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc4:	647b      	str	r3, [r7, #68]	; 0x44
 800bbc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbcc:	e841 2300 	strex	r3, r2, [r1]
 800bbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1e6      	bne.n	800bba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2220      	movs	r2, #32
 800bbdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	e063      	b.n	800bcb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 0304 	and.w	r3, r3, #4
 800bbf6:	2b04      	cmp	r3, #4
 800bbf8:	d149      	bne.n	800bc8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc02:	2200      	movs	r2, #0
 800bc04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f857 	bl	800bcbc <UART_WaitOnFlagUntilTimeout>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d03c      	beq.n	800bc8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	623b      	str	r3, [r7, #32]
   return(result);
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc32:	633b      	str	r3, [r7, #48]	; 0x30
 800bc34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc3a:	e841 2300 	strex	r3, r2, [r1]
 800bc3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1e6      	bne.n	800bc14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	e853 3f00 	ldrex	r3, [r3]
 800bc54:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f023 0301 	bic.w	r3, r3, #1
 800bc5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3308      	adds	r3, #8
 800bc64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc66:	61fa      	str	r2, [r7, #28]
 800bc68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6a:	69b9      	ldr	r1, [r7, #24]
 800bc6c:	69fa      	ldr	r2, [r7, #28]
 800bc6e:	e841 2300 	strex	r3, r2, [r1]
 800bc72:	617b      	str	r3, [r7, #20]
   return(result);
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1e5      	bne.n	800bc46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	e012      	b.n	800bcb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2220      	movs	r2, #32
 800bc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3758      	adds	r7, #88	; 0x58
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bccc:	e049      	b.n	800bd62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd4:	d045      	beq.n	800bd62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcd6:	f7f5 fdd3 	bl	8001880 <HAL_GetTick>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d302      	bcc.n	800bcec <UART_WaitOnFlagUntilTimeout+0x30>
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e048      	b.n	800bd82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 0304 	and.w	r3, r3, #4
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d031      	beq.n	800bd62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	f003 0308 	and.w	r3, r3, #8
 800bd08:	2b08      	cmp	r3, #8
 800bd0a:	d110      	bne.n	800bd2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2208      	movs	r2, #8
 800bd12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f000 f839 	bl	800bd8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2208      	movs	r2, #8
 800bd1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e029      	b.n	800bd82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	69db      	ldr	r3, [r3, #28]
 800bd34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd3c:	d111      	bne.n	800bd62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f000 f81f 	bl	800bd8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e00f      	b.n	800bd82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	69da      	ldr	r2, [r3, #28]
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	bf0c      	ite	eq
 800bd72:	2301      	moveq	r3, #1
 800bd74:	2300      	movne	r3, #0
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	461a      	mov	r2, r3
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d0a6      	beq.n	800bcce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b095      	sub	sp, #84	; 0x54
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bda8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb2:	643b      	str	r3, [r7, #64]	; 0x40
 800bdb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdba:	e841 2300 	strex	r3, r2, [r1]
 800bdbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1e6      	bne.n	800bd94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3308      	adds	r3, #8
 800bdcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	e853 3f00 	ldrex	r3, [r3]
 800bdd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	4b1e      	ldr	r3, [pc, #120]	; (800be54 <UART_EndRxTransfer+0xc8>)
 800bdda:	4013      	ands	r3, r2
 800bddc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3308      	adds	r3, #8
 800bde4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bde6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bde8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdee:	e841 2300 	strex	r3, r2, [r1]
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1e5      	bne.n	800bdc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d118      	bne.n	800be34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	e853 3f00 	ldrex	r3, [r3]
 800be0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	f023 0310 	bic.w	r3, r3, #16
 800be16:	647b      	str	r3, [r7, #68]	; 0x44
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	461a      	mov	r2, r3
 800be1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be20:	61bb      	str	r3, [r7, #24]
 800be22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be24:	6979      	ldr	r1, [r7, #20]
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	e841 2300 	strex	r3, r2, [r1]
 800be2c:	613b      	str	r3, [r7, #16]
   return(result);
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e6      	bne.n	800be02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2220      	movs	r2, #32
 800be38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	675a      	str	r2, [r3, #116]	; 0x74
}
 800be48:	bf00      	nop
 800be4a:	3754      	adds	r7, #84	; 0x54
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	effffffe 	.word	0xeffffffe

0800be58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be66:	2b01      	cmp	r3, #1
 800be68:	d101      	bne.n	800be6e <HAL_UARTEx_DisableFifoMode+0x16>
 800be6a:	2302      	movs	r3, #2
 800be6c:	e027      	b.n	800bebe <HAL_UARTEx_DisableFifoMode+0x66>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2224      	movs	r2, #36	; 0x24
 800be7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 0201 	bic.w	r2, r2, #1
 800be94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2220      	movs	r2, #32
 800beb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d101      	bne.n	800bee2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bede:	2302      	movs	r3, #2
 800bee0:	e02d      	b.n	800bf3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2224      	movs	r2, #36	; 0x24
 800beee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0201 	bic.w	r2, r2, #1
 800bf08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f850 	bl	800bfc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2220      	movs	r2, #32
 800bf30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d101      	bne.n	800bf5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e02d      	b.n	800bfba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2224      	movs	r2, #36	; 0x24
 800bf6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f022 0201 	bic.w	r2, r2, #1
 800bf84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f812 	bl	800bfc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
	...

0800bfc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d108      	bne.n	800bfe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfe4:	e031      	b.n	800c04a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfe6:	2310      	movs	r3, #16
 800bfe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfea:	2310      	movs	r3, #16
 800bfec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	0e5b      	lsrs	r3, r3, #25
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	f003 0307 	and.w	r3, r3, #7
 800bffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	0f5b      	lsrs	r3, r3, #29
 800c006:	b2db      	uxtb	r3, r3
 800c008:	f003 0307 	and.w	r3, r3, #7
 800c00c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	7b3a      	ldrb	r2, [r7, #12]
 800c012:	4911      	ldr	r1, [pc, #68]	; (800c058 <UARTEx_SetNbDataToProcess+0x94>)
 800c014:	5c8a      	ldrb	r2, [r1, r2]
 800c016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c01a:	7b3a      	ldrb	r2, [r7, #12]
 800c01c:	490f      	ldr	r1, [pc, #60]	; (800c05c <UARTEx_SetNbDataToProcess+0x98>)
 800c01e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c020:	fb93 f3f2 	sdiv	r3, r3, r2
 800c024:	b29a      	uxth	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	7b7a      	ldrb	r2, [r7, #13]
 800c030:	4909      	ldr	r1, [pc, #36]	; (800c058 <UARTEx_SetNbDataToProcess+0x94>)
 800c032:	5c8a      	ldrb	r2, [r1, r2]
 800c034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c038:	7b7a      	ldrb	r2, [r7, #13]
 800c03a:	4908      	ldr	r1, [pc, #32]	; (800c05c <UARTEx_SetNbDataToProcess+0x98>)
 800c03c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c03e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c042:	b29a      	uxth	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c04a:	bf00      	nop
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	08010b50 	.word	0x08010b50
 800c05c:	08010b58 	.word	0x08010b58

0800c060 <__NVIC_SetPriority>:
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	6039      	str	r1, [r7, #0]
 800c06a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c06c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c070:	2b00      	cmp	r3, #0
 800c072:	db0a      	blt.n	800c08a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	b2da      	uxtb	r2, r3
 800c078:	490c      	ldr	r1, [pc, #48]	; (800c0ac <__NVIC_SetPriority+0x4c>)
 800c07a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c07e:	0112      	lsls	r2, r2, #4
 800c080:	b2d2      	uxtb	r2, r2
 800c082:	440b      	add	r3, r1
 800c084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c088:	e00a      	b.n	800c0a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	4908      	ldr	r1, [pc, #32]	; (800c0b0 <__NVIC_SetPriority+0x50>)
 800c090:	88fb      	ldrh	r3, [r7, #6]
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	3b04      	subs	r3, #4
 800c098:	0112      	lsls	r2, r2, #4
 800c09a:	b2d2      	uxtb	r2, r2
 800c09c:	440b      	add	r3, r1
 800c09e:	761a      	strb	r2, [r3, #24]
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	e000e100 	.word	0xe000e100
 800c0b0:	e000ed00 	.word	0xe000ed00

0800c0b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c0b8:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <SysTick_Handler+0x1c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c0bc:	f002 f94c 	bl	800e358 <xTaskGetSchedulerState>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d001      	beq.n	800c0ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c0c6:	f003 f82f 	bl	800f128 <xPortSysTickHandler>
  }
}
 800c0ca:	bf00      	nop
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	e000e010 	.word	0xe000e010

0800c0d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0d8:	2100      	movs	r1, #0
 800c0da:	f06f 0004 	mvn.w	r0, #4
 800c0de:	f7ff ffbf 	bl	800c060 <__NVIC_SetPriority>
#endif
}
 800c0e2:	bf00      	nop
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ee:	f3ef 8305 	mrs	r3, IPSR
 800c0f2:	603b      	str	r3, [r7, #0]
  return(result);
 800c0f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c0fa:	f06f 0305 	mvn.w	r3, #5
 800c0fe:	607b      	str	r3, [r7, #4]
 800c100:	e00c      	b.n	800c11c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c102:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <osKernelInitialize+0x44>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d105      	bne.n	800c116 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c10a:	4b08      	ldr	r3, [pc, #32]	; (800c12c <osKernelInitialize+0x44>)
 800c10c:	2201      	movs	r2, #1
 800c10e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c110:	2300      	movs	r3, #0
 800c112:	607b      	str	r3, [r7, #4]
 800c114:	e002      	b.n	800c11c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c116:	f04f 33ff 	mov.w	r3, #4294967295
 800c11a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c11c:	687b      	ldr	r3, [r7, #4]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	240122fc 	.word	0x240122fc

0800c130 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c136:	f3ef 8305 	mrs	r3, IPSR
 800c13a:	603b      	str	r3, [r7, #0]
  return(result);
 800c13c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c142:	f06f 0305 	mvn.w	r3, #5
 800c146:	607b      	str	r3, [r7, #4]
 800c148:	e010      	b.n	800c16c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <osKernelStart+0x48>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d109      	bne.n	800c166 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c152:	f7ff ffbf 	bl	800c0d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c156:	4b08      	ldr	r3, [pc, #32]	; (800c178 <osKernelStart+0x48>)
 800c158:	2202      	movs	r2, #2
 800c15a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c15c:	f001 fcb4 	bl	800dac8 <vTaskStartScheduler>
      stat = osOK;
 800c160:	2300      	movs	r3, #0
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	e002      	b.n	800c16c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c166:	f04f 33ff 	mov.w	r3, #4294967295
 800c16a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c16c:	687b      	ldr	r3, [r7, #4]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	240122fc 	.word	0x240122fc

0800c17c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08e      	sub	sp, #56	; 0x38
 800c180:	af04      	add	r7, sp, #16
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c188:	2300      	movs	r3, #0
 800c18a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c18c:	f3ef 8305 	mrs	r3, IPSR
 800c190:	617b      	str	r3, [r7, #20]
  return(result);
 800c192:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c194:	2b00      	cmp	r3, #0
 800c196:	d17e      	bne.n	800c296 <osThreadNew+0x11a>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d07b      	beq.n	800c296 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c19e:	2380      	movs	r3, #128	; 0x80
 800c1a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1a2:	2318      	movs	r3, #24
 800c1a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d045      	beq.n	800c242 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <osThreadNew+0x48>
        name = attr->name;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	699b      	ldr	r3, [r3, #24]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d008      	beq.n	800c1ea <osThreadNew+0x6e>
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	2b38      	cmp	r3, #56	; 0x38
 800c1dc:	d805      	bhi.n	800c1ea <osThreadNew+0x6e>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <osThreadNew+0x72>
        return (NULL);
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	e054      	b.n	800c298 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	089b      	lsrs	r3, r3, #2
 800c1fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00e      	beq.n	800c224 <osThreadNew+0xa8>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	2b5b      	cmp	r3, #91	; 0x5b
 800c20c:	d90a      	bls.n	800c224 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c212:	2b00      	cmp	r3, #0
 800c214:	d006      	beq.n	800c224 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d002      	beq.n	800c224 <osThreadNew+0xa8>
        mem = 1;
 800c21e:	2301      	movs	r3, #1
 800c220:	61bb      	str	r3, [r7, #24]
 800c222:	e010      	b.n	800c246 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10c      	bne.n	800c246 <osThreadNew+0xca>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d108      	bne.n	800c246 <osThreadNew+0xca>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d104      	bne.n	800c246 <osThreadNew+0xca>
          mem = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	61bb      	str	r3, [r7, #24]
 800c240:	e001      	b.n	800c246 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d110      	bne.n	800c26e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c254:	9202      	str	r2, [sp, #8]
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	6a3a      	ldr	r2, [r7, #32]
 800c260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f001 fa8e 	bl	800d784 <xTaskCreateStatic>
 800c268:	4603      	mov	r3, r0
 800c26a:	613b      	str	r3, [r7, #16]
 800c26c:	e013      	b.n	800c296 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d110      	bne.n	800c296 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	b29a      	uxth	r2, r3
 800c278:	f107 0310 	add.w	r3, r7, #16
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f001 fad9 	bl	800d83e <xTaskCreate>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d001      	beq.n	800c296 <osThreadNew+0x11a>
            hTask = NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c296:	693b      	ldr	r3, [r7, #16]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3728      	adds	r7, #40	; 0x28
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08a      	sub	sp, #40	; 0x28
 800c2a4:	af02      	add	r7, sp, #8
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b0:	f3ef 8305 	mrs	r3, IPSR
 800c2b4:	613b      	str	r3, [r7, #16]
  return(result);
 800c2b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d175      	bne.n	800c3a8 <osSemaphoreNew+0x108>
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d072      	beq.n	800c3a8 <osSemaphoreNew+0x108>
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d86e      	bhi.n	800c3a8 <osSemaphoreNew+0x108>
    mem = -1;
 800c2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d015      	beq.n	800c302 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d006      	beq.n	800c2ec <osSemaphoreNew+0x4c>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	2b4f      	cmp	r3, #79	; 0x4f
 800c2e4:	d902      	bls.n	800c2ec <osSemaphoreNew+0x4c>
        mem = 1;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	61bb      	str	r3, [r7, #24]
 800c2ea:	e00c      	b.n	800c306 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d108      	bne.n	800c306 <osSemaphoreNew+0x66>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d104      	bne.n	800c306 <osSemaphoreNew+0x66>
          mem = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	e001      	b.n	800c306 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c302:	2300      	movs	r3, #0
 800c304:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30c:	d04c      	beq.n	800c3a8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d128      	bne.n	800c366 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d10a      	bne.n	800c330 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	2203      	movs	r2, #3
 800c320:	9200      	str	r2, [sp, #0]
 800c322:	2200      	movs	r2, #0
 800c324:	2100      	movs	r1, #0
 800c326:	2001      	movs	r0, #1
 800c328:	f000 fa4a 	bl	800c7c0 <xQueueGenericCreateStatic>
 800c32c:	61f8      	str	r0, [r7, #28]
 800c32e:	e005      	b.n	800c33c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c330:	2203      	movs	r2, #3
 800c332:	2100      	movs	r1, #0
 800c334:	2001      	movs	r0, #1
 800c336:	f000 fabb 	bl	800c8b0 <xQueueGenericCreate>
 800c33a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d022      	beq.n	800c388 <osSemaphoreNew+0xe8>
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d01f      	beq.n	800c388 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c348:	2300      	movs	r3, #0
 800c34a:	2200      	movs	r2, #0
 800c34c:	2100      	movs	r1, #0
 800c34e:	69f8      	ldr	r0, [r7, #28]
 800c350:	f000 fb76 	bl	800ca40 <xQueueGenericSend>
 800c354:	4603      	mov	r3, r0
 800c356:	2b01      	cmp	r3, #1
 800c358:	d016      	beq.n	800c388 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c35a:	69f8      	ldr	r0, [r7, #28]
 800c35c:	f001 f83e 	bl	800d3dc <vQueueDelete>
            hSemaphore = NULL;
 800c360:	2300      	movs	r3, #0
 800c362:	61fb      	str	r3, [r7, #28]
 800c364:	e010      	b.n	800c388 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d108      	bne.n	800c37e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	461a      	mov	r2, r3
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 faf8 	bl	800c96a <xQueueCreateCountingSemaphoreStatic>
 800c37a:	61f8      	str	r0, [r7, #28]
 800c37c:	e004      	b.n	800c388 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c37e:	68b9      	ldr	r1, [r7, #8]
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f000 fb29 	bl	800c9d8 <xQueueCreateCountingSemaphore>
 800c386:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00c      	beq.n	800c3a8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <osSemaphoreNew+0xfc>
          name = attr->name;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	617b      	str	r3, [r7, #20]
 800c39a:	e001      	b.n	800c3a0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c39c:	2300      	movs	r3, #0
 800c39e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c3a0:	6979      	ldr	r1, [r7, #20]
 800c3a2:	69f8      	ldr	r0, [r7, #28]
 800c3a4:	f001 f966 	bl	800d674 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c3a8:	69fb      	ldr	r3, [r7, #28]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3720      	adds	r7, #32
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
	...

0800c3b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d103      	bne.n	800c3d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c3cc:	f06f 0303 	mvn.w	r3, #3
 800c3d0:	617b      	str	r3, [r7, #20]
 800c3d2:	e039      	b.n	800c448 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3d4:	f3ef 8305 	mrs	r3, IPSR
 800c3d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d022      	beq.n	800c426 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c3e6:	f06f 0303 	mvn.w	r3, #3
 800c3ea:	617b      	str	r3, [r7, #20]
 800c3ec:	e02c      	b.n	800c448 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c3f2:	f107 0308 	add.w	r3, r7, #8
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	6938      	ldr	r0, [r7, #16]
 800c3fc:	f000 ff32 	bl	800d264 <xQueueReceiveFromISR>
 800c400:	4603      	mov	r3, r0
 800c402:	2b01      	cmp	r3, #1
 800c404:	d003      	beq.n	800c40e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c406:	f06f 0302 	mvn.w	r3, #2
 800c40a:	617b      	str	r3, [r7, #20]
 800c40c:	e01c      	b.n	800c448 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d019      	beq.n	800c448 <osSemaphoreAcquire+0x94>
 800c414:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <osSemaphoreAcquire+0xa0>)
 800c416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	e010      	b.n	800c448 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c426:	6839      	ldr	r1, [r7, #0]
 800c428:	6938      	ldr	r0, [r7, #16]
 800c42a:	f000 fe0f 	bl	800d04c <xQueueSemaphoreTake>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b01      	cmp	r3, #1
 800c432:	d009      	beq.n	800c448 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c43a:	f06f 0301 	mvn.w	r3, #1
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	e002      	b.n	800c448 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c442:	f06f 0302 	mvn.w	r3, #2
 800c446:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c448:	697b      	ldr	r3, [r7, #20]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	e000ed04 	.word	0xe000ed04

0800c458 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c464:	2300      	movs	r3, #0
 800c466:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d103      	bne.n	800c476 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c46e:	f06f 0303 	mvn.w	r3, #3
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	e02c      	b.n	800c4d0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c476:	f3ef 8305 	mrs	r3, IPSR
 800c47a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c47c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01a      	beq.n	800c4b8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c482:	2300      	movs	r3, #0
 800c484:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c486:	f107 0308 	add.w	r3, r7, #8
 800c48a:	4619      	mov	r1, r3
 800c48c:	6938      	ldr	r0, [r7, #16]
 800c48e:	f000 fc70 	bl	800cd72 <xQueueGiveFromISR>
 800c492:	4603      	mov	r3, r0
 800c494:	2b01      	cmp	r3, #1
 800c496:	d003      	beq.n	800c4a0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c498:	f06f 0302 	mvn.w	r3, #2
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	e017      	b.n	800c4d0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d014      	beq.n	800c4d0 <osSemaphoreRelease+0x78>
 800c4a6:	4b0d      	ldr	r3, [pc, #52]	; (800c4dc <osSemaphoreRelease+0x84>)
 800c4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	e00b      	b.n	800c4d0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	2100      	movs	r1, #0
 800c4be:	6938      	ldr	r0, [r7, #16]
 800c4c0:	f000 fabe 	bl	800ca40 <xQueueGenericSend>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d002      	beq.n	800c4d0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c4ca:	f06f 0302 	mvn.w	r3, #2
 800c4ce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c4d0:	697b      	ldr	r3, [r7, #20]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	e000ed04 	.word	0xe000ed04

0800c4e0 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d102      	bne.n	800c4f8 <osSemaphoreGetCount+0x18>
    count = 0U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	e00e      	b.n	800c516 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4f8:	f3ef 8305 	mrs	r3, IPSR
 800c4fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c500:	2b00      	cmp	r3, #0
 800c502:	d004      	beq.n	800c50e <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800c504:	6938      	ldr	r0, [r7, #16]
 800c506:	f000 ff4b 	bl	800d3a0 <uxQueueMessagesWaitingFromISR>
 800c50a:	6178      	str	r0, [r7, #20]
 800c50c:	e003      	b.n	800c516 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800c50e:	6938      	ldr	r0, [r7, #16]
 800c510:	f000 ff28 	bl	800d364 <uxQueueMessagesWaiting>
 800c514:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800c516:	697b      	ldr	r3, [r7, #20]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4a07      	ldr	r2, [pc, #28]	; (800c54c <vApplicationGetIdleTaskMemory+0x2c>)
 800c530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	4a06      	ldr	r2, [pc, #24]	; (800c550 <vApplicationGetIdleTaskMemory+0x30>)
 800c536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2280      	movs	r2, #128	; 0x80
 800c53c:	601a      	str	r2, [r3, #0]
}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	24012300 	.word	0x24012300
 800c550:	2401235c 	.word	0x2401235c

0800c554 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	4a07      	ldr	r2, [pc, #28]	; (800c580 <vApplicationGetTimerTaskMemory+0x2c>)
 800c564:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	4a06      	ldr	r2, [pc, #24]	; (800c584 <vApplicationGetTimerTaskMemory+0x30>)
 800c56a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c572:	601a      	str	r2, [r3, #0]
}
 800c574:	bf00      	nop
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	2401255c 	.word	0x2401255c
 800c584:	240125b8 	.word	0x240125b8

0800c588 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f103 0208 	add.w	r2, r3, #8
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f103 0208 	add.w	r2, r3, #8
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f103 0208 	add.w	r2, r3, #8
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5bc:	bf00      	nop
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5d6:	bf00      	nop
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b085      	sub	sp, #20
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	689a      	ldr	r2, [r3, #8]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	1c5a      	adds	r2, r3, #1
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	601a      	str	r2, [r3, #0]
}
 800c61e:	bf00      	nop
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c62a:	b480      	push	{r7}
 800c62c:	b085      	sub	sp, #20
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c640:	d103      	bne.n	800c64a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	e00c      	b.n	800c664 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3308      	adds	r3, #8
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	e002      	b.n	800c658 <vListInsert+0x2e>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	429a      	cmp	r2, r3
 800c662:	d2f6      	bcs.n	800c652 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	685a      	ldr	r2, [r3, #4]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	683a      	ldr	r2, [r7, #0]
 800c672:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	601a      	str	r2, [r3, #0]
}
 800c690:	bf00      	nop
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6892      	ldr	r2, [r2, #8]
 800c6b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	6852      	ldr	r2, [r2, #4]
 800c6bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d103      	bne.n	800c6d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	1e5a      	subs	r2, r3, #1
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3714      	adds	r7, #20
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10a      	bne.n	800c71a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c716:	bf00      	nop
 800c718:	e7fe      	b.n	800c718 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c71a:	f002 fc73 	bl	800f004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c726:	68f9      	ldr	r1, [r7, #12]
 800c728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c72a:	fb01 f303 	mul.w	r3, r1, r3
 800c72e:	441a      	add	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c74a:	3b01      	subs	r3, #1
 800c74c:	68f9      	ldr	r1, [r7, #12]
 800c74e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c750:	fb01 f303 	mul.w	r3, r1, r3
 800c754:	441a      	add	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	22ff      	movs	r2, #255	; 0xff
 800c75e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	22ff      	movs	r2, #255	; 0xff
 800c766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d114      	bne.n	800c79a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01a      	beq.n	800c7ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3310      	adds	r3, #16
 800c77c:	4618      	mov	r0, r3
 800c77e:	f001 fc2d 	bl	800dfdc <xTaskRemoveFromEventList>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d012      	beq.n	800c7ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c788:	4b0c      	ldr	r3, [pc, #48]	; (800c7bc <xQueueGenericReset+0xcc>)
 800c78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	e009      	b.n	800c7ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3310      	adds	r3, #16
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff fef2 	bl	800c588 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	3324      	adds	r3, #36	; 0x24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff feed 	bl	800c588 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7ae:	f002 fc59 	bl	800f064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c7b2:	2301      	movs	r3, #1
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	e000ed04 	.word	0xe000ed04

0800c7c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08e      	sub	sp, #56	; 0x38
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <xQueueGenericCreateStatic+0x52>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d001      	beq.n	800c816 <xQueueGenericCreateStatic+0x56>
 800c812:	2301      	movs	r3, #1
 800c814:	e000      	b.n	800c818 <xQueueGenericCreateStatic+0x58>
 800c816:	2300      	movs	r3, #0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10a      	bne.n	800c832 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	623b      	str	r3, [r7, #32]
}
 800c82e:	bf00      	nop
 800c830:	e7fe      	b.n	800c830 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d102      	bne.n	800c83e <xQueueGenericCreateStatic+0x7e>
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <xQueueGenericCreateStatic+0x82>
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <xQueueGenericCreateStatic+0x84>
 800c842:	2300      	movs	r3, #0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10a      	bne.n	800c85e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	61fb      	str	r3, [r7, #28]
}
 800c85a:	bf00      	nop
 800c85c:	e7fe      	b.n	800c85c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c85e:	2350      	movs	r3, #80	; 0x50
 800c860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2b50      	cmp	r3, #80	; 0x50
 800c866:	d00a      	beq.n	800c87e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	61bb      	str	r3, [r7, #24]
}
 800c87a:	bf00      	nop
 800c87c:	e7fe      	b.n	800c87c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c87e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00d      	beq.n	800c8a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c892:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	4613      	mov	r3, r2
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	68b9      	ldr	r1, [r7, #8]
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f000 f83f 	bl	800c924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3730      	adds	r7, #48	; 0x30
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08a      	sub	sp, #40	; 0x28
 800c8b4:	af02      	add	r7, sp, #8
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10a      	bne.n	800c8da <xQueueGenericCreate+0x2a>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	613b      	str	r3, [r7, #16]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	fb02 f303 	mul.w	r3, r2, r3
 800c8e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	3350      	adds	r3, #80	; 0x50
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f002 fcad 	bl	800f248 <pvPortMalloc>
 800c8ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d011      	beq.n	800c91a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	3350      	adds	r3, #80	; 0x50
 800c8fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c908:	79fa      	ldrb	r2, [r7, #7]
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	4613      	mov	r3, r2
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f805 	bl	800c924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c91a:	69bb      	ldr	r3, [r7, #24]
	}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3720      	adds	r7, #32
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d103      	bne.n	800c940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	e002      	b.n	800c946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c952:	2101      	movs	r1, #1
 800c954:	69b8      	ldr	r0, [r7, #24]
 800c956:	f7ff fecb 	bl	800c6f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	78fa      	ldrb	r2, [r7, #3]
 800c95e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b08a      	sub	sp, #40	; 0x28
 800c96e:	af02      	add	r7, sp, #8
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	61bb      	str	r3, [r7, #24]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	429a      	cmp	r2, r3
 800c998:	d90a      	bls.n	800c9b0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	617b      	str	r3, [r7, #20]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f7ff ff00 	bl	800c7c0 <xQueueGenericCreateStatic>
 800c9c0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
	}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	613b      	str	r3, [r7, #16]
}
 800c9fa:	bf00      	nop
 800c9fc:	e7fe      	b.n	800c9fc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d90a      	bls.n	800ca1c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ca06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	60fb      	str	r3, [r7, #12]
}
 800ca18:	bf00      	nop
 800ca1a:	e7fe      	b.n	800ca1a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	2100      	movs	r1, #0
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff ff45 	bl	800c8b0 <xQueueGenericCreate>
 800ca26:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ca34:	697b      	ldr	r3, [r7, #20]
	}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
	...

0800ca40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08e      	sub	sp, #56	; 0x38
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10a      	bne.n	800ca72 <xQueueGenericSend+0x32>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d103      	bne.n	800ca80 <xQueueGenericSend+0x40>
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <xQueueGenericSend+0x44>
 800ca80:	2301      	movs	r3, #1
 800ca82:	e000      	b.n	800ca86 <xQueueGenericSend+0x46>
 800ca84:	2300      	movs	r3, #0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10a      	bne.n	800caa0 <xQueueGenericSend+0x60>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d103      	bne.n	800caae <xQueueGenericSend+0x6e>
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d101      	bne.n	800cab2 <xQueueGenericSend+0x72>
 800caae:	2301      	movs	r3, #1
 800cab0:	e000      	b.n	800cab4 <xQueueGenericSend+0x74>
 800cab2:	2300      	movs	r3, #0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10a      	bne.n	800cace <xQueueGenericSend+0x8e>
	__asm volatile
 800cab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	623b      	str	r3, [r7, #32]
}
 800caca:	bf00      	nop
 800cacc:	e7fe      	b.n	800cacc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cace:	f001 fc43 	bl	800e358 <xTaskGetSchedulerState>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <xQueueGenericSend+0x9e>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <xQueueGenericSend+0xa2>
 800cade:	2301      	movs	r3, #1
 800cae0:	e000      	b.n	800cae4 <xQueueGenericSend+0xa4>
 800cae2:	2300      	movs	r3, #0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10a      	bne.n	800cafe <xQueueGenericSend+0xbe>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	61fb      	str	r3, [r7, #28]
}
 800cafa:	bf00      	nop
 800cafc:	e7fe      	b.n	800cafc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cafe:	f002 fa81 	bl	800f004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d302      	bcc.n	800cb14 <xQueueGenericSend+0xd4>
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d129      	bne.n	800cb68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb1a:	f000 fc9a 	bl	800d452 <prvCopyDataToQueue>
 800cb1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d010      	beq.n	800cb4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	3324      	adds	r3, #36	; 0x24
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f001 fa55 	bl	800dfdc <xTaskRemoveFromEventList>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d013      	beq.n	800cb60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cb38:	4b3f      	ldr	r3, [pc, #252]	; (800cc38 <xQueueGenericSend+0x1f8>)
 800cb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	e00a      	b.n	800cb60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d007      	beq.n	800cb60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb50:	4b39      	ldr	r3, [pc, #228]	; (800cc38 <xQueueGenericSend+0x1f8>)
 800cb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cb60:	f002 fa80 	bl	800f064 <vPortExitCritical>
				return pdPASS;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e063      	b.n	800cc30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d103      	bne.n	800cb76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb6e:	f002 fa79 	bl	800f064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e05c      	b.n	800cc30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d106      	bne.n	800cb8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb7c:	f107 0314 	add.w	r3, r7, #20
 800cb80:	4618      	mov	r0, r3
 800cb82:	f001 fa8f 	bl	800e0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb86:	2301      	movs	r3, #1
 800cb88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb8a:	f002 fa6b 	bl	800f064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb8e:	f001 f801 	bl	800db94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb92:	f002 fa37 	bl	800f004 <vPortEnterCritical>
 800cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb9c:	b25b      	sxtb	r3, r3
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba2:	d103      	bne.n	800cbac <xQueueGenericSend+0x16c>
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbb2:	b25b      	sxtb	r3, r3
 800cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb8:	d103      	bne.n	800cbc2 <xQueueGenericSend+0x182>
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbc2:	f002 fa4f 	bl	800f064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbc6:	1d3a      	adds	r2, r7, #4
 800cbc8:	f107 0314 	add.w	r3, r7, #20
 800cbcc:	4611      	mov	r1, r2
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f001 fa7e 	bl	800e0d0 <xTaskCheckForTimeOut>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d124      	bne.n	800cc24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cbda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbdc:	f000 fd31 	bl	800d642 <prvIsQueueFull>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d018      	beq.n	800cc18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	3310      	adds	r3, #16
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f001 f9a4 	bl	800df3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cbf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbf6:	f000 fcbc 	bl	800d572 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cbfa:	f000 ffd9 	bl	800dbb0 <xTaskResumeAll>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f47f af7c 	bne.w	800cafe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cc06:	4b0c      	ldr	r3, [pc, #48]	; (800cc38 <xQueueGenericSend+0x1f8>)
 800cc08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	e772      	b.n	800cafe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc1a:	f000 fcaa 	bl	800d572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc1e:	f000 ffc7 	bl	800dbb0 <xTaskResumeAll>
 800cc22:	e76c      	b.n	800cafe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cc24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc26:	f000 fca4 	bl	800d572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc2a:	f000 ffc1 	bl	800dbb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cc2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3738      	adds	r7, #56	; 0x38
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	e000ed04 	.word	0xe000ed04

0800cc3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b090      	sub	sp, #64	; 0x40
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d103      	bne.n	800cc78 <xQueueGenericSendFromISR+0x3c>
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d101      	bne.n	800cc7c <xQueueGenericSendFromISR+0x40>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e000      	b.n	800cc7e <xQueueGenericSendFromISR+0x42>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10a      	bne.n	800cc98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc94:	bf00      	nop
 800cc96:	e7fe      	b.n	800cc96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d103      	bne.n	800cca6 <xQueueGenericSendFromISR+0x6a>
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d101      	bne.n	800ccaa <xQueueGenericSendFromISR+0x6e>
 800cca6:	2301      	movs	r3, #1
 800cca8:	e000      	b.n	800ccac <xQueueGenericSendFromISR+0x70>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	623b      	str	r3, [r7, #32]
}
 800ccc2:	bf00      	nop
 800ccc4:	e7fe      	b.n	800ccc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccc6:	f002 fa7f 	bl	800f1c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ccca:	f3ef 8211 	mrs	r2, BASEPRI
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	61fa      	str	r2, [r7, #28]
 800cce0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cce2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cce4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d302      	bcc.n	800ccf8 <xQueueGenericSendFromISR+0xbc>
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d12f      	bne.n	800cd58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	68b9      	ldr	r1, [r7, #8]
 800cd0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd0e:	f000 fba0 	bl	800d452 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1a:	d112      	bne.n	800cd42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d016      	beq.n	800cd52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd26:	3324      	adds	r3, #36	; 0x24
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f001 f957 	bl	800dfdc <xTaskRemoveFromEventList>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00e      	beq.n	800cd52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00b      	beq.n	800cd52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	e007      	b.n	800cd52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd46:	3301      	adds	r3, #1
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	b25a      	sxtb	r2, r3
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cd52:	2301      	movs	r3, #1
 800cd54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cd56:	e001      	b.n	800cd5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3740      	adds	r7, #64	; 0x40
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b08e      	sub	sp, #56	; 0x38
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10a      	bne.n	800cd9c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	623b      	str	r3, [r7, #32]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00a      	beq.n	800cdba <xQueueGiveFromISR+0x48>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	61fb      	str	r3, [r7, #28]
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d103      	bne.n	800cdca <xQueueGiveFromISR+0x58>
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d101      	bne.n	800cdce <xQueueGiveFromISR+0x5c>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e000      	b.n	800cdd0 <xQueueGiveFromISR+0x5e>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10a      	bne.n	800cdea <xQueueGiveFromISR+0x78>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	61bb      	str	r3, [r7, #24]
}
 800cde6:	bf00      	nop
 800cde8:	e7fe      	b.n	800cde8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdea:	f002 f9ed 	bl	800f1c8 <vPortValidateInterruptPriority>
	__asm volatile
 800cdee:	f3ef 8211 	mrs	r2, BASEPRI
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	617a      	str	r2, [r7, #20]
 800ce04:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ce06:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d22b      	bcs.n	800ce72 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce34:	d112      	bne.n	800ce5c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d016      	beq.n	800ce6c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce40:	3324      	adds	r3, #36	; 0x24
 800ce42:	4618      	mov	r0, r3
 800ce44:	f001 f8ca 	bl	800dfdc <xTaskRemoveFromEventList>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00e      	beq.n	800ce6c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2201      	movs	r2, #1
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	e007      	b.n	800ce6c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce60:	3301      	adds	r3, #1
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	b25a      	sxtb	r2, r3
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce70:	e001      	b.n	800ce76 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	637b      	str	r3, [r7, #52]	; 0x34
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f383 8811 	msr	BASEPRI, r3
}
 800ce80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3738      	adds	r7, #56	; 0x38
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08c      	sub	sp, #48	; 0x30
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10a      	bne.n	800cebc <xQueueReceive+0x30>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	623b      	str	r3, [r7, #32]
}
 800ceb8:	bf00      	nop
 800ceba:	e7fe      	b.n	800ceba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d103      	bne.n	800ceca <xQueueReceive+0x3e>
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <xQueueReceive+0x42>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e000      	b.n	800ced0 <xQueueReceive+0x44>
 800cece:	2300      	movs	r3, #0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xQueueReceive+0x5e>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	61fb      	str	r3, [r7, #28]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceea:	f001 fa35 	bl	800e358 <xTaskGetSchedulerState>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d102      	bne.n	800cefa <xQueueReceive+0x6e>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <xQueueReceive+0x72>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e000      	b.n	800cf00 <xQueueReceive+0x74>
 800cefe:	2300      	movs	r3, #0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <xQueueReceive+0x8e>
	__asm volatile
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	61bb      	str	r3, [r7, #24]
}
 800cf16:	bf00      	nop
 800cf18:	e7fe      	b.n	800cf18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf1a:	f002 f873 	bl	800f004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d01f      	beq.n	800cf6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf2a:	68b9      	ldr	r1, [r7, #8]
 800cf2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf2e:	f000 fafa 	bl	800d526 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	1e5a      	subs	r2, r3, #1
 800cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00f      	beq.n	800cf62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf44:	3310      	adds	r3, #16
 800cf46:	4618      	mov	r0, r3
 800cf48:	f001 f848 	bl	800dfdc <xTaskRemoveFromEventList>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d007      	beq.n	800cf62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf52:	4b3d      	ldr	r3, [pc, #244]	; (800d048 <xQueueReceive+0x1bc>)
 800cf54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf62:	f002 f87f 	bl	800f064 <vPortExitCritical>
				return pdPASS;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e069      	b.n	800d03e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d103      	bne.n	800cf78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf70:	f002 f878 	bl	800f064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf74:	2300      	movs	r3, #0
 800cf76:	e062      	b.n	800d03e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf7e:	f107 0310 	add.w	r3, r7, #16
 800cf82:	4618      	mov	r0, r3
 800cf84:	f001 f88e 	bl	800e0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf8c:	f002 f86a 	bl	800f064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf90:	f000 fe00 	bl	800db94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf94:	f002 f836 	bl	800f004 <vPortEnterCritical>
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf9e:	b25b      	sxtb	r3, r3
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d103      	bne.n	800cfae <xQueueReceive+0x122>
 800cfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfb4:	b25b      	sxtb	r3, r3
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d103      	bne.n	800cfc4 <xQueueReceive+0x138>
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfc4:	f002 f84e 	bl	800f064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfc8:	1d3a      	adds	r2, r7, #4
 800cfca:	f107 0310 	add.w	r3, r7, #16
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f001 f87d 	bl	800e0d0 <xTaskCheckForTimeOut>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d123      	bne.n	800d024 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfde:	f000 fb1a 	bl	800d616 <prvIsQueueEmpty>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d017      	beq.n	800d018 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfea:	3324      	adds	r3, #36	; 0x24
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	4611      	mov	r1, r2
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 ffa3 	bl	800df3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff8:	f000 fabb 	bl	800d572 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cffc:	f000 fdd8 	bl	800dbb0 <xTaskResumeAll>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d189      	bne.n	800cf1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d006:	4b10      	ldr	r3, [pc, #64]	; (800d048 <xQueueReceive+0x1bc>)
 800d008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d00c:	601a      	str	r2, [r3, #0]
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	e780      	b.n	800cf1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d01a:	f000 faaa 	bl	800d572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d01e:	f000 fdc7 	bl	800dbb0 <xTaskResumeAll>
 800d022:	e77a      	b.n	800cf1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d026:	f000 faa4 	bl	800d572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d02a:	f000 fdc1 	bl	800dbb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d030:	f000 faf1 	bl	800d616 <prvIsQueueEmpty>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	f43f af6f 	beq.w	800cf1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d03c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3730      	adds	r7, #48	; 0x30
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	e000ed04 	.word	0xe000ed04

0800d04c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08e      	sub	sp, #56	; 0x38
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d056:	2300      	movs	r3, #0
 800d058:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	623b      	str	r3, [r7, #32]
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00a      	beq.n	800d09c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	61fb      	str	r3, [r7, #28]
}
 800d098:	bf00      	nop
 800d09a:	e7fe      	b.n	800d09a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d09c:	f001 f95c 	bl	800e358 <xTaskGetSchedulerState>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d102      	bne.n	800d0ac <xQueueSemaphoreTake+0x60>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <xQueueSemaphoreTake+0x64>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <xQueueSemaphoreTake+0x66>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	61bb      	str	r3, [r7, #24]
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0cc:	f001 ff9a 	bl	800f004 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d024      	beq.n	800d126 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	1e5a      	subs	r2, r3, #1
 800d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d104      	bne.n	800d0f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0ec:	f001 faaa 	bl	800e644 <pvTaskIncrementMutexHeldCount>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00f      	beq.n	800d11e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	3310      	adds	r3, #16
 800d102:	4618      	mov	r0, r3
 800d104:	f000 ff6a 	bl	800dfdc <xTaskRemoveFromEventList>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d007      	beq.n	800d11e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d10e:	4b54      	ldr	r3, [pc, #336]	; (800d260 <xQueueSemaphoreTake+0x214>)
 800d110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d114:	601a      	str	r2, [r3, #0]
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d11e:	f001 ffa1 	bl	800f064 <vPortExitCritical>
				return pdPASS;
 800d122:	2301      	movs	r3, #1
 800d124:	e097      	b.n	800d256 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d111      	bne.n	800d150 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00a      	beq.n	800d148 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	617b      	str	r3, [r7, #20]
}
 800d144:	bf00      	nop
 800d146:	e7fe      	b.n	800d146 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d148:	f001 ff8c 	bl	800f064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d14c:	2300      	movs	r3, #0
 800d14e:	e082      	b.n	800d256 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d156:	f107 030c 	add.w	r3, r7, #12
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 ffa2 	bl	800e0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d160:	2301      	movs	r3, #1
 800d162:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d164:	f001 ff7e 	bl	800f064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d168:	f000 fd14 	bl	800db94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d16c:	f001 ff4a 	bl	800f004 <vPortEnterCritical>
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d176:	b25b      	sxtb	r3, r3
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d103      	bne.n	800d186 <xQueueSemaphoreTake+0x13a>
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	2200      	movs	r2, #0
 800d182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d18c:	b25b      	sxtb	r3, r3
 800d18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d192:	d103      	bne.n	800d19c <xQueueSemaphoreTake+0x150>
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	2200      	movs	r2, #0
 800d198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d19c:	f001 ff62 	bl	800f064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1a0:	463a      	mov	r2, r7
 800d1a2:	f107 030c 	add.w	r3, r7, #12
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f000 ff91 	bl	800e0d0 <xTaskCheckForTimeOut>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d132      	bne.n	800d21a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1b6:	f000 fa2e 	bl	800d616 <prvIsQueueEmpty>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d026      	beq.n	800d20e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d109      	bne.n	800d1dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d1c8:	f001 ff1c 	bl	800f004 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f001 f8df 	bl	800e394 <xTaskPriorityInherit>
 800d1d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d1d8:	f001 ff44 	bl	800f064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	3324      	adds	r3, #36	; 0x24
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f000 fea9 	bl	800df3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1ec:	f000 f9c1 	bl	800d572 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1f0:	f000 fcde 	bl	800dbb0 <xTaskResumeAll>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f47f af68 	bne.w	800d0cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d1fc:	4b18      	ldr	r3, [pc, #96]	; (800d260 <xQueueSemaphoreTake+0x214>)
 800d1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	e75e      	b.n	800d0cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d20e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d210:	f000 f9af 	bl	800d572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d214:	f000 fccc 	bl	800dbb0 <xTaskResumeAll>
 800d218:	e758      	b.n	800d0cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d21c:	f000 f9a9 	bl	800d572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d220:	f000 fcc6 	bl	800dbb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d226:	f000 f9f6 	bl	800d616 <prvIsQueueEmpty>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f43f af4d 	beq.w	800d0cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00d      	beq.n	800d254 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d238:	f001 fee4 	bl	800f004 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d23c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d23e:	f000 f8f0 	bl	800d422 <prvGetDisinheritPriorityAfterTimeout>
 800d242:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d24a:	4618      	mov	r0, r3
 800d24c:	f001 f978 	bl	800e540 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d250:	f001 ff08 	bl	800f064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d256:	4618      	mov	r0, r3
 800d258:	3738      	adds	r7, #56	; 0x38
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08e      	sub	sp, #56	; 0x38
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10a      	bne.n	800d290 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	623b      	str	r3, [r7, #32]
}
 800d28c:	bf00      	nop
 800d28e:	e7fe      	b.n	800d28e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d103      	bne.n	800d29e <xQueueReceiveFromISR+0x3a>
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <xQueueReceiveFromISR+0x3e>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e000      	b.n	800d2a4 <xQueueReceiveFromISR+0x40>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10a      	bne.n	800d2be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	61fb      	str	r3, [r7, #28]
}
 800d2ba:	bf00      	nop
 800d2bc:	e7fe      	b.n	800d2bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2be:	f001 ff83 	bl	800f1c8 <vPortValidateInterruptPriority>
	__asm volatile
 800d2c2:	f3ef 8211 	mrs	r2, BASEPRI
 800d2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ca:	f383 8811 	msr	BASEPRI, r3
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	61ba      	str	r2, [r7, #24]
 800d2d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d02f      	beq.n	800d34a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2f4:	68b9      	ldr	r1, [r7, #8]
 800d2f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2f8:	f000 f915 	bl	800d526 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	1e5a      	subs	r2, r3, #1
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30c:	d112      	bne.n	800d334 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d016      	beq.n	800d344 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	3310      	adds	r3, #16
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 fe5e 	bl	800dfdc <xTaskRemoveFromEventList>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00e      	beq.n	800d344 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00b      	beq.n	800d344 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	e007      	b.n	800d344 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d338:	3301      	adds	r3, #1
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	b25a      	sxtb	r2, r3
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d344:	2301      	movs	r3, #1
 800d346:	637b      	str	r3, [r7, #52]	; 0x34
 800d348:	e001      	b.n	800d34e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d34a:	2300      	movs	r3, #0
 800d34c:	637b      	str	r3, [r7, #52]	; 0x34
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f383 8811 	msr	BASEPRI, r3
}
 800d358:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3738      	adds	r7, #56	; 0x38
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10a      	bne.n	800d388 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d376:	f383 8811 	msr	BASEPRI, r3
 800d37a:	f3bf 8f6f 	isb	sy
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	60bb      	str	r3, [r7, #8]
}
 800d384:	bf00      	nop
 800d386:	e7fe      	b.n	800d386 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d388:	f001 fe3c 	bl	800f004 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d390:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d392:	f001 fe67 	bl	800f064 <vPortExitCritical>

	return uxReturn;
 800d396:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10a      	bne.n	800d3c8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	60fb      	str	r3, [r7, #12]
}
 800d3c4:	bf00      	nop
 800d3c6:	e7fe      	b.n	800d3c6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d3ce:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	371c      	adds	r7, #28
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <vQueueDelete+0x28>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	60bb      	str	r3, [r7, #8]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f000 f95f 	bl	800d6c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d410:	2b00      	cmp	r3, #0
 800d412:	d102      	bne.n	800d41a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f001 ffe3 	bl	800f3e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d41a:	bf00      	nop
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d422:	b480      	push	{r7}
 800d424:	b085      	sub	sp, #20
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d006      	beq.n	800d440 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	e001      	b.n	800d444 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d440:	2300      	movs	r3, #0
 800d442:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d444:	68fb      	ldr	r3, [r7, #12]
	}
 800d446:	4618      	mov	r0, r3
 800d448:	3714      	adds	r7, #20
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b086      	sub	sp, #24
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d45e:	2300      	movs	r3, #0
 800d460:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d466:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10d      	bne.n	800d48c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d14d      	bne.n	800d514 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 fff1 	bl	800e464 <xTaskPriorityDisinherit>
 800d482:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	609a      	str	r2, [r3, #8]
 800d48a:	e043      	b.n	800d514 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d119      	bne.n	800d4c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6858      	ldr	r0, [r3, #4]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49a:	461a      	mov	r2, r3
 800d49c:	68b9      	ldr	r1, [r7, #8]
 800d49e:	f003 f9a9 	bl	80107f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	685a      	ldr	r2, [r3, #4]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4aa:	441a      	add	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d32b      	bcc.n	800d514 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	605a      	str	r2, [r3, #4]
 800d4c4:	e026      	b.n	800d514 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	68d8      	ldr	r0, [r3, #12]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	68b9      	ldr	r1, [r7, #8]
 800d4d2:	f003 f98f 	bl	80107f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	68da      	ldr	r2, [r3, #12]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4de:	425b      	negs	r3, r3
 800d4e0:	441a      	add	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	68da      	ldr	r2, [r3, #12]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d207      	bcs.n	800d502 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	689a      	ldr	r2, [r3, #8]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fa:	425b      	negs	r3, r3
 800d4fc:	441a      	add	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d105      	bne.n	800d514 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d002      	beq.n	800d514 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	3b01      	subs	r3, #1
 800d512:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	1c5a      	adds	r2, r3, #1
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d51c:	697b      	ldr	r3, [r7, #20]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d534:	2b00      	cmp	r3, #0
 800d536:	d018      	beq.n	800d56a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68da      	ldr	r2, [r3, #12]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d540:	441a      	add	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68da      	ldr	r2, [r3, #12]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	689b      	ldr	r3, [r3, #8]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d303      	bcc.n	800d55a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68d9      	ldr	r1, [r3, #12]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d562:	461a      	mov	r2, r3
 800d564:	6838      	ldr	r0, [r7, #0]
 800d566:	f003 f945 	bl	80107f4 <memcpy>
	}
}
 800d56a:	bf00      	nop
 800d56c:	3708      	adds	r7, #8
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d57a:	f001 fd43 	bl	800f004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d584:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d586:	e011      	b.n	800d5ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d012      	beq.n	800d5b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	3324      	adds	r3, #36	; 0x24
 800d594:	4618      	mov	r0, r3
 800d596:	f000 fd21 	bl	800dfdc <xTaskRemoveFromEventList>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5a0:	f000 fdf8 	bl	800e194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	dce9      	bgt.n	800d588 <prvUnlockQueue+0x16>
 800d5b4:	e000      	b.n	800d5b8 <prvUnlockQueue+0x46>
					break;
 800d5b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	22ff      	movs	r2, #255	; 0xff
 800d5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d5c0:	f001 fd50 	bl	800f064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d5c4:	f001 fd1e 	bl	800f004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5d0:	e011      	b.n	800d5f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d012      	beq.n	800d600 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3310      	adds	r3, #16
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 fcfc 	bl	800dfdc <xTaskRemoveFromEventList>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d001      	beq.n	800d5ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5ea:	f000 fdd3 	bl	800e194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5ee:	7bbb      	ldrb	r3, [r7, #14]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	dce9      	bgt.n	800d5d2 <prvUnlockQueue+0x60>
 800d5fe:	e000      	b.n	800d602 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d600:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	22ff      	movs	r2, #255	; 0xff
 800d606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d60a:	f001 fd2b 	bl	800f064 <vPortExitCritical>
}
 800d60e:	bf00      	nop
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d61e:	f001 fcf1 	bl	800f004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d626:	2b00      	cmp	r3, #0
 800d628:	d102      	bne.n	800d630 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d62a:	2301      	movs	r3, #1
 800d62c:	60fb      	str	r3, [r7, #12]
 800d62e:	e001      	b.n	800d634 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d634:	f001 fd16 	bl	800f064 <vPortExitCritical>

	return xReturn;
 800d638:	68fb      	ldr	r3, [r7, #12]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b084      	sub	sp, #16
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d64a:	f001 fcdb 	bl	800f004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d656:	429a      	cmp	r2, r3
 800d658:	d102      	bne.n	800d660 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d65a:	2301      	movs	r3, #1
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	e001      	b.n	800d664 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d660:	2300      	movs	r3, #0
 800d662:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d664:	f001 fcfe 	bl	800f064 <vPortExitCritical>

	return xReturn;
 800d668:	68fb      	ldr	r3, [r7, #12]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
	...

0800d674 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d67e:	2300      	movs	r3, #0
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	e014      	b.n	800d6ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d684:	4a0f      	ldr	r2, [pc, #60]	; (800d6c4 <vQueueAddToRegistry+0x50>)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10b      	bne.n	800d6a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d690:	490c      	ldr	r1, [pc, #48]	; (800d6c4 <vQueueAddToRegistry+0x50>)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	683a      	ldr	r2, [r7, #0]
 800d696:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d69a:	4a0a      	ldr	r2, [pc, #40]	; (800d6c4 <vQueueAddToRegistry+0x50>)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	4413      	add	r3, r2
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d6a6:	e006      	b.n	800d6b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b07      	cmp	r3, #7
 800d6b2:	d9e7      	bls.n	800d684 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d6b4:	bf00      	nop
 800d6b6:	bf00      	nop
 800d6b8:	3714      	adds	r7, #20
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	240129b8 	.word	0x240129b8

0800d6c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	e016      	b.n	800d704 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d6d6:	4a10      	ldr	r2, [pc, #64]	; (800d718 <vQueueUnregisterQueue+0x50>)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	4413      	add	r3, r2
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d10b      	bne.n	800d6fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d6e6:	4a0c      	ldr	r2, [pc, #48]	; (800d718 <vQueueUnregisterQueue+0x50>)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d6f0:	4a09      	ldr	r2, [pc, #36]	; (800d718 <vQueueUnregisterQueue+0x50>)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	4413      	add	r3, r2
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	605a      	str	r2, [r3, #4]
				break;
 800d6fc:	e006      	b.n	800d70c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3301      	adds	r3, #1
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b07      	cmp	r3, #7
 800d708:	d9e5      	bls.n	800d6d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d70a:	bf00      	nop
 800d70c:	bf00      	nop
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	240129b8 	.word	0x240129b8

0800d71c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d72c:	f001 fc6a 	bl	800f004 <vPortEnterCritical>
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d736:	b25b      	sxtb	r3, r3
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d103      	bne.n	800d746 <vQueueWaitForMessageRestricted+0x2a>
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d74c:	b25b      	sxtb	r3, r3
 800d74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d752:	d103      	bne.n	800d75c <vQueueWaitForMessageRestricted+0x40>
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d75c:	f001 fc82 	bl	800f064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	2b00      	cmp	r3, #0
 800d766:	d106      	bne.n	800d776 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	3324      	adds	r3, #36	; 0x24
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	68b9      	ldr	r1, [r7, #8]
 800d770:	4618      	mov	r0, r3
 800d772:	f000 fc07 	bl	800df84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d776:	6978      	ldr	r0, [r7, #20]
 800d778:	f7ff fefb 	bl	800d572 <prvUnlockQueue>
	}
 800d77c:	bf00      	nop
 800d77e:	3718      	adds	r7, #24
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08e      	sub	sp, #56	; 0x38
 800d788:	af04      	add	r7, sp, #16
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	623b      	str	r3, [r7, #32]
}
 800d7aa:	bf00      	nop
 800d7ac:	e7fe      	b.n	800d7ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10a      	bne.n	800d7ca <xTaskCreateStatic+0x46>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	61fb      	str	r3, [r7, #28]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d7ca:	235c      	movs	r3, #92	; 0x5c
 800d7cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	2b5c      	cmp	r3, #92	; 0x5c
 800d7d2:	d00a      	beq.n	800d7ea <xTaskCreateStatic+0x66>
	__asm volatile
 800d7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	61bb      	str	r3, [r7, #24]
}
 800d7e6:	bf00      	nop
 800d7e8:	e7fe      	b.n	800d7e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d01e      	beq.n	800d830 <xTaskCreateStatic+0xac>
 800d7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d01b      	beq.n	800d830 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d800:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	2202      	movs	r2, #2
 800d806:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d80a:	2300      	movs	r3, #0
 800d80c:	9303      	str	r3, [sp, #12]
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	9302      	str	r3, [sp, #8]
 800d812:	f107 0314 	add.w	r3, r7, #20
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	68b9      	ldr	r1, [r7, #8]
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f000 f850 	bl	800d8c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d82a:	f000 f8dd 	bl	800d9e8 <prvAddNewTaskToReadyList>
 800d82e:	e001      	b.n	800d834 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d834:	697b      	ldr	r3, [r7, #20]
	}
 800d836:	4618      	mov	r0, r3
 800d838:	3728      	adds	r7, #40	; 0x28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b08c      	sub	sp, #48	; 0x30
 800d842:	af04      	add	r7, sp, #16
 800d844:	60f8      	str	r0, [r7, #12]
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	603b      	str	r3, [r7, #0]
 800d84a:	4613      	mov	r3, r2
 800d84c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d84e:	88fb      	ldrh	r3, [r7, #6]
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4618      	mov	r0, r3
 800d854:	f001 fcf8 	bl	800f248 <pvPortMalloc>
 800d858:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00e      	beq.n	800d87e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d860:	205c      	movs	r0, #92	; 0x5c
 800d862:	f001 fcf1 	bl	800f248 <pvPortMalloc>
 800d866:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d003      	beq.n	800d876 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	631a      	str	r2, [r3, #48]	; 0x30
 800d874:	e005      	b.n	800d882 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d876:	6978      	ldr	r0, [r7, #20]
 800d878:	f001 fdb2 	bl	800f3e0 <vPortFree>
 800d87c:	e001      	b.n	800d882 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d87e:	2300      	movs	r3, #0
 800d880:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d017      	beq.n	800d8b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d890:	88fa      	ldrh	r2, [r7, #6]
 800d892:	2300      	movs	r3, #0
 800d894:	9303      	str	r3, [sp, #12]
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	9302      	str	r3, [sp, #8]
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	9301      	str	r3, [sp, #4]
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	68b9      	ldr	r1, [r7, #8]
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 f80e 	bl	800d8c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8ac:	69f8      	ldr	r0, [r7, #28]
 800d8ae:	f000 f89b 	bl	800d9e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	61bb      	str	r3, [r7, #24]
 800d8b6:	e002      	b.n	800d8be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d8be:	69bb      	ldr	r3, [r7, #24]
	}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	461a      	mov	r2, r3
 800d8e0:	21a5      	movs	r1, #165	; 0xa5
 800d8e2:	f002 ff95 	bl	8010810 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d8f0:	440b      	add	r3, r1
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	f023 0307 	bic.w	r3, r3, #7
 800d8fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	f003 0307 	and.w	r3, r3, #7
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00a      	beq.n	800d920 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	617b      	str	r3, [r7, #20]
}
 800d91c:	bf00      	nop
 800d91e:	e7fe      	b.n	800d91e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d01f      	beq.n	800d966 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d926:	2300      	movs	r3, #0
 800d928:	61fb      	str	r3, [r7, #28]
 800d92a:	e012      	b.n	800d952 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	4413      	add	r3, r2
 800d932:	7819      	ldrb	r1, [r3, #0]
 800d934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	4413      	add	r3, r2
 800d93a:	3334      	adds	r3, #52	; 0x34
 800d93c:	460a      	mov	r2, r1
 800d93e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	4413      	add	r3, r2
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d006      	beq.n	800d95a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	3301      	adds	r3, #1
 800d950:	61fb      	str	r3, [r7, #28]
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	2b0f      	cmp	r3, #15
 800d956:	d9e9      	bls.n	800d92c <prvInitialiseNewTask+0x64>
 800d958:	e000      	b.n	800d95c <prvInitialiseNewTask+0x94>
			{
				break;
 800d95a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	2200      	movs	r2, #0
 800d960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d964:	e003      	b.n	800d96e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d970:	2b37      	cmp	r3, #55	; 0x37
 800d972:	d901      	bls.n	800d978 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d974:	2337      	movs	r3, #55	; 0x37
 800d976:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d97c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d982:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d986:	2200      	movs	r2, #0
 800d988:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	3304      	adds	r3, #4
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fe fe1a 	bl	800c5c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	3318      	adds	r3, #24
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fe fe15 	bl	800c5c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	68f9      	ldr	r1, [r7, #12]
 800d9c6:	69b8      	ldr	r0, [r7, #24]
 800d9c8:	f001 f9f2 	bl	800edb0 <pxPortInitialiseStack>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9de:	bf00      	nop
 800d9e0:	3720      	adds	r7, #32
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
	...

0800d9e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9f0:	f001 fb08 	bl	800f004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9f4:	4b2d      	ldr	r3, [pc, #180]	; (800daac <prvAddNewTaskToReadyList+0xc4>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	4a2c      	ldr	r2, [pc, #176]	; (800daac <prvAddNewTaskToReadyList+0xc4>)
 800d9fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9fe:	4b2c      	ldr	r3, [pc, #176]	; (800dab0 <prvAddNewTaskToReadyList+0xc8>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d109      	bne.n	800da1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da06:	4a2a      	ldr	r2, [pc, #168]	; (800dab0 <prvAddNewTaskToReadyList+0xc8>)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da0c:	4b27      	ldr	r3, [pc, #156]	; (800daac <prvAddNewTaskToReadyList+0xc4>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d110      	bne.n	800da36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da14:	f000 fbe2 	bl	800e1dc <prvInitialiseTaskLists>
 800da18:	e00d      	b.n	800da36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da1a:	4b26      	ldr	r3, [pc, #152]	; (800dab4 <prvAddNewTaskToReadyList+0xcc>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d109      	bne.n	800da36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da22:	4b23      	ldr	r3, [pc, #140]	; (800dab0 <prvAddNewTaskToReadyList+0xc8>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d802      	bhi.n	800da36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da30:	4a1f      	ldr	r2, [pc, #124]	; (800dab0 <prvAddNewTaskToReadyList+0xc8>)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da36:	4b20      	ldr	r3, [pc, #128]	; (800dab8 <prvAddNewTaskToReadyList+0xd0>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3301      	adds	r3, #1
 800da3c:	4a1e      	ldr	r2, [pc, #120]	; (800dab8 <prvAddNewTaskToReadyList+0xd0>)
 800da3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da40:	4b1d      	ldr	r3, [pc, #116]	; (800dab8 <prvAddNewTaskToReadyList+0xd0>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4c:	4b1b      	ldr	r3, [pc, #108]	; (800dabc <prvAddNewTaskToReadyList+0xd4>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	429a      	cmp	r2, r3
 800da52:	d903      	bls.n	800da5c <prvAddNewTaskToReadyList+0x74>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da58:	4a18      	ldr	r2, [pc, #96]	; (800dabc <prvAddNewTaskToReadyList+0xd4>)
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da60:	4613      	mov	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	4413      	add	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4a15      	ldr	r2, [pc, #84]	; (800dac0 <prvAddNewTaskToReadyList+0xd8>)
 800da6a:	441a      	add	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3304      	adds	r3, #4
 800da70:	4619      	mov	r1, r3
 800da72:	4610      	mov	r0, r2
 800da74:	f7fe fdb5 	bl	800c5e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da78:	f001 faf4 	bl	800f064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da7c:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <prvAddNewTaskToReadyList+0xcc>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00e      	beq.n	800daa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da84:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <prvAddNewTaskToReadyList+0xc8>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8e:	429a      	cmp	r2, r3
 800da90:	d207      	bcs.n	800daa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da92:	4b0c      	ldr	r3, [pc, #48]	; (800dac4 <prvAddNewTaskToReadyList+0xdc>)
 800da94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	24012ecc 	.word	0x24012ecc
 800dab0:	240129f8 	.word	0x240129f8
 800dab4:	24012ed8 	.word	0x24012ed8
 800dab8:	24012ee8 	.word	0x24012ee8
 800dabc:	24012ed4 	.word	0x24012ed4
 800dac0:	240129fc 	.word	0x240129fc
 800dac4:	e000ed04 	.word	0xe000ed04

0800dac8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b08a      	sub	sp, #40	; 0x28
 800dacc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dace:	2300      	movs	r3, #0
 800dad0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dad6:	463a      	mov	r2, r7
 800dad8:	1d39      	adds	r1, r7, #4
 800dada:	f107 0308 	add.w	r3, r7, #8
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe fd1e 	bl	800c520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	9202      	str	r2, [sp, #8]
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	2300      	movs	r3, #0
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	2300      	movs	r3, #0
 800daf4:	460a      	mov	r2, r1
 800daf6:	4921      	ldr	r1, [pc, #132]	; (800db7c <vTaskStartScheduler+0xb4>)
 800daf8:	4821      	ldr	r0, [pc, #132]	; (800db80 <vTaskStartScheduler+0xb8>)
 800dafa:	f7ff fe43 	bl	800d784 <xTaskCreateStatic>
 800dafe:	4603      	mov	r3, r0
 800db00:	4a20      	ldr	r2, [pc, #128]	; (800db84 <vTaskStartScheduler+0xbc>)
 800db02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db04:	4b1f      	ldr	r3, [pc, #124]	; (800db84 <vTaskStartScheduler+0xbc>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db0c:	2301      	movs	r3, #1
 800db0e:	617b      	str	r3, [r7, #20]
 800db10:	e001      	b.n	800db16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db12:	2300      	movs	r3, #0
 800db14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d102      	bne.n	800db22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db1c:	f000 fdfa 	bl	800e714 <xTimerCreateTimerTask>
 800db20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d116      	bne.n	800db56 <vTaskStartScheduler+0x8e>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	613b      	str	r3, [r7, #16]
}
 800db3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db3c:	4b12      	ldr	r3, [pc, #72]	; (800db88 <vTaskStartScheduler+0xc0>)
 800db3e:	f04f 32ff 	mov.w	r2, #4294967295
 800db42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db44:	4b11      	ldr	r3, [pc, #68]	; (800db8c <vTaskStartScheduler+0xc4>)
 800db46:	2201      	movs	r2, #1
 800db48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db4a:	4b11      	ldr	r3, [pc, #68]	; (800db90 <vTaskStartScheduler+0xc8>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db50:	f001 f9b6 	bl	800eec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db54:	e00e      	b.n	800db74 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5c:	d10a      	bne.n	800db74 <vTaskStartScheduler+0xac>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	60fb      	str	r3, [r7, #12]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <vTaskStartScheduler+0xaa>
}
 800db74:	bf00      	nop
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	08010a28 	.word	0x08010a28
 800db80:	0800e1ad 	.word	0x0800e1ad
 800db84:	24012ef0 	.word	0x24012ef0
 800db88:	24012eec 	.word	0x24012eec
 800db8c:	24012ed8 	.word	0x24012ed8
 800db90:	24012ed0 	.word	0x24012ed0

0800db94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db94:	b480      	push	{r7}
 800db96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db98:	4b04      	ldr	r3, [pc, #16]	; (800dbac <vTaskSuspendAll+0x18>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3301      	adds	r3, #1
 800db9e:	4a03      	ldr	r2, [pc, #12]	; (800dbac <vTaskSuspendAll+0x18>)
 800dba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dba2:	bf00      	nop
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	24012ef4 	.word	0x24012ef4

0800dbb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dbbe:	4b42      	ldr	r3, [pc, #264]	; (800dcc8 <xTaskResumeAll+0x118>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10a      	bne.n	800dbdc <xTaskResumeAll+0x2c>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	603b      	str	r3, [r7, #0]
}
 800dbd8:	bf00      	nop
 800dbda:	e7fe      	b.n	800dbda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbdc:	f001 fa12 	bl	800f004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbe0:	4b39      	ldr	r3, [pc, #228]	; (800dcc8 <xTaskResumeAll+0x118>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	4a38      	ldr	r2, [pc, #224]	; (800dcc8 <xTaskResumeAll+0x118>)
 800dbe8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbea:	4b37      	ldr	r3, [pc, #220]	; (800dcc8 <xTaskResumeAll+0x118>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d162      	bne.n	800dcb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbf2:	4b36      	ldr	r3, [pc, #216]	; (800dccc <xTaskResumeAll+0x11c>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d05e      	beq.n	800dcb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbfa:	e02f      	b.n	800dc5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbfc:	4b34      	ldr	r3, [pc, #208]	; (800dcd0 <xTaskResumeAll+0x120>)
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3318      	adds	r3, #24
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fd47 	bl	800c69c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	3304      	adds	r3, #4
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fe fd42 	bl	800c69c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1c:	4b2d      	ldr	r3, [pc, #180]	; (800dcd4 <xTaskResumeAll+0x124>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d903      	bls.n	800dc2c <xTaskResumeAll+0x7c>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc28:	4a2a      	ldr	r2, [pc, #168]	; (800dcd4 <xTaskResumeAll+0x124>)
 800dc2a:	6013      	str	r3, [r2, #0]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc30:	4613      	mov	r3, r2
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4413      	add	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4a27      	ldr	r2, [pc, #156]	; (800dcd8 <xTaskResumeAll+0x128>)
 800dc3a:	441a      	add	r2, r3
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	3304      	adds	r3, #4
 800dc40:	4619      	mov	r1, r3
 800dc42:	4610      	mov	r0, r2
 800dc44:	f7fe fccd 	bl	800c5e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4c:	4b23      	ldr	r3, [pc, #140]	; (800dcdc <xTaskResumeAll+0x12c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d302      	bcc.n	800dc5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc56:	4b22      	ldr	r3, [pc, #136]	; (800dce0 <xTaskResumeAll+0x130>)
 800dc58:	2201      	movs	r2, #1
 800dc5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc5c:	4b1c      	ldr	r3, [pc, #112]	; (800dcd0 <xTaskResumeAll+0x120>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d1cb      	bne.n	800dbfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc6a:	f000 fb55 	bl	800e318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc6e:	4b1d      	ldr	r3, [pc, #116]	; (800dce4 <xTaskResumeAll+0x134>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d010      	beq.n	800dc9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc7a:	f000 f847 	bl	800dd0c <xTaskIncrementTick>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc84:	4b16      	ldr	r3, [pc, #88]	; (800dce0 <xTaskResumeAll+0x130>)
 800dc86:	2201      	movs	r2, #1
 800dc88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1f1      	bne.n	800dc7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc96:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <xTaskResumeAll+0x134>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc9c:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <xTaskResumeAll+0x130>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d009      	beq.n	800dcb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dca4:	2301      	movs	r3, #1
 800dca6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dca8:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <xTaskResumeAll+0x138>)
 800dcaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcae:	601a      	str	r2, [r3, #0]
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcb8:	f001 f9d4 	bl	800f064 <vPortExitCritical>

	return xAlreadyYielded;
 800dcbc:	68bb      	ldr	r3, [r7, #8]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	24012ef4 	.word	0x24012ef4
 800dccc:	24012ecc 	.word	0x24012ecc
 800dcd0:	24012e8c 	.word	0x24012e8c
 800dcd4:	24012ed4 	.word	0x24012ed4
 800dcd8:	240129fc 	.word	0x240129fc
 800dcdc:	240129f8 	.word	0x240129f8
 800dce0:	24012ee0 	.word	0x24012ee0
 800dce4:	24012edc 	.word	0x24012edc
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dcf2:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <xTaskGetTickCount+0x1c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dcf8:	687b      	ldr	r3, [r7, #4]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	370c      	adds	r7, #12
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	24012ed0 	.word	0x24012ed0

0800dd0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd12:	2300      	movs	r3, #0
 800dd14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd16:	4b4f      	ldr	r3, [pc, #316]	; (800de54 <xTaskIncrementTick+0x148>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f040 808f 	bne.w	800de3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd20:	4b4d      	ldr	r3, [pc, #308]	; (800de58 <xTaskIncrementTick+0x14c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3301      	adds	r3, #1
 800dd26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd28:	4a4b      	ldr	r2, [pc, #300]	; (800de58 <xTaskIncrementTick+0x14c>)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d120      	bne.n	800dd76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd34:	4b49      	ldr	r3, [pc, #292]	; (800de5c <xTaskIncrementTick+0x150>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00a      	beq.n	800dd54 <xTaskIncrementTick+0x48>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	603b      	str	r3, [r7, #0]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <xTaskIncrementTick+0x46>
 800dd54:	4b41      	ldr	r3, [pc, #260]	; (800de5c <xTaskIncrementTick+0x150>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	4b41      	ldr	r3, [pc, #260]	; (800de60 <xTaskIncrementTick+0x154>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a3f      	ldr	r2, [pc, #252]	; (800de5c <xTaskIncrementTick+0x150>)
 800dd60:	6013      	str	r3, [r2, #0]
 800dd62:	4a3f      	ldr	r2, [pc, #252]	; (800de60 <xTaskIncrementTick+0x154>)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	4b3e      	ldr	r3, [pc, #248]	; (800de64 <xTaskIncrementTick+0x158>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	4a3d      	ldr	r2, [pc, #244]	; (800de64 <xTaskIncrementTick+0x158>)
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	f000 fad1 	bl	800e318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd76:	4b3c      	ldr	r3, [pc, #240]	; (800de68 <xTaskIncrementTick+0x15c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d349      	bcc.n	800de14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd80:	4b36      	ldr	r3, [pc, #216]	; (800de5c <xTaskIncrementTick+0x150>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d104      	bne.n	800dd94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd8a:	4b37      	ldr	r3, [pc, #220]	; (800de68 <xTaskIncrementTick+0x15c>)
 800dd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd90:	601a      	str	r2, [r3, #0]
					break;
 800dd92:	e03f      	b.n	800de14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd94:	4b31      	ldr	r3, [pc, #196]	; (800de5c <xTaskIncrementTick+0x150>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d203      	bcs.n	800ddb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddac:	4a2e      	ldr	r2, [pc, #184]	; (800de68 <xTaskIncrementTick+0x15c>)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddb2:	e02f      	b.n	800de14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fe fc6f 	bl	800c69c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d004      	beq.n	800ddd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	3318      	adds	r3, #24
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fe fc66 	bl	800c69c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd4:	4b25      	ldr	r3, [pc, #148]	; (800de6c <xTaskIncrementTick+0x160>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d903      	bls.n	800dde4 <xTaskIncrementTick+0xd8>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde0:	4a22      	ldr	r2, [pc, #136]	; (800de6c <xTaskIncrementTick+0x160>)
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde8:	4613      	mov	r3, r2
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4a1f      	ldr	r2, [pc, #124]	; (800de70 <xTaskIncrementTick+0x164>)
 800ddf2:	441a      	add	r2, r3
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	4610      	mov	r0, r2
 800ddfc:	f7fe fbf1 	bl	800c5e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de04:	4b1b      	ldr	r3, [pc, #108]	; (800de74 <xTaskIncrementTick+0x168>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d3b8      	bcc.n	800dd80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de0e:	2301      	movs	r3, #1
 800de10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de12:	e7b5      	b.n	800dd80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de14:	4b17      	ldr	r3, [pc, #92]	; (800de74 <xTaskIncrementTick+0x168>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1a:	4915      	ldr	r1, [pc, #84]	; (800de70 <xTaskIncrementTick+0x164>)
 800de1c:	4613      	mov	r3, r2
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	4413      	add	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	440b      	add	r3, r1
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d901      	bls.n	800de30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de2c:	2301      	movs	r3, #1
 800de2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de30:	4b11      	ldr	r3, [pc, #68]	; (800de78 <xTaskIncrementTick+0x16c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d007      	beq.n	800de48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de38:	2301      	movs	r3, #1
 800de3a:	617b      	str	r3, [r7, #20]
 800de3c:	e004      	b.n	800de48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de3e:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <xTaskIncrementTick+0x170>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	3301      	adds	r3, #1
 800de44:	4a0d      	ldr	r2, [pc, #52]	; (800de7c <xTaskIncrementTick+0x170>)
 800de46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de48:	697b      	ldr	r3, [r7, #20]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	24012ef4 	.word	0x24012ef4
 800de58:	24012ed0 	.word	0x24012ed0
 800de5c:	24012e84 	.word	0x24012e84
 800de60:	24012e88 	.word	0x24012e88
 800de64:	24012ee4 	.word	0x24012ee4
 800de68:	24012eec 	.word	0x24012eec
 800de6c:	24012ed4 	.word	0x24012ed4
 800de70:	240129fc 	.word	0x240129fc
 800de74:	240129f8 	.word	0x240129f8
 800de78:	24012ee0 	.word	0x24012ee0
 800de7c:	24012edc 	.word	0x24012edc

0800de80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de86:	4b28      	ldr	r3, [pc, #160]	; (800df28 <vTaskSwitchContext+0xa8>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d003      	beq.n	800de96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de8e:	4b27      	ldr	r3, [pc, #156]	; (800df2c <vTaskSwitchContext+0xac>)
 800de90:	2201      	movs	r2, #1
 800de92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de94:	e041      	b.n	800df1a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800de96:	4b25      	ldr	r3, [pc, #148]	; (800df2c <vTaskSwitchContext+0xac>)
 800de98:	2200      	movs	r2, #0
 800de9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de9c:	4b24      	ldr	r3, [pc, #144]	; (800df30 <vTaskSwitchContext+0xb0>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	60fb      	str	r3, [r7, #12]
 800dea2:	e010      	b.n	800dec6 <vTaskSwitchContext+0x46>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10a      	bne.n	800dec0 <vTaskSwitchContext+0x40>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	607b      	str	r3, [r7, #4]
}
 800debc:	bf00      	nop
 800debe:	e7fe      	b.n	800debe <vTaskSwitchContext+0x3e>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	3b01      	subs	r3, #1
 800dec4:	60fb      	str	r3, [r7, #12]
 800dec6:	491b      	ldr	r1, [pc, #108]	; (800df34 <vTaskSwitchContext+0xb4>)
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4613      	mov	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4413      	add	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	440b      	add	r3, r1
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0e4      	beq.n	800dea4 <vTaskSwitchContext+0x24>
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4a13      	ldr	r2, [pc, #76]	; (800df34 <vTaskSwitchContext+0xb4>)
 800dee6:	4413      	add	r3, r2
 800dee8:	60bb      	str	r3, [r7, #8]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	685a      	ldr	r2, [r3, #4]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	605a      	str	r2, [r3, #4]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	685a      	ldr	r2, [r3, #4]
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	3308      	adds	r3, #8
 800defc:	429a      	cmp	r2, r3
 800defe:	d104      	bne.n	800df0a <vTaskSwitchContext+0x8a>
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	605a      	str	r2, [r3, #4]
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	4a09      	ldr	r2, [pc, #36]	; (800df38 <vTaskSwitchContext+0xb8>)
 800df12:	6013      	str	r3, [r2, #0]
 800df14:	4a06      	ldr	r2, [pc, #24]	; (800df30 <vTaskSwitchContext+0xb0>)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6013      	str	r3, [r2, #0]
}
 800df1a:	bf00      	nop
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	24012ef4 	.word	0x24012ef4
 800df2c:	24012ee0 	.word	0x24012ee0
 800df30:	24012ed4 	.word	0x24012ed4
 800df34:	240129fc 	.word	0x240129fc
 800df38:	240129f8 	.word	0x240129f8

0800df3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10a      	bne.n	800df62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df50:	f383 8811 	msr	BASEPRI, r3
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	60fb      	str	r3, [r7, #12]
}
 800df5e:	bf00      	nop
 800df60:	e7fe      	b.n	800df60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df62:	4b07      	ldr	r3, [pc, #28]	; (800df80 <vTaskPlaceOnEventList+0x44>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3318      	adds	r3, #24
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7fe fb5d 	bl	800c62a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df70:	2101      	movs	r1, #1
 800df72:	6838      	ldr	r0, [r7, #0]
 800df74:	f000 fb7a 	bl	800e66c <prvAddCurrentTaskToDelayedList>
}
 800df78:	bf00      	nop
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	240129f8 	.word	0x240129f8

0800df84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10a      	bne.n	800dfac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	617b      	str	r3, [r7, #20]
}
 800dfa8:	bf00      	nop
 800dfaa:	e7fe      	b.n	800dfaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfac:	4b0a      	ldr	r3, [pc, #40]	; (800dfd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3318      	adds	r3, #24
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7fe fb14 	bl	800c5e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	68b8      	ldr	r0, [r7, #8]
 800dfca:	f000 fb4f 	bl	800e66c <prvAddCurrentTaskToDelayedList>
	}
 800dfce:	bf00      	nop
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	240129f8 	.word	0x240129f8

0800dfdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10a      	bne.n	800e008 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	60fb      	str	r3, [r7, #12]
}
 800e004:	bf00      	nop
 800e006:	e7fe      	b.n	800e006 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	3318      	adds	r3, #24
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe fb45 	bl	800c69c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e012:	4b1e      	ldr	r3, [pc, #120]	; (800e08c <xTaskRemoveFromEventList+0xb0>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d11d      	bne.n	800e056 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fb3c 	bl	800c69c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e028:	4b19      	ldr	r3, [pc, #100]	; (800e090 <xTaskRemoveFromEventList+0xb4>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d903      	bls.n	800e038 <xTaskRemoveFromEventList+0x5c>
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	4a16      	ldr	r2, [pc, #88]	; (800e090 <xTaskRemoveFromEventList+0xb4>)
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03c:	4613      	mov	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4413      	add	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4a13      	ldr	r2, [pc, #76]	; (800e094 <xTaskRemoveFromEventList+0xb8>)
 800e046:	441a      	add	r2, r3
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	3304      	adds	r3, #4
 800e04c:	4619      	mov	r1, r3
 800e04e:	4610      	mov	r0, r2
 800e050:	f7fe fac7 	bl	800c5e2 <vListInsertEnd>
 800e054:	e005      	b.n	800e062 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	3318      	adds	r3, #24
 800e05a:	4619      	mov	r1, r3
 800e05c:	480e      	ldr	r0, [pc, #56]	; (800e098 <xTaskRemoveFromEventList+0xbc>)
 800e05e:	f7fe fac0 	bl	800c5e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e066:	4b0d      	ldr	r3, [pc, #52]	; (800e09c <xTaskRemoveFromEventList+0xc0>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d905      	bls.n	800e07c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e070:	2301      	movs	r3, #1
 800e072:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e074:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <xTaskRemoveFromEventList+0xc4>)
 800e076:	2201      	movs	r2, #1
 800e078:	601a      	str	r2, [r3, #0]
 800e07a:	e001      	b.n	800e080 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e07c:	2300      	movs	r3, #0
 800e07e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e080:	697b      	ldr	r3, [r7, #20]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3718      	adds	r7, #24
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	24012ef4 	.word	0x24012ef4
 800e090:	24012ed4 	.word	0x24012ed4
 800e094:	240129fc 	.word	0x240129fc
 800e098:	24012e8c 	.word	0x24012e8c
 800e09c:	240129f8 	.word	0x240129f8
 800e0a0:	24012ee0 	.word	0x24012ee0

0800e0a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0ac:	4b06      	ldr	r3, [pc, #24]	; (800e0c8 <vTaskInternalSetTimeOutState+0x24>)
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0b4:	4b05      	ldr	r3, [pc, #20]	; (800e0cc <vTaskInternalSetTimeOutState+0x28>)
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	605a      	str	r2, [r3, #4]
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	24012ee4 	.word	0x24012ee4
 800e0cc:	24012ed0 	.word	0x24012ed0

0800e0d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b088      	sub	sp, #32
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10a      	bne.n	800e0f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	613b      	str	r3, [r7, #16]
}
 800e0f2:	bf00      	nop
 800e0f4:	e7fe      	b.n	800e0f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10a      	bne.n	800e112 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	60fb      	str	r3, [r7, #12]
}
 800e10e:	bf00      	nop
 800e110:	e7fe      	b.n	800e110 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e112:	f000 ff77 	bl	800f004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e116:	4b1d      	ldr	r3, [pc, #116]	; (800e18c <xTaskCheckForTimeOut+0xbc>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	69ba      	ldr	r2, [r7, #24]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12e:	d102      	bne.n	800e136 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e130:	2300      	movs	r3, #0
 800e132:	61fb      	str	r3, [r7, #28]
 800e134:	e023      	b.n	800e17e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	4b15      	ldr	r3, [pc, #84]	; (800e190 <xTaskCheckForTimeOut+0xc0>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d007      	beq.n	800e152 <xTaskCheckForTimeOut+0x82>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	69ba      	ldr	r2, [r7, #24]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d302      	bcc.n	800e152 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e14c:	2301      	movs	r3, #1
 800e14e:	61fb      	str	r3, [r7, #28]
 800e150:	e015      	b.n	800e17e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	697a      	ldr	r2, [r7, #20]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d20b      	bcs.n	800e174 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	1ad2      	subs	r2, r2, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7ff ff9b 	bl	800e0a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e16e:	2300      	movs	r3, #0
 800e170:	61fb      	str	r3, [r7, #28]
 800e172:	e004      	b.n	800e17e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	2200      	movs	r2, #0
 800e178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e17a:	2301      	movs	r3, #1
 800e17c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e17e:	f000 ff71 	bl	800f064 <vPortExitCritical>

	return xReturn;
 800e182:	69fb      	ldr	r3, [r7, #28]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3720      	adds	r7, #32
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	24012ed0 	.word	0x24012ed0
 800e190:	24012ee4 	.word	0x24012ee4

0800e194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e194:	b480      	push	{r7}
 800e196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e198:	4b03      	ldr	r3, [pc, #12]	; (800e1a8 <vTaskMissedYield+0x14>)
 800e19a:	2201      	movs	r2, #1
 800e19c:	601a      	str	r2, [r3, #0]
}
 800e19e:	bf00      	nop
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	24012ee0 	.word	0x24012ee0

0800e1ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1b4:	f000 f852 	bl	800e25c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1b8:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <prvIdleTask+0x28>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d9f9      	bls.n	800e1b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e1c0:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <prvIdleTask+0x2c>)
 800e1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c6:	601a      	str	r2, [r3, #0]
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e1d0:	e7f0      	b.n	800e1b4 <prvIdleTask+0x8>
 800e1d2:	bf00      	nop
 800e1d4:	240129fc 	.word	0x240129fc
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	607b      	str	r3, [r7, #4]
 800e1e6:	e00c      	b.n	800e202 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	4613      	mov	r3, r2
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	4413      	add	r3, r2
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	4a12      	ldr	r2, [pc, #72]	; (800e23c <prvInitialiseTaskLists+0x60>)
 800e1f4:	4413      	add	r3, r2
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fe f9c6 	bl	800c588 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3301      	adds	r3, #1
 800e200:	607b      	str	r3, [r7, #4]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b37      	cmp	r3, #55	; 0x37
 800e206:	d9ef      	bls.n	800e1e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e208:	480d      	ldr	r0, [pc, #52]	; (800e240 <prvInitialiseTaskLists+0x64>)
 800e20a:	f7fe f9bd 	bl	800c588 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e20e:	480d      	ldr	r0, [pc, #52]	; (800e244 <prvInitialiseTaskLists+0x68>)
 800e210:	f7fe f9ba 	bl	800c588 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e214:	480c      	ldr	r0, [pc, #48]	; (800e248 <prvInitialiseTaskLists+0x6c>)
 800e216:	f7fe f9b7 	bl	800c588 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e21a:	480c      	ldr	r0, [pc, #48]	; (800e24c <prvInitialiseTaskLists+0x70>)
 800e21c:	f7fe f9b4 	bl	800c588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e220:	480b      	ldr	r0, [pc, #44]	; (800e250 <prvInitialiseTaskLists+0x74>)
 800e222:	f7fe f9b1 	bl	800c588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e226:	4b0b      	ldr	r3, [pc, #44]	; (800e254 <prvInitialiseTaskLists+0x78>)
 800e228:	4a05      	ldr	r2, [pc, #20]	; (800e240 <prvInitialiseTaskLists+0x64>)
 800e22a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e22c:	4b0a      	ldr	r3, [pc, #40]	; (800e258 <prvInitialiseTaskLists+0x7c>)
 800e22e:	4a05      	ldr	r2, [pc, #20]	; (800e244 <prvInitialiseTaskLists+0x68>)
 800e230:	601a      	str	r2, [r3, #0]
}
 800e232:	bf00      	nop
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	240129fc 	.word	0x240129fc
 800e240:	24012e5c 	.word	0x24012e5c
 800e244:	24012e70 	.word	0x24012e70
 800e248:	24012e8c 	.word	0x24012e8c
 800e24c:	24012ea0 	.word	0x24012ea0
 800e250:	24012eb8 	.word	0x24012eb8
 800e254:	24012e84 	.word	0x24012e84
 800e258:	24012e88 	.word	0x24012e88

0800e25c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e262:	e019      	b.n	800e298 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e264:	f000 fece 	bl	800f004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e268:	4b10      	ldr	r3, [pc, #64]	; (800e2ac <prvCheckTasksWaitingTermination+0x50>)
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3304      	adds	r3, #4
 800e274:	4618      	mov	r0, r3
 800e276:	f7fe fa11 	bl	800c69c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e27a:	4b0d      	ldr	r3, [pc, #52]	; (800e2b0 <prvCheckTasksWaitingTermination+0x54>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3b01      	subs	r3, #1
 800e280:	4a0b      	ldr	r2, [pc, #44]	; (800e2b0 <prvCheckTasksWaitingTermination+0x54>)
 800e282:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e284:	4b0b      	ldr	r3, [pc, #44]	; (800e2b4 <prvCheckTasksWaitingTermination+0x58>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	3b01      	subs	r3, #1
 800e28a:	4a0a      	ldr	r2, [pc, #40]	; (800e2b4 <prvCheckTasksWaitingTermination+0x58>)
 800e28c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e28e:	f000 fee9 	bl	800f064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f810 	bl	800e2b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e298:	4b06      	ldr	r3, [pc, #24]	; (800e2b4 <prvCheckTasksWaitingTermination+0x58>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1e1      	bne.n	800e264 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2a0:	bf00      	nop
 800e2a2:	bf00      	nop
 800e2a4:	3708      	adds	r7, #8
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	24012ea0 	.word	0x24012ea0
 800e2b0:	24012ecc 	.word	0x24012ecc
 800e2b4:	24012eb4 	.word	0x24012eb4

0800e2b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d108      	bne.n	800e2dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f001 f886 	bl	800f3e0 <vPortFree>
				vPortFree( pxTCB );
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f001 f883 	bl	800f3e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2da:	e018      	b.n	800e30e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d103      	bne.n	800e2ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f001 f87a 	bl	800f3e0 <vPortFree>
	}
 800e2ec:	e00f      	b.n	800e30e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d00a      	beq.n	800e30e <prvDeleteTCB+0x56>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	60fb      	str	r3, [r7, #12]
}
 800e30a:	bf00      	nop
 800e30c:	e7fe      	b.n	800e30c <prvDeleteTCB+0x54>
	}
 800e30e:	bf00      	nop
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e31e:	4b0c      	ldr	r3, [pc, #48]	; (800e350 <prvResetNextTaskUnblockTime+0x38>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d104      	bne.n	800e332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e328:	4b0a      	ldr	r3, [pc, #40]	; (800e354 <prvResetNextTaskUnblockTime+0x3c>)
 800e32a:	f04f 32ff 	mov.w	r2, #4294967295
 800e32e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e330:	e008      	b.n	800e344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e332:	4b07      	ldr	r3, [pc, #28]	; (800e350 <prvResetNextTaskUnblockTime+0x38>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	4a04      	ldr	r2, [pc, #16]	; (800e354 <prvResetNextTaskUnblockTime+0x3c>)
 800e342:	6013      	str	r3, [r2, #0]
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	24012e84 	.word	0x24012e84
 800e354:	24012eec 	.word	0x24012eec

0800e358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e35e:	4b0b      	ldr	r3, [pc, #44]	; (800e38c <xTaskGetSchedulerState+0x34>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d102      	bne.n	800e36c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e366:	2301      	movs	r3, #1
 800e368:	607b      	str	r3, [r7, #4]
 800e36a:	e008      	b.n	800e37e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e36c:	4b08      	ldr	r3, [pc, #32]	; (800e390 <xTaskGetSchedulerState+0x38>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d102      	bne.n	800e37a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e374:	2302      	movs	r3, #2
 800e376:	607b      	str	r3, [r7, #4]
 800e378:	e001      	b.n	800e37e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e37a:	2300      	movs	r3, #0
 800e37c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e37e:	687b      	ldr	r3, [r7, #4]
	}
 800e380:	4618      	mov	r0, r3
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr
 800e38c:	24012ed8 	.word	0x24012ed8
 800e390:	24012ef4 	.word	0x24012ef4

0800e394 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d051      	beq.n	800e44e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ae:	4b2a      	ldr	r3, [pc, #168]	; (800e458 <xTaskPriorityInherit+0xc4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d241      	bcs.n	800e43c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	db06      	blt.n	800e3ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3c0:	4b25      	ldr	r3, [pc, #148]	; (800e458 <xTaskPriorityInherit+0xc4>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	6959      	ldr	r1, [r3, #20]
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4a1f      	ldr	r2, [pc, #124]	; (800e45c <xTaskPriorityInherit+0xc8>)
 800e3e0:	4413      	add	r3, r2
 800e3e2:	4299      	cmp	r1, r3
 800e3e4:	d122      	bne.n	800e42c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fe f956 	bl	800c69c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e3f0:	4b19      	ldr	r3, [pc, #100]	; (800e458 <xTaskPriorityInherit+0xc4>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fe:	4b18      	ldr	r3, [pc, #96]	; (800e460 <xTaskPriorityInherit+0xcc>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	429a      	cmp	r2, r3
 800e404:	d903      	bls.n	800e40e <xTaskPriorityInherit+0x7a>
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40a:	4a15      	ldr	r2, [pc, #84]	; (800e460 <xTaskPriorityInherit+0xcc>)
 800e40c:	6013      	str	r3, [r2, #0]
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e412:	4613      	mov	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4a10      	ldr	r2, [pc, #64]	; (800e45c <xTaskPriorityInherit+0xc8>)
 800e41c:	441a      	add	r2, r3
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	3304      	adds	r3, #4
 800e422:	4619      	mov	r1, r3
 800e424:	4610      	mov	r0, r2
 800e426:	f7fe f8dc 	bl	800c5e2 <vListInsertEnd>
 800e42a:	e004      	b.n	800e436 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e42c:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <xTaskPriorityInherit+0xc4>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e436:	2301      	movs	r3, #1
 800e438:	60fb      	str	r3, [r7, #12]
 800e43a:	e008      	b.n	800e44e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e440:	4b05      	ldr	r3, [pc, #20]	; (800e458 <xTaskPriorityInherit+0xc4>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e446:	429a      	cmp	r2, r3
 800e448:	d201      	bcs.n	800e44e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e44a:	2301      	movs	r3, #1
 800e44c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e44e:	68fb      	ldr	r3, [r7, #12]
	}
 800e450:	4618      	mov	r0, r3
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	240129f8 	.word	0x240129f8
 800e45c:	240129fc 	.word	0x240129fc
 800e460:	24012ed4 	.word	0x24012ed4

0800e464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e470:	2300      	movs	r3, #0
 800e472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d056      	beq.n	800e528 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e47a:	4b2e      	ldr	r3, [pc, #184]	; (800e534 <xTaskPriorityDisinherit+0xd0>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	693a      	ldr	r2, [r7, #16]
 800e480:	429a      	cmp	r2, r3
 800e482:	d00a      	beq.n	800e49a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	60fb      	str	r3, [r7, #12]
}
 800e496:	bf00      	nop
 800e498:	e7fe      	b.n	800e498 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10a      	bne.n	800e4b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	60bb      	str	r3, [r7, #8]
}
 800e4b4:	bf00      	nop
 800e4b6:	e7fe      	b.n	800e4b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4bc:	1e5a      	subs	r2, r3, #1
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d02c      	beq.n	800e528 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d128      	bne.n	800e528 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	3304      	adds	r3, #4
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe f8de 	bl	800c69c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f8:	4b0f      	ldr	r3, [pc, #60]	; (800e538 <xTaskPriorityDisinherit+0xd4>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d903      	bls.n	800e508 <xTaskPriorityDisinherit+0xa4>
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e504:	4a0c      	ldr	r2, [pc, #48]	; (800e538 <xTaskPriorityDisinherit+0xd4>)
 800e506:	6013      	str	r3, [r2, #0]
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4a09      	ldr	r2, [pc, #36]	; (800e53c <xTaskPriorityDisinherit+0xd8>)
 800e516:	441a      	add	r2, r3
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	3304      	adds	r3, #4
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f7fe f85f 	bl	800c5e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e524:	2301      	movs	r3, #1
 800e526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e528:	697b      	ldr	r3, [r7, #20]
	}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3718      	adds	r7, #24
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	240129f8 	.word	0x240129f8
 800e538:	24012ed4 	.word	0x24012ed4
 800e53c:	240129fc 	.word	0x240129fc

0800e540 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e540:	b580      	push	{r7, lr}
 800e542:	b088      	sub	sp, #32
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e54e:	2301      	movs	r3, #1
 800e550:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d06a      	beq.n	800e62e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10a      	bne.n	800e576 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	60fb      	str	r3, [r7, #12]
}
 800e572:	bf00      	nop
 800e574:	e7fe      	b.n	800e574 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d902      	bls.n	800e586 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	61fb      	str	r3, [r7, #28]
 800e584:	e002      	b.n	800e58c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e58a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e590:	69fa      	ldr	r2, [r7, #28]
 800e592:	429a      	cmp	r2, r3
 800e594:	d04b      	beq.n	800e62e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d146      	bne.n	800e62e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5a0:	4b25      	ldr	r3, [pc, #148]	; (800e638 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	69ba      	ldr	r2, [r7, #24]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d10a      	bne.n	800e5c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	60bb      	str	r3, [r7, #8]
}
 800e5bc:	bf00      	nop
 800e5be:	e7fe      	b.n	800e5be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	69fa      	ldr	r2, [r7, #28]
 800e5ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	db04      	blt.n	800e5de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	6959      	ldr	r1, [r3, #20]
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4413      	add	r3, r2
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4a13      	ldr	r2, [pc, #76]	; (800e63c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e5ee:	4413      	add	r3, r2
 800e5f0:	4299      	cmp	r1, r3
 800e5f2:	d11c      	bne.n	800e62e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe f84f 	bl	800c69c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e602:	4b0f      	ldr	r3, [pc, #60]	; (800e640 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d903      	bls.n	800e612 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60e:	4a0c      	ldr	r2, [pc, #48]	; (800e640 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e616:	4613      	mov	r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4413      	add	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4a07      	ldr	r2, [pc, #28]	; (800e63c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e620:	441a      	add	r2, r3
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	3304      	adds	r3, #4
 800e626:	4619      	mov	r1, r3
 800e628:	4610      	mov	r0, r2
 800e62a:	f7fd ffda 	bl	800c5e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e62e:	bf00      	nop
 800e630:	3720      	adds	r7, #32
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	240129f8 	.word	0x240129f8
 800e63c:	240129fc 	.word	0x240129fc
 800e640:	24012ed4 	.word	0x24012ed4

0800e644 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e644:	b480      	push	{r7}
 800e646:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e648:	4b07      	ldr	r3, [pc, #28]	; (800e668 <pvTaskIncrementMutexHeldCount+0x24>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d004      	beq.n	800e65a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e650:	4b05      	ldr	r3, [pc, #20]	; (800e668 <pvTaskIncrementMutexHeldCount+0x24>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e656:	3201      	adds	r2, #1
 800e658:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e65a:	4b03      	ldr	r3, [pc, #12]	; (800e668 <pvTaskIncrementMutexHeldCount+0x24>)
 800e65c:	681b      	ldr	r3, [r3, #0]
	}
 800e65e:	4618      	mov	r0, r3
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	240129f8 	.word	0x240129f8

0800e66c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e676:	4b21      	ldr	r3, [pc, #132]	; (800e6fc <prvAddCurrentTaskToDelayedList+0x90>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e67c:	4b20      	ldr	r3, [pc, #128]	; (800e700 <prvAddCurrentTaskToDelayedList+0x94>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	3304      	adds	r3, #4
 800e682:	4618      	mov	r0, r3
 800e684:	f7fe f80a 	bl	800c69c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68e:	d10a      	bne.n	800e6a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d007      	beq.n	800e6a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e696:	4b1a      	ldr	r3, [pc, #104]	; (800e700 <prvAddCurrentTaskToDelayedList+0x94>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	3304      	adds	r3, #4
 800e69c:	4619      	mov	r1, r3
 800e69e:	4819      	ldr	r0, [pc, #100]	; (800e704 <prvAddCurrentTaskToDelayedList+0x98>)
 800e6a0:	f7fd ff9f 	bl	800c5e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6a4:	e026      	b.n	800e6f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6ae:	4b14      	ldr	r3, [pc, #80]	; (800e700 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d209      	bcs.n	800e6d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6be:	4b12      	ldr	r3, [pc, #72]	; (800e708 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	4b0f      	ldr	r3, [pc, #60]	; (800e700 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	f7fd ffad 	bl	800c62a <vListInsert>
}
 800e6d0:	e010      	b.n	800e6f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6d2:	4b0e      	ldr	r3, [pc, #56]	; (800e70c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	4b0a      	ldr	r3, [pc, #40]	; (800e700 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	3304      	adds	r3, #4
 800e6dc:	4619      	mov	r1, r3
 800e6de:	4610      	mov	r0, r2
 800e6e0:	f7fd ffa3 	bl	800c62a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e6e4:	4b0a      	ldr	r3, [pc, #40]	; (800e710 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d202      	bcs.n	800e6f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e6ee:	4a08      	ldr	r2, [pc, #32]	; (800e710 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	6013      	str	r3, [r2, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	24012ed0 	.word	0x24012ed0
 800e700:	240129f8 	.word	0x240129f8
 800e704:	24012eb8 	.word	0x24012eb8
 800e708:	24012e88 	.word	0x24012e88
 800e70c:	24012e84 	.word	0x24012e84
 800e710:	24012eec 	.word	0x24012eec

0800e714 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08a      	sub	sp, #40	; 0x28
 800e718:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e71a:	2300      	movs	r3, #0
 800e71c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e71e:	f000 fb07 	bl	800ed30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e722:	4b1c      	ldr	r3, [pc, #112]	; (800e794 <xTimerCreateTimerTask+0x80>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d021      	beq.n	800e76e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e72a:	2300      	movs	r3, #0
 800e72c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e72e:	2300      	movs	r3, #0
 800e730:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e732:	1d3a      	adds	r2, r7, #4
 800e734:	f107 0108 	add.w	r1, r7, #8
 800e738:	f107 030c 	add.w	r3, r7, #12
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fd ff09 	bl	800c554 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e742:	6879      	ldr	r1, [r7, #4]
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	9202      	str	r2, [sp, #8]
 800e74a:	9301      	str	r3, [sp, #4]
 800e74c:	2302      	movs	r3, #2
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	2300      	movs	r3, #0
 800e752:	460a      	mov	r2, r1
 800e754:	4910      	ldr	r1, [pc, #64]	; (800e798 <xTimerCreateTimerTask+0x84>)
 800e756:	4811      	ldr	r0, [pc, #68]	; (800e79c <xTimerCreateTimerTask+0x88>)
 800e758:	f7ff f814 	bl	800d784 <xTaskCreateStatic>
 800e75c:	4603      	mov	r3, r0
 800e75e:	4a10      	ldr	r2, [pc, #64]	; (800e7a0 <xTimerCreateTimerTask+0x8c>)
 800e760:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e762:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <xTimerCreateTimerTask+0x8c>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d001      	beq.n	800e76e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e76a:	2301      	movs	r3, #1
 800e76c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d10a      	bne.n	800e78a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	613b      	str	r3, [r7, #16]
}
 800e786:	bf00      	nop
 800e788:	e7fe      	b.n	800e788 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e78a:	697b      	ldr	r3, [r7, #20]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	24012f28 	.word	0x24012f28
 800e798:	08010a30 	.word	0x08010a30
 800e79c:	0800e8d9 	.word	0x0800e8d9
 800e7a0:	24012f2c 	.word	0x24012f2c

0800e7a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08a      	sub	sp, #40	; 0x28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d10a      	bne.n	800e7d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	623b      	str	r3, [r7, #32]
}
 800e7ce:	bf00      	nop
 800e7d0:	e7fe      	b.n	800e7d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e7d2:	4b1a      	ldr	r3, [pc, #104]	; (800e83c <xTimerGenericCommand+0x98>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d02a      	beq.n	800e830 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	2b05      	cmp	r3, #5
 800e7ea:	dc18      	bgt.n	800e81e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e7ec:	f7ff fdb4 	bl	800e358 <xTaskGetSchedulerState>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d109      	bne.n	800e80a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e7f6:	4b11      	ldr	r3, [pc, #68]	; (800e83c <xTimerGenericCommand+0x98>)
 800e7f8:	6818      	ldr	r0, [r3, #0]
 800e7fa:	f107 0110 	add.w	r1, r7, #16
 800e7fe:	2300      	movs	r3, #0
 800e800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e802:	f7fe f91d 	bl	800ca40 <xQueueGenericSend>
 800e806:	6278      	str	r0, [r7, #36]	; 0x24
 800e808:	e012      	b.n	800e830 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e80a:	4b0c      	ldr	r3, [pc, #48]	; (800e83c <xTimerGenericCommand+0x98>)
 800e80c:	6818      	ldr	r0, [r3, #0]
 800e80e:	f107 0110 	add.w	r1, r7, #16
 800e812:	2300      	movs	r3, #0
 800e814:	2200      	movs	r2, #0
 800e816:	f7fe f913 	bl	800ca40 <xQueueGenericSend>
 800e81a:	6278      	str	r0, [r7, #36]	; 0x24
 800e81c:	e008      	b.n	800e830 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e81e:	4b07      	ldr	r3, [pc, #28]	; (800e83c <xTimerGenericCommand+0x98>)
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	f107 0110 	add.w	r1, r7, #16
 800e826:	2300      	movs	r3, #0
 800e828:	683a      	ldr	r2, [r7, #0]
 800e82a:	f7fe fa07 	bl	800cc3c <xQueueGenericSendFromISR>
 800e82e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e832:	4618      	mov	r0, r3
 800e834:	3728      	adds	r7, #40	; 0x28
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	24012f28 	.word	0x24012f28

0800e840 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b088      	sub	sp, #32
 800e844:	af02      	add	r7, sp, #8
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e84a:	4b22      	ldr	r3, [pc, #136]	; (800e8d4 <prvProcessExpiredTimer+0x94>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	3304      	adds	r3, #4
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fd ff1f 	bl	800c69c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e864:	f003 0304 	and.w	r3, r3, #4
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d022      	beq.n	800e8b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	699a      	ldr	r2, [r3, #24]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	18d1      	adds	r1, r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	683a      	ldr	r2, [r7, #0]
 800e878:	6978      	ldr	r0, [r7, #20]
 800e87a:	f000 f8d1 	bl	800ea20 <prvInsertTimerInActiveList>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d01f      	beq.n	800e8c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e884:	2300      	movs	r3, #0
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	2300      	movs	r3, #0
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	2100      	movs	r1, #0
 800e88e:	6978      	ldr	r0, [r7, #20]
 800e890:	f7ff ff88 	bl	800e7a4 <xTimerGenericCommand>
 800e894:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d113      	bne.n	800e8c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	60fb      	str	r3, [r7, #12]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8b8:	f023 0301 	bic.w	r3, r3, #1
 800e8bc:	b2da      	uxtb	r2, r3
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	6a1b      	ldr	r3, [r3, #32]
 800e8c8:	6978      	ldr	r0, [r7, #20]
 800e8ca:	4798      	blx	r3
}
 800e8cc:	bf00      	nop
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	24012f20 	.word	0x24012f20

0800e8d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e8e0:	f107 0308 	add.w	r3, r7, #8
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f000 f857 	bl	800e998 <prvGetNextExpireTime>
 800e8ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 f803 	bl	800e8fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e8f6:	f000 f8d5 	bl	800eaa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e8fa:	e7f1      	b.n	800e8e0 <prvTimerTask+0x8>

0800e8fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e906:	f7ff f945 	bl	800db94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e90a:	f107 0308 	add.w	r3, r7, #8
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 f866 	bl	800e9e0 <prvSampleTimeNow>
 800e914:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d130      	bne.n	800e97e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10a      	bne.n	800e938 <prvProcessTimerOrBlockTask+0x3c>
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	429a      	cmp	r2, r3
 800e928:	d806      	bhi.n	800e938 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e92a:	f7ff f941 	bl	800dbb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e92e:	68f9      	ldr	r1, [r7, #12]
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7ff ff85 	bl	800e840 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e936:	e024      	b.n	800e982 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d008      	beq.n	800e950 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e93e:	4b13      	ldr	r3, [pc, #76]	; (800e98c <prvProcessTimerOrBlockTask+0x90>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d101      	bne.n	800e94c <prvProcessTimerOrBlockTask+0x50>
 800e948:	2301      	movs	r3, #1
 800e94a:	e000      	b.n	800e94e <prvProcessTimerOrBlockTask+0x52>
 800e94c:	2300      	movs	r3, #0
 800e94e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e950:	4b0f      	ldr	r3, [pc, #60]	; (800e990 <prvProcessTimerOrBlockTask+0x94>)
 800e952:	6818      	ldr	r0, [r3, #0]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	4619      	mov	r1, r3
 800e95e:	f7fe fedd 	bl	800d71c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e962:	f7ff f925 	bl	800dbb0 <xTaskResumeAll>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10a      	bne.n	800e982 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e96c:	4b09      	ldr	r3, [pc, #36]	; (800e994 <prvProcessTimerOrBlockTask+0x98>)
 800e96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e972:	601a      	str	r2, [r3, #0]
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	f3bf 8f6f 	isb	sy
}
 800e97c:	e001      	b.n	800e982 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e97e:	f7ff f917 	bl	800dbb0 <xTaskResumeAll>
}
 800e982:	bf00      	nop
 800e984:	3710      	adds	r7, #16
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	24012f24 	.word	0x24012f24
 800e990:	24012f28 	.word	0x24012f28
 800e994:	e000ed04 	.word	0xe000ed04

0800e998 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e9a0:	4b0e      	ldr	r3, [pc, #56]	; (800e9dc <prvGetNextExpireTime+0x44>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <prvGetNextExpireTime+0x16>
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	e000      	b.n	800e9b0 <prvGetNextExpireTime+0x18>
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d105      	bne.n	800e9c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e9bc:	4b07      	ldr	r3, [pc, #28]	; (800e9dc <prvGetNextExpireTime+0x44>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	60fb      	str	r3, [r7, #12]
 800e9c6:	e001      	b.n	800e9cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	24012f20 	.word	0x24012f20

0800e9e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e9e8:	f7ff f980 	bl	800dcec <xTaskGetTickCount>
 800e9ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e9ee:	4b0b      	ldr	r3, [pc, #44]	; (800ea1c <prvSampleTimeNow+0x3c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	68fa      	ldr	r2, [r7, #12]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d205      	bcs.n	800ea04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e9f8:	f000 f936 	bl	800ec68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	e002      	b.n	800ea0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea0a:	4a04      	ldr	r2, [pc, #16]	; (800ea1c <prvSampleTimeNow+0x3c>)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea10:	68fb      	ldr	r3, [r7, #12]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	24012f30 	.word	0x24012f30

0800ea20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
 800ea2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	68ba      	ldr	r2, [r7, #8]
 800ea36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	68fa      	ldr	r2, [r7, #12]
 800ea3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d812      	bhi.n	800ea6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	1ad2      	subs	r2, r2, r3
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d302      	bcc.n	800ea5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ea54:	2301      	movs	r3, #1
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	e01b      	b.n	800ea92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ea5a:	4b10      	ldr	r3, [pc, #64]	; (800ea9c <prvInsertTimerInActiveList+0x7c>)
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3304      	adds	r3, #4
 800ea62:	4619      	mov	r1, r3
 800ea64:	4610      	mov	r0, r2
 800ea66:	f7fd fde0 	bl	800c62a <vListInsert>
 800ea6a:	e012      	b.n	800ea92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d206      	bcs.n	800ea82 <prvInsertTimerInActiveList+0x62>
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d302      	bcc.n	800ea82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	617b      	str	r3, [r7, #20]
 800ea80:	e007      	b.n	800ea92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea82:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <prvInsertTimerInActiveList+0x80>)
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	3304      	adds	r3, #4
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	f7fd fdcc 	bl	800c62a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ea92:	697b      	ldr	r3, [r7, #20]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3718      	adds	r7, #24
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	24012f24 	.word	0x24012f24
 800eaa0:	24012f20 	.word	0x24012f20

0800eaa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08e      	sub	sp, #56	; 0x38
 800eaa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eaaa:	e0ca      	b.n	800ec42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	da18      	bge.n	800eae4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eab2:	1d3b      	adds	r3, r7, #4
 800eab4:	3304      	adds	r3, #4
 800eab6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10a      	bne.n	800ead4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	61fb      	str	r3, [r7, #28]
}
 800ead0:	bf00      	nop
 800ead2:	e7fe      	b.n	800ead2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ead4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eada:	6850      	ldr	r0, [r2, #4]
 800eadc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eade:	6892      	ldr	r2, [r2, #8]
 800eae0:	4611      	mov	r1, r2
 800eae2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f2c0 80aa 	blt.w	800ec40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	695b      	ldr	r3, [r3, #20]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d004      	beq.n	800eb02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafa:	3304      	adds	r3, #4
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7fd fdcd 	bl	800c69c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb02:	463b      	mov	r3, r7
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff ff6b 	bl	800e9e0 <prvSampleTimeNow>
 800eb0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b09      	cmp	r3, #9
 800eb10:	f200 8097 	bhi.w	800ec42 <prvProcessReceivedCommands+0x19e>
 800eb14:	a201      	add	r2, pc, #4	; (adr r2, 800eb1c <prvProcessReceivedCommands+0x78>)
 800eb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb1a:	bf00      	nop
 800eb1c:	0800eb45 	.word	0x0800eb45
 800eb20:	0800eb45 	.word	0x0800eb45
 800eb24:	0800eb45 	.word	0x0800eb45
 800eb28:	0800ebb9 	.word	0x0800ebb9
 800eb2c:	0800ebcd 	.word	0x0800ebcd
 800eb30:	0800ec17 	.word	0x0800ec17
 800eb34:	0800eb45 	.word	0x0800eb45
 800eb38:	0800eb45 	.word	0x0800eb45
 800eb3c:	0800ebb9 	.word	0x0800ebb9
 800eb40:	0800ebcd 	.word	0x0800ebcd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb4a:	f043 0301 	orr.w	r3, r3, #1
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	18d1      	adds	r1, r2, r3
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb64:	f7ff ff5c 	bl	800ea20 <prvInsertTimerInActiveList>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d069      	beq.n	800ec42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb7c:	f003 0304 	and.w	r3, r3, #4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d05e      	beq.n	800ec42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	441a      	add	r2, r3
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	2300      	movs	r3, #0
 800eb92:	2100      	movs	r1, #0
 800eb94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb96:	f7ff fe05 	bl	800e7a4 <xTimerGenericCommand>
 800eb9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d14f      	bne.n	800ec42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800eba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	61bb      	str	r3, [r7, #24]
}
 800ebb4:	bf00      	nop
 800ebb6:	e7fe      	b.n	800ebb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebbe:	f023 0301 	bic.w	r3, r3, #1
 800ebc2:	b2da      	uxtb	r2, r3
 800ebc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ebca:	e03a      	b.n	800ec42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebd2:	f043 0301 	orr.w	r3, r3, #1
 800ebd6:	b2da      	uxtb	r2, r3
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ebe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d10a      	bne.n	800ec02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ebec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	617b      	str	r3, [r7, #20]
}
 800ebfe:	bf00      	nop
 800ec00:	e7fe      	b.n	800ec00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec04:	699a      	ldr	r2, [r3, #24]
 800ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec08:	18d1      	adds	r1, r2, r3
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec10:	f7ff ff06 	bl	800ea20 <prvInsertTimerInActiveList>
					break;
 800ec14:	e015      	b.n	800ec42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec1c:	f003 0302 	and.w	r3, r3, #2
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d103      	bne.n	800ec2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ec24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec26:	f000 fbdb 	bl	800f3e0 <vPortFree>
 800ec2a:	e00a      	b.n	800ec42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec32:	f023 0301 	bic.w	r3, r3, #1
 800ec36:	b2da      	uxtb	r2, r3
 800ec38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ec3e:	e000      	b.n	800ec42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ec40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec42:	4b08      	ldr	r3, [pc, #32]	; (800ec64 <prvProcessReceivedCommands+0x1c0>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	1d39      	adds	r1, r7, #4
 800ec48:	2200      	movs	r2, #0
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fe f91e 	bl	800ce8c <xQueueReceive>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f47f af2a 	bne.w	800eaac <prvProcessReceivedCommands+0x8>
	}
}
 800ec58:	bf00      	nop
 800ec5a:	bf00      	nop
 800ec5c:	3730      	adds	r7, #48	; 0x30
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	24012f28 	.word	0x24012f28

0800ec68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec6e:	e048      	b.n	800ed02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec70:	4b2d      	ldr	r3, [pc, #180]	; (800ed28 <prvSwitchTimerLists+0xc0>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec7a:	4b2b      	ldr	r3, [pc, #172]	; (800ed28 <prvSwitchTimerLists+0xc0>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	3304      	adds	r3, #4
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fd fd07 	bl	800c69c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6a1b      	ldr	r3, [r3, #32]
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec9c:	f003 0304 	and.w	r3, r3, #4
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d02e      	beq.n	800ed02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	4413      	add	r3, r2
 800ecac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d90e      	bls.n	800ecd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ecc2:	4b19      	ldr	r3, [pc, #100]	; (800ed28 <prvSwitchTimerLists+0xc0>)
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3304      	adds	r3, #4
 800ecca:	4619      	mov	r1, r3
 800eccc:	4610      	mov	r0, r2
 800ecce:	f7fd fcac 	bl	800c62a <vListInsert>
 800ecd2:	e016      	b.n	800ed02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	2300      	movs	r3, #0
 800ecda:	693a      	ldr	r2, [r7, #16]
 800ecdc:	2100      	movs	r1, #0
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f7ff fd60 	bl	800e7a4 <xTimerGenericCommand>
 800ece4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10a      	bne.n	800ed02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	603b      	str	r3, [r7, #0]
}
 800ecfe:	bf00      	nop
 800ed00:	e7fe      	b.n	800ed00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed02:	4b09      	ldr	r3, [pc, #36]	; (800ed28 <prvSwitchTimerLists+0xc0>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1b1      	bne.n	800ec70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed0c:	4b06      	ldr	r3, [pc, #24]	; (800ed28 <prvSwitchTimerLists+0xc0>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed12:	4b06      	ldr	r3, [pc, #24]	; (800ed2c <prvSwitchTimerLists+0xc4>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4a04      	ldr	r2, [pc, #16]	; (800ed28 <prvSwitchTimerLists+0xc0>)
 800ed18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed1a:	4a04      	ldr	r2, [pc, #16]	; (800ed2c <prvSwitchTimerLists+0xc4>)
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	6013      	str	r3, [r2, #0]
}
 800ed20:	bf00      	nop
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	24012f20 	.word	0x24012f20
 800ed2c:	24012f24 	.word	0x24012f24

0800ed30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ed36:	f000 f965 	bl	800f004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ed3a:	4b15      	ldr	r3, [pc, #84]	; (800ed90 <prvCheckForValidListAndQueue+0x60>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d120      	bne.n	800ed84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed42:	4814      	ldr	r0, [pc, #80]	; (800ed94 <prvCheckForValidListAndQueue+0x64>)
 800ed44:	f7fd fc20 	bl	800c588 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed48:	4813      	ldr	r0, [pc, #76]	; (800ed98 <prvCheckForValidListAndQueue+0x68>)
 800ed4a:	f7fd fc1d 	bl	800c588 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed4e:	4b13      	ldr	r3, [pc, #76]	; (800ed9c <prvCheckForValidListAndQueue+0x6c>)
 800ed50:	4a10      	ldr	r2, [pc, #64]	; (800ed94 <prvCheckForValidListAndQueue+0x64>)
 800ed52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed54:	4b12      	ldr	r3, [pc, #72]	; (800eda0 <prvCheckForValidListAndQueue+0x70>)
 800ed56:	4a10      	ldr	r2, [pc, #64]	; (800ed98 <prvCheckForValidListAndQueue+0x68>)
 800ed58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	4b11      	ldr	r3, [pc, #68]	; (800eda4 <prvCheckForValidListAndQueue+0x74>)
 800ed60:	4a11      	ldr	r2, [pc, #68]	; (800eda8 <prvCheckForValidListAndQueue+0x78>)
 800ed62:	2110      	movs	r1, #16
 800ed64:	200a      	movs	r0, #10
 800ed66:	f7fd fd2b 	bl	800c7c0 <xQueueGenericCreateStatic>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	4a08      	ldr	r2, [pc, #32]	; (800ed90 <prvCheckForValidListAndQueue+0x60>)
 800ed6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed70:	4b07      	ldr	r3, [pc, #28]	; (800ed90 <prvCheckForValidListAndQueue+0x60>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d005      	beq.n	800ed84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed78:	4b05      	ldr	r3, [pc, #20]	; (800ed90 <prvCheckForValidListAndQueue+0x60>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	490b      	ldr	r1, [pc, #44]	; (800edac <prvCheckForValidListAndQueue+0x7c>)
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fe fc78 	bl	800d674 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed84:	f000 f96e 	bl	800f064 <vPortExitCritical>
}
 800ed88:	bf00      	nop
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	24012f28 	.word	0x24012f28
 800ed94:	24012ef8 	.word	0x24012ef8
 800ed98:	24012f0c 	.word	0x24012f0c
 800ed9c:	24012f20 	.word	0x24012f20
 800eda0:	24012f24 	.word	0x24012f24
 800eda4:	24012fd4 	.word	0x24012fd4
 800eda8:	24012f34 	.word	0x24012f34
 800edac:	08010a38 	.word	0x08010a38

0800edb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3b04      	subs	r3, #4
 800edc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800edc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	3b04      	subs	r3, #4
 800edce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	f023 0201 	bic.w	r2, r3, #1
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	3b04      	subs	r3, #4
 800edde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ede0:	4a0c      	ldr	r2, [pc, #48]	; (800ee14 <pxPortInitialiseStack+0x64>)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	3b14      	subs	r3, #20
 800edea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3b04      	subs	r3, #4
 800edf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f06f 0202 	mvn.w	r2, #2
 800edfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	3b20      	subs	r3, #32
 800ee04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee06:	68fb      	ldr	r3, [r7, #12]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3714      	adds	r7, #20
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	0800ee19 	.word	0x0800ee19

0800ee18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b085      	sub	sp, #20
 800ee1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee22:	4b12      	ldr	r3, [pc, #72]	; (800ee6c <prvTaskExitError+0x54>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2a:	d00a      	beq.n	800ee42 <prvTaskExitError+0x2a>
	__asm volatile
 800ee2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee30:	f383 8811 	msr	BASEPRI, r3
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	60fb      	str	r3, [r7, #12]
}
 800ee3e:	bf00      	nop
 800ee40:	e7fe      	b.n	800ee40 <prvTaskExitError+0x28>
	__asm volatile
 800ee42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee46:	f383 8811 	msr	BASEPRI, r3
 800ee4a:	f3bf 8f6f 	isb	sy
 800ee4e:	f3bf 8f4f 	dsb	sy
 800ee52:	60bb      	str	r3, [r7, #8]
}
 800ee54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee56:	bf00      	nop
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d0fc      	beq.n	800ee58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee5e:	bf00      	nop
 800ee60:	bf00      	nop
 800ee62:	3714      	adds	r7, #20
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	24000014 	.word	0x24000014

0800ee70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ee70:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <pxCurrentTCBConst2>)
 800ee72:	6819      	ldr	r1, [r3, #0]
 800ee74:	6808      	ldr	r0, [r1, #0]
 800ee76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7a:	f380 8809 	msr	PSP, r0
 800ee7e:	f3bf 8f6f 	isb	sy
 800ee82:	f04f 0000 	mov.w	r0, #0
 800ee86:	f380 8811 	msr	BASEPRI, r0
 800ee8a:	4770      	bx	lr
 800ee8c:	f3af 8000 	nop.w

0800ee90 <pxCurrentTCBConst2>:
 800ee90:	240129f8 	.word	0x240129f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee94:	bf00      	nop
 800ee96:	bf00      	nop

0800ee98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee98:	4808      	ldr	r0, [pc, #32]	; (800eebc <prvPortStartFirstTask+0x24>)
 800ee9a:	6800      	ldr	r0, [r0, #0]
 800ee9c:	6800      	ldr	r0, [r0, #0]
 800ee9e:	f380 8808 	msr	MSP, r0
 800eea2:	f04f 0000 	mov.w	r0, #0
 800eea6:	f380 8814 	msr	CONTROL, r0
 800eeaa:	b662      	cpsie	i
 800eeac:	b661      	cpsie	f
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	f3bf 8f6f 	isb	sy
 800eeb6:	df00      	svc	0
 800eeb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eeba:	bf00      	nop
 800eebc:	e000ed08 	.word	0xe000ed08

0800eec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eec6:	4b46      	ldr	r3, [pc, #280]	; (800efe0 <xPortStartScheduler+0x120>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a46      	ldr	r2, [pc, #280]	; (800efe4 <xPortStartScheduler+0x124>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d10a      	bne.n	800eee6 <xPortStartScheduler+0x26>
	__asm volatile
 800eed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	613b      	str	r3, [r7, #16]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eee6:	4b3e      	ldr	r3, [pc, #248]	; (800efe0 <xPortStartScheduler+0x120>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a3f      	ldr	r2, [pc, #252]	; (800efe8 <xPortStartScheduler+0x128>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d10a      	bne.n	800ef06 <xPortStartScheduler+0x46>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	60fb      	str	r3, [r7, #12]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ef06:	4b39      	ldr	r3, [pc, #228]	; (800efec <xPortStartScheduler+0x12c>)
 800ef08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	22ff      	movs	r2, #255	; 0xff
 800ef16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ef20:	78fb      	ldrb	r3, [r7, #3]
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ef28:	b2da      	uxtb	r2, r3
 800ef2a:	4b31      	ldr	r3, [pc, #196]	; (800eff0 <xPortStartScheduler+0x130>)
 800ef2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ef2e:	4b31      	ldr	r3, [pc, #196]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef30:	2207      	movs	r2, #7
 800ef32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef34:	e009      	b.n	800ef4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ef36:	4b2f      	ldr	r3, [pc, #188]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	4a2d      	ldr	r2, [pc, #180]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ef40:	78fb      	ldrb	r3, [r7, #3]
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	005b      	lsls	r3, r3, #1
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef4a:	78fb      	ldrb	r3, [r7, #3]
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef52:	2b80      	cmp	r3, #128	; 0x80
 800ef54:	d0ef      	beq.n	800ef36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef56:	4b27      	ldr	r3, [pc, #156]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f1c3 0307 	rsb	r3, r3, #7
 800ef5e:	2b04      	cmp	r3, #4
 800ef60:	d00a      	beq.n	800ef78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ef62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef66:	f383 8811 	msr	BASEPRI, r3
 800ef6a:	f3bf 8f6f 	isb	sy
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	60bb      	str	r3, [r7, #8]
}
 800ef74:	bf00      	nop
 800ef76:	e7fe      	b.n	800ef76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ef78:	4b1e      	ldr	r3, [pc, #120]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	021b      	lsls	r3, r3, #8
 800ef7e:	4a1d      	ldr	r2, [pc, #116]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ef82:	4b1c      	ldr	r3, [pc, #112]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ef8a:	4a1a      	ldr	r2, [pc, #104]	; (800eff4 <xPortStartScheduler+0x134>)
 800ef8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ef96:	4b18      	ldr	r3, [pc, #96]	; (800eff8 <xPortStartScheduler+0x138>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a17      	ldr	r2, [pc, #92]	; (800eff8 <xPortStartScheduler+0x138>)
 800ef9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800efa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800efa2:	4b15      	ldr	r3, [pc, #84]	; (800eff8 <xPortStartScheduler+0x138>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a14      	ldr	r2, [pc, #80]	; (800eff8 <xPortStartScheduler+0x138>)
 800efa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800efac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800efae:	f000 f8dd 	bl	800f16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800efb2:	4b12      	ldr	r3, [pc, #72]	; (800effc <xPortStartScheduler+0x13c>)
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800efb8:	f000 f8fc 	bl	800f1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800efbc:	4b10      	ldr	r3, [pc, #64]	; (800f000 <xPortStartScheduler+0x140>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a0f      	ldr	r2, [pc, #60]	; (800f000 <xPortStartScheduler+0x140>)
 800efc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800efc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800efc8:	f7ff ff66 	bl	800ee98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800efcc:	f7fe ff58 	bl	800de80 <vTaskSwitchContext>
	prvTaskExitError();
 800efd0:	f7ff ff22 	bl	800ee18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3718      	adds	r7, #24
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	e000ed00 	.word	0xe000ed00
 800efe4:	410fc271 	.word	0x410fc271
 800efe8:	410fc270 	.word	0x410fc270
 800efec:	e000e400 	.word	0xe000e400
 800eff0:	24013024 	.word	0x24013024
 800eff4:	24013028 	.word	0x24013028
 800eff8:	e000ed20 	.word	0xe000ed20
 800effc:	24000014 	.word	0x24000014
 800f000:	e000ef34 	.word	0xe000ef34

0800f004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
	__asm volatile
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	607b      	str	r3, [r7, #4]
}
 800f01c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f01e:	4b0f      	ldr	r3, [pc, #60]	; (800f05c <vPortEnterCritical+0x58>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3301      	adds	r3, #1
 800f024:	4a0d      	ldr	r2, [pc, #52]	; (800f05c <vPortEnterCritical+0x58>)
 800f026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f028:	4b0c      	ldr	r3, [pc, #48]	; (800f05c <vPortEnterCritical+0x58>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d10f      	bne.n	800f050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f030:	4b0b      	ldr	r3, [pc, #44]	; (800f060 <vPortEnterCritical+0x5c>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00a      	beq.n	800f050 <vPortEnterCritical+0x4c>
	__asm volatile
 800f03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03e:	f383 8811 	msr	BASEPRI, r3
 800f042:	f3bf 8f6f 	isb	sy
 800f046:	f3bf 8f4f 	dsb	sy
 800f04a:	603b      	str	r3, [r7, #0]
}
 800f04c:	bf00      	nop
 800f04e:	e7fe      	b.n	800f04e <vPortEnterCritical+0x4a>
	}
}
 800f050:	bf00      	nop
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr
 800f05c:	24000014 	.word	0x24000014
 800f060:	e000ed04 	.word	0xe000ed04

0800f064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f06a:	4b12      	ldr	r3, [pc, #72]	; (800f0b4 <vPortExitCritical+0x50>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10a      	bne.n	800f088 <vPortExitCritical+0x24>
	__asm volatile
 800f072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f076:	f383 8811 	msr	BASEPRI, r3
 800f07a:	f3bf 8f6f 	isb	sy
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	607b      	str	r3, [r7, #4]
}
 800f084:	bf00      	nop
 800f086:	e7fe      	b.n	800f086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f088:	4b0a      	ldr	r3, [pc, #40]	; (800f0b4 <vPortExitCritical+0x50>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	4a09      	ldr	r2, [pc, #36]	; (800f0b4 <vPortExitCritical+0x50>)
 800f090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f092:	4b08      	ldr	r3, [pc, #32]	; (800f0b4 <vPortExitCritical+0x50>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d105      	bne.n	800f0a6 <vPortExitCritical+0x42>
 800f09a:	2300      	movs	r3, #0
 800f09c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	f383 8811 	msr	BASEPRI, r3
}
 800f0a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f0a6:	bf00      	nop
 800f0a8:	370c      	adds	r7, #12
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr
 800f0b2:	bf00      	nop
 800f0b4:	24000014 	.word	0x24000014
	...

0800f0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f0c0:	f3ef 8009 	mrs	r0, PSP
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	4b15      	ldr	r3, [pc, #84]	; (800f120 <pxCurrentTCBConst>)
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	f01e 0f10 	tst.w	lr, #16
 800f0d0:	bf08      	it	eq
 800f0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0da:	6010      	str	r0, [r2, #0]
 800f0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f0e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f0e4:	f380 8811 	msr	BASEPRI, r0
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f7fe fec6 	bl	800de80 <vTaskSwitchContext>
 800f0f4:	f04f 0000 	mov.w	r0, #0
 800f0f8:	f380 8811 	msr	BASEPRI, r0
 800f0fc:	bc09      	pop	{r0, r3}
 800f0fe:	6819      	ldr	r1, [r3, #0]
 800f100:	6808      	ldr	r0, [r1, #0]
 800f102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f106:	f01e 0f10 	tst.w	lr, #16
 800f10a:	bf08      	it	eq
 800f10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f110:	f380 8809 	msr	PSP, r0
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	f3af 8000 	nop.w

0800f120 <pxCurrentTCBConst>:
 800f120:	240129f8 	.word	0x240129f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f124:	bf00      	nop
 800f126:	bf00      	nop

0800f128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
	__asm volatile
 800f12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f132:	f383 8811 	msr	BASEPRI, r3
 800f136:	f3bf 8f6f 	isb	sy
 800f13a:	f3bf 8f4f 	dsb	sy
 800f13e:	607b      	str	r3, [r7, #4]
}
 800f140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f142:	f7fe fde3 	bl	800dd0c <xTaskIncrementTick>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f14c:	4b06      	ldr	r3, [pc, #24]	; (800f168 <xPortSysTickHandler+0x40>)
 800f14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f152:	601a      	str	r2, [r3, #0]
 800f154:	2300      	movs	r3, #0
 800f156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	f383 8811 	msr	BASEPRI, r3
}
 800f15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f160:	bf00      	nop
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	e000ed04 	.word	0xe000ed04

0800f16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f16c:	b480      	push	{r7}
 800f16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f170:	4b0b      	ldr	r3, [pc, #44]	; (800f1a0 <vPortSetupTimerInterrupt+0x34>)
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f176:	4b0b      	ldr	r3, [pc, #44]	; (800f1a4 <vPortSetupTimerInterrupt+0x38>)
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f17c:	4b0a      	ldr	r3, [pc, #40]	; (800f1a8 <vPortSetupTimerInterrupt+0x3c>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a0a      	ldr	r2, [pc, #40]	; (800f1ac <vPortSetupTimerInterrupt+0x40>)
 800f182:	fba2 2303 	umull	r2, r3, r2, r3
 800f186:	099b      	lsrs	r3, r3, #6
 800f188:	4a09      	ldr	r2, [pc, #36]	; (800f1b0 <vPortSetupTimerInterrupt+0x44>)
 800f18a:	3b01      	subs	r3, #1
 800f18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f18e:	4b04      	ldr	r3, [pc, #16]	; (800f1a0 <vPortSetupTimerInterrupt+0x34>)
 800f190:	2207      	movs	r2, #7
 800f192:	601a      	str	r2, [r3, #0]
}
 800f194:	bf00      	nop
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	e000e010 	.word	0xe000e010
 800f1a4:	e000e018 	.word	0xe000e018
 800f1a8:	24000004 	.word	0x24000004
 800f1ac:	10624dd3 	.word	0x10624dd3
 800f1b0:	e000e014 	.word	0xe000e014

0800f1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f1c4 <vPortEnableVFP+0x10>
 800f1b8:	6801      	ldr	r1, [r0, #0]
 800f1ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f1be:	6001      	str	r1, [r0, #0]
 800f1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f1c2:	bf00      	nop
 800f1c4:	e000ed88 	.word	0xe000ed88

0800f1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f1ce:	f3ef 8305 	mrs	r3, IPSR
 800f1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b0f      	cmp	r3, #15
 800f1d8:	d914      	bls.n	800f204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f1da:	4a17      	ldr	r2, [pc, #92]	; (800f238 <vPortValidateInterruptPriority+0x70>)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	4413      	add	r3, r2
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f1e4:	4b15      	ldr	r3, [pc, #84]	; (800f23c <vPortValidateInterruptPriority+0x74>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	7afa      	ldrb	r2, [r7, #11]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d20a      	bcs.n	800f204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f2:	f383 8811 	msr	BASEPRI, r3
 800f1f6:	f3bf 8f6f 	isb	sy
 800f1fa:	f3bf 8f4f 	dsb	sy
 800f1fe:	607b      	str	r3, [r7, #4]
}
 800f200:	bf00      	nop
 800f202:	e7fe      	b.n	800f202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f204:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <vPortValidateInterruptPriority+0x78>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f20c:	4b0d      	ldr	r3, [pc, #52]	; (800f244 <vPortValidateInterruptPriority+0x7c>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	429a      	cmp	r2, r3
 800f212:	d90a      	bls.n	800f22a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	603b      	str	r3, [r7, #0]
}
 800f226:	bf00      	nop
 800f228:	e7fe      	b.n	800f228 <vPortValidateInterruptPriority+0x60>
	}
 800f22a:	bf00      	nop
 800f22c:	3714      	adds	r7, #20
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	e000e3f0 	.word	0xe000e3f0
 800f23c:	24013024 	.word	0x24013024
 800f240:	e000ed0c 	.word	0xe000ed0c
 800f244:	24013028 	.word	0x24013028

0800f248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b08a      	sub	sp, #40	; 0x28
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f250:	2300      	movs	r3, #0
 800f252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f254:	f7fe fc9e 	bl	800db94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f258:	4b5b      	ldr	r3, [pc, #364]	; (800f3c8 <pvPortMalloc+0x180>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d101      	bne.n	800f264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f260:	f000 f920 	bl	800f4a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f264:	4b59      	ldr	r3, [pc, #356]	; (800f3cc <pvPortMalloc+0x184>)
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4013      	ands	r3, r2
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f040 8093 	bne.w	800f398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d01d      	beq.n	800f2b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f278:	2208      	movs	r2, #8
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4413      	add	r3, r2
 800f27e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f003 0307 	and.w	r3, r3, #7
 800f286:	2b00      	cmp	r3, #0
 800f288:	d014      	beq.n	800f2b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f023 0307 	bic.w	r3, r3, #7
 800f290:	3308      	adds	r3, #8
 800f292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f003 0307 	and.w	r3, r3, #7
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d00a      	beq.n	800f2b4 <pvPortMalloc+0x6c>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	617b      	str	r3, [r7, #20]
}
 800f2b0:	bf00      	nop
 800f2b2:	e7fe      	b.n	800f2b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d06e      	beq.n	800f398 <pvPortMalloc+0x150>
 800f2ba:	4b45      	ldr	r3, [pc, #276]	; (800f3d0 <pvPortMalloc+0x188>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d869      	bhi.n	800f398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f2c4:	4b43      	ldr	r3, [pc, #268]	; (800f3d4 <pvPortMalloc+0x18c>)
 800f2c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f2c8:	4b42      	ldr	r3, [pc, #264]	; (800f3d4 <pvPortMalloc+0x18c>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2ce:	e004      	b.n	800f2da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d903      	bls.n	800f2ec <pvPortMalloc+0xa4>
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1f1      	bne.n	800f2d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f2ec:	4b36      	ldr	r3, [pc, #216]	; (800f3c8 <pvPortMalloc+0x180>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d050      	beq.n	800f398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2f6:	6a3b      	ldr	r3, [r7, #32]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2208      	movs	r2, #8
 800f2fc:	4413      	add	r3, r2
 800f2fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	6a3b      	ldr	r3, [r7, #32]
 800f306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30a:	685a      	ldr	r2, [r3, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	1ad2      	subs	r2, r2, r3
 800f310:	2308      	movs	r3, #8
 800f312:	005b      	lsls	r3, r3, #1
 800f314:	429a      	cmp	r2, r3
 800f316:	d91f      	bls.n	800f358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4413      	add	r3, r2
 800f31e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	f003 0307 	and.w	r3, r3, #7
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00a      	beq.n	800f340 <pvPortMalloc+0xf8>
	__asm volatile
 800f32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32e:	f383 8811 	msr	BASEPRI, r3
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	f3bf 8f4f 	dsb	sy
 800f33a:	613b      	str	r3, [r7, #16]
}
 800f33c:	bf00      	nop
 800f33e:	e7fe      	b.n	800f33e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	685a      	ldr	r2, [r3, #4]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	1ad2      	subs	r2, r2, r3
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f352:	69b8      	ldr	r0, [r7, #24]
 800f354:	f000 f908 	bl	800f568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f358:	4b1d      	ldr	r3, [pc, #116]	; (800f3d0 <pvPortMalloc+0x188>)
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	4a1b      	ldr	r2, [pc, #108]	; (800f3d0 <pvPortMalloc+0x188>)
 800f364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f366:	4b1a      	ldr	r3, [pc, #104]	; (800f3d0 <pvPortMalloc+0x188>)
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	4b1b      	ldr	r3, [pc, #108]	; (800f3d8 <pvPortMalloc+0x190>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d203      	bcs.n	800f37a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f372:	4b17      	ldr	r3, [pc, #92]	; (800f3d0 <pvPortMalloc+0x188>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4a18      	ldr	r2, [pc, #96]	; (800f3d8 <pvPortMalloc+0x190>)
 800f378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	685a      	ldr	r2, [r3, #4]
 800f37e:	4b13      	ldr	r3, [pc, #76]	; (800f3cc <pvPortMalloc+0x184>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	431a      	orrs	r2, r3
 800f384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	2200      	movs	r2, #0
 800f38c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f38e:	4b13      	ldr	r3, [pc, #76]	; (800f3dc <pvPortMalloc+0x194>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	3301      	adds	r3, #1
 800f394:	4a11      	ldr	r2, [pc, #68]	; (800f3dc <pvPortMalloc+0x194>)
 800f396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f398:	f7fe fc0a 	bl	800dbb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	f003 0307 	and.w	r3, r3, #7
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00a      	beq.n	800f3bc <pvPortMalloc+0x174>
	__asm volatile
 800f3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3aa:	f383 8811 	msr	BASEPRI, r3
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f3bf 8f4f 	dsb	sy
 800f3b6:	60fb      	str	r3, [r7, #12]
}
 800f3b8:	bf00      	nop
 800f3ba:	e7fe      	b.n	800f3ba <pvPortMalloc+0x172>
	return pvReturn;
 800f3bc:	69fb      	ldr	r3, [r7, #28]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3728      	adds	r7, #40	; 0x28
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	24016c34 	.word	0x24016c34
 800f3cc:	24016c48 	.word	0x24016c48
 800f3d0:	24016c38 	.word	0x24016c38
 800f3d4:	24016c2c 	.word	0x24016c2c
 800f3d8:	24016c3c 	.word	0x24016c3c
 800f3dc:	24016c40 	.word	0x24016c40

0800f3e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b086      	sub	sp, #24
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d04d      	beq.n	800f48e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f3f2:	2308      	movs	r3, #8
 800f3f4:	425b      	negs	r3, r3
 800f3f6:	697a      	ldr	r2, [r7, #20]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	685a      	ldr	r2, [r3, #4]
 800f404:	4b24      	ldr	r3, [pc, #144]	; (800f498 <vPortFree+0xb8>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4013      	ands	r3, r2
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10a      	bne.n	800f424 <vPortFree+0x44>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	60fb      	str	r3, [r7, #12]
}
 800f420:	bf00      	nop
 800f422:	e7fe      	b.n	800f422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00a      	beq.n	800f442 <vPortFree+0x62>
	__asm volatile
 800f42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	60bb      	str	r3, [r7, #8]
}
 800f43e:	bf00      	nop
 800f440:	e7fe      	b.n	800f440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	4b14      	ldr	r3, [pc, #80]	; (800f498 <vPortFree+0xb8>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4013      	ands	r3, r2
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01e      	beq.n	800f48e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d11a      	bne.n	800f48e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	4b0e      	ldr	r3, [pc, #56]	; (800f498 <vPortFree+0xb8>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	43db      	mvns	r3, r3
 800f462:	401a      	ands	r2, r3
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f468:	f7fe fb94 	bl	800db94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	685a      	ldr	r2, [r3, #4]
 800f470:	4b0a      	ldr	r3, [pc, #40]	; (800f49c <vPortFree+0xbc>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4413      	add	r3, r2
 800f476:	4a09      	ldr	r2, [pc, #36]	; (800f49c <vPortFree+0xbc>)
 800f478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f47a:	6938      	ldr	r0, [r7, #16]
 800f47c:	f000 f874 	bl	800f568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f480:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <vPortFree+0xc0>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	3301      	adds	r3, #1
 800f486:	4a06      	ldr	r2, [pc, #24]	; (800f4a0 <vPortFree+0xc0>)
 800f488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f48a:	f7fe fb91 	bl	800dbb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f48e:	bf00      	nop
 800f490:	3718      	adds	r7, #24
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	24016c48 	.word	0x24016c48
 800f49c:	24016c38 	.word	0x24016c38
 800f4a0:	24016c44 	.word	0x24016c44

0800f4a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f4aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f4ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f4b0:	4b27      	ldr	r3, [pc, #156]	; (800f550 <prvHeapInit+0xac>)
 800f4b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f003 0307 	and.w	r3, r3, #7
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00c      	beq.n	800f4d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3307      	adds	r3, #7
 800f4c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f023 0307 	bic.w	r3, r3, #7
 800f4ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	1ad3      	subs	r3, r2, r3
 800f4d2:	4a1f      	ldr	r2, [pc, #124]	; (800f550 <prvHeapInit+0xac>)
 800f4d4:	4413      	add	r3, r2
 800f4d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4dc:	4a1d      	ldr	r2, [pc, #116]	; (800f554 <prvHeapInit+0xb0>)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f4e2:	4b1c      	ldr	r3, [pc, #112]	; (800f554 <prvHeapInit+0xb0>)
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68ba      	ldr	r2, [r7, #8]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f4f0:	2208      	movs	r2, #8
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	1a9b      	subs	r3, r3, r2
 800f4f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f023 0307 	bic.w	r3, r3, #7
 800f4fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	4a15      	ldr	r2, [pc, #84]	; (800f558 <prvHeapInit+0xb4>)
 800f504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f506:	4b14      	ldr	r3, [pc, #80]	; (800f558 <prvHeapInit+0xb4>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2200      	movs	r2, #0
 800f50c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f50e:	4b12      	ldr	r3, [pc, #72]	; (800f558 <prvHeapInit+0xb4>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2200      	movs	r2, #0
 800f514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	68fa      	ldr	r2, [r7, #12]
 800f51e:	1ad2      	subs	r2, r2, r3
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f524:	4b0c      	ldr	r3, [pc, #48]	; (800f558 <prvHeapInit+0xb4>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	4a0a      	ldr	r2, [pc, #40]	; (800f55c <prvHeapInit+0xb8>)
 800f532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	4a09      	ldr	r2, [pc, #36]	; (800f560 <prvHeapInit+0xbc>)
 800f53a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f53c:	4b09      	ldr	r3, [pc, #36]	; (800f564 <prvHeapInit+0xc0>)
 800f53e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f542:	601a      	str	r2, [r3, #0]
}
 800f544:	bf00      	nop
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr
 800f550:	2401302c 	.word	0x2401302c
 800f554:	24016c2c 	.word	0x24016c2c
 800f558:	24016c34 	.word	0x24016c34
 800f55c:	24016c3c 	.word	0x24016c3c
 800f560:	24016c38 	.word	0x24016c38
 800f564:	24016c48 	.word	0x24016c48

0800f568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f570:	4b28      	ldr	r3, [pc, #160]	; (800f614 <prvInsertBlockIntoFreeList+0xac>)
 800f572:	60fb      	str	r3, [r7, #12]
 800f574:	e002      	b.n	800f57c <prvInsertBlockIntoFreeList+0x14>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	60fb      	str	r3, [r7, #12]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	429a      	cmp	r2, r3
 800f584:	d8f7      	bhi.n	800f576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	68ba      	ldr	r2, [r7, #8]
 800f590:	4413      	add	r3, r2
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	429a      	cmp	r2, r3
 800f596:	d108      	bne.n	800f5aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	685a      	ldr	r2, [r3, #4]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	441a      	add	r2, r3
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	68ba      	ldr	r2, [r7, #8]
 800f5b4:	441a      	add	r2, r3
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d118      	bne.n	800f5f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	4b15      	ldr	r3, [pc, #84]	; (800f618 <prvInsertBlockIntoFreeList+0xb0>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d00d      	beq.n	800f5e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	685a      	ldr	r2, [r3, #4]
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	441a      	add	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	e008      	b.n	800f5f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f5e6:	4b0c      	ldr	r3, [pc, #48]	; (800f618 <prvInsertBlockIntoFreeList+0xb0>)
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	601a      	str	r2, [r3, #0]
 800f5ee:	e003      	b.n	800f5f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d002      	beq.n	800f606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f606:	bf00      	nop
 800f608:	3714      	adds	r7, #20
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	24016c2c 	.word	0x24016c2c
 800f618:	24016c34 	.word	0x24016c34

0800f61c <arm_max_f32>:
 800f61c:	f101 3cff 	add.w	ip, r1, #4294967295
 800f620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f622:	4607      	mov	r7, r0
 800f624:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800f628:	ecf7 7a01 	vldmia	r7!, {s15}
 800f62c:	d05c      	beq.n	800f6e8 <arm_max_f32+0xcc>
 800f62e:	2400      	movs	r4, #0
 800f630:	3014      	adds	r0, #20
 800f632:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800f636:	4625      	mov	r5, r4
 800f638:	ed10 7a04 	vldr	s14, [r0, #-16]
 800f63c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f644:	d502      	bpl.n	800f64c <arm_max_f32+0x30>
 800f646:	eef0 7a47 	vmov.f32	s15, s14
 800f64a:	1c65      	adds	r5, r4, #1
 800f64c:	ed10 7a03 	vldr	s14, [r0, #-12]
 800f650:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f658:	d502      	bpl.n	800f660 <arm_max_f32+0x44>
 800f65a:	eef0 7a47 	vmov.f32	s15, s14
 800f65e:	1ca5      	adds	r5, r4, #2
 800f660:	ed10 7a02 	vldr	s14, [r0, #-8]
 800f664:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f66c:	d502      	bpl.n	800f674 <arm_max_f32+0x58>
 800f66e:	eef0 7a47 	vmov.f32	s15, s14
 800f672:	1ce5      	adds	r5, r4, #3
 800f674:	ed10 7a01 	vldr	s14, [r0, #-4]
 800f678:	3404      	adds	r4, #4
 800f67a:	3010      	adds	r0, #16
 800f67c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f684:	d502      	bpl.n	800f68c <arm_max_f32+0x70>
 800f686:	eef0 7a47 	vmov.f32	s15, s14
 800f68a:	4625      	mov	r5, r4
 800f68c:	42a6      	cmp	r6, r4
 800f68e:	d1d3      	bne.n	800f638 <arm_max_f32+0x1c>
 800f690:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800f694:	f01c 0003 	ands.w	r0, ip, #3
 800f698:	d01e      	beq.n	800f6d8 <arm_max_f32+0xbc>
 800f69a:	ed97 7a00 	vldr	s14, [r7]
 800f69e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a6:	dc1b      	bgt.n	800f6e0 <arm_max_f32+0xc4>
 800f6a8:	3801      	subs	r0, #1
 800f6aa:	d015      	beq.n	800f6d8 <arm_max_f32+0xbc>
 800f6ac:	ed97 7a01 	vldr	s14, [r7, #4]
 800f6b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b8:	d502      	bpl.n	800f6c0 <arm_max_f32+0xa4>
 800f6ba:	eef0 7a47 	vmov.f32	s15, s14
 800f6be:	1a0d      	subs	r5, r1, r0
 800f6c0:	2801      	cmp	r0, #1
 800f6c2:	d009      	beq.n	800f6d8 <arm_max_f32+0xbc>
 800f6c4:	ed97 7a02 	vldr	s14, [r7, #8]
 800f6c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d0:	dd02      	ble.n	800f6d8 <arm_max_f32+0xbc>
 800f6d2:	eef0 7a47 	vmov.f32	s15, s14
 800f6d6:	4665      	mov	r5, ip
 800f6d8:	edc2 7a00 	vstr	s15, [r2]
 800f6dc:	601d      	str	r5, [r3, #0]
 800f6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6e0:	eef0 7a47 	vmov.f32	s15, s14
 800f6e4:	1a0d      	subs	r5, r1, r0
 800f6e6:	e7df      	b.n	800f6a8 <arm_max_f32+0x8c>
 800f6e8:	4675      	mov	r5, lr
 800f6ea:	e7d3      	b.n	800f694 <arm_max_f32+0x78>

0800f6ec <arm_rfft_32_fast_init_f32>:
 800f6ec:	b180      	cbz	r0, 800f710 <arm_rfft_32_fast_init_f32+0x24>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	2010      	movs	r0, #16
 800f6f4:	4908      	ldr	r1, [pc, #32]	; (800f718 <arm_rfft_32_fast_init_f32+0x2c>)
 800f6f6:	b430      	push	{r4, r5}
 800f6f8:	2514      	movs	r5, #20
 800f6fa:	4c08      	ldr	r4, [pc, #32]	; (800f71c <arm_rfft_32_fast_init_f32+0x30>)
 800f6fc:	821a      	strh	r2, [r3, #16]
 800f6fe:	4a08      	ldr	r2, [pc, #32]	; (800f720 <arm_rfft_32_fast_init_f32+0x34>)
 800f700:	8018      	strh	r0, [r3, #0]
 800f702:	2000      	movs	r0, #0
 800f704:	819d      	strh	r5, [r3, #12]
 800f706:	615a      	str	r2, [r3, #20]
 800f708:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f70c:	bc30      	pop	{r4, r5}
 800f70e:	4770      	bx	lr
 800f710:	f04f 30ff 	mov.w	r0, #4294967295
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	08016448 	.word	0x08016448
 800f71c:	08011b10 	.word	0x08011b10
 800f720:	0801f1c8 	.word	0x0801f1c8

0800f724 <arm_rfft_64_fast_init_f32>:
 800f724:	b180      	cbz	r0, 800f748 <arm_rfft_64_fast_init_f32+0x24>
 800f726:	4603      	mov	r3, r0
 800f728:	2240      	movs	r2, #64	; 0x40
 800f72a:	2020      	movs	r0, #32
 800f72c:	4908      	ldr	r1, [pc, #32]	; (800f750 <arm_rfft_64_fast_init_f32+0x2c>)
 800f72e:	b430      	push	{r4, r5}
 800f730:	2530      	movs	r5, #48	; 0x30
 800f732:	4c08      	ldr	r4, [pc, #32]	; (800f754 <arm_rfft_64_fast_init_f32+0x30>)
 800f734:	821a      	strh	r2, [r3, #16]
 800f736:	4a08      	ldr	r2, [pc, #32]	; (800f758 <arm_rfft_64_fast_init_f32+0x34>)
 800f738:	8018      	strh	r0, [r3, #0]
 800f73a:	2000      	movs	r0, #0
 800f73c:	819d      	strh	r5, [r3, #12]
 800f73e:	615a      	str	r2, [r3, #20]
 800f740:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f744:	bc30      	pop	{r4, r5}
 800f746:	4770      	bx	lr
 800f748:	f04f 30ff 	mov.w	r0, #4294967295
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	0801acc8 	.word	0x0801acc8
 800f754:	08013c68 	.word	0x08013c68
 800f758:	08023a48 	.word	0x08023a48

0800f75c <arm_rfft_256_fast_init_f32>:
 800f75c:	b188      	cbz	r0, 800f782 <arm_rfft_256_fast_init_f32+0x26>
 800f75e:	4603      	mov	r3, r0
 800f760:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f764:	2080      	movs	r0, #128	; 0x80
 800f766:	4908      	ldr	r1, [pc, #32]	; (800f788 <arm_rfft_256_fast_init_f32+0x2c>)
 800f768:	b430      	push	{r4, r5}
 800f76a:	25d0      	movs	r5, #208	; 0xd0
 800f76c:	4c07      	ldr	r4, [pc, #28]	; (800f78c <arm_rfft_256_fast_init_f32+0x30>)
 800f76e:	821a      	strh	r2, [r3, #16]
 800f770:	4a07      	ldr	r2, [pc, #28]	; (800f790 <arm_rfft_256_fast_init_f32+0x34>)
 800f772:	8018      	strh	r0, [r3, #0]
 800f774:	2000      	movs	r0, #0
 800f776:	819d      	strh	r5, [r3, #12]
 800f778:	615a      	str	r2, [r3, #20]
 800f77a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f77e:	bc30      	pop	{r4, r5}
 800f780:	4770      	bx	lr
 800f782:	f04f 30ff 	mov.w	r0, #4294967295
 800f786:	4770      	bx	lr
 800f788:	08016048 	.word	0x08016048
 800f78c:	08011970 	.word	0x08011970
 800f790:	0801edc8 	.word	0x0801edc8

0800f794 <arm_rfft_512_fast_init_f32>:
 800f794:	b198      	cbz	r0, 800f7be <arm_rfft_512_fast_init_f32+0x2a>
 800f796:	4603      	mov	r3, r0
 800f798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f79c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f7a0:	4908      	ldr	r1, [pc, #32]	; (800f7c4 <arm_rfft_512_fast_init_f32+0x30>)
 800f7a2:	b430      	push	{r4, r5}
 800f7a4:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800f7a8:	4c07      	ldr	r4, [pc, #28]	; (800f7c8 <arm_rfft_512_fast_init_f32+0x34>)
 800f7aa:	821a      	strh	r2, [r3, #16]
 800f7ac:	4a07      	ldr	r2, [pc, #28]	; (800f7cc <arm_rfft_512_fast_init_f32+0x38>)
 800f7ae:	8018      	strh	r0, [r3, #0]
 800f7b0:	2000      	movs	r0, #0
 800f7b2:	819d      	strh	r5, [r3, #12]
 800f7b4:	615a      	str	r2, [r3, #20]
 800f7b6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f7ba:	bc30      	pop	{r4, r5}
 800f7bc:	4770      	bx	lr
 800f7be:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c2:	4770      	bx	lr
 800f7c4:	0801a4c8 	.word	0x0801a4c8
 800f7c8:	080138f8 	.word	0x080138f8
 800f7cc:	08023248 	.word	0x08023248

0800f7d0 <arm_rfft_1024_fast_init_f32>:
 800f7d0:	b198      	cbz	r0, 800f7fa <arm_rfft_1024_fast_init_f32+0x2a>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f7d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f7dc:	4908      	ldr	r1, [pc, #32]	; (800f800 <arm_rfft_1024_fast_init_f32+0x30>)
 800f7de:	b430      	push	{r4, r5}
 800f7e0:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800f7e4:	4c07      	ldr	r4, [pc, #28]	; (800f804 <arm_rfft_1024_fast_init_f32+0x34>)
 800f7e6:	821a      	strh	r2, [r3, #16]
 800f7e8:	4a07      	ldr	r2, [pc, #28]	; (800f808 <arm_rfft_1024_fast_init_f32+0x38>)
 800f7ea:	8018      	strh	r0, [r3, #0]
 800f7ec:	2000      	movs	r0, #0
 800f7ee:	819d      	strh	r5, [r3, #12]
 800f7f0:	615a      	str	r2, [r3, #20]
 800f7f2:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f7f6:	bc30      	pop	{r4, r5}
 800f7f8:	4770      	bx	lr
 800f7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f7fe:	4770      	bx	lr
 800f800:	0801adc8 	.word	0x0801adc8
 800f804:	08013cc8 	.word	0x08013cc8
 800f808:	0801bdc8 	.word	0x0801bdc8

0800f80c <arm_rfft_2048_fast_init_f32>:
 800f80c:	b198      	cbz	r0, 800f836 <arm_rfft_2048_fast_init_f32+0x2a>
 800f80e:	4603      	mov	r3, r0
 800f810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f814:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f818:	4908      	ldr	r1, [pc, #32]	; (800f83c <arm_rfft_2048_fast_init_f32+0x30>)
 800f81a:	b430      	push	{r4, r5}
 800f81c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800f820:	4c07      	ldr	r4, [pc, #28]	; (800f840 <arm_rfft_2048_fast_init_f32+0x34>)
 800f822:	821a      	strh	r2, [r3, #16]
 800f824:	4a07      	ldr	r2, [pc, #28]	; (800f844 <arm_rfft_2048_fast_init_f32+0x38>)
 800f826:	8018      	strh	r0, [r3, #0]
 800f828:	2000      	movs	r0, #0
 800f82a:	819d      	strh	r5, [r3, #12]
 800f82c:	615a      	str	r2, [r3, #20]
 800f82e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f832:	bc30      	pop	{r4, r5}
 800f834:	4770      	bx	lr
 800f836:	f04f 30ff 	mov.w	r0, #4294967295
 800f83a:	4770      	bx	lr
 800f83c:	08014048 	.word	0x08014048
 800f840:	08010b60 	.word	0x08010b60
 800f844:	0801cdc8 	.word	0x0801cdc8

0800f848 <arm_rfft_4096_fast_init_f32>:
 800f848:	b198      	cbz	r0, 800f872 <arm_rfft_4096_fast_init_f32+0x2a>
 800f84a:	4603      	mov	r3, r0
 800f84c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f854:	4908      	ldr	r1, [pc, #32]	; (800f878 <arm_rfft_4096_fast_init_f32+0x30>)
 800f856:	b430      	push	{r4, r5}
 800f858:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800f85c:	4c07      	ldr	r4, [pc, #28]	; (800f87c <arm_rfft_4096_fast_init_f32+0x34>)
 800f85e:	821a      	strh	r2, [r3, #16]
 800f860:	4a07      	ldr	r2, [pc, #28]	; (800f880 <arm_rfft_4096_fast_init_f32+0x38>)
 800f862:	8018      	strh	r0, [r3, #0]
 800f864:	2000      	movs	r0, #0
 800f866:	819d      	strh	r5, [r3, #12]
 800f868:	615a      	str	r2, [r3, #20]
 800f86a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f86e:	bc30      	pop	{r4, r5}
 800f870:	4770      	bx	lr
 800f872:	f04f 30ff 	mov.w	r0, #4294967295
 800f876:	4770      	bx	lr
 800f878:	080164c8 	.word	0x080164c8
 800f87c:	08011b38 	.word	0x08011b38
 800f880:	0801f248 	.word	0x0801f248

0800f884 <arm_rfft_fast_init_f32>:
 800f884:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f888:	d01f      	beq.n	800f8ca <arm_rfft_fast_init_f32+0x46>
 800f88a:	d90b      	bls.n	800f8a4 <arm_rfft_fast_init_f32+0x20>
 800f88c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800f890:	d019      	beq.n	800f8c6 <arm_rfft_fast_init_f32+0x42>
 800f892:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800f896:	d012      	beq.n	800f8be <arm_rfft_fast_init_f32+0x3a>
 800f898:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f89c:	d00d      	beq.n	800f8ba <arm_rfft_fast_init_f32+0x36>
 800f89e:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a2:	4770      	bx	lr
 800f8a4:	2940      	cmp	r1, #64	; 0x40
 800f8a6:	d00c      	beq.n	800f8c2 <arm_rfft_fast_init_f32+0x3e>
 800f8a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f8ac:	d003      	beq.n	800f8b6 <arm_rfft_fast_init_f32+0x32>
 800f8ae:	2920      	cmp	r1, #32
 800f8b0:	d1f5      	bne.n	800f89e <arm_rfft_fast_init_f32+0x1a>
 800f8b2:	4b07      	ldr	r3, [pc, #28]	; (800f8d0 <arm_rfft_fast_init_f32+0x4c>)
 800f8b4:	4718      	bx	r3
 800f8b6:	4b07      	ldr	r3, [pc, #28]	; (800f8d4 <arm_rfft_fast_init_f32+0x50>)
 800f8b8:	4718      	bx	r3
 800f8ba:	4b07      	ldr	r3, [pc, #28]	; (800f8d8 <arm_rfft_fast_init_f32+0x54>)
 800f8bc:	4718      	bx	r3
 800f8be:	4b07      	ldr	r3, [pc, #28]	; (800f8dc <arm_rfft_fast_init_f32+0x58>)
 800f8c0:	4718      	bx	r3
 800f8c2:	4b07      	ldr	r3, [pc, #28]	; (800f8e0 <arm_rfft_fast_init_f32+0x5c>)
 800f8c4:	e7f6      	b.n	800f8b4 <arm_rfft_fast_init_f32+0x30>
 800f8c6:	4b07      	ldr	r3, [pc, #28]	; (800f8e4 <arm_rfft_fast_init_f32+0x60>)
 800f8c8:	e7f4      	b.n	800f8b4 <arm_rfft_fast_init_f32+0x30>
 800f8ca:	4b07      	ldr	r3, [pc, #28]	; (800f8e8 <arm_rfft_fast_init_f32+0x64>)
 800f8cc:	e7f2      	b.n	800f8b4 <arm_rfft_fast_init_f32+0x30>
 800f8ce:	bf00      	nop
 800f8d0:	0800f6ed 	.word	0x0800f6ed
 800f8d4:	0800f75d 	.word	0x0800f75d
 800f8d8:	0800f7d1 	.word	0x0800f7d1
 800f8dc:	0800f849 	.word	0x0800f849
 800f8e0:	0800f725 	.word	0x0800f725
 800f8e4:	0800f80d 	.word	0x0800f80d
 800f8e8:	0800f795 	.word	0x0800f795

0800f8ec <stage_rfft_f32>:
 800f8ec:	b470      	push	{r4, r5, r6}
 800f8ee:	edd1 7a00 	vldr	s15, [r1]
 800f8f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f8f6:	ed91 7a01 	vldr	s14, [r1, #4]
 800f8fa:	f101 0510 	add.w	r5, r1, #16
 800f8fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f902:	8806      	ldrh	r6, [r0, #0]
 800f904:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f908:	6943      	ldr	r3, [r0, #20]
 800f90a:	1e70      	subs	r0, r6, #1
 800f90c:	eeb0 4a46 	vmov.f32	s8, s12
 800f910:	f102 0410 	add.w	r4, r2, #16
 800f914:	3310      	adds	r3, #16
 800f916:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f91a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f91e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f922:	3908      	subs	r1, #8
 800f924:	ee26 7a86 	vmul.f32	s14, s13, s12
 800f928:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f92c:	ed82 7a00 	vstr	s14, [r2]
 800f930:	edc2 7a01 	vstr	s15, [r2, #4]
 800f934:	ed15 6a02 	vldr	s12, [r5, #-8]
 800f938:	3801      	subs	r0, #1
 800f93a:	ed91 7a02 	vldr	s14, [r1, #8]
 800f93e:	f105 0508 	add.w	r5, r5, #8
 800f942:	ed53 6a02 	vldr	s13, [r3, #-8]
 800f946:	f1a1 0108 	sub.w	r1, r1, #8
 800f94a:	ee77 5a46 	vsub.f32	s11, s14, s12
 800f94e:	edd1 4a05 	vldr	s9, [r1, #20]
 800f952:	ed55 7a03 	vldr	s15, [r5, #-12]
 800f956:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f95a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800f95e:	f104 0408 	add.w	r4, r4, #8
 800f962:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800f966:	f103 0308 	add.w	r3, r3, #8
 800f96a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800f96e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800f972:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800f976:	ee37 7a23 	vadd.f32	s14, s14, s7
 800f97a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f97e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f982:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f986:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f98a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f98e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f992:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f996:	ed04 7a04 	vstr	s14, [r4, #-16]
 800f99a:	ed44 7a03 	vstr	s15, [r4, #-12]
 800f99e:	d1c9      	bne.n	800f934 <stage_rfft_f32+0x48>
 800f9a0:	bc70      	pop	{r4, r5, r6}
 800f9a2:	4770      	bx	lr

0800f9a4 <merge_rfft_f32>:
 800f9a4:	b410      	push	{r4}
 800f9a6:	edd1 7a00 	vldr	s15, [r1]
 800f9aa:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800f9ae:	edd1 6a01 	vldr	s13, [r1, #4]
 800f9b2:	8804      	ldrh	r4, [r0, #0]
 800f9b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f9b8:	6940      	ldr	r0, [r0, #20]
 800f9ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f9be:	3c01      	subs	r4, #1
 800f9c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f9c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f9c8:	ed82 7a00 	vstr	s14, [r2]
 800f9cc:	edc2 7a01 	vstr	s15, [r2, #4]
 800f9d0:	b3dc      	cbz	r4, 800fa4a <merge_rfft_f32+0xa6>
 800f9d2:	00e3      	lsls	r3, r4, #3
 800f9d4:	3010      	adds	r0, #16
 800f9d6:	3210      	adds	r2, #16
 800f9d8:	3b08      	subs	r3, #8
 800f9da:	440b      	add	r3, r1
 800f9dc:	3110      	adds	r1, #16
 800f9de:	ed11 6a02 	vldr	s12, [r1, #-8]
 800f9e2:	3c01      	subs	r4, #1
 800f9e4:	ed93 7a02 	vldr	s14, [r3, #8]
 800f9e8:	f101 0108 	add.w	r1, r1, #8
 800f9ec:	ed50 6a02 	vldr	s13, [r0, #-8]
 800f9f0:	f1a3 0308 	sub.w	r3, r3, #8
 800f9f4:	ee76 5a47 	vsub.f32	s11, s12, s14
 800f9f8:	edd3 4a05 	vldr	s9, [r3, #20]
 800f9fc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800fa00:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fa04:	ed10 6a01 	vldr	s12, [r0, #-4]
 800fa08:	f102 0208 	add.w	r2, r2, #8
 800fa0c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800fa10:	f100 0008 	add.w	r0, r0, #8
 800fa14:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800fa18:	ee66 5a25 	vmul.f32	s11, s12, s11
 800fa1c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800fa20:	ee37 7a63 	vsub.f32	s14, s14, s7
 800fa24:	ee66 6a85 	vmul.f32	s13, s13, s10
 800fa28:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fa2c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800fa30:	ee37 7a46 	vsub.f32	s14, s14, s12
 800fa34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fa38:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fa3c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fa40:	ed02 7a04 	vstr	s14, [r2, #-16]
 800fa44:	ed42 7a03 	vstr	s15, [r2, #-12]
 800fa48:	d1c9      	bne.n	800f9de <merge_rfft_f32+0x3a>
 800fa4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <arm_rfft_fast_f32>:
 800fa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa54:	8a05      	ldrh	r5, [r0, #16]
 800fa56:	4604      	mov	r4, r0
 800fa58:	4617      	mov	r7, r2
 800fa5a:	461e      	mov	r6, r3
 800fa5c:	086d      	lsrs	r5, r5, #1
 800fa5e:	8005      	strh	r5, [r0, #0]
 800fa60:	b14b      	cbz	r3, 800fa76 <arm_rfft_fast_f32+0x26>
 800fa62:	f7ff ff9f 	bl	800f9a4 <merge_rfft_f32>
 800fa66:	4632      	mov	r2, r6
 800fa68:	4639      	mov	r1, r7
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa72:	f000 bb35 	b.w	80100e0 <arm_cfft_f32>
 800fa76:	4688      	mov	r8, r1
 800fa78:	461a      	mov	r2, r3
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	f000 fb30 	bl	80100e0 <arm_cfft_f32>
 800fa80:	463a      	mov	r2, r7
 800fa82:	4641      	mov	r1, r8
 800fa84:	4620      	mov	r0, r4
 800fa86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8a:	f7ff bf2f 	b.w	800f8ec <stage_rfft_f32>
 800fa8e:	bf00      	nop

0800fa90 <arm_cfft_radix8by2_f32>:
 800fa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa94:	4607      	mov	r7, r0
 800fa96:	4608      	mov	r0, r1
 800fa98:	ed2d 8b06 	vpush	{d8-d10}
 800fa9c:	f8b7 c000 	ldrh.w	ip, [r7]
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800faa6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800faaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800faae:	f000 80ac 	beq.w	800fc0a <arm_cfft_radix8by2_f32+0x17a>
 800fab2:	008c      	lsls	r4, r1, #2
 800fab4:	f100 0310 	add.w	r3, r0, #16
 800fab8:	3210      	adds	r2, #16
 800faba:	f108 0610 	add.w	r6, r8, #16
 800fabe:	3410      	adds	r4, #16
 800fac0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800fac4:	1905      	adds	r5, r0, r4
 800fac6:	4444      	add	r4, r8
 800fac8:	ed16 7a04 	vldr	s14, [r6, #-16]
 800facc:	3310      	adds	r3, #16
 800face:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800fad2:	3510      	adds	r5, #16
 800fad4:	ed56 0a03 	vldr	s1, [r6, #-12]
 800fad8:	3210      	adds	r2, #16
 800fada:	ee74 9a87 	vadd.f32	s19, s9, s14
 800fade:	ed56 7a02 	vldr	s15, [r6, #-8]
 800fae2:	ed56 2a01 	vldr	s5, [r6, #-4]
 800fae6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800faea:	ed54 5a04 	vldr	s11, [r4, #-16]
 800faee:	3610      	adds	r6, #16
 800faf0:	ed14 5a03 	vldr	s10, [r4, #-12]
 800faf4:	3410      	adds	r4, #16
 800faf6:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800fafa:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800fafe:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800fb02:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800fb06:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800fb0a:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800fb0e:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800fb12:	ee33 8a83 	vadd.f32	s16, s7, s6
 800fb16:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800fb1a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800fb1e:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800fb22:	ee34 0a06 	vadd.f32	s0, s8, s12
 800fb26:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800fb2a:	ee77 aa20 	vadd.f32	s21, s14, s1
 800fb2e:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800fb32:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800fb36:	ee72 9a22 	vadd.f32	s19, s4, s5
 800fb3a:	ee71 8a05 	vadd.f32	s17, s2, s10
 800fb3e:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800fb42:	ee37 7a60 	vsub.f32	s14, s14, s1
 800fb46:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800fb4a:	ee35 5a41 	vsub.f32	s10, s10, s2
 800fb4e:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800fb52:	ee36 6a44 	vsub.f32	s12, s12, s8
 800fb56:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800fb5a:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800fb5e:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800fb62:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800fb66:	ee72 7a62 	vsub.f32	s15, s4, s5
 800fb6a:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800fb6e:	ee73 2a63 	vsub.f32	s5, s6, s7
 800fb72:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800fb76:	4563      	cmp	r3, ip
 800fb78:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800fb7c:	ee24 3a84 	vmul.f32	s6, s9, s8
 800fb80:	ee27 2a26 	vmul.f32	s4, s14, s13
 800fb84:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800fb88:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800fb8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb90:	ee65 5a84 	vmul.f32	s11, s11, s8
 800fb94:	ee65 6a26 	vmul.f32	s13, s10, s13
 800fb98:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fb9c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fba0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fba4:	ee33 4a02 	vadd.f32	s8, s6, s4
 800fba8:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800fbac:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800fbb0:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800fbb4:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800fbb8:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800fbbc:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800fbc0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800fbc4:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800fbc8:	ee27 4a87 	vmul.f32	s8, s15, s14
 800fbcc:	ee61 5a87 	vmul.f32	s11, s3, s14
 800fbd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fbd4:	ee22 5a87 	vmul.f32	s10, s5, s14
 800fbd8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800fbdc:	ee26 6a26 	vmul.f32	s12, s12, s13
 800fbe0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800fbe4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fbe8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fbec:	ee35 6a46 	vsub.f32	s12, s10, s12
 800fbf0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fbf4:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800fbf8:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800fbfc:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800fc00:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800fc04:	f47f af60 	bne.w	800fac8 <arm_cfft_radix8by2_f32+0x38>
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	b28c      	uxth	r4, r1
 800fc0c:	2302      	movs	r3, #2
 800fc0e:	4621      	mov	r1, r4
 800fc10:	f000 fb04 	bl	801021c <arm_radix8_butterfly_f32>
 800fc14:	4621      	mov	r1, r4
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	4640      	mov	r0, r8
 800fc1a:	2302      	movs	r3, #2
 800fc1c:	ecbd 8b06 	vpop	{d8-d10}
 800fc20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc24:	f000 bafa 	b.w	801021c <arm_radix8_butterfly_f32>

0800fc28 <arm_cfft_radix8by4_f32>:
 800fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	ed2d 8b04 	vpush	{d8-d9}
 800fc30:	8804      	ldrh	r4, [r0, #0]
 800fc32:	b08d      	sub	sp, #52	; 0x34
 800fc34:	6842      	ldr	r2, [r0, #4]
 800fc36:	460d      	mov	r5, r1
 800fc38:	0864      	lsrs	r4, r4, #1
 800fc3a:	edd1 7a00 	vldr	s15, [r1]
 800fc3e:	edd1 5a01 	vldr	s11, [r1, #4]
 800fc42:	00a3      	lsls	r3, r4, #2
 800fc44:	18ce      	adds	r6, r1, r3
 800fc46:	18f7      	adds	r7, r6, r3
 800fc48:	ed96 7a00 	vldr	s14, [r6]
 800fc4c:	ed96 4a01 	vldr	s8, [r6, #4]
 800fc50:	ed97 6a00 	vldr	s12, [r7]
 800fc54:	edd7 4a01 	vldr	s9, [r7, #4]
 800fc58:	ee77 6a86 	vadd.f32	s13, s15, s12
 800fc5c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fc60:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800fc64:	ee77 2a26 	vadd.f32	s5, s14, s13
 800fc68:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800fc6c:	ee74 3a27 	vadd.f32	s7, s8, s15
 800fc70:	ee76 4a44 	vsub.f32	s9, s12, s8
 800fc74:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fc78:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800fc7c:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800fc80:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fc84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fc88:	0860      	lsrs	r0, r4, #1
 800fc8a:	f102 0408 	add.w	r4, r2, #8
 800fc8e:	9405      	str	r4, [sp, #20]
 800fc90:	f102 0410 	add.w	r4, r2, #16
 800fc94:	9009      	str	r0, [sp, #36]	; 0x24
 800fc96:	f1a0 0902 	sub.w	r9, r0, #2
 800fc9a:	9403      	str	r4, [sp, #12]
 800fc9c:	18fc      	adds	r4, r7, r3
 800fc9e:	f102 0018 	add.w	r0, r2, #24
 800fca2:	ed94 5a00 	vldr	s10, [r4]
 800fca6:	ed94 3a01 	vldr	s6, [r4, #4]
 800fcaa:	ee72 2a85 	vadd.f32	s5, s5, s10
 800fcae:	9004      	str	r0, [sp, #16]
 800fcb0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800fcba:	9408      	str	r4, [sp, #32]
 800fcbc:	ee12 ca90 	vmov	ip, s5
 800fcc0:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800fcc4:	ee77 7a83 	vadd.f32	s15, s15, s6
 800fcc8:	f845 cb08 	str.w	ip, [r5], #8
 800fccc:	ee13 ca90 	vmov	ip, s7
 800fcd0:	ed96 2a01 	vldr	s4, [r6, #4]
 800fcd4:	ee74 4a05 	vadd.f32	s9, s8, s10
 800fcd8:	edd4 2a01 	vldr	s5, [r4, #4]
 800fcdc:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fce0:	ee36 6a02 	vadd.f32	s12, s12, s4
 800fce4:	9500      	str	r5, [sp, #0]
 800fce6:	460d      	mov	r5, r1
 800fce8:	ee36 6a22 	vadd.f32	s12, s12, s5
 800fcec:	ed81 6a01 	vstr	s12, [r1, #4]
 800fcf0:	4631      	mov	r1, r6
 800fcf2:	f841 cb08 	str.w	ip, [r1], #8
 800fcf6:	ee16 ca90 	vmov	ip, s13
 800fcfa:	9106      	str	r1, [sp, #24]
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	edc6 4a01 	vstr	s9, [r6, #4]
 800fd02:	f841 cb08 	str.w	ip, [r1], #8
 800fd06:	9102      	str	r1, [sp, #8]
 800fd08:	ee17 1a90 	vmov	r1, s15
 800fd0c:	edc7 5a01 	vstr	s11, [r7, #4]
 800fd10:	f840 1b08 	str.w	r1, [r0], #8
 800fd14:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800fd18:	9001      	str	r0, [sp, #4]
 800fd1a:	ed84 7a01 	vstr	s14, [r4, #4]
 800fd1e:	9107      	str	r1, [sp, #28]
 800fd20:	f000 8135 	beq.w	800ff8e <arm_cfft_radix8by4_f32+0x366>
 800fd24:	3b0c      	subs	r3, #12
 800fd26:	f102 0920 	add.w	r9, r2, #32
 800fd2a:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800fd2e:	4622      	mov	r2, r4
 800fd30:	468b      	mov	fp, r1
 800fd32:	f105 0e10 	add.w	lr, r5, #16
 800fd36:	4423      	add	r3, r4
 800fd38:	f1a6 0c0c 	sub.w	ip, r6, #12
 800fd3c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fd40:	f106 0010 	add.w	r0, r6, #16
 800fd44:	f1a7 010c 	sub.w	r1, r7, #12
 800fd48:	f107 0510 	add.w	r5, r7, #16
 800fd4c:	3c0c      	subs	r4, #12
 800fd4e:	3210      	adds	r2, #16
 800fd50:	ed15 7a02 	vldr	s14, [r5, #-8]
 800fd54:	f1bb 0b01 	subs.w	fp, fp, #1
 800fd58:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800fd5c:	f1ac 0c08 	sub.w	ip, ip, #8
 800fd60:	ed50 6a02 	vldr	s13, [r0, #-8]
 800fd64:	f10e 0e08 	add.w	lr, lr, #8
 800fd68:	ee77 1a87 	vadd.f32	s3, s15, s14
 800fd6c:	ed52 4a02 	vldr	s9, [r2, #-8]
 800fd70:	ed55 5a01 	vldr	s11, [r5, #-4]
 800fd74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd78:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800fd7c:	f10a 0a08 	add.w	sl, sl, #8
 800fd80:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800fd84:	ed10 3a01 	vldr	s6, [r0, #-4]
 800fd88:	ee37 4a25 	vadd.f32	s8, s14, s11
 800fd8c:	ed52 3a01 	vldr	s7, [r2, #-4]
 800fd90:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fd94:	f100 0008 	add.w	r0, r0, #8
 800fd98:	ee36 6a24 	vadd.f32	s12, s12, s9
 800fd9c:	f1a1 0108 	sub.w	r1, r1, #8
 800fda0:	ee73 2a27 	vadd.f32	s5, s6, s15
 800fda4:	f109 0910 	add.w	r9, r9, #16
 800fda8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800fdac:	f105 0508 	add.w	r5, r5, #8
 800fdb0:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800fdb4:	ee37 5a66 	vsub.f32	s10, s14, s13
 800fdb8:	ed50 5a03 	vldr	s11, [r0, #-12]
 800fdbc:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800fdc0:	ed12 6a01 	vldr	s12, [r2, #-4]
 800fdc4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fdc8:	ee74 5a25 	vadd.f32	s11, s8, s11
 800fdcc:	f1a4 0408 	sub.w	r4, r4, #8
 800fdd0:	ee34 4a43 	vsub.f32	s8, s8, s6
 800fdd4:	f108 0818 	add.w	r8, r8, #24
 800fdd8:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800fddc:	f102 0208 	add.w	r2, r2, #8
 800fde0:	ee75 5a86 	vadd.f32	s11, s11, s12
 800fde4:	f1a3 0308 	sub.w	r3, r3, #8
 800fde8:	ee34 6a63 	vsub.f32	s12, s8, s7
 800fdec:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800fdf0:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800fdf4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800fdf8:	ed94 4a04 	vldr	s8, [r4, #16]
 800fdfc:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800fe00:	ed9c 3a04 	vldr	s6, [ip, #16]
 800fe04:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fe08:	edd1 7a04 	vldr	s15, [r1, #16]
 800fe0c:	ee73 6a04 	vadd.f32	s13, s6, s8
 800fe10:	ed93 8a04 	vldr	s16, [r3, #16]
 800fe14:	edd4 5a03 	vldr	s11, [r4, #12]
 800fe18:	ee33 3a44 	vsub.f32	s6, s6, s8
 800fe1c:	ed9c 2a03 	vldr	s4, [ip, #12]
 800fe20:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800fe24:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800fe28:	ed91 1a03 	vldr	s2, [r1, #12]
 800fe2c:	ee32 4a25 	vadd.f32	s8, s4, s11
 800fe30:	edd3 2a03 	vldr	s5, [r3, #12]
 800fe34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fe38:	ee70 0a88 	vadd.f32	s1, s1, s16
 800fe3c:	ee73 4a41 	vsub.f32	s9, s6, s2
 800fe40:	ee32 2a65 	vsub.f32	s4, s4, s11
 800fe44:	edcc 0a04 	vstr	s1, [ip, #16]
 800fe48:	ee74 0a41 	vsub.f32	s1, s8, s2
 800fe4c:	edd1 6a03 	vldr	s13, [r1, #12]
 800fe50:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800fe54:	ed93 9a03 	vldr	s18, [r3, #12]
 800fe58:	ee78 5a82 	vadd.f32	s11, s17, s4
 800fe5c:	ee34 4a26 	vadd.f32	s8, s8, s13
 800fe60:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800fe64:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800fe68:	ee34 4a09 	vadd.f32	s8, s8, s18
 800fe6c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fe70:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800fe74:	ed8c 4a03 	vstr	s8, [ip, #12]
 800fe78:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800fe7c:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800fe80:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800fe84:	ee60 2a01 	vmul.f32	s5, s0, s2
 800fe88:	ee64 6a81 	vmul.f32	s13, s9, s2
 800fe8c:	ee20 8a04 	vmul.f32	s16, s0, s8
 800fe90:	ee64 4a84 	vmul.f32	s9, s9, s8
 800fe94:	ee25 0a01 	vmul.f32	s0, s10, s2
 800fe98:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fe9c:	ee25 4a84 	vmul.f32	s8, s11, s8
 800fea0:	ee65 5a81 	vmul.f32	s11, s11, s2
 800fea4:	ee35 5a62 	vsub.f32	s10, s10, s5
 800fea8:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800feac:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800feb0:	ee38 1a00 	vadd.f32	s2, s16, s0
 800feb4:	ed00 5a03 	vstr	s10, [r0, #-12]
 800feb8:	ed00 1a04 	vstr	s2, [r0, #-16]
 800febc:	ed81 4a04 	vstr	s8, [r1, #16]
 800fec0:	edc1 5a03 	vstr	s11, [r1, #12]
 800fec4:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800fec8:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800fecc:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800fed0:	ee66 2a25 	vmul.f32	s5, s12, s11
 800fed4:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800fed8:	ee21 4a85 	vmul.f32	s8, s3, s10
 800fedc:	ee60 7a85 	vmul.f32	s15, s1, s10
 800fee0:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800fee4:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fee8:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800feec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fef0:	ee34 5a22 	vadd.f32	s10, s8, s5
 800fef4:	ee36 6a61 	vsub.f32	s12, s12, s3
 800fef8:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800fefc:	ed05 5a04 	vstr	s10, [r5, #-16]
 800ff00:	ed05 6a03 	vstr	s12, [r5, #-12]
 800ff04:	edc4 5a04 	vstr	s11, [r4, #16]
 800ff08:	edc4 6a03 	vstr	s13, [r4, #12]
 800ff0c:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800ff10:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800ff14:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800ff18:	ee67 5a27 	vmul.f32	s11, s14, s15
 800ff1c:	ee63 6a27 	vmul.f32	s13, s6, s15
 800ff20:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800ff24:	ee27 7a22 	vmul.f32	s14, s14, s5
 800ff28:	ee62 7a27 	vmul.f32	s15, s4, s15
 800ff2c:	ee23 3a22 	vmul.f32	s6, s6, s5
 800ff30:	ee22 2a22 	vmul.f32	s4, s4, s5
 800ff34:	ee36 6a25 	vadd.f32	s12, s12, s11
 800ff38:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ff3c:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800ff40:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ff44:	ed02 6a04 	vstr	s12, [r2, #-16]
 800ff48:	ed02 7a03 	vstr	s14, [r2, #-12]
 800ff4c:	ed83 2a04 	vstr	s4, [r3, #16]
 800ff50:	edc3 7a03 	vstr	s15, [r3, #12]
 800ff54:	f47f aefc 	bne.w	800fd50 <arm_cfft_radix8by4_f32+0x128>
 800ff58:	9907      	ldr	r1, [sp, #28]
 800ff5a:	9803      	ldr	r0, [sp, #12]
 800ff5c:	00cb      	lsls	r3, r1, #3
 800ff5e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ff62:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ff66:	9103      	str	r1, [sp, #12]
 800ff68:	9900      	ldr	r1, [sp, #0]
 800ff6a:	4419      	add	r1, r3
 800ff6c:	9100      	str	r1, [sp, #0]
 800ff6e:	9905      	ldr	r1, [sp, #20]
 800ff70:	4419      	add	r1, r3
 800ff72:	9105      	str	r1, [sp, #20]
 800ff74:	9906      	ldr	r1, [sp, #24]
 800ff76:	4419      	add	r1, r3
 800ff78:	9106      	str	r1, [sp, #24]
 800ff7a:	9902      	ldr	r1, [sp, #8]
 800ff7c:	4419      	add	r1, r3
 800ff7e:	9102      	str	r1, [sp, #8]
 800ff80:	9901      	ldr	r1, [sp, #4]
 800ff82:	4419      	add	r1, r3
 800ff84:	9b04      	ldr	r3, [sp, #16]
 800ff86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff8a:	9101      	str	r1, [sp, #4]
 800ff8c:	9304      	str	r3, [sp, #16]
 800ff8e:	9b00      	ldr	r3, [sp, #0]
 800ff90:	9902      	ldr	r1, [sp, #8]
 800ff92:	ed93 7a00 	vldr	s14, [r3]
 800ff96:	edd1 7a00 	vldr	s15, [r1]
 800ff9a:	9a06      	ldr	r2, [sp, #24]
 800ff9c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ffa0:	9d01      	ldr	r5, [sp, #4]
 800ffa2:	edd2 6a00 	vldr	s13, [r2]
 800ffa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ffaa:	9b02      	ldr	r3, [sp, #8]
 800ffac:	ee76 3a86 	vadd.f32	s7, s13, s12
 800ffb0:	ed95 3a00 	vldr	s6, [r5]
 800ffb4:	ed93 5a01 	vldr	s10, [r3, #4]
 800ffb8:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ffbc:	9b00      	ldr	r3, [sp, #0]
 800ffbe:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ffc2:	edd5 2a01 	vldr	s5, [r5, #4]
 800ffc6:	ed93 4a01 	vldr	s8, [r3, #4]
 800ffca:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ffce:	9b00      	ldr	r3, [sp, #0]
 800ffd0:	ee74 5a05 	vadd.f32	s11, s8, s10
 800ffd4:	edd2 7a01 	vldr	s15, [r2, #4]
 800ffd8:	edc3 3a00 	vstr	s7, [r3]
 800ffdc:	ee34 4a45 	vsub.f32	s8, s8, s10
 800ffe0:	edd2 3a01 	vldr	s7, [r2, #4]
 800ffe4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ffe8:	ed95 2a01 	vldr	s4, [r5, #4]
 800ffec:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800fff0:	9d05      	ldr	r5, [sp, #20]
 800fff2:	ee34 5a66 	vsub.f32	s10, s8, s13
 800fff6:	9b00      	ldr	r3, [sp, #0]
 800fff8:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800fffc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8010000:	ee73 3a82 	vadd.f32	s7, s7, s4
 8010004:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010006:	ee35 5a03 	vadd.f32	s10, s10, s6
 801000a:	4621      	mov	r1, r4
 801000c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010010:	edc3 3a01 	vstr	s7, [r3, #4]
 8010014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010018:	edd5 3a00 	vldr	s7, [r5]
 801001c:	ee76 6a84 	vadd.f32	s13, s13, s8
 8010020:	ed95 7a01 	vldr	s14, [r5, #4]
 8010024:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8010028:	ee24 4aa3 	vmul.f32	s8, s9, s7
 801002c:	2304      	movs	r3, #4
 801002e:	ee64 4a87 	vmul.f32	s9, s9, s14
 8010032:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010036:	ee25 5a23 	vmul.f32	s10, s10, s7
 801003a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801003e:	ee34 7a07 	vadd.f32	s14, s8, s14
 8010042:	ee35 5a64 	vsub.f32	s10, s10, s9
 8010046:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801004a:	ed82 7a00 	vstr	s14, [r2]
 801004e:	ed82 5a01 	vstr	s10, [r2, #4]
 8010052:	9a03      	ldr	r2, [sp, #12]
 8010054:	edd2 4a01 	vldr	s9, [r2, #4]
 8010058:	ed92 7a00 	vldr	s14, [r2]
 801005c:	9a02      	ldr	r2, [sp, #8]
 801005e:	ee26 5a07 	vmul.f32	s10, s12, s14
 8010062:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010066:	ee25 7a87 	vmul.f32	s14, s11, s14
 801006a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801006e:	ee37 6a46 	vsub.f32	s12, s14, s12
 8010072:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010076:	edc2 5a00 	vstr	s11, [r2]
 801007a:	ed82 6a01 	vstr	s12, [r2, #4]
 801007e:	9a04      	ldr	r2, [sp, #16]
 8010080:	9d01      	ldr	r5, [sp, #4]
 8010082:	edd2 5a01 	vldr	s11, [r2, #4]
 8010086:	ed92 7a00 	vldr	s14, [r2]
 801008a:	ee27 6a87 	vmul.f32	s12, s15, s14
 801008e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010092:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010096:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801009a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801009e:	ee76 6a26 	vadd.f32	s13, s12, s13
 80100a2:	edc5 7a01 	vstr	s15, [r5, #4]
 80100a6:	edc5 6a00 	vstr	s13, [r5]
 80100aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80100ac:	686a      	ldr	r2, [r5, #4]
 80100ae:	f000 f8b5 	bl	801021c <arm_radix8_butterfly_f32>
 80100b2:	4630      	mov	r0, r6
 80100b4:	4621      	mov	r1, r4
 80100b6:	686a      	ldr	r2, [r5, #4]
 80100b8:	2304      	movs	r3, #4
 80100ba:	f000 f8af 	bl	801021c <arm_radix8_butterfly_f32>
 80100be:	4638      	mov	r0, r7
 80100c0:	4621      	mov	r1, r4
 80100c2:	686a      	ldr	r2, [r5, #4]
 80100c4:	2304      	movs	r3, #4
 80100c6:	f000 f8a9 	bl	801021c <arm_radix8_butterfly_f32>
 80100ca:	4621      	mov	r1, r4
 80100cc:	686a      	ldr	r2, [r5, #4]
 80100ce:	2304      	movs	r3, #4
 80100d0:	9808      	ldr	r0, [sp, #32]
 80100d2:	b00d      	add	sp, #52	; 0x34
 80100d4:	ecbd 8b04 	vpop	{d8-d9}
 80100d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100dc:	f000 b89e 	b.w	801021c <arm_radix8_butterfly_f32>

080100e0 <arm_cfft_f32>:
 80100e0:	2a01      	cmp	r2, #1
 80100e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e6:	4606      	mov	r6, r0
 80100e8:	4617      	mov	r7, r2
 80100ea:	460c      	mov	r4, r1
 80100ec:	4698      	mov	r8, r3
 80100ee:	8805      	ldrh	r5, [r0, #0]
 80100f0:	d055      	beq.n	801019e <arm_cfft_f32+0xbe>
 80100f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80100f6:	d061      	beq.n	80101bc <arm_cfft_f32+0xdc>
 80100f8:	d916      	bls.n	8010128 <arm_cfft_f32+0x48>
 80100fa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80100fe:	d01a      	beq.n	8010136 <arm_cfft_f32+0x56>
 8010100:	d946      	bls.n	8010190 <arm_cfft_f32+0xb0>
 8010102:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8010106:	d059      	beq.n	80101bc <arm_cfft_f32+0xdc>
 8010108:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801010c:	d105      	bne.n	801011a <arm_cfft_f32+0x3a>
 801010e:	2301      	movs	r3, #1
 8010110:	6872      	ldr	r2, [r6, #4]
 8010112:	4629      	mov	r1, r5
 8010114:	4620      	mov	r0, r4
 8010116:	f000 f881 	bl	801021c <arm_radix8_butterfly_f32>
 801011a:	f1b8 0f00 	cmp.w	r8, #0
 801011e:	d111      	bne.n	8010144 <arm_cfft_f32+0x64>
 8010120:	2f01      	cmp	r7, #1
 8010122:	d016      	beq.n	8010152 <arm_cfft_f32+0x72>
 8010124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010128:	2d20      	cmp	r5, #32
 801012a:	d047      	beq.n	80101bc <arm_cfft_f32+0xdc>
 801012c:	d934      	bls.n	8010198 <arm_cfft_f32+0xb8>
 801012e:	2d40      	cmp	r5, #64	; 0x40
 8010130:	d0ed      	beq.n	801010e <arm_cfft_f32+0x2e>
 8010132:	2d80      	cmp	r5, #128	; 0x80
 8010134:	d1f1      	bne.n	801011a <arm_cfft_f32+0x3a>
 8010136:	4621      	mov	r1, r4
 8010138:	4630      	mov	r0, r6
 801013a:	f7ff fca9 	bl	800fa90 <arm_cfft_radix8by2_f32>
 801013e:	f1b8 0f00 	cmp.w	r8, #0
 8010142:	d0ed      	beq.n	8010120 <arm_cfft_f32+0x40>
 8010144:	68b2      	ldr	r2, [r6, #8]
 8010146:	4620      	mov	r0, r4
 8010148:	89b1      	ldrh	r1, [r6, #12]
 801014a:	f000 f83f 	bl	80101cc <arm_bitreversal_32>
 801014e:	2f01      	cmp	r7, #1
 8010150:	d1e8      	bne.n	8010124 <arm_cfft_f32+0x44>
 8010152:	ee07 5a90 	vmov	s15, r5
 8010156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801015a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801015e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010162:	2d00      	cmp	r5, #0
 8010164:	d0de      	beq.n	8010124 <arm_cfft_f32+0x44>
 8010166:	f104 0108 	add.w	r1, r4, #8
 801016a:	2300      	movs	r3, #0
 801016c:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010170:	3301      	adds	r3, #1
 8010172:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010176:	3108      	adds	r1, #8
 8010178:	429d      	cmp	r5, r3
 801017a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801017e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010182:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010186:	ed41 7a03 	vstr	s15, [r1, #-12]
 801018a:	d1ef      	bne.n	801016c <arm_cfft_f32+0x8c>
 801018c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010190:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010194:	d0bb      	beq.n	801010e <arm_cfft_f32+0x2e>
 8010196:	e7c0      	b.n	801011a <arm_cfft_f32+0x3a>
 8010198:	2d10      	cmp	r5, #16
 801019a:	d0cc      	beq.n	8010136 <arm_cfft_f32+0x56>
 801019c:	e7bd      	b.n	801011a <arm_cfft_f32+0x3a>
 801019e:	b195      	cbz	r5, 80101c6 <arm_cfft_f32+0xe6>
 80101a0:	f101 030c 	add.w	r3, r1, #12
 80101a4:	2200      	movs	r2, #0
 80101a6:	ed53 7a02 	vldr	s15, [r3, #-8]
 80101aa:	3201      	adds	r2, #1
 80101ac:	3308      	adds	r3, #8
 80101ae:	eef1 7a67 	vneg.f32	s15, s15
 80101b2:	4295      	cmp	r5, r2
 80101b4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80101b8:	d1f5      	bne.n	80101a6 <arm_cfft_f32+0xc6>
 80101ba:	e79a      	b.n	80100f2 <arm_cfft_f32+0x12>
 80101bc:	4621      	mov	r1, r4
 80101be:	4630      	mov	r0, r6
 80101c0:	f7ff fd32 	bl	800fc28 <arm_cfft_radix8by4_f32>
 80101c4:	e7a9      	b.n	801011a <arm_cfft_f32+0x3a>
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d0ac      	beq.n	8010124 <arm_cfft_f32+0x44>
 80101ca:	e7bb      	b.n	8010144 <arm_cfft_f32+0x64>

080101cc <arm_bitreversal_32>:
 80101cc:	b321      	cbz	r1, 8010218 <arm_bitreversal_32+0x4c>
 80101ce:	f102 0c02 	add.w	ip, r2, #2
 80101d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d6:	4690      	mov	r8, r2
 80101d8:	2500      	movs	r5, #0
 80101da:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 80101de:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 80101e2:	3502      	adds	r5, #2
 80101e4:	08a4      	lsrs	r4, r4, #2
 80101e6:	089b      	lsrs	r3, r3, #2
 80101e8:	428d      	cmp	r5, r1
 80101ea:	ea4f 0784 	mov.w	r7, r4, lsl #2
 80101ee:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 80101f2:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80101f6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80101fa:	f107 0704 	add.w	r7, r7, #4
 80101fe:	f106 0604 	add.w	r6, r6, #4
 8010202:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8010206:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 801020a:	59c4      	ldr	r4, [r0, r7]
 801020c:	5983      	ldr	r3, [r0, r6]
 801020e:	51c3      	str	r3, [r0, r7]
 8010210:	5184      	str	r4, [r0, r6]
 8010212:	d3e2      	bcc.n	80101da <arm_bitreversal_32+0xe>
 8010214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop

0801021c <arm_radix8_butterfly_f32>:
 801021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010220:	ed2d 8b10 	vpush	{d8-d15}
 8010224:	b095      	sub	sp, #84	; 0x54
 8010226:	468a      	mov	sl, r1
 8010228:	468b      	mov	fp, r1
 801022a:	eddf 8abb 	vldr	s17, [pc, #748]	; 8010518 <arm_radix8_butterfly_f32+0x2fc>
 801022e:	9012      	str	r0, [sp, #72]	; 0x48
 8010230:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8010234:	4603      	mov	r3, r0
 8010236:	3304      	adds	r3, #4
 8010238:	9313      	str	r3, [sp, #76]	; 0x4c
 801023a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801023e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010244:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8010248:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801024c:	920f      	str	r2, [sp, #60]	; 0x3c
 801024e:	9303      	str	r3, [sp, #12]
 8010250:	0153      	lsls	r3, r2, #5
 8010252:	0114      	lsls	r4, r2, #4
 8010254:	eba9 0002 	sub.w	r0, r9, r2
 8010258:	18ce      	adds	r6, r1, r3
 801025a:	9302      	str	r3, [sp, #8]
 801025c:	0097      	lsls	r7, r2, #2
 801025e:	4613      	mov	r3, r2
 8010260:	eb06 0509 	add.w	r5, r6, r9
 8010264:	9004      	str	r0, [sp, #16]
 8010266:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 801026a:	1bd2      	subs	r2, r2, r7
 801026c:	eb05 0109 	add.w	r1, r5, r9
 8010270:	441f      	add	r7, r3
 8010272:	9405      	str	r4, [sp, #20]
 8010274:	f109 0004 	add.w	r0, r9, #4
 8010278:	9101      	str	r1, [sp, #4]
 801027a:	1d21      	adds	r1, r4, #4
 801027c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801027e:	f04f 0e00 	mov.w	lr, #0
 8010282:	9c01      	ldr	r4, [sp, #4]
 8010284:	4418      	add	r0, r3
 8010286:	4419      	add	r1, r3
 8010288:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801028c:	9b02      	ldr	r3, [sp, #8]
 801028e:	00fc      	lsls	r4, r7, #3
 8010290:	18d7      	adds	r7, r2, r3
 8010292:	9b04      	ldr	r3, [sp, #16]
 8010294:	9406      	str	r4, [sp, #24]
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	9c01      	ldr	r4, [sp, #4]
 801029a:	9307      	str	r3, [sp, #28]
 801029c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80102a0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80102a4:	9304      	str	r3, [sp, #16]
 80102a6:	9b03      	ldr	r3, [sp, #12]
 80102a8:	edd6 6a00 	vldr	s13, [r6]
 80102ac:	44de      	add	lr, fp
 80102ae:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80102b2:	ed94 7a00 	vldr	s14, [r4]
 80102b6:	45f2      	cmp	sl, lr
 80102b8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80102bc:	ee37 2aa6 	vadd.f32	s4, s15, s13
 80102c0:	edd5 2a00 	vldr	s5, [r5]
 80102c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102c8:	edd7 3a00 	vldr	s7, [r7]
 80102cc:	ed11 5a01 	vldr	s10, [r1, #-4]
 80102d0:	ee36 3a22 	vadd.f32	s6, s12, s5
 80102d4:	edd2 6a00 	vldr	s13, [r2]
 80102d8:	ee75 5a07 	vadd.f32	s11, s10, s14
 80102dc:	ee36 4aa3 	vadd.f32	s8, s13, s7
 80102e0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80102e4:	ee72 4a25 	vadd.f32	s9, s4, s11
 80102e8:	ee73 3a04 	vadd.f32	s7, s6, s8
 80102ec:	ee35 5a47 	vsub.f32	s10, s10, s14
 80102f0:	ee36 7a62 	vsub.f32	s14, s12, s5
 80102f4:	ee32 2a65 	vsub.f32	s4, s4, s11
 80102f8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 80102fc:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8010300:	ee37 6a66 	vsub.f32	s12, s14, s13
 8010304:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8010308:	ee33 3a44 	vsub.f32	s6, s6, s8
 801030c:	edc6 4a00 	vstr	s9, [r6]
 8010310:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010314:	ed97 4a01 	vldr	s8, [r7, #4]
 8010318:	ee66 6a28 	vmul.f32	s13, s12, s17
 801031c:	edd0 5a00 	vldr	s11, [r0]
 8010320:	ed95 6a01 	vldr	s12, [r5, #4]
 8010324:	ee27 7a28 	vmul.f32	s14, s14, s17
 8010328:	edd2 3a01 	vldr	s7, [r2, #4]
 801032c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8010330:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8010334:	ed96 1a01 	vldr	s2, [r6, #4]
 8010338:	ee33 0ac4 	vsub.f32	s0, s7, s8
 801033c:	edd4 0a01 	vldr	s1, [r4, #4]
 8010340:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010344:	eddc 6a00 	vldr	s13, [ip]
 8010348:	ee75 5a86 	vadd.f32	s11, s11, s12
 801034c:	ed91 6a00 	vldr	s12, [r1]
 8010350:	ee73 3a84 	vadd.f32	s7, s7, s8
 8010354:	ee74 1a80 	vadd.f32	s3, s9, s0
 8010358:	ee36 4a81 	vadd.f32	s8, s13, s2
 801035c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010360:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8010364:	ee36 1a20 	vadd.f32	s2, s12, s1
 8010368:	ee61 1aa8 	vmul.f32	s3, s3, s17
 801036c:	ee36 6a60 	vsub.f32	s12, s12, s1
 8010370:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8010374:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8010378:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801037c:	ee74 3a01 	vadd.f32	s7, s8, s2
 8010380:	ee34 4a41 	vsub.f32	s8, s8, s2
 8010384:	ee36 1a21 	vadd.f32	s2, s12, s3
 8010388:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801038c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8010390:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8010394:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8010398:	ed8c 0a00 	vstr	s0, [ip]
 801039c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80103a0:	449c      	add	ip, r3
 80103a2:	ee75 4a07 	vadd.f32	s9, s10, s14
 80103a6:	edc6 3a01 	vstr	s7, [r6, #4]
 80103aa:	ee35 7a47 	vsub.f32	s14, s10, s14
 80103ae:	441e      	add	r6, r3
 80103b0:	ee32 5a25 	vadd.f32	s10, s4, s11
 80103b4:	ee72 5a65 	vsub.f32	s11, s4, s11
 80103b8:	ee72 3a81 	vadd.f32	s7, s5, s2
 80103bc:	ed01 5a01 	vstr	s10, [r1, #-4]
 80103c0:	ee34 2a43 	vsub.f32	s4, s8, s6
 80103c4:	edc4 5a00 	vstr	s11, [r4]
 80103c8:	ee37 5a86 	vadd.f32	s10, s15, s12
 80103cc:	ee71 5ae4 	vsub.f32	s11, s3, s9
 80103d0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80103d4:	ed81 2a00 	vstr	s4, [r1]
 80103d8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 80103dc:	4419      	add	r1, r3
 80103de:	ee33 4a04 	vadd.f32	s8, s6, s8
 80103e2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 80103e6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 80103ea:	ee37 7a26 	vadd.f32	s14, s14, s13
 80103ee:	ed84 4a01 	vstr	s8, [r4, #4]
 80103f2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80103f6:	441c      	add	r4, r3
 80103f8:	edc7 2a00 	vstr	s5, [r7]
 80103fc:	ed85 5a00 	vstr	s10, [r5]
 8010400:	edc2 7a00 	vstr	s15, [r2]
 8010404:	edc0 5a00 	vstr	s11, [r0]
 8010408:	4418      	add	r0, r3
 801040a:	edc7 4a01 	vstr	s9, [r7, #4]
 801040e:	441f      	add	r7, r3
 8010410:	ed85 6a01 	vstr	s12, [r5, #4]
 8010414:	441d      	add	r5, r3
 8010416:	ed82 7a01 	vstr	s14, [r2, #4]
 801041a:	441a      	add	r2, r3
 801041c:	f63f af44 	bhi.w	80102a8 <arm_radix8_butterfly_f32+0x8c>
 8010420:	469c      	mov	ip, r3
 8010422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010424:	2b07      	cmp	r3, #7
 8010426:	f240 81b6 	bls.w	8010796 <arm_radix8_butterfly_f32+0x57a>
 801042a:	9a02      	ldr	r2, [sp, #8]
 801042c:	f109 0608 	add.w	r6, r9, #8
 8010430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010432:	f108 0408 	add.w	r4, r8, #8
 8010436:	3208      	adds	r2, #8
 8010438:	9f06      	ldr	r7, [sp, #24]
 801043a:	9d04      	ldr	r5, [sp, #16]
 801043c:	189a      	adds	r2, r3, r2
 801043e:	3708      	adds	r7, #8
 8010440:	3508      	adds	r5, #8
 8010442:	9807      	ldr	r0, [sp, #28]
 8010444:	920c      	str	r2, [sp, #48]	; 0x30
 8010446:	199a      	adds	r2, r3, r6
 8010448:	9905      	ldr	r1, [sp, #20]
 801044a:	3008      	adds	r0, #8
 801044c:	920b      	str	r2, [sp, #44]	; 0x2c
 801044e:	19da      	adds	r2, r3, r7
 8010450:	310c      	adds	r1, #12
 8010452:	920a      	str	r2, [sp, #40]	; 0x28
 8010454:	195a      	adds	r2, r3, r5
 8010456:	9209      	str	r2, [sp, #36]	; 0x24
 8010458:	191a      	adds	r2, r3, r4
 801045a:	9208      	str	r2, [sp, #32]
 801045c:	181a      	adds	r2, r3, r0
 801045e:	9207      	str	r2, [sp, #28]
 8010460:	185a      	adds	r2, r3, r1
 8010462:	330c      	adds	r3, #12
 8010464:	9205      	str	r2, [sp, #20]
 8010466:	9306      	str	r3, [sp, #24]
 8010468:	2301      	movs	r3, #1
 801046a:	9304      	str	r3, [sp, #16]
 801046c:	2300      	movs	r3, #0
 801046e:	930d      	str	r3, [sp, #52]	; 0x34
 8010470:	4663      	mov	r3, ip
 8010472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010474:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010476:	f8dd c014 	ldr.w	ip, [sp, #20]
 801047a:	440a      	add	r2, r1
 801047c:	9f06      	ldr	r7, [sp, #24]
 801047e:	9e07      	ldr	r6, [sp, #28]
 8010480:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8010484:	920d      	str	r2, [sp, #52]	; 0x34
 8010486:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 801048a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801048c:	9d08      	ldr	r5, [sp, #32]
 801048e:	4442      	add	r2, r8
 8010490:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010492:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010494:	eb02 0108 	add.w	r1, r2, r8
 8010498:	ed92 ea00 	vldr	s28, [r2]
 801049c:	eb01 0208 	add.w	r2, r1, r8
 80104a0:	edd1 da00 	vldr	s27, [r1]
 80104a4:	eb02 0108 	add.w	r1, r2, r8
 80104a8:	ed92 da00 	vldr	s26, [r2]
 80104ac:	eb01 0208 	add.w	r2, r1, r8
 80104b0:	edd1 ca00 	vldr	s25, [r1]
 80104b4:	eb02 0108 	add.w	r1, r2, r8
 80104b8:	ed92 ca00 	vldr	s24, [r2]
 80104bc:	eb01 0208 	add.w	r2, r1, r8
 80104c0:	edd1 ba00 	vldr	s23, [r1]
 80104c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104c6:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 80104ca:	ed92 ba00 	vldr	s22, [r2]
 80104ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104d0:	eb0e 0908 	add.w	r9, lr, r8
 80104d4:	910e      	str	r1, [sp, #56]	; 0x38
 80104d6:	9201      	str	r2, [sp, #4]
 80104d8:	eb09 0208 	add.w	r2, r9, r8
 80104dc:	ed99 aa01 	vldr	s20, [r9, #4]
 80104e0:	edde aa01 	vldr	s21, [lr, #4]
 80104e4:	eb02 0908 	add.w	r9, r2, r8
 80104e8:	edd2 9a01 	vldr	s19, [r2, #4]
 80104ec:	f8dd e010 	ldr.w	lr, [sp, #16]
 80104f0:	eb09 0208 	add.w	r2, r9, r8
 80104f4:	ed99 9a01 	vldr	s18, [r9, #4]
 80104f8:	eb02 0908 	add.w	r9, r2, r8
 80104fc:	ed92 8a01 	vldr	s16, [r2, #4]
 8010500:	9a01      	ldr	r2, [sp, #4]
 8010502:	edd9 7a01 	vldr	s15, [r9, #4]
 8010506:	44c8      	add	r8, r9
 8010508:	edcd 7a02 	vstr	s15, [sp, #8]
 801050c:	edd8 7a01 	vldr	s15, [r8, #4]
 8010510:	edcd 7a03 	vstr	s15, [sp, #12]
 8010514:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010516:	e001      	b.n	801051c <arm_radix8_butterfly_f32+0x300>
 8010518:	3f3504f3 	.word	0x3f3504f3
 801051c:	ed92 7a00 	vldr	s14, [r2]
 8010520:	44de      	add	lr, fp
 8010522:	ed17 1a01 	vldr	s2, [r7, #-4]
 8010526:	ed90 5a00 	vldr	s10, [r0]
 801052a:	45f2      	cmp	sl, lr
 801052c:	ed1c fa01 	vldr	s30, [ip, #-4]
 8010530:	ee31 3a07 	vadd.f32	s6, s2, s14
 8010534:	edd6 5a00 	vldr	s11, [r6]
 8010538:	ee31 1a47 	vsub.f32	s2, s2, s14
 801053c:	edd4 7a00 	vldr	s15, [r4]
 8010540:	ed95 7a00 	vldr	s14, [r5]
 8010544:	ed91 4a00 	vldr	s8, [r1]
 8010548:	ee3f 6a27 	vadd.f32	s12, s30, s15
 801054c:	ee77 6a25 	vadd.f32	s13, s14, s11
 8010550:	edd7 ea00 	vldr	s29, [r7]
 8010554:	ee74 fa05 	vadd.f32	s31, s8, s10
 8010558:	ee73 1a06 	vadd.f32	s3, s6, s12
 801055c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8010560:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8010564:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010568:	ee33 3a46 	vsub.f32	s6, s6, s12
 801056c:	ee31 6a85 	vadd.f32	s12, s3, s10
 8010570:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8010574:	ee34 fa07 	vadd.f32	s30, s8, s14
 8010578:	ed07 6a01 	vstr	s12, [r7, #-4]
 801057c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010580:	edd5 3a01 	vldr	s7, [r5, #4]
 8010584:	ee7f fae6 	vsub.f32	s31, s31, s13
 8010588:	ed90 7a01 	vldr	s14, [r0, #4]
 801058c:	ee2f fa28 	vmul.f32	s30, s30, s17
 8010590:	edd1 5a01 	vldr	s11, [r1, #4]
 8010594:	ee24 4a28 	vmul.f32	s8, s8, s17
 8010598:	ed96 6a01 	vldr	s12, [r6, #4]
 801059c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80105a0:	ee75 0ac7 	vsub.f32	s1, s11, s14
 80105a4:	edd2 6a01 	vldr	s13, [r2, #4]
 80105a8:	ee73 2ac6 	vsub.f32	s5, s7, s12
 80105ac:	edd4 4a01 	vldr	s9, [r4, #4]
 80105b0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80105b4:	ed9c 7a00 	vldr	s14, [ip]
 80105b8:	ee37 2a8f 	vadd.f32	s4, s15, s30
 80105bc:	ee33 6a86 	vadd.f32	s12, s7, s12
 80105c0:	ee37 facf 	vsub.f32	s30, s15, s30
 80105c4:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 80105c8:	ee70 7ae2 	vsub.f32	s15, s1, s5
 80105cc:	ee7e eae6 	vsub.f32	s29, s29, s13
 80105d0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 80105d4:	ee77 6a24 	vadd.f32	s13, s14, s9
 80105d8:	ee75 0a86 	vadd.f32	s1, s11, s12
 80105dc:	ee37 7a64 	vsub.f32	s14, s14, s9
 80105e0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80105e4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80105e8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 80105ec:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80105f0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80105f4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 80105f8:	ee77 4a22 	vadd.f32	s9, s14, s5
 80105fc:	ee7e eae7 	vsub.f32	s29, s29, s15
 8010600:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010604:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010608:	ee31 7a44 	vsub.f32	s14, s2, s8
 801060c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010610:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010614:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010618:	ee33 3aef 	vsub.f32	s6, s7, s31
 801061c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8010620:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8010624:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8010628:	ee72 5a25 	vadd.f32	s11, s4, s11
 801062c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010630:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8010634:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010638:	ee37 7a67 	vsub.f32	s14, s14, s15
 801063c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8010640:	ee2c fa85 	vmul.f32	s30, s25, s10
 8010644:	ee69 ea01 	vmul.f32	s29, s18, s2
 8010648:	ee29 5a05 	vmul.f32	s10, s18, s10
 801064c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8010650:	ee6d faa1 	vmul.f32	s31, s27, s3
 8010654:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010658:	ee6a 1a21 	vmul.f32	s3, s20, s3
 801065c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8010660:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8010664:	edc7 0a00 	vstr	s1, [r7]
 8010668:	ee7f ea2e 	vadd.f32	s29, s30, s29
 801066c:	441f      	add	r7, r3
 801066e:	ee2a faa3 	vmul.f32	s30, s21, s7
 8010672:	ee31 5a45 	vsub.f32	s10, s2, s10
 8010676:	ee6e 3a23 	vmul.f32	s7, s28, s7
 801067a:	edc2 ea00 	vstr	s29, [r2]
 801067e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8010682:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010686:	ed82 5a01 	vstr	s10, [r2, #4]
 801068a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801068e:	edcd 3a01 	vstr	s7, [sp, #4]
 8010692:	ed9d 5a03 	vldr	s10, [sp, #12]
 8010696:	ee6b ea86 	vmul.f32	s29, s23, s12
 801069a:	eddd 3a02 	vldr	s7, [sp, #8]
 801069e:	ee6b fa24 	vmul.f32	s31, s22, s9
 80106a2:	ed0c 0a01 	vstr	s0, [ip, #-4]
 80106a6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80106aa:	ed8c 3a00 	vstr	s6, [ip]
 80106ae:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80106b2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80106b6:	eddd 3a01 	vldr	s7, [sp, #4]
 80106ba:	ee25 5a25 	vmul.f32	s10, s10, s11
 80106be:	441a      	add	r2, r3
 80106c0:	ee2c 0a22 	vmul.f32	s0, s24, s5
 80106c4:	449c      	add	ip, r3
 80106c6:	ee68 1a04 	vmul.f32	s3, s16, s8
 80106ca:	ee70 0a8f 	vadd.f32	s1, s1, s30
 80106ce:	ee2d 3a07 	vmul.f32	s6, s26, s14
 80106d2:	ee29 faa7 	vmul.f32	s30, s19, s15
 80106d6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 80106da:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 80106de:	ee6b 5a25 	vmul.f32	s11, s22, s11
 80106e2:	ee68 2a22 	vmul.f32	s5, s16, s5
 80106e6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 80106ea:	ee29 7a87 	vmul.f32	s14, s19, s14
 80106ee:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80106f2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80106f6:	ee7e ea81 	vadd.f32	s29, s29, s2
 80106fa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80106fe:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8010702:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010706:	edc4 ea00 	vstr	s29, [r4]
 801070a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801070e:	ed84 6a01 	vstr	s12, [r4, #4]
 8010712:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010716:	edc1 0a00 	vstr	s1, [r1]
 801071a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 801071e:	edc1 3a01 	vstr	s7, [r1, #4]
 8010722:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010726:	ed86 5a00 	vstr	s10, [r6]
 801072a:	edc6 4a01 	vstr	s9, [r6, #4]
 801072e:	4419      	add	r1, r3
 8010730:	ed80 0a00 	vstr	s0, [r0]
 8010734:	441c      	add	r4, r3
 8010736:	edc0 2a01 	vstr	s5, [r0, #4]
 801073a:	441e      	add	r6, r3
 801073c:	ed85 3a00 	vstr	s6, [r5]
 8010740:	4418      	add	r0, r3
 8010742:	ed85 7a01 	vstr	s14, [r5, #4]
 8010746:	441d      	add	r5, r3
 8010748:	f63f aee8 	bhi.w	801051c <arm_radix8_butterfly_f32+0x300>
 801074c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801074e:	9a04      	ldr	r2, [sp, #16]
 8010750:	3108      	adds	r1, #8
 8010752:	3201      	adds	r2, #1
 8010754:	910c      	str	r1, [sp, #48]	; 0x30
 8010756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010758:	9204      	str	r2, [sp, #16]
 801075a:	3108      	adds	r1, #8
 801075c:	910b      	str	r1, [sp, #44]	; 0x2c
 801075e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010760:	3108      	adds	r1, #8
 8010762:	910a      	str	r1, [sp, #40]	; 0x28
 8010764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010766:	3108      	adds	r1, #8
 8010768:	9109      	str	r1, [sp, #36]	; 0x24
 801076a:	9908      	ldr	r1, [sp, #32]
 801076c:	3108      	adds	r1, #8
 801076e:	9108      	str	r1, [sp, #32]
 8010770:	9907      	ldr	r1, [sp, #28]
 8010772:	3108      	adds	r1, #8
 8010774:	9107      	str	r1, [sp, #28]
 8010776:	9906      	ldr	r1, [sp, #24]
 8010778:	3108      	adds	r1, #8
 801077a:	9106      	str	r1, [sp, #24]
 801077c:	9905      	ldr	r1, [sp, #20]
 801077e:	3108      	adds	r1, #8
 8010780:	9105      	str	r1, [sp, #20]
 8010782:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010784:	4291      	cmp	r1, r2
 8010786:	f47f ae74 	bne.w	8010472 <arm_radix8_butterfly_f32+0x256>
 801078a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801078c:	468b      	mov	fp, r1
 801078e:	00db      	lsls	r3, r3, #3
 8010790:	b29b      	uxth	r3, r3
 8010792:	9310      	str	r3, [sp, #64]	; 0x40
 8010794:	e551      	b.n	801023a <arm_radix8_butterfly_f32+0x1e>
 8010796:	b015      	add	sp, #84	; 0x54
 8010798:	ecbd 8b10 	vpop	{d8-d15}
 801079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107a0 <__errno>:
 80107a0:	4b01      	ldr	r3, [pc, #4]	; (80107a8 <__errno+0x8>)
 80107a2:	6818      	ldr	r0, [r3, #0]
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop
 80107a8:	24000018 	.word	0x24000018

080107ac <__libc_init_array>:
 80107ac:	b570      	push	{r4, r5, r6, lr}
 80107ae:	4d0d      	ldr	r5, [pc, #52]	; (80107e4 <__libc_init_array+0x38>)
 80107b0:	4c0d      	ldr	r4, [pc, #52]	; (80107e8 <__libc_init_array+0x3c>)
 80107b2:	1b64      	subs	r4, r4, r5
 80107b4:	10a4      	asrs	r4, r4, #2
 80107b6:	2600      	movs	r6, #0
 80107b8:	42a6      	cmp	r6, r4
 80107ba:	d109      	bne.n	80107d0 <__libc_init_array+0x24>
 80107bc:	4d0b      	ldr	r5, [pc, #44]	; (80107ec <__libc_init_array+0x40>)
 80107be:	4c0c      	ldr	r4, [pc, #48]	; (80107f0 <__libc_init_array+0x44>)
 80107c0:	f000 f8e0 	bl	8010984 <_init>
 80107c4:	1b64      	subs	r4, r4, r5
 80107c6:	10a4      	asrs	r4, r4, #2
 80107c8:	2600      	movs	r6, #0
 80107ca:	42a6      	cmp	r6, r4
 80107cc:	d105      	bne.n	80107da <__libc_init_array+0x2e>
 80107ce:	bd70      	pop	{r4, r5, r6, pc}
 80107d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80107d4:	4798      	blx	r3
 80107d6:	3601      	adds	r6, #1
 80107d8:	e7ee      	b.n	80107b8 <__libc_init_array+0xc>
 80107da:	f855 3b04 	ldr.w	r3, [r5], #4
 80107de:	4798      	blx	r3
 80107e0:	3601      	adds	r6, #1
 80107e2:	e7f2      	b.n	80107ca <__libc_init_array+0x1e>
 80107e4:	08023c70 	.word	0x08023c70
 80107e8:	08023c70 	.word	0x08023c70
 80107ec:	08023c70 	.word	0x08023c70
 80107f0:	08023c74 	.word	0x08023c74

080107f4 <memcpy>:
 80107f4:	440a      	add	r2, r1
 80107f6:	4291      	cmp	r1, r2
 80107f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80107fc:	d100      	bne.n	8010800 <memcpy+0xc>
 80107fe:	4770      	bx	lr
 8010800:	b510      	push	{r4, lr}
 8010802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010806:	f803 4f01 	strb.w	r4, [r3, #1]!
 801080a:	4291      	cmp	r1, r2
 801080c:	d1f9      	bne.n	8010802 <memcpy+0xe>
 801080e:	bd10      	pop	{r4, pc}

08010810 <memset>:
 8010810:	4402      	add	r2, r0
 8010812:	4603      	mov	r3, r0
 8010814:	4293      	cmp	r3, r2
 8010816:	d100      	bne.n	801081a <memset+0xa>
 8010818:	4770      	bx	lr
 801081a:	f803 1b01 	strb.w	r1, [r3], #1
 801081e:	e7f9      	b.n	8010814 <memset+0x4>

08010820 <logf>:
 8010820:	ee10 3a10 	vmov	r3, s0
 8010824:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010828:	b410      	push	{r4}
 801082a:	d055      	beq.n	80108d8 <logf+0xb8>
 801082c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8010830:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8010834:	d31a      	bcc.n	801086c <logf+0x4c>
 8010836:	005a      	lsls	r2, r3, #1
 8010838:	d104      	bne.n	8010844 <logf+0x24>
 801083a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801083e:	2001      	movs	r0, #1
 8010840:	f000 b880 	b.w	8010944 <__math_divzerof>
 8010844:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010848:	d043      	beq.n	80108d2 <logf+0xb2>
 801084a:	2b00      	cmp	r3, #0
 801084c:	db02      	blt.n	8010854 <logf+0x34>
 801084e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8010852:	d303      	bcc.n	801085c <logf+0x3c>
 8010854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010858:	f000 b884 	b.w	8010964 <__math_invalidf>
 801085c:	eddf 7a20 	vldr	s15, [pc, #128]	; 80108e0 <logf+0xc0>
 8010860:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010864:	ee10 3a10 	vmov	r3, s0
 8010868:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 801086c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8010870:	491c      	ldr	r1, [pc, #112]	; (80108e4 <logf+0xc4>)
 8010872:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8010876:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801087a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801087e:	0dd4      	lsrs	r4, r2, #23
 8010880:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8010884:	05e4      	lsls	r4, r4, #23
 8010886:	ed90 6b00 	vldr	d6, [r0]
 801088a:	1b1b      	subs	r3, r3, r4
 801088c:	ee07 3a90 	vmov	s15, r3
 8010890:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8010894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010898:	15d2      	asrs	r2, r2, #23
 801089a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801089e:	ed90 6b02 	vldr	d6, [r0, #8]
 80108a2:	ee20 4b00 	vmul.f64	d4, d0, d0
 80108a6:	ee07 2a90 	vmov	s15, r2
 80108aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80108ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 80108b2:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 80108b6:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 80108ba:	eea5 7b00 	vfma.f64	d7, d5, d0
 80108be:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80108c2:	ee30 0b06 	vadd.f64	d0, d0, d6
 80108c6:	eea5 7b04 	vfma.f64	d7, d5, d4
 80108ca:	eea4 0b07 	vfma.f64	d0, d4, d7
 80108ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80108d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80108e8 <logf+0xc8>
 80108dc:	e7f9      	b.n	80108d2 <logf+0xb2>
 80108de:	bf00      	nop
 80108e0:	4b000000 	.word	0x4b000000
 80108e4:	08023b48 	.word	0x08023b48
 80108e8:	00000000 	.word	0x00000000

080108ec <sqrtf>:
 80108ec:	b508      	push	{r3, lr}
 80108ee:	ed2d 8b02 	vpush	{d8}
 80108f2:	eeb0 8a40 	vmov.f32	s16, s0
 80108f6:	f000 f817 	bl	8010928 <__ieee754_sqrtf>
 80108fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80108fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010902:	d60c      	bvs.n	801091e <sqrtf+0x32>
 8010904:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010924 <sqrtf+0x38>
 8010908:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801090c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010910:	d505      	bpl.n	801091e <sqrtf+0x32>
 8010912:	f7ff ff45 	bl	80107a0 <__errno>
 8010916:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801091a:	2321      	movs	r3, #33	; 0x21
 801091c:	6003      	str	r3, [r0, #0]
 801091e:	ecbd 8b02 	vpop	{d8}
 8010922:	bd08      	pop	{r3, pc}
 8010924:	00000000 	.word	0x00000000

08010928 <__ieee754_sqrtf>:
 8010928:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801092c:	4770      	bx	lr

0801092e <with_errnof>:
 801092e:	b513      	push	{r0, r1, r4, lr}
 8010930:	4604      	mov	r4, r0
 8010932:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010936:	f7ff ff33 	bl	80107a0 <__errno>
 801093a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801093e:	6004      	str	r4, [r0, #0]
 8010940:	b002      	add	sp, #8
 8010942:	bd10      	pop	{r4, pc}

08010944 <__math_divzerof>:
 8010944:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010948:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801094c:	2800      	cmp	r0, #0
 801094e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8010952:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010960 <__math_divzerof+0x1c>
 8010956:	2022      	movs	r0, #34	; 0x22
 8010958:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801095c:	f7ff bfe7 	b.w	801092e <with_errnof>
 8010960:	00000000 	.word	0x00000000

08010964 <__math_invalidf>:
 8010964:	eef0 7a40 	vmov.f32	s15, s0
 8010968:	ee30 7a40 	vsub.f32	s14, s0, s0
 801096c:	eef4 7a67 	vcmp.f32	s15, s15
 8010970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010974:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8010978:	d602      	bvs.n	8010980 <__math_invalidf+0x1c>
 801097a:	2021      	movs	r0, #33	; 0x21
 801097c:	f7ff bfd7 	b.w	801092e <with_errnof>
 8010980:	4770      	bx	lr
	...

08010984 <_init>:
 8010984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010986:	bf00      	nop
 8010988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801098a:	bc08      	pop	{r3}
 801098c:	469e      	mov	lr, r3
 801098e:	4770      	bx	lr

08010990 <_fini>:
 8010990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010992:	bf00      	nop
 8010994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010996:	bc08      	pop	{r3}
 8010998:	469e      	mov	lr, r3
 801099a:	4770      	bx	lr
