
RTOS_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cdc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000132c8  08010f90  08010f90  00020f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024258  08024258  00034258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08024260  08024260  00034260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024264  08024264  00034264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08024268  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001bc60  2400007c  080242e4  0004007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401bcdc  080242e4  0004bcdc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fbc0  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005229  00000000  00000000  0006fc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  00074e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c70  00000000  00000000  00076ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005435  00000000  00000000  00078958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026669  00000000  00000000  0007dd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160b51  00000000  00000000  000a43f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c5  00000000  00000000  00204f47  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008234  00000000  00000000  0020500c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000038ec  00000000  00000000  0020d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010f74 	.word	0x08010f74

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08010f74 	.word	0x08010f74

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 fb02 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f8a6 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fb02 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fae0 	bl	8000bc8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fad6 	bl	8000bb8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060c:	f000 f914 	bl	8000838 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 fa86 	bl	8000b20 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000614:	f000 f98a 	bl	800092c <MX_TIM1_Init>
  MX_UART4_Init();
 8000618:	f000 fa34 	bl	8000a84 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800061c:	4833      	ldr	r0, [pc, #204]	; (80006ec <main+0xf8>)
 800061e:	f009 fac3 	bl	8009ba8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000622:	2100      	movs	r1, #0
 8000624:	4831      	ldr	r0, [pc, #196]	; (80006ec <main+0xf8>)
 8000626:	f009 fc09 	bl	8009e3c <HAL_TIM_OC_Start>

  //float32_t maxValue;

  // Initialize RFFT
  arm_rfft_fast_init_f32(&fft_handler, REAL_FFT_SIZE);
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	4830      	ldr	r0, [pc, #192]	; (80006f0 <main+0xfc>)
 8000630:	f00f fc20 	bl	800fe74 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000634:	f00c f84e 	bl	800c6d4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AudioCapSem01 */
  AudioCapSem01Handle = osSemaphoreNew(1, 1, &AudioCapSem01_attributes);
 8000638:	4a2e      	ldr	r2, [pc, #184]	; (80006f4 <main+0x100>)
 800063a:	2101      	movs	r1, #1
 800063c:	2001      	movs	r0, #1
 800063e:	f00c f925 	bl	800c88c <osSemaphoreNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <main+0x104>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of FFTSem02 */
  FFTSem02Handle = osSemaphoreNew(1, 1, &FFTSem02_attributes);
 8000648:	4a2c      	ldr	r2, [pc, #176]	; (80006fc <main+0x108>)
 800064a:	2101      	movs	r1, #1
 800064c:	2001      	movs	r0, #1
 800064e:	f00c f91d 	bl	800c88c <osSemaphoreNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <main+0x10c>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of SendDataSem03 */
  SendDataSem03Handle = osSemaphoreNew(1, 1, &SendDataSem03_attributes);
 8000658:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <main+0x110>)
 800065a:	2101      	movs	r1, #1
 800065c:	2001      	movs	r0, #1
 800065e:	f00c f915 	bl	800c88c <osSemaphoreNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a28      	ldr	r2, [pc, #160]	; (8000708 <main+0x114>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Buffer0Sem04 */
  ADC_Buffer0Sem04Handle = osSemaphoreNew(1, 1, &ADC_Buffer0Sem04_attributes);
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <main+0x118>)
 800066a:	2101      	movs	r1, #1
 800066c:	2001      	movs	r0, #1
 800066e:	f00c f90d 	bl	800c88c <osSemaphoreNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <main+0x11c>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Buffer1Sem05 */
  ADC_Buffer1Sem05Handle = osSemaphoreNew(1, 1, &ADC_Buffer1Sem05_attributes);
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <main+0x120>)
 800067a:	2101      	movs	r1, #1
 800067c:	2001      	movs	r0, #1
 800067e:	f00c f905 	bl	800c88c <osSemaphoreNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a24      	ldr	r2, [pc, #144]	; (8000718 <main+0x124>)
 8000686:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  // Initialize Sem values other than AudioCap to 0 before starting code
  osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <main+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f04f 31ff 	mov.w	r1, #4294967295
 8000690:	4618      	mov	r0, r3
 8000692:	f00c f985 	bl	800c9a0 <osSemaphoreAcquire>
  osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <main+0x114>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f04f 31ff 	mov.w	r1, #4294967295
 800069e:	4618      	mov	r0, r3
 80006a0:	f00c f97e 	bl	800c9a0 <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006a4:	4a1d      	ldr	r2, [pc, #116]	; (800071c <main+0x128>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <main+0x12c>)
 80006aa:	f00c f85d 	bl	800c768 <osThreadNew>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <main+0x130>)
 80006b2:	6013      	str	r3, [r2, #0]

  /* creation of AudioCapTask */
  AudioCapTaskHandle = osThreadNew(StartAudioCapTask, NULL, &AudioCapTask_attributes);
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <main+0x134>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	481c      	ldr	r0, [pc, #112]	; (800072c <main+0x138>)
 80006ba:	f00c f855 	bl	800c768 <osThreadNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <main+0x13c>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <main+0x140>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	481b      	ldr	r0, [pc, #108]	; (8000738 <main+0x144>)
 80006ca:	f00c f84d 	bl	800c768 <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <main+0x148>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of SendDataTask */
  SendDataTaskHandle = osThreadNew(StartSendDataTask, NULL, &SendDataTask_attributes);
 80006d4:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <main+0x14c>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	481a      	ldr	r0, [pc, #104]	; (8000744 <main+0x150>)
 80006da:	f00c f845 	bl	800c768 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <main+0x154>)
 80006e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e4:	f00c f81a 	bl	800c71c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0xf4>
 80006ea:	bf00      	nop
 80006ec:	24000174 	.word	0x24000174
 80006f0:	24017324 	.word	0x24017324
 80006f4:	080110c0 	.word	0x080110c0
 80006f8:	240002f8 	.word	0x240002f8
 80006fc:	080110d0 	.word	0x080110d0
 8000700:	240002fc 	.word	0x240002fc
 8000704:	080110e0 	.word	0x080110e0
 8000708:	24000300 	.word	0x24000300
 800070c:	080110f0 	.word	0x080110f0
 8000710:	24000304 	.word	0x24000304
 8000714:	08011100 	.word	0x08011100
 8000718:	24000308 	.word	0x24000308
 800071c:	08011030 	.word	0x08011030
 8000720:	0800102d 	.word	0x0800102d
 8000724:	240002e8 	.word	0x240002e8
 8000728:	08011054 	.word	0x08011054
 800072c:	08001039 	.word	0x08001039
 8000730:	240002ec 	.word	0x240002ec
 8000734:	08011078 	.word	0x08011078
 8000738:	08001159 	.word	0x08001159
 800073c:	240002f0 	.word	0x240002f0
 8000740:	0801109c 	.word	0x0801109c
 8000744:	08001281 	.word	0x08001281
 8000748:	240002f4 	.word	0x240002f4

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b09c      	sub	sp, #112	; 0x70
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	224c      	movs	r2, #76	; 0x4c
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f010 fb50 	bl	8010e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f010 fb4a 	bl	8010e00 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800076c:	4b30      	ldr	r3, [pc, #192]	; (8000830 <SystemClock_Config+0xe4>)
 800076e:	f04f 32ff 	mov.w	r2, #4294967295
 8000772:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000776:	2004      	movs	r0, #4
 8000778:	f005 fd5a 	bl	8006230 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <SystemClock_Config+0xe8>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <SystemClock_Config+0xe8>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xe8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000798:	bf00      	nop
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemClock_Config+0xe8>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a6:	d1f8      	bne.n	800079a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007a8:	2321      	movs	r3, #33	; 0x21
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007b2:	2301      	movs	r3, #1
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007c2:	2318      	movs	r3, #24
 80007c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d2:	230c      	movs	r3, #12
 80007d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 fd7e 	bl	80062e4 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ee:	f000 fef0 	bl	80015d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	233f      	movs	r3, #63	; 0x3f
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f006 f995 	bl	8006b48 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000824:	f000 fed5 	bl	80015d2 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3770      	adds	r7, #112	; 0x70
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58024400 	.word	0x58024400
 8000834:	58024800 	.word	0x58024800

08000838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <MX_ADC1_Init+0xe8>)
 800085e:	4a31      	ldr	r2, [pc, #196]	; (8000924 <MX_ADC1_Init+0xec>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000862:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <MX_ADC1_Init+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_ADC1_Init+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <MX_ADC1_Init+0xe8>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_ADC1_Init+0xe8>)
 8000876:	2204      	movs	r2, #4
 8000878:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_ADC1_Init+0xe8>)
 800087c:	2200      	movs	r2, #0
 800087e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_ADC1_Init+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_ADC1_Init+0xe8>)
 8000888:	2201      	movs	r2, #1
 800088a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_ADC1_Init+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <MX_ADC1_Init+0xe8>)
 8000894:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_ADC1_Init+0xe8>)
 800089c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_ADC1_Init+0xe8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_ADC1_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_ADC1_Init+0xe8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_ADC1_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	4818      	ldr	r0, [pc, #96]	; (8000920 <MX_ADC1_Init+0xe8>)
 80008be:	f001 fc33 	bl	8002128 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008c8:	f000 fe83 	bl	80015d2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <MX_ADC1_Init+0xe8>)
 80008d8:	f002 fcb0 	bl	800323c <HAL_ADCEx_MultiModeConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008e2:	f000 fe76 	bl	80015d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_ADC1_Init+0xf0>)
 80008e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ea:	2306      	movs	r3, #6
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f8:	2304      	movs	r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_ADC1_Init+0xe8>)
 800090a:	f001 fe91 	bl	8002630 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000914:	f000 fe5d 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	24000098 	.word	0x24000098
 8000924:	40022000 	.word	0x40022000
 8000928:	3ef08000 	.word	0x3ef08000

0800092c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	; 0x70
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2234      	movs	r2, #52	; 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f010 fa4a 	bl	8010e00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b43      	ldr	r3, [pc, #268]	; (8000a7c <MX_TIM1_Init+0x150>)
 800096e:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <MX_TIM1_Init+0x154>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b40      	ldr	r3, [pc, #256]	; (8000a7c <MX_TIM1_Init+0x150>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000980:	f241 726f 	movw	r2, #5999	; 0x176f
 8000984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098c:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_TIM1_Init+0x150>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000998:	4838      	ldr	r0, [pc, #224]	; (8000a7c <MX_TIM1_Init+0x150>)
 800099a:	f009 f8ad 	bl	8009af8 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 fe15 	bl	80015d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009b2:	4619      	mov	r1, r3
 80009b4:	4831      	ldr	r0, [pc, #196]	; (8000a7c <MX_TIM1_Init+0x150>)
 80009b6:	f009 fce9 	bl	800a38c <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009c0:	f000 fe07 	bl	80015d2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009c4:	482d      	ldr	r0, [pc, #180]	; (8000a7c <MX_TIM1_Init+0x150>)
 80009c6:	f009 f9d7 	bl	8009d78 <HAL_TIM_OC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009d0:	f000 fdff 	bl	80015d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009d4:	2320      	movs	r3, #32
 80009d6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e4:	4619      	mov	r1, r3
 80009e6:	4825      	ldr	r0, [pc, #148]	; (8000a7c <MX_TIM1_Init+0x150>)
 80009e8:	f00a fa24 	bl	800ae34 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009f2:	f000 fdee 	bl	80015d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009f6:	2330      	movs	r3, #48	; 0x30
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000a1c:	f009 fc3c 	bl	800a298 <HAL_TIM_OC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a26:	f000 fdd4 	bl	80015d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000a60:	f00a fa76 	bl	800af50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a6a:	f000 fdb2 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM1_Init+0x150>)
 8000a70:	f000 fe9a 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8000a74:	bf00      	nop
 8000a76:	3770      	adds	r7, #112	; 0x70
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	24000174 	.word	0x24000174
 8000a80:	40010000 	.word	0x40010000

08000a84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_UART4_Init+0x90>)
 8000a8a:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <MX_UART4_Init+0x94>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 430000;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_UART4_Init+0x90>)
 8000a90:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <MX_UART4_Init+0x98>)
 8000a92:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_UART4_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_UART4_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_UART4_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_UART4_Init+0x90>)
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_UART4_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_UART4_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_UART4_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_UART4_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_UART4_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <MX_UART4_Init+0x90>)
 8000acc:	f00a fb4e 	bl	800b16c <HAL_HalfDuplex_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8000ad6:	f000 fd7c 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_UART4_Init+0x90>)
 8000ade:	f00b fcea 	bl	800c4b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8000ae8:	f000 fd73 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_UART4_Init+0x90>)
 8000af0:	f00b fd1f 	bl	800c532 <HAL_UARTEx_SetRxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8000afa:	f000 fd6a 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_UART4_Init+0x90>)
 8000b00:	f00b fca0 	bl	800c444 <HAL_UARTEx_DisableFifoMode>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8000b0a:	f000 fd62 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	240001c0 	.word	0x240001c0
 8000b18:	40004c00 	.word	0x40004c00
 8000b1c:	00068fb0 	.word	0x00068fb0

08000b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <MX_USART3_UART_Init+0x94>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b6a:	f00a faaf 	bl	800b0cc <HAL_UART_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b74:	f000 fd2d 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b7c:	f00b fc9b 	bl	800c4b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b86:	f000 fd24 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f00b fcd0 	bl	800c532 <HAL_UARTEx_SetRxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f000 fd1b 	bl	80015d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_USART3_UART_Init+0x90>)
 8000b9e:	f00b fc51 	bl	800c444 <HAL_UARTEx_DisableFifoMode>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba8:	f000 fd13 	bl	80015d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	24000254 	.word	0x24000254
 8000bb4:	40004800 	.word	0x40004800

08000bb8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_DMA_Init+0x3c>)
 8000bd0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <MX_DMA_Init+0x3c>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_DMA_Init+0x3c>)
 8000be0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2105      	movs	r1, #5
 8000bf0:	200b      	movs	r0, #11
 8000bf2:	f002 fc77 	bl	80034e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bf6:	200b      	movs	r0, #11
 8000bf8:	f002 fc8e 	bl	8003518 <HAL_NVIC_EnableIRQ>

}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	58024400 	.word	0x58024400

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b80      	ldr	r3, [pc, #512]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c24:	4a7e      	ldr	r2, [pc, #504]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c2e:	4b7c      	ldr	r3, [pc, #496]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	623b      	str	r3, [r7, #32]
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3c:	4b78      	ldr	r3, [pc, #480]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c42:	4a77      	ldr	r2, [pc, #476]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c4c:	4b74      	ldr	r3, [pc, #464]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	4b71      	ldr	r3, [pc, #452]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c60:	4a6f      	ldr	r2, [pc, #444]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b69      	ldr	r3, [pc, #420]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7e:	4a68      	ldr	r2, [pc, #416]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b62      	ldr	r3, [pc, #392]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9c:	4a60      	ldr	r2, [pc, #384]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ca6:	4b5e      	ldr	r3, [pc, #376]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000ca8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb4:	4b5a      	ldr	r3, [pc, #360]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cba:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc4:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd8:	4a51      	ldr	r2, [pc, #324]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ce2:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000ce4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf0:	4b4b      	ldr	r3, [pc, #300]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf6:	4a4a      	ldr	r2, [pc, #296]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d00:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000d02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d14:	4843      	ldr	r0, [pc, #268]	; (8000e24 <MX_GPIO_Init+0x21c>)
 8000d16:	f005 fa57 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d20:	4841      	ldr	r0, [pc, #260]	; (8000e28 <MX_GPIO_Init+0x220>)
 8000d22:	f005 fa51 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4840      	ldr	r0, [pc, #256]	; (8000e2c <MX_GPIO_Init+0x224>)
 8000d2c:	f005 fa4c 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	483a      	ldr	r0, [pc, #232]	; (8000e30 <MX_GPIO_Init+0x228>)
 8000d46:	f005 f88f 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4830      	ldr	r0, [pc, #192]	; (8000e24 <MX_GPIO_Init+0x21c>)
 8000d64:	f005 f880 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d68:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4829      	ldr	r0, [pc, #164]	; (8000e28 <MX_GPIO_Init+0x220>)
 8000d82:	f005 f871 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4826      	ldr	r0, [pc, #152]	; (8000e34 <MX_GPIO_Init+0x22c>)
 8000d9c:	f005 f864 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4820      	ldr	r0, [pc, #128]	; (8000e38 <MX_GPIO_Init+0x230>)
 8000db6:	f005 f857 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000dcc:	230a      	movs	r3, #10
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4818      	ldr	r0, [pc, #96]	; (8000e38 <MX_GPIO_Init+0x230>)
 8000dd8:	f005 f846 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000ddc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4810      	ldr	r0, [pc, #64]	; (8000e38 <MX_GPIO_Init+0x230>)
 8000df6:	f005 f837 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_GPIO_Init+0x224>)
 8000e12:	f005 f829 	bl	8005e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58021400 	.word	0x58021400
 8000e28:	58020400 	.word	0x58020400
 8000e2c:	58021000 	.word	0x58021000
 8000e30:	58020800 	.word	0x58020800
 8000e34:	58021800 	.word	0x58021800
 8000e38:	58020000 	.word	0x58020000

08000e3c <FrequencyDetected>:
 * @brief Function detects frequencies between (0 - 8kHz) and returns boolean
 * @param
 * @retval boolean true or false
 */
bool FrequencyDetected(float32_t data[REAL_FFT_SIZE])
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	// Process the data through the RFFT module. Will output elements that are Real and Imaginary
	// in fft_bufer as a single array same size as data[].
	//arm_rfft_fast_f32(&fft_handler, (float32_t *) data, fft_buffer, ifftFlag);
	arm_rfft_fast_f32(&fft_handler, adc_buffer_float, fft_buffer, ifftFlag);
 8000e44:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <FrequencyDetected+0x100>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4a3d      	ldr	r2, [pc, #244]	; (8000f40 <FrequencyDetected+0x104>)
 8000e4c:	493d      	ldr	r1, [pc, #244]	; (8000f44 <FrequencyDetected+0x108>)
 8000e4e:	483e      	ldr	r0, [pc, #248]	; (8000f48 <FrequencyDetected+0x10c>)
 8000e50:	f00f f8f6 	bl	8010040 <arm_rfft_fast_f32>

	// Reset bin value and offset
	bin_point = 0;
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <FrequencyDetected+0x110>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]

	// Calculate magnitude for each bin using real and Imaginary numbers from fft_buffer output
	 for (int i=0; i< REAL_FFT_SIZE; i=i+2) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e02b      	b.n	8000eb8 <FrequencyDetected+0x7c>

		bin[bin_point] =((Magnitude(fft_buffer[i], fft_buffer[i+1])))-offset;
 8000e60:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <FrequencyDetected+0x104>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <FrequencyDetected+0x104>)
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	ed93 7a00 	vldr	s14, [r3]
 8000e7a:	eef0 0a47 	vmov.f32	s1, s14
 8000e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e82:	f000 f86f 	bl	8000f64 <Magnitude>
 8000e86:	eeb0 7a40 	vmov.f32	s14, s0
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <FrequencyDetected+0x114>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <FrequencyDetected+0x110>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <FrequencyDetected+0x118>)
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	edc3 7a00 	vstr	s15, [r3]
		{
			bin[bin_point]=0;
		}
		*/

		bin_point++;
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <FrequencyDetected+0x110>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <FrequencyDetected+0x110>)
 8000eb0:	6013      	str	r3, [r2, #0]
	 for (int i=0; i< REAL_FFT_SIZE; i=i+2) {
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ebe:	dbcf      	blt.n	8000e60 <FrequencyDetected+0x24>

	 }
	// Negate DC value
	bin[0] = 0;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <FrequencyDetected+0x118>)
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

	// Check highest magnitude in bins
	arm_max_f32(bin, FFT_SIZE, &maxValue, &maxIndex);
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <FrequencyDetected+0x11c>)
 8000eca:	4a24      	ldr	r2, [pc, #144]	; (8000f5c <FrequencyDetected+0x120>)
 8000ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed0:	4820      	ldr	r0, [pc, #128]	; (8000f54 <FrequencyDetected+0x118>)
 8000ed2:	f00e fe9b 	bl	800fc0c <arm_max_f32>

	// Correct index
	maxIndex += 1;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <FrequencyDetected+0x11c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <FrequencyDetected+0x11c>)
 8000ede:	6013      	str	r3, [r2, #0]

	bool threshold_crossed = false;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	74fb      	strb	r3, [r7, #19]

	// Going through bin array, checking if a magnitude crosses threshold of 40
	for(int j=1; j < (FFT_SIZE); j++){
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e012      	b.n	8000f10 <FrequencyDetected+0xd4>

		if(bin[j] >= 40)
 8000eea:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <FrequencyDetected+0x118>)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f60 <FrequencyDetected+0x124>
 8000efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	db02      	blt.n	8000f0a <FrequencyDetected+0xce>
		{
			threshold_crossed = true;
 8000f04:	2301      	movs	r3, #1
 8000f06:	74fb      	strb	r3, [r7, #19]
			break;
 8000f08:	e006      	b.n	8000f18 <FrequencyDetected+0xdc>
	for(int j=1; j < (FFT_SIZE); j++){
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f16:	dbe8      	blt.n	8000eea <FrequencyDetected+0xae>
		}
	}

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(threshold_crossed == true)
 8000f18:	7cfb      	ldrb	r3, [r7, #19]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <FrequencyDetected+0xe6>
	{
		   return true;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e007      	b.n	8000f32 <FrequencyDetected+0xf6>
	}
	// if highest magnitude is at desired bin (wanted frequency) return true
	else if(threshold_crossed == false)
 8000f22:	7cfb      	ldrb	r3, [r7, #19]
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <FrequencyDetected+0xf6>
		{
			return false;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e7ff      	b.n	8000f32 <FrequencyDetected+0xf6>
		}

	//add return statement
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2401231c 	.word	0x2401231c
 8000f40:	2400c310 	.word	0x2400c310
 8000f44:	2400030c 	.word	0x2400030c
 8000f48:	24017324 	.word	0x24017324
 8000f4c:	24012310 	.word	0x24012310
 8000f50:	24000000 	.word	0x24000000
 8000f54:	24010310 	.word	0x24010310
 8000f58:	24012318 	.word	0x24012318
 8000f5c:	24012314 	.word	0x24012314
 8000f60:	42200000 	.word	0x42200000

08000f64 <Magnitude>:
 * @brief Returns magnitude of FFT buffer outputs
 * @param Real & Complex elements of FFT output
 * @retval Magnitude at specific frequency
 */
float32_t Magnitude(float32_t real, float32_t compl)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f6e:	edc7 0a00 	vstr	s1, [r7]

	float32_t sqrt_input = (real*real + compl*compl);
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f7a:	edd7 7a00 	vldr	s15, [r7]
 8000f7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t sqrt_output = 0;
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
	float32_t magnitude = 0;
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
	float32_t log_output = 0;
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	db09      	blt.n	8000fc8 <Magnitude+0x64>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8000fb4:	ed97 0a04 	vldr	s0, [r7, #16]
 8000fb8:	f00f ff90 	bl	8010edc <sqrtf>
 8000fbc:	eef0 7a40 	vmov.f32	s15, s0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000fc6:	e004      	b.n	8000fd2 <Magnitude+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000fd0:	bf00      	nop

	arm_sqrt_f32(sqrt_input, &sqrt_output);
	log_output = logf(sqrt_output);
 8000fd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	f00f ff19 	bl	8010e10 <logf>
 8000fde:	ed87 0a05 	vstr	s0, [r7, #20]
	magnitude = 20* (log_output);
 8000fe2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fee:	edc7 7a06 	vstr	s15, [r7, #24]
	return magnitude;
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	ee07 3a90 	vmov	s15, r3
}
 8000ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_ADC_ConvCpltCallback>:
 * @brief This function executes when adc buffer is full setting flag true
 * @param
 * @retval
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800100c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <HAL_ADC_ConvCpltCallback+0x20>)
 8001012:	f005 f8f2 	bl	80061fa <HAL_GPIO_TogglePin>
	flag_value = true;			// Set buffer conversion complete flag
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_ADC_ConvCpltCallback+0x24>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, adc_buff_size);
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58020800 	.word	0x58020800
 8001028:	2400c30d 	.word	0x2400c30d

0800102c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8001034:	e7fe      	b.n	8001034 <StartDefaultTask+0x8>
	...

08001038 <StartAudioCapTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioCapTask */
void StartAudioCapTask(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioCapTask */
  
  //Fill ADC_Buffer1
  HAL_ADC_Start_DMA(&hadc1, adc_buffer_1, ADC_BUFFER_SIZE);
 8001040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001044:	493b      	ldr	r1, [pc, #236]	; (8001134 <StartAudioCapTask+0xfc>)
 8001046:	483c      	ldr	r0, [pc, #240]	; (8001138 <StartAudioCapTask+0x100>)
 8001048:	f001 f9c8 	bl	80023dc <HAL_ADC_Start_DMA>

  //wait for it to finish
  while(flag_value != true);
 800104c:	bf00      	nop
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <StartAudioCapTask+0x104>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f8      	bne.n	800104e <StartAudioCapTask+0x16>
  flag_value = false;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <StartAudioCapTask+0x104>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]

  //set initial adc buffer
  uint32_t adc_buffer_num = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
	  /* Test Pin */
	  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	  // osDelay(500);

	  // Start ADC using alternating buffers
    if(adc_buffer_num == 0) {
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d131      	bne.n	80010d0 <StartAudioCapTask+0x98>

      //obtain adc_buffer_0
      osSemaphoreAcquire(ADC_Buffer0Sem04Handle, osWaitForever);
 800106c:	4b34      	ldr	r3, [pc, #208]	; (8001140 <StartAudioCapTask+0x108>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	4618      	mov	r0, r3
 8001076:	f00b fc93 	bl	800c9a0 <osSemaphoreAcquire>

      //set buffer to fill
		  HAL_ADC_Start_DMA(&hadc1, adc_buffer_0, ADC_BUFFER_SIZE);
 800107a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800107e:	4931      	ldr	r1, [pc, #196]	; (8001144 <StartAudioCapTask+0x10c>)
 8001080:	482d      	ldr	r0, [pc, #180]	; (8001138 <StartAudioCapTask+0x100>)
 8001082:	f001 f9ab 	bl	80023dc <HAL_ADC_Start_DMA>

      //release tasks to process buffer 1
      //check for record mode
      if (recording_mode) {
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <StartAudioCapTask+0x110>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <StartAudioCapTask+0x62>

        // Send the data
        osSemaphoreRelease(SendDataSem03Handle);
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <StartAudioCapTask+0x114>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f00b fcd6 	bl	800ca44 <osSemaphoreRelease>
 8001098:	e004      	b.n	80010a4 <StartAudioCapTask+0x6c>
      }
      else  {
        
        // start fft task on adc buffer 1
        osSemaphoreRelease(FFTSem02Handle);
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <StartAudioCapTask+0x118>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f00b fcd0 	bl	800ca44 <osSemaphoreRelease>
      }

      // Coming back from Send Data do we need to redo initializations?

      //wait for buffer to fill
      while(flag_value != true);
 80010a4:	bf00      	nop
 80010a6:	4b25      	ldr	r3, [pc, #148]	; (800113c <StartAudioCapTask+0x104>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f8      	bne.n	80010a6 <StartAudioCapTask+0x6e>
      flag_value = false;
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <StartAudioCapTask+0x104>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]

      // Stop ADC
      HAL_ADC_Stop_DMA(&hadc1);
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <StartAudioCapTask+0x100>)
 80010bc:	f001 fa42 	bl	8002544 <HAL_ADC_Stop_DMA>
      
      //release adc_buffer_0
      osSemaphoreRelease(ADC_Buffer0Sem04Handle);
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <StartAudioCapTask+0x108>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00b fcbd 	bl	800ca44 <osSemaphoreRelease>

      //switch to other buffer on next loop
      adc_buffer_num = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e7ca      	b.n	8001066 <StartAudioCapTask+0x2e>
      //Wait for FFT Task to Finish
    }
    else {

      //obtain adc_buffer_1
      osSemaphoreAcquire(ADC_Buffer1Sem05Handle, osWaitForever);
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <StartAudioCapTask+0x11c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b fc61 	bl	800c9a0 <osSemaphoreAcquire>

      //set buffer to fill
		  HAL_ADC_Start_DMA(&hadc1, adc_buffer_1, ADC_BUFFER_SIZE);
 80010de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e2:	4914      	ldr	r1, [pc, #80]	; (8001134 <StartAudioCapTask+0xfc>)
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <StartAudioCapTask+0x100>)
 80010e6:	f001 f979 	bl	80023dc <HAL_ADC_Start_DMA>

      //release tasks to process buffer 0
      //check for record mode
      if (recording_mode) {
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <StartAudioCapTask+0x110>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <StartAudioCapTask+0xc6>

        // Send the data
        osSemaphoreRelease(SendDataSem03Handle);
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <StartAudioCapTask+0x114>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00b fca4 	bl	800ca44 <osSemaphoreRelease>
 80010fc:	e004      	b.n	8001108 <StartAudioCapTask+0xd0>
      }
      else  {

        // start fft task on adc buffer 1
        osSemaphoreRelease(FFTSem02Handle);
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <StartAudioCapTask+0x118>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f00b fc9e 	bl	800ca44 <osSemaphoreRelease>
      }

      // Coming back from Send Data do we need to redo initializations?

      //wait for buffer to fill
      while(flag_value != true);
 8001108:	bf00      	nop
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <StartAudioCapTask+0x104>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f083 0301 	eor.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f8      	bne.n	800110a <StartAudioCapTask+0xd2>
      flag_value = false;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <StartAudioCapTask+0x104>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]

      // Stop ADC
      HAL_ADC_Stop_DMA(&hadc1);
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <StartAudioCapTask+0x100>)
 8001120:	f001 fa10 	bl	8002544 <HAL_ADC_Stop_DMA>

      //release adc_buffer_1
      osSemaphoreRelease(ADC_Buffer1Sem05Handle);
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <StartAudioCapTask+0x11c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f00b fc8b 	bl	800ca44 <osSemaphoreRelease>

      //switch to other buffer on next loop
      adc_buffer_num = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
    if(adc_buffer_num == 0) {
 8001132:	e798      	b.n	8001066 <StartAudioCapTask+0x2e>
 8001134:	2400830c 	.word	0x2400830c
 8001138:	24000098 	.word	0x24000098
 800113c:	2400c30d 	.word	0x2400c30d
 8001140:	24000304 	.word	0x24000304
 8001144:	2400430c 	.word	0x2400430c
 8001148:	2400c30c 	.word	0x2400c30c
 800114c:	24000300 	.word	0x24000300
 8001150:	240002fc 	.word	0x240002fc
 8001154:	24000308 	.word	0x24000308

08001158 <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

    // wait for audio cap task to tell this task to start
    osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8001160:	4b3e      	ldr	r3, [pc, #248]	; (800125c <StartFFTTask+0x104>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	4618      	mov	r0, r3
 800116a:	f00b fc19 	bl	800c9a0 <osSemaphoreAcquire>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800116e:	2102      	movs	r1, #2
 8001170:	483b      	ldr	r0, [pc, #236]	; (8001260 <StartFFTTask+0x108>)
 8001172:	f005 f842 	bl	80061fa <HAL_GPIO_TogglePin>
	  //osDelay(500);

    //check which adc buffer is available
    count0 = osSemaphoreGetCount(ADC_Buffer0Sem04Handle);
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <StartFFTTask+0x10c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f00b fca6 	bl	800cacc <osSemaphoreGetCount>
 8001180:	6138      	str	r0, [r7, #16]
    count1 = osSemaphoreGetCount(ADC_Buffer1Sem05Handle);
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <StartFFTTask+0x110>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f00b fca0 	bl	800cacc <osSemaphoreGetCount>
 800118c:	60f8      	str	r0, [r7, #12]
    none_acquired = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]

    //acquire whichever is available
    if(count0 == 1) {
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d124      	bne.n	80011e2 <StartFFTTask+0x8a>
      osSemaphoreAcquire(ADC_Buffer0Sem04Handle, osWaitForever);
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <StartFFTTask+0x10c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00b fbfd 	bl	800c9a0 <osSemaphoreAcquire>

      // Convert samples to float as required by FFT
		  for(int i = 0; i < REAL_FFT_SIZE; i++){
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	e010      	b.n	80011ce <StartFFTTask+0x76>
			  adc_buffer_float[i] = adc_buffer_0[i];
 80011ac:	4a2f      	ldr	r2, [pc, #188]	; (800126c <StartFFTTask+0x114>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <StartFFTTask+0x118>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < REAL_FFT_SIZE; i++){
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	3301      	adds	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011d4:	dbea      	blt.n	80011ac <StartFFTTask+0x54>
		  }
      
      //release adc buffer
      osSemaphoreRelease(ADC_Buffer0Sem04Handle);
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <StartFFTTask+0x10c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f00b fc32 	bl	800ca44 <osSemaphoreRelease>
 80011e0:	e029      	b.n	8001236 <StartFFTTask+0xde>
      
    }
    else if (count1 == 1) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d124      	bne.n	8001232 <StartFFTTask+0xda>
      osSemaphoreAcquire(ADC_Buffer1Sem05Handle, osWaitForever);
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <StartFFTTask+0x110>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00b fbd5 	bl	800c9a0 <osSemaphoreAcquire>

      // Convert samples to float as required by FFT
      for(int i = 0; i < REAL_FFT_SIZE; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e010      	b.n	800121e <StartFFTTask+0xc6>
			  adc_buffer_float[i] = adc_buffer_1[i];
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <StartFFTTask+0x11c>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <StartFFTTask+0x118>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	edc3 7a00 	vstr	s15, [r3]
      for(int i = 0; i < REAL_FFT_SIZE; i++){
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001224:	dbea      	blt.n	80011fc <StartFFTTask+0xa4>
		  }

      //release adc buffer
      osSemaphoreRelease(ADC_Buffer1Sem05Handle);
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <StartFFTTask+0x110>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f00b fc0a 	bl	800ca44 <osSemaphoreRelease>
 8001230:	e001      	b.n	8001236 <StartFFTTask+0xde>
      
    }
    else {
      none_acquired = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
    }

    if (!none_acquired) {
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d191      	bne.n	8001160 <StartFFTTask+0x8>
      
      /* Reset frequency_detected bool */
      //frequency_detected = false; //not needed gets reasigned in frequency detected function

      /* Call FFT function that returns true if freqs between 0-8kHz are detected */
      frequency_detected = FrequencyDetected(adc_buffer_float);
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <StartFFTTask+0x118>)
 800123e:	f7ff fdfd 	bl	8000e3c <FrequencyDetected>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <StartFFTTask+0x120>)
 8001248:	701a      	strb	r2, [r3, #0]
      // if(frequency_detected == true){
      //   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
      //   // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
      // }

      if(frequency_detected == true){
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <StartFFTTask+0x120>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d086      	beq.n	8001160 <StartFFTTask+0x8>
        recording_mode = true;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <StartFFTTask+0x124>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
    osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8001258:	e782      	b.n	8001160 <StartFFTTask+0x8>
 800125a:	bf00      	nop
 800125c:	240002fc 	.word	0x240002fc
 8001260:	58021000 	.word	0x58021000
 8001264:	24000304 	.word	0x24000304
 8001268:	24000308 	.word	0x24000308
 800126c:	2400430c 	.word	0x2400430c
 8001270:	2400030c 	.word	0x2400030c
 8001274:	2400830c 	.word	0x2400830c
 8001278:	24012320 	.word	0x24012320
 800127c:	2400c30c 	.word	0x2400c30c

08001280 <StartSendDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendDataTask */
void StartSendDataTask(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint8_t count0;
  uint8_t count1;
  uint8_t none_acquired;

  // variables 
  uint8_t loop = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  volatile uint8_t tx_data = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	727b      	strb	r3, [r7, #9]
  uint16_t i = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t j = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t max_transmit_index = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	827b      	strh	r3, [r7, #18]
  uint16_t amplification = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	823b      	strh	r3, [r7, #16]
  uint32_t val = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    //wait for send data task to complete
    osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 80012a6:	4b8b      	ldr	r3, [pc, #556]	; (80014d4 <StartSendDataTask+0x254>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f04f 31ff 	mov.w	r1, #4294967295
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00b fb76 	bl	800c9a0 <osSemaphoreAcquire>

    //check which adc buffer is available
    count0 = osSemaphoreGetCount(ADC_Buffer0Sem04Handle);
 80012b4:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <StartSendDataTask+0x258>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00b fc07 	bl	800cacc <osSemaphoreGetCount>
 80012be:	4603      	mov	r3, r0
 80012c0:	72fb      	strb	r3, [r7, #11]
    count1 = osSemaphoreGetCount(ADC_Buffer1Sem05Handle);
 80012c2:	4b86      	ldr	r3, [pc, #536]	; (80014dc <StartSendDataTask+0x25c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00b fc00 	bl	800cacc <osSemaphoreGetCount>
 80012cc:	4603      	mov	r3, r0
 80012ce:	72bb      	strb	r3, [r7, #10]
    none_acquired = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27



    //acquire whichever is available
    if(count0 == 1) {
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d12e      	bne.n	800133a <StartSendDataTask+0xba>
      osSemaphoreAcquire(ADC_Buffer0Sem04Handle, osWaitForever);
 80012dc:	4b7e      	ldr	r3, [pc, #504]	; (80014d8 <StartSendDataTask+0x258>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00b fb5b 	bl	800c9a0 <osSemaphoreAcquire>

      //copy every other adc buffer
      for (int i = 0; i < TRANSMIT_BUFFER_SIZE; i+=2) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e01a      	b.n	8001326 <StartSendDataTask+0xa6>
        //adc_buffer_copy[i/2] = adc_buffer_0[i];
        val = adc_buffer_0[i];
 80012f0:	4a7b      	ldr	r2, [pc, #492]	; (80014e0 <StartSendDataTask+0x260>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	60fb      	str	r3, [r7, #12]
        val -= 0x8000;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001300:	60fb      	str	r3, [r7, #12]
        val *= amplification;
 8001302:	8a3a      	ldrh	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	60fb      	str	r3, [r7, #12]
        adc_buffer_copy[i/2] = val;
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da00      	bge.n	8001314 <StartSendDataTask+0x94>
 8001312:	3301      	adds	r3, #1
 8001314:	105b      	asrs	r3, r3, #1
 8001316:	4619      	mov	r1, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a72      	ldr	r2, [pc, #456]	; (80014e4 <StartSendDataTask+0x264>)
 800131c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for (int i = 0; i < TRANSMIT_BUFFER_SIZE; i+=2) {
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3302      	adds	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800132c:	dbe0      	blt.n	80012f0 <StartSendDataTask+0x70>
        //adc_buffer_copy[i/2] = (adc_buffer_copy[i/2] - 0x8000) * amplification;
      }

      //release adc buffer
      osSemaphoreRelease(ADC_Buffer0Sem04Handle);
 800132e:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <StartSendDataTask+0x258>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f00b fb86 	bl	800ca44 <osSemaphoreRelease>
 8001338:	e040      	b.n	80013bc <StartSendDataTask+0x13c>
      
    }
    else if (count1 == 1) {
 800133a:	7abb      	ldrb	r3, [r7, #10]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d13a      	bne.n	80013b6 <StartSendDataTask+0x136>
      osSemaphoreAcquire(ADC_Buffer1Sem05Handle, osWaitForever);
 8001340:	4b66      	ldr	r3, [pc, #408]	; (80014dc <StartSendDataTask+0x25c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	4618      	mov	r0, r3
 800134a:	f00b fb29 	bl	800c9a0 <osSemaphoreAcquire>

      //copy every other adc buffer
      for (int i = 0; i < ADC_BUFFER_SIZE; i+=2) {
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e026      	b.n	80013a2 <StartSendDataTask+0x122>
        adc_buffer_copy[i/2] = adc_buffer_1[i];
 8001354:	4a64      	ldr	r2, [pc, #400]	; (80014e8 <StartSendDataTask+0x268>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	da00      	bge.n	8001364 <StartSendDataTask+0xe4>
 8001362:	3301      	adds	r3, #1
 8001364:	105b      	asrs	r3, r3, #1
 8001366:	461a      	mov	r2, r3
 8001368:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <StartSendDataTask+0x264>)
 800136a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        adc_buffer_copy[i/2] = (adc_buffer_copy[i/2] - 0x8000) * amplification;
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da00      	bge.n	8001376 <StartSendDataTask+0xf6>
 8001374:	3301      	adds	r3, #1
 8001376:	105b      	asrs	r3, r3, #1
 8001378:	461a      	mov	r2, r3
 800137a:	4b5a      	ldr	r3, [pc, #360]	; (80014e4 <StartSendDataTask+0x264>)
 800137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001380:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 8001384:	8a39      	ldrh	r1, [r7, #16]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	da00      	bge.n	800138e <StartSendDataTask+0x10e>
 800138c:	3301      	adds	r3, #1
 800138e:	105b      	asrs	r3, r3, #1
 8001390:	4618      	mov	r0, r3
 8001392:	fb01 f302 	mul.w	r3, r1, r2
 8001396:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <StartSendDataTask+0x264>)
 8001398:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for (int i = 0; i < ADC_BUFFER_SIZE; i+=2) {
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	3302      	adds	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a8:	dbd4      	blt.n	8001354 <StartSendDataTask+0xd4>
      }

      //release adc buffer
      osSemaphoreRelease(ADC_Buffer1Sem05Handle);
 80013aa:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <StartSendDataTask+0x25c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00b fb48 	bl	800ca44 <osSemaphoreRelease>
 80013b4:	e002      	b.n	80013bc <StartSendDataTask+0x13c>
      
    }
    else {
      none_acquired = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    //transmit data
    if (!none_acquired) {
 80013bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f47f af70 	bne.w	80012a6 <StartSendDataTask+0x26>

      //fill transmit buffer with data
      i = 0; //index of input buffer
 80013c6:	2300      	movs	r3, #0
 80013c8:	84bb      	strh	r3, [r7, #36]	; 0x24
      j = 0; //index of output buffer
 80013ca:	2300      	movs	r3, #0
 80013cc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (i < TRANSMIT_BUFFER_SIZE / 2) {
 80013ce:	e04b      	b.n	8001468 <StartSendDataTask+0x1e8>

    	if (i > 2040) {
 80013d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013d2:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80013d6:	d905      	bls.n	80013e4 <StartSendDataTask+0x164>
    		i++;
 80013d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013da:	3301      	adds	r3, #1
 80013dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    		i--;
 80013de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013e0:	3b01      	subs	r3, #1
 80013e2:	84bb      	strh	r3, [r7, #36]	; 0x24
    	}
        
        //check if last 16 bits of data is the same as the escape char
        if (!((adc_buffer_copy[i] & 0xFFFF) ^ ESCAPE_CHAR)) {
 80013e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <StartSendDataTask+0x264>)
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11f      	bne.n	8001434 <StartSendDataTask+0x1b4>
          
          //add escape char twice to indicate that it is actually the data being sent
          transmit_buffer[j] = ESCAPE_CHAR >> 8;
 80013f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013f6:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <StartSendDataTask+0x26c>)
 80013f8:	21ff      	movs	r1, #255	; 0xff
 80013fa:	54d1      	strb	r1, [r2, r3]
          j++;
 80013fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013fe:	3301      	adds	r3, #1
 8001400:	847b      	strh	r3, [r7, #34]	; 0x22
          transmit_buffer[j] = ESCAPE_CHAR & 0x00FF;
 8001402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001404:	4a39      	ldr	r2, [pc, #228]	; (80014ec <StartSendDataTask+0x26c>)
 8001406:	21ff      	movs	r1, #255	; 0xff
 8001408:	54d1      	strb	r1, [r2, r3]
          j++;
 800140a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800140c:	3301      	adds	r3, #1
 800140e:	847b      	strh	r3, [r7, #34]	; 0x22
          
          transmit_buffer[j] = ESCAPE_CHAR >> 8;
 8001410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001412:	4a36      	ldr	r2, [pc, #216]	; (80014ec <StartSendDataTask+0x26c>)
 8001414:	21ff      	movs	r1, #255	; 0xff
 8001416:	54d1      	strb	r1, [r2, r3]
          j++;
 8001418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800141a:	3301      	adds	r3, #1
 800141c:	847b      	strh	r3, [r7, #34]	; 0x22
          transmit_buffer[j] = ESCAPE_CHAR & 0x00FF;
 800141e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001420:	4a32      	ldr	r2, [pc, #200]	; (80014ec <StartSendDataTask+0x26c>)
 8001422:	21ff      	movs	r1, #255	; 0xff
 8001424:	54d1      	strb	r1, [r2, r3]
          j++;
 8001426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001428:	3301      	adds	r3, #1
 800142a:	847b      	strh	r3, [r7, #34]	; 0x22

          //processed 1 sample
          i++;
 800142c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800142e:	3301      	adds	r3, #1
 8001430:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001432:	e019      	b.n	8001468 <StartSendDataTask+0x1e8>
        else {

          //say sample = 0x1234;

          //add data to buffer
          transmit_buffer[j] = adc_buffer_copy[i] >> 8; // high byte (0x12)
 8001434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001436:	4a2b      	ldr	r2, [pc, #172]	; (80014e4 <StartSendDataTask+0x264>)
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	121a      	asrs	r2, r3, #8
 800143e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001440:	b2d1      	uxtb	r1, r2
 8001442:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <StartSendDataTask+0x26c>)
 8001444:	54d1      	strb	r1, [r2, r3]
          j++;
 8001446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001448:	3301      	adds	r3, #1
 800144a:	847b      	strh	r3, [r7, #34]	; 0x22
          transmit_buffer[j] = adc_buffer_copy[i] & 0x00FF; // low byte (0x34)
 800144c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800144e:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <StartSendDataTask+0x264>)
 8001450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001454:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	4a24      	ldr	r2, [pc, #144]	; (80014ec <StartSendDataTask+0x26c>)
 800145a:	54d1      	strb	r1, [r2, r3]
          j++;  
 800145c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800145e:	3301      	adds	r3, #1
 8001460:	847b      	strh	r3, [r7, #34]	; 0x22

          //processed 1 sample
          i++;
 8001462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	84bb      	strh	r3, [r7, #36]	; 0x24
      while (i < TRANSMIT_BUFFER_SIZE / 2) {
 8001468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800146a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800146e:	d3af      	bcc.n	80013d0 <StartSendDataTask+0x150>
        }
      }
      max_transmit_index = j;
 8001470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001472:	827b      	strh	r3, [r7, #18]

      // First set of data
      if(loop == 0){
 8001474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001478:	2b00      	cmp	r3, #0
 800147a:	d127      	bne.n	80014cc <StartSendDataTask+0x24c>

        //send escape character
        tx_data = 0xFF;
 800147c:	23ff      	movs	r3, #255	; 0xff
 800147e:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8001480:	f107 0109 	add.w	r1, r7, #9
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	2201      	movs	r2, #1
 800148a:	4819      	ldr	r0, [pc, #100]	; (80014f0 <StartSendDataTask+0x270>)
 800148c:	f009 fec6 	bl	800b21c <HAL_UART_Transmit>
        tx_data = 0xFF;
 8001490:	23ff      	movs	r3, #255	; 0xff
 8001492:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8001494:	f107 0109 	add.w	r1, r7, #9
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	2201      	movs	r2, #1
 800149e:	4814      	ldr	r0, [pc, #80]	; (80014f0 <StartSendDataTask+0x270>)
 80014a0:	f009 febc 	bl	800b21c <HAL_UART_Transmit>

        //send start char
        tx_data = 0xFF;
 80014a4:	23ff      	movs	r3, #255	; 0xff
 80014a6:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80014a8:	f107 0109 	add.w	r1, r7, #9
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	2201      	movs	r2, #1
 80014b2:	480f      	ldr	r0, [pc, #60]	; (80014f0 <StartSendDataTask+0x270>)
 80014b4:	f009 feb2 	bl	800b21c <HAL_UART_Transmit>
        tx_data = 0xEE;
 80014b8:	23ee      	movs	r3, #238	; 0xee
 80014ba:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80014bc:	f107 0109 	add.w	r1, r7, #9
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	2201      	movs	r2, #1
 80014c6:	480a      	ldr	r0, [pc, #40]	; (80014f0 <StartSendDataTask+0x270>)
 80014c8:	f009 fea8 	bl	800b21c <HAL_UART_Transmit>
      }

      // Data in between
      // TODO - For loop for number of samples of transmit_buffer
      for(int k = 0; k < max_transmit_index; k++){
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e02c      	b.n	800152c <StartSendDataTask+0x2ac>
 80014d2:	bf00      	nop
 80014d4:	24000300 	.word	0x24000300
 80014d8:	24000304 	.word	0x24000304
 80014dc:	24000308 	.word	0x24000308
 80014e0:	2400430c 	.word	0x2400430c
 80014e4:	24012324 	.word	0x24012324
 80014e8:	2400830c 	.word	0x2400830c
 80014ec:	24016324 	.word	0x24016324
 80014f0:	240001c0 	.word	0x240001c0

        tx_data = transmit_buffer[k];
 80014f4:	4a2c      	ldr	r2, [pc, #176]	; (80015a8 <StartSendDataTask+0x328>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8001500:	f107 0109 	add.w	r1, r7, #9
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	2201      	movs	r2, #1
 800150a:	4828      	ldr	r0, [pc, #160]	; (80015ac <StartSendDataTask+0x32c>)
 800150c:	f009 fe86 	bl	800b21c <HAL_UART_Transmit>

        if (k > max_transmit_index - 2) {
 8001510:	8a7b      	ldrh	r3, [r7, #18]
 8001512:	3b01      	subs	r3, #1
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	429a      	cmp	r2, r3
 8001518:	db05      	blt.n	8001526 <StartSendDataTask+0x2a6>
        	k++;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
        	k--;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3b01      	subs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
      for(int k = 0; k < max_transmit_index; k++){
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	8a7b      	ldrh	r3, [r7, #18]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	dbdf      	blt.n	80014f4 <StartSendDataTask+0x274>
        }
      }
      
      loop++;
 8001534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001538:	3301      	adds	r3, #1
 800153a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


      // Last set of data
      if(loop >= 58){
 800153e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001542:	2b39      	cmp	r3, #57	; 0x39
 8001544:	f67f aeaf 	bls.w	80012a6 <StartSendDataTask+0x26>

        //send escape char
        tx_data = 0xFF;
 8001548:	23ff      	movs	r3, #255	; 0xff
 800154a:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 800154c:	f107 0109 	add.w	r1, r7, #9
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2201      	movs	r2, #1
 8001556:	4815      	ldr	r0, [pc, #84]	; (80015ac <StartSendDataTask+0x32c>)
 8001558:	f009 fe60 	bl	800b21c <HAL_UART_Transmit>
        tx_data = 0xFF;
 800155c:	23ff      	movs	r3, #255	; 0xff
 800155e:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8001560:	f107 0109 	add.w	r1, r7, #9
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	2201      	movs	r2, #1
 800156a:	4810      	ldr	r0, [pc, #64]	; (80015ac <StartSendDataTask+0x32c>)
 800156c:	f009 fe56 	bl	800b21c <HAL_UART_Transmit>

        //send end char
        tx_data = 0xFF;
 8001570:	23ff      	movs	r3, #255	; 0xff
 8001572:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8001574:	f107 0109 	add.w	r1, r7, #9
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	2201      	movs	r2, #1
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <StartSendDataTask+0x32c>)
 8001580:	f009 fe4c 	bl	800b21c <HAL_UART_Transmit>
        tx_data = 0xFE;
 8001584:	23fe      	movs	r3, #254	; 0xfe
 8001586:	727b      	strb	r3, [r7, #9]
        HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8001588:	f107 0109 	add.w	r1, r7, #9
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2201      	movs	r2, #1
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <StartSendDataTask+0x32c>)
 8001594:	f009 fe42 	bl	800b21c <HAL_UART_Transmit>

        //restart record mode
        loop = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        recording_mode = false;
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <StartSendDataTask+0x330>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
    osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 80015a4:	e67f      	b.n	80012a6 <StartSendDataTask+0x26>
 80015a6:	bf00      	nop
 80015a8:	24016324 	.word	0x24016324
 80015ac:	240001c0 	.word	0x240001c0
 80015b0:	2400c30c 	.word	0x2400c30c

080015b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c6:	f000 fb57 	bl	8001c78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d6:	b672      	cpsid	i
}
 80015d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015da:	e7fe      	b.n	80015da <Error_Handler+0x8>

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x38>)
 80015e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_MspInit+0x38>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_MspInit+0x38>)
 80015f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	210f      	movs	r1, #15
 8001604:	f06f 0001 	mvn.w	r0, #1
 8001608:	f001 ff6c 	bl	80034e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	58024400 	.word	0x58024400

08001618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ba      	sub	sp, #232	; 0xe8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	22c0      	movs	r2, #192	; 0xc0
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f00f fbe1 	bl	8010e00 <memset>
  if(hadc->Instance==ADC1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a43      	ldr	r2, [pc, #268]	; (8001750 <HAL_ADC_MspInit+0x138>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d17e      	bne.n	8001746 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001648:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001658:	2310      	movs	r3, #16
 800165a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001660:	2302      	movs	r3, #2
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001664:	2302      	movs	r3, #2
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001668:	23c0      	movs	r3, #192	; 0xc0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800166c:	2300      	movs	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4618      	mov	r0, r3
 8001680:	f005 fe30 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800168a:	f7ff ffa2 	bl	80015d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_ADC_MspInit+0x13c>)
 8001690:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <HAL_ADC_MspInit+0x13c>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_ADC_MspInit+0x13c>)
 80016a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_ADC_MspInit+0x13c>)
 80016ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016b2:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_ADC_MspInit+0x13c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_ADC_MspInit+0x13c>)
 80016be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ca:	2308      	movs	r3, #8
 80016cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d0:	2303      	movs	r3, #3
 80016d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016e0:	4619      	mov	r1, r3
 80016e2:	481d      	ldr	r0, [pc, #116]	; (8001758 <HAL_ADC_MspInit+0x140>)
 80016e4:	f004 fbc0 	bl	8005e68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_ADC_MspInit+0x144>)
 80016ea:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_ADC_MspInit+0x148>)
 80016ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_ADC_MspInit+0x144>)
 80016f0:	2209      	movs	r2, #9
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_ADC_MspInit+0x144>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_ADC_MspInit+0x144>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_ADC_MspInit+0x144>)
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_ADC_MspInit+0x144>)
 800170a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800170e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_ADC_MspInit+0x144>)
 8001712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001716:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_ADC_MspInit+0x144>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_ADC_MspInit+0x144>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_ADC_MspInit+0x144>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <HAL_ADC_MspInit+0x144>)
 800172c:	f001 ff02 	bl	8003534 <HAL_DMA_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8001736:	f7ff ff4c 	bl	80015d2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_ADC_MspInit+0x144>)
 800173e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_ADC_MspInit+0x144>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	37e8      	adds	r7, #232	; 0xe8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40022000 	.word	0x40022000
 8001754:	58024400 	.word	0x58024400
 8001758:	58020000 	.word	0x58020000
 800175c:	240000fc 	.word	0x240000fc
 8001760:	40020010 	.word	0x40020010

08001764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10e      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_TIM_Base_MspInit+0x40>)
 8001778:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_TIM_Base_MspInit+0x40>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_TIM_Base_MspInit+0x40>)
 8001788:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40010000 	.word	0x40010000
 80017a4:	58024400 	.word	0x58024400

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11f      	bne.n	800180a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_TIM_MspPostInit+0x70>)
 80017cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_TIM_MspPostInit+0x70>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_TIM_MspPostInit+0x70>)
 80017dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_TIM_MspPostInit+0x74>)
 8001806:	f004 fb2f 	bl	8005e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40010000 	.word	0x40010000
 8001818:	58024400 	.word	0x58024400
 800181c:	58021000 	.word	0x58021000

08001820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0bc      	sub	sp, #240	; 0xf0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	22c0      	movs	r2, #192	; 0xc0
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f00f fadd 	bl	8010e00 <memset>
  if(huart->Instance==UART4)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a4d      	ldr	r2, [pc, #308]	; (8001980 <HAL_UART_MspInit+0x160>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d146      	bne.n	80018de <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001850:	f04f 0202 	mov.w	r2, #2
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	4618      	mov	r0, r3
 8001868:	f005 fd3c 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001872:	f7ff feae 	bl	80015d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001876:	4b43      	ldr	r3, [pc, #268]	; (8001984 <HAL_UART_MspInit+0x164>)
 8001878:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800187c:	4a41      	ldr	r2, [pc, #260]	; (8001984 <HAL_UART_MspInit+0x164>)
 800187e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001882:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_UART_MspInit+0x164>)
 8001888:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800188c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_UART_MspInit+0x164>)
 8001896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800189a:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <HAL_UART_MspInit+0x164>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018a4:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_UART_MspInit+0x164>)
 80018a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b8:	2312      	movs	r3, #18
 80018ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018ca:	2308      	movs	r3, #8
 80018cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018d4:	4619      	mov	r1, r3
 80018d6:	482c      	ldr	r0, [pc, #176]	; (8001988 <HAL_UART_MspInit+0x168>)
 80018d8:	f004 fac6 	bl	8005e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018dc:	e04b      	b.n	8001976 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a2a      	ldr	r2, [pc, #168]	; (800198c <HAL_UART_MspInit+0x16c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d146      	bne.n	8001976 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018e8:	f04f 0202 	mov.w	r2, #2
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 fcf0 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_UART_MspInit+0xee>
      Error_Handler();
 800190a:	f7ff fe62 	bl	80015d2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_UART_MspInit+0x164>)
 8001910:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <HAL_UART_MspInit+0x164>)
 8001916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_UART_MspInit+0x164>)
 8001920:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_UART_MspInit+0x164>)
 800192e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <HAL_UART_MspInit+0x164>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_UART_MspInit+0x164>)
 800193e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800194a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800194e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001964:	2307      	movs	r3, #7
 8001966:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800196e:	4619      	mov	r1, r3
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <HAL_UART_MspInit+0x170>)
 8001972:	f004 fa79 	bl	8005e68 <HAL_GPIO_Init>
}
 8001976:	bf00      	nop
 8001978:	37f0      	adds	r7, #240	; 0xf0
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40004c00 	.word	0x40004c00
 8001984:	58024400 	.word	0x58024400
 8001988:	58020000 	.word	0x58020000
 800198c:	40004800 	.word	0x40004800
 8001990:	58020c00 	.word	0x58020c00

08001994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b090      	sub	sp, #64	; 0x40
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	d827      	bhi.n	80019f2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 80019a2:	2200      	movs	r2, #0
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	201c      	movs	r0, #28
 80019a8:	f001 fd9c 	bl	80034e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ac:	201c      	movs	r0, #28
 80019ae:	f001 fdb3 	bl	8003518 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80019b2:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <HAL_InitTick+0xc4>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_InitTick+0xc8>)
 80019ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019be:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <HAL_InitTick+0xc8>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_InitTick+0xc8>)
 80019ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d6:	f107 0210 	add.w	r2, r7, #16
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f005 fc3d 	bl	8007260 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d106      	bne.n	80019fe <HAL_InitTick+0x6a>
 80019f0:	e001      	b.n	80019f6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e02c      	b.n	8001a50 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f6:	f005 fc07 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 80019fa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80019fc:	e004      	b.n	8001a08 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019fe:	f005 fc03 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8001a02:	4603      	mov	r3, r0
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_InitTick+0xcc>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0c9b      	lsrs	r3, r3, #18
 8001a12:	3b01      	subs	r3, #1
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_InitTick+0xd0>)
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_InitTick+0xd0>)
 8001a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a24:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a26:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_InitTick+0xd0>)
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_InitTick+0xd0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_InitTick+0xd0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001a38:	480a      	ldr	r0, [pc, #40]	; (8001a64 <HAL_InitTick+0xd0>)
 8001a3a:	f008 f85d 	bl	8009af8 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d104      	bne.n	8001a4e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <HAL_InitTick+0xd0>)
 8001a46:	f008 f91f 	bl	8009c88 <HAL_TIM_Base_Start_IT>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	e000      	b.n	8001a50 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3740      	adds	r7, #64	; 0x40
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2400000c 	.word	0x2400000c
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	2401733c 	.word	0x2401733c

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA1_Stream0_IRQHandler+0x10>)
 8001a9a:	f002 fe63 	bl	8004764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	240000fc 	.word	0x240000fc

08001aa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <TIM2_IRQHandler+0x10>)
 8001aae:	f008 fad3 	bl	800a058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2401733c 	.word	0x2401733c

08001abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <SystemInit+0xd0>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <SystemInit+0xd0>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <SystemInit+0xd4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d807      	bhi.n	8001aec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <SystemInit+0xd4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 030f 	bic.w	r3, r3, #15
 8001ae4:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <SystemInit+0xd4>)
 8001ae6:	f043 0303 	orr.w	r3, r3, #3
 8001aea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <SystemInit+0xd8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <SystemInit+0xd8>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <SystemInit+0xd8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <SystemInit+0xd8>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4924      	ldr	r1, [pc, #144]	; (8001b94 <SystemInit+0xd8>)
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <SystemInit+0xdc>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <SystemInit+0xd4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <SystemInit+0xd4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 030f 	bic.w	r3, r3, #15
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <SystemInit+0xd4>)
 8001b20:	f043 0303 	orr.w	r3, r3, #3
 8001b24:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <SystemInit+0xd8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <SystemInit+0xd8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <SystemInit+0xd8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <SystemInit+0xd8>)
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <SystemInit+0xe0>)
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <SystemInit+0xd8>)
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <SystemInit+0xe4>)
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <SystemInit+0xd8>)
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <SystemInit+0xe8>)
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <SystemInit+0xd8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <SystemInit+0xd8>)
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <SystemInit+0xe8>)
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <SystemInit+0xd8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <SystemInit+0xd8>)
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <SystemInit+0xe8>)
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <SystemInit+0xd8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <SystemInit+0xd8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <SystemInit+0xd8>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <SystemInit+0xd8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <SystemInit+0xec>)
 8001b7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00
 8001b90:	52002000 	.word	0x52002000
 8001b94:	58024400 	.word	0x58024400
 8001b98:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b9c:	02020200 	.word	0x02020200
 8001ba0:	01ff0000 	.word	0x01ff0000
 8001ba4:	01010280 	.word	0x01010280
 8001ba8:	52004000 	.word	0x52004000

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb0:	f7ff ff84 	bl	8001abc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bb6:	490d      	ldr	r1, [pc, #52]	; (8001bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f00f f8df 	bl	8010d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7fe fd09 	bl	80005f4 <main>
  bx  lr
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001be8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bec:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001bf0:	08024268 	.word	0x08024268
  ldr r2, =_sbss
 8001bf4:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001bf8:	2401bcdc 	.word	0x2401bcdc

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f001 fc61 	bl	80034ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c0c:	f005 f952 	bl	8006eb4 <HAL_RCC_GetSysClockFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_Init+0x68>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	4913      	ldr	r1, [pc, #76]	; (8001c6c <HAL_Init+0x6c>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_Init+0x68>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_Init+0x6c>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_Init+0x70>)
 8001c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_Init+0x74>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f7ff fea2 	bl	8001994 <HAL_InitTick>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e002      	b.n	8001c60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5a:	f7ff fcbf 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	08011110 	.word	0x08011110
 8001c70:	24000008 	.word	0x24000008
 8001c74:	24000004 	.word	0x24000004

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	24000010 	.word	0x24000010
 8001c9c:	24017388 	.word	0x24017388

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	24017388 	.word	0x24017388

08001cb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	611a      	str	r2, [r3, #16]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b087      	sub	sp, #28
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3360      	adds	r3, #96	; 0x60
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3330      	adds	r3, #48	; 0x30
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	4413      	add	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	211f      	movs	r1, #31
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	401a      	ands	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	f003 011f 	and.w	r1, r3, #31
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f023 0203 	bic.w	r2, r3, #3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0e5b      	lsrs	r3, r3, #25
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	0d1b      	lsrs	r3, r3, #20
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2107      	movs	r1, #7
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	0d1b      	lsrs	r3, r3, #20
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0318 	and.w	r3, r3, #24
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ee8:	40d9      	lsrs	r1, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	400b      	ands	r3, r1
 8001eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	000fffff 	.word	0x000fffff

08001f0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 031f 	and.w	r3, r3, #31
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6093      	str	r3, [r2, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	5fffffc0 	.word	0x5fffffc0

08001f4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f60:	d101      	bne.n	8001f66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	6fffffc0 	.word	0x6fffffc0

08001f9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fb0:	d101      	bne.n	8001fb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <LL_ADC_Enable+0x24>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	7fffffc0 	.word	0x7fffffc0

08001fec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <LL_ADC_Disable+0x24>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	f043 0202 	orr.w	r2, r3, #2
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	7fffffc0 	.word	0x7fffffc0

08002014 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <LL_ADC_IsEnabled+0x18>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_ADC_IsEnabled+0x1a>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b02      	cmp	r3, #2
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsDisableOngoing+0x18>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsDisableOngoing+0x1a>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <LL_ADC_REG_StartConversion+0x24>)
 800206e:	4013      	ands	r3, r2
 8002070:	f043 0204 	orr.w	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	7fffffc0 	.word	0x7fffffc0

08002088 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <LL_ADC_REG_StopConversion+0x24>)
 8002096:	4013      	ands	r3, r2
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	7fffffc0 	.word	0x7fffffc0

080020b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <LL_ADC_INJ_StopConversion+0x24>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	f043 0220 	orr.w	r2, r3, #32
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	7fffffc0 	.word	0x7fffffc0

08002100 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d101      	bne.n	8002118 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e138      	b.n	80023b4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fa61 	bl	8001618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff feef 	bl	8001f4c <LL_ADC_IsDeepPowerDownEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fed5 	bl	8001f28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff0a 	bl	8001f9c <LL_ADC_IsInternalRegulatorEnabled>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff feee 	bl	8001f74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002198:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_ADC_Init+0x294>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	4a88      	ldr	r2, [pc, #544]	; (80023c0 <HAL_ADC_Init+0x298>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	3301      	adds	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021aa:	e002      	b.n	80021b2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff feed 	bl	8001f9c <LL_ADC_IsInternalRegulatorEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff61 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 80021ee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 80d2 	bne.w	80023a2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 80ce 	bne.w	80023a2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800220e:	f043 0202 	orr.w	r2, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fefa 	bl	8002014 <LL_ADC_IsEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d110      	bne.n	8002248 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002226:	4867      	ldr	r0, [pc, #412]	; (80023c4 <HAL_ADC_Init+0x29c>)
 8002228:	f7ff fef4 	bl	8002014 <LL_ADC_IsEnabled>
 800222c:	4604      	mov	r4, r0
 800222e:	4866      	ldr	r0, [pc, #408]	; (80023c8 <HAL_ADC_Init+0x2a0>)
 8002230:	f7ff fef0 	bl	8002014 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	4323      	orrs	r3, r4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4619      	mov	r1, r3
 8002242:	4862      	ldr	r0, [pc, #392]	; (80023cc <HAL_ADC_Init+0x2a4>)
 8002244:	f7ff fd38 	bl	8001cb8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7d5b      	ldrb	r3, [r3, #21]
 800224c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002252:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002258:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7f1b      	ldrb	r3, [r3, #28]
 800225e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7f1b      	ldrb	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	3b01      	subs	r3, #1
 8002272:	045b      	lsls	r3, r3, #17
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_ADC_Init+0x2a8>)
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	430b      	orrs	r3, r1
 80022a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fefe 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 80022b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff20 	bl	8002100 <LL_ADC_INJ_IsConversionOngoing>
 80022c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d14a      	bne.n	800235e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d147      	bne.n	800235e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7d1b      	ldrb	r3, [r3, #20]
 80022d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <HAL_ADC_Init+0x2ac>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d11b      	bne.n	8002332 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_ADC_Init+0x2b0>)
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800230e:	3a01      	subs	r2, #1
 8002310:	0411      	lsls	r1, r2, #16
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800231c:	4311      	orrs	r1, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002322:	430a      	orrs	r2, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	e007      	b.n	8002342 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fe7b 	bl	8003054 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10c      	bne.n	8002380 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f023 010f 	bic.w	r1, r3, #15
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
 800237e:	e007      	b.n	8002390 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020f 	bic.w	r2, r2, #15
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f023 0303 	bic.w	r3, r3, #3
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
 80023a0:	e007      	b.n	80023b2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3724      	adds	r7, #36	; 0x24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}
 80023bc:	24000004 	.word	0x24000004
 80023c0:	053e2d63 	.word	0x053e2d63
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40022100 	.word	0x40022100
 80023cc:	40022300 	.word	0x40022300
 80023d0:	fff0c003 	.word	0xfff0c003
 80023d4:	ffffbffc 	.word	0xffffbffc
 80023d8:	fc00f81e 	.word	0xfc00f81e

080023dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e8:	484f      	ldr	r0, [pc, #316]	; (8002528 <HAL_ADC_Start_DMA+0x14c>)
 80023ea:	f7ff fd8f 	bl	8001f0c <LL_ADC_GetMultimode>
 80023ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe5b 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 808c 	bne.w	800251a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ADC_Start_DMA+0x34>
 800240c:	2302      	movs	r3, #2
 800240e:	e087      	b.n	8002520 <HAL_ADC_Start_DMA+0x144>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d002      	beq.n	800242a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b09      	cmp	r3, #9
 8002428:	d170      	bne.n	800250c <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fca2 	bl	8002d74 <ADC_Enable>
 8002430:	4603      	mov	r3, r0
 8002432:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d163      	bne.n	8002502 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_ADC_Start_DMA+0x150>)
 8002440:	4013      	ands	r3, r2
 8002442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a38      	ldr	r2, [pc, #224]	; (8002530 <HAL_ADC_Start_DMA+0x154>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d002      	beq.n	800245a <HAL_ADC_Start_DMA+0x7e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e000      	b.n	800245c <HAL_ADC_Start_DMA+0x80>
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_ADC_Start_DMA+0x158>)
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	4293      	cmp	r3, r2
 8002462:	d002      	beq.n	800246a <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f023 0206 	bic.w	r2, r3, #6
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	659a      	str	r2, [r3, #88]	; 0x58
 800248e:	e002      	b.n	8002496 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_ADC_Start_DMA+0x15c>)
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <HAL_ADC_Start_DMA+0x160>)
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	4a25      	ldr	r2, [pc, #148]	; (8002540 <HAL_ADC_Start_DMA+0x164>)
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	221c      	movs	r2, #28
 80024b4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0210 	orr.w	r2, r2, #16
 80024cc:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f7ff fcb4 	bl	8001e46 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3340      	adds	r3, #64	; 0x40
 80024e8:	4619      	mov	r1, r3
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f001 fbb1 	bl	8003c54 <HAL_DMA_Start_IT>
 80024f2:	4603      	mov	r3, r0
 80024f4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fdb0 	bl	8002060 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002500:	e00d      	b.n	800251e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800250a:	e008      	b.n	800251e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002518:	e001      	b.n	800251e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40022300 	.word	0x40022300
 800252c:	fffff0fe 	.word	0xfffff0fe
 8002530:	40022100 	.word	0x40022100
 8002534:	40022000 	.word	0x40022000
 8002538:	08002f2b 	.word	0x08002f2b
 800253c:	08003003 	.word	0x08003003
 8002540:	0800301f 	.word	0x0800301f

08002544 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADC_Stop_DMA+0x16>
 8002556:	2302      	movs	r3, #2
 8002558:	e04f      	b.n	80025fa <HAL_ADC_Stop_DMA+0xb6>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002562:	2103      	movs	r1, #3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fb49 	bl	8002bfc <ADC_ConversionStop>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d13d      	bne.n	80025f0 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0203 	bic.w	r2, r2, #3
 8002582:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d10f      	bne.n	80025b2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fdc6 	bl	8004128 <HAL_DMA_Abort>
 800259c:	4603      	mov	r3, r0
 800259e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0210 	bic.w	r2, r2, #16
 80025c0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fc4f 	bl	8002e6c <ADC_Disable>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e002      	b.n	80025da <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fc49 	bl	8002e6c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_ADC_Stop_DMA+0xc0>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	ffffeefe 	.word	0xffffeefe

08002608 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b0a1      	sub	sp, #132	; 0x84
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a9a      	ldr	r2, [pc, #616]	; (80028b4 <HAL_ADC_ConfigChannel+0x284>)
 800264a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x2a>
 8002656:	2302      	movs	r3, #2
 8002658:	e2bc      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x5a4>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fd22 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 82a1 	bne.w	8002bb6 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267c:	2b00      	cmp	r3, #0
 800267e:	d108      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x62>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2201      	movs	r2, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	e016      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x90>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80026ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2201      	movs	r2, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	69d1      	ldr	r1, [r2, #28]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	430b      	orrs	r3, r1
 80026cc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	f7ff fb87 	bl	8001dee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fce3 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 80026ea:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fd05 	bl	8002100 <LL_ADC_INJ_IsConversionOngoing>
 80026f6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 80a0 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 809c 	bne.w	8002840 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	461a      	mov	r2, r3
 8002716:	f7ff fba9 	bl	8001e6c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x110>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	e00a      	b.n	8002756 <HAL_ADC_ConfigChannel+0x126>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d027      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6919      	ldr	r1, [r3, #16]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276e:	f7ff fad7 	bl	8001d20 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	7e5b      	ldrb	r3, [r3, #25]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x158>
 8002782:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002786:	e000      	b.n	800278a <HAL_ADC_ConfigChannel+0x15a>
 8002788:	2300      	movs	r3, #0
 800278a:	461a      	mov	r2, r3
 800278c:	f7ff fb01 	bl	8001d92 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6919      	ldr	r1, [r3, #16]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	7e1b      	ldrb	r3, [r3, #24]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x176>
 80027a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027a4:	e000      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x178>
 80027a6:	2300      	movs	r3, #0
 80027a8:	461a      	mov	r2, r3
 80027aa:	f7ff fad9 	bl	8001d60 <LL_ADC_SetDataRightShift>
 80027ae:	e047      	b.n	8002840 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	069b      	lsls	r3, r3, #26
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027d2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d107      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027f6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	069b      	lsls	r3, r3, #26
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800281a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	069b      	lsls	r3, r3, #26
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800283e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fbe5 	bl	8002014 <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 81bb 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f7ff fb30 	bl	8001ec4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_ADC_ConfigChannel+0x284>)
 800286a:	4293      	cmp	r3, r2
 800286c:	f040 8130 	bne.w	8002ad0 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x268>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	3301      	adds	r3, #1
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2b09      	cmp	r3, #9
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e01b      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x2a0>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80028a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80028aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e005      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x290>
 80028b4:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80028b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2b09      	cmp	r3, #9
 80028c8:	bf94      	ite	ls
 80028ca:	2301      	movls	r3, #1
 80028cc:	2300      	movhi	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d079      	beq.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2c0>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0e9b      	lsrs	r3, r3, #26
 80028e6:	3301      	adds	r3, #1
 80028e8:	069b      	lsls	r3, r3, #26
 80028ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ee:	e015      	b.n	800291c <HAL_ADC_ConfigChannel+0x2ec>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002900:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e003      	b.n	8002914 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800290c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_ADC_ConfigChannel+0x30c>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	3301      	adds	r3, #1
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	e017      	b.n	800296c <HAL_ADC_ConfigChannel+0x33c>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800294e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e003      	b.n	8002960 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	ea42 0103 	orr.w	r1, r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x362>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	051b      	lsls	r3, r3, #20
 8002990:	e018      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x394>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80029a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c4:	430b      	orrs	r3, r1
 80029c6:	e07e      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d107      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x3b4>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0e9b      	lsrs	r3, r3, #26
 80029da:	3301      	adds	r3, #1
 80029dc:	069b      	lsls	r3, r3, #26
 80029de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e2:	e015      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x3e0>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e003      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	069b      	lsls	r3, r3, #26
 8002a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x400>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	3301      	adds	r3, #1
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	e017      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x430>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	61bb      	str	r3, [r7, #24]
  return result;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	ea42 0103 	orr.w	r1, r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x45c>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	3301      	adds	r3, #1
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	3b1e      	subs	r3, #30
 8002a84:	051b      	lsls	r3, r3, #20
 8002a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	e01b      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x494>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	60fb      	str	r3, [r7, #12]
  return result;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f003 021f 	and.w	r2, r3, #31
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	3b1e      	subs	r3, #30
 8002abe:	051b      	lsls	r3, r3, #20
 8002ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7ff f9ce 	bl	8001e6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	da77      	bge.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad8:	4840      	ldr	r0, [pc, #256]	; (8002bdc <HAL_ADC_ConfigChannel+0x5ac>)
 8002ada:	f7ff f913 	bl	8001d04 <LL_ADC_GetCommonPathInternalCh>
 8002ade:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae0:	483f      	ldr	r0, [pc, #252]	; (8002be0 <HAL_ADC_ConfigChannel+0x5b0>)
 8002ae2:	f7ff fa97 	bl	8002014 <LL_ADC_IsEnabled>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	483e      	ldr	r0, [pc, #248]	; (8002be4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002aea:	f7ff fa93 	bl	8002014 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4323      	orrs	r3, r4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d155      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <HAL_ADC_ConfigChannel+0x5b8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d122      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x516>
 8002b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11d      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a35      	ldr	r2, [pc, #212]	; (8002be4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d159      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	482f      	ldr	r0, [pc, #188]	; (8002bdc <HAL_ADC_ConfigChannel+0x5ac>)
 8002b1e:	f7ff f8de 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_ADC_ConfigChannel+0x5bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_ADC_ConfigChannel+0x5c0>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	3301      	adds	r3, #1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b36:	e002      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f9      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b44:	e040      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a2a      	ldr	r2, [pc, #168]	; (8002bf4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d111      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x544>
 8002b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d131      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	481b      	ldr	r0, [pc, #108]	; (8002bdc <HAL_ADC_ConfigChannel+0x5ac>)
 8002b6e:	f7ff f8b6 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b72:	e029      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d124      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
 8002b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d11f      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d11a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4810      	ldr	r0, [pc, #64]	; (8002bdc <HAL_ADC_ConfigChannel+0x5ac>)
 8002b9c:	f7ff f89f 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
 8002ba0:	e012      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002bb4:	e008      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3784      	adds	r7, #132	; 0x84
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	40022300 	.word	0x40022300
 8002be0:	40022000 	.word	0x40022000
 8002be4:	40022100 	.word	0x40022100
 8002be8:	cb840000 	.word	0xcb840000
 8002bec:	24000004 	.word	0x24000004
 8002bf0:	053e2d63 	.word	0x053e2d63
 8002bf4:	bac04000 	.word	0xbac04000
 8002bf8:	cfb80000 	.word	0xcfb80000

08002bfc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fa4c 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 8002c18:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fa6e 	bl	8002100 <LL_ADC_INJ_IsConversionOngoing>
 8002c24:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8098 	beq.w	8002d64 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02a      	beq.n	8002c98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7d5b      	ldrb	r3, [r3, #21]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d126      	bne.n	8002c98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7d1b      	ldrb	r3, [r3, #20]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d122      	bne.n	8002c98 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c56:	e014      	b.n	8002c82 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <ADC_ConversionStop+0x174>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d90d      	bls.n	8002c7c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f043 0210 	orr.w	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e074      	b.n	8002d66 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d1e3      	bne.n	8002c58 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d014      	beq.n	8002cc8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fa04 	bl	80020b0 <LL_ADC_REG_IsConversionOngoing>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f9c1 	bl	800203a <LL_ADC_IsDisableOngoing>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff f9e0 	bl	8002088 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d014      	beq.n	8002cf8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fa14 	bl	8002100 <LL_ADC_INJ_IsConversionOngoing>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f9a9 	bl	800203a <LL_ADC_IsDisableOngoing>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f9f0 	bl	80020d8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d005      	beq.n	8002d0a <ADC_ConversionStop+0x10e>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d105      	bne.n	8002d10 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002d04:	230c      	movs	r3, #12
 8002d06:	617b      	str	r3, [r7, #20]
        break;
 8002d08:	e005      	b.n	8002d16 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	617b      	str	r3, [r7, #20]
        break;
 8002d0e:	e002      	b.n	8002d16 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d10:	2304      	movs	r3, #4
 8002d12:	617b      	str	r3, [r7, #20]
        break;
 8002d14:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d16:	f7fe ffc3 	bl	8001ca0 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d1c:	e01b      	b.n	8002d56 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d1e:	f7fe ffbf 	bl	8001ca0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d914      	bls.n	8002d56 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e007      	b.n	8002d66 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1dc      	bne.n	8002d1e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	000cdbff 	.word	0x000cdbff

08002d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f947 	bl	8002014 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d161      	bne.n	8002e50 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <ADC_Enable+0xe8>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e04d      	b.n	8002e52 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f902 	bl	8001fc4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dc0:	f7fe ff6e 	bl	8001ca0 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc6:	4826      	ldr	r0, [pc, #152]	; (8002e60 <ADC_Enable+0xec>)
 8002dc8:	f7ff f8a0 	bl	8001f0c <LL_ADC_GetMultimode>
 8002dcc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <ADC_Enable+0xf0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d002      	beq.n	8002dde <ADC_Enable+0x6a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	e000      	b.n	8002de0 <ADC_Enable+0x6c>
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <ADC_Enable+0xf4>)
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d02c      	beq.n	8002e42 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d130      	bne.n	8002e50 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dee:	e028      	b.n	8002e42 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f90d 	bl	8002014 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f8dd 	bl	8001fc4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e0a:	f7fe ff49 	bl	8001ca0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d914      	bls.n	8002e42 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d00d      	beq.n	8002e42 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f043 0210 	orr.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e007      	b.n	8002e52 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d1cf      	bne.n	8002df0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	8000003f 	.word	0x8000003f
 8002e60:	40022300 	.word	0x40022300
 8002e64:	40022100 	.word	0x40022100
 8002e68:	40022000 	.word	0x40022000

08002e6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f8de 	bl	800203a <LL_ADC_IsDisableOngoing>
 8002e7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff f8c5 	bl	8002014 <LL_ADC_IsEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d047      	beq.n	8002f20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d144      	bne.n	8002f20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030d 	and.w	r3, r3, #13
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10c      	bne.n	8002ebe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f89f 	bl	8001fec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eb6:	f7fe fef3 	bl	8001ca0 <HAL_GetTick>
 8002eba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ebc:	e029      	b.n	8002f12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f043 0210 	orr.w	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e023      	b.n	8002f22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eda:	f7fe fee1 	bl	8001ca0 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d914      	bls.n	8002f12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f043 0210 	orr.w	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e007      	b.n	8002f22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1dc      	bne.n	8002eda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d14b      	bne.n	8002fdc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d021      	beq.n	8002fa2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe ff30 	bl	8001dc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d032      	beq.n	8002fd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d12b      	bne.n	8002fd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11f      	bne.n	8002fd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
 8002fa0:	e018      	b.n	8002fd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7fe f815 	bl	8001004 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fda:	e00e      	b.n	8002ffa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff fb17 	bl	800261c <HAL_ADC_ErrorCallback>
}
 8002fee:	e004      	b.n	8002ffa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff faf9 	bl	8002608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fae9 	bl	800261c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800305c:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <ADC_ConfigureBoostMode+0x18c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01c      	beq.n	80030a2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003068:	f004 f89e 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 800306c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003076:	d010      	beq.n	800309a <ADC_ConfigureBoostMode+0x46>
 8003078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800307c:	d873      	bhi.n	8003166 <ADC_ConfigureBoostMode+0x112>
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d002      	beq.n	800308a <ADC_ConfigureBoostMode+0x36>
 8003084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003088:	d16d      	bne.n	8003166 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	60fb      	str	r3, [r7, #12]
        break;
 8003098:	e068      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
        break;
 80030a0:	e064      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	f005 fad9 	bl	8008660 <HAL_RCCEx_GetPeriphCLKFreq>
 80030ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030b8:	d051      	beq.n	800315e <ADC_ConfigureBoostMode+0x10a>
 80030ba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030be:	d854      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 80030c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030c4:	d047      	beq.n	8003156 <ADC_ConfigureBoostMode+0x102>
 80030c6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030ca:	d84e      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 80030cc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030d0:	d03d      	beq.n	800314e <ADC_ConfigureBoostMode+0xfa>
 80030d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030d6:	d848      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 80030d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030dc:	d033      	beq.n	8003146 <ADC_ConfigureBoostMode+0xf2>
 80030de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e2:	d842      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 80030e4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030e8:	d029      	beq.n	800313e <ADC_ConfigureBoostMode+0xea>
 80030ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030ee:	d83c      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 80030f0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030f4:	d01a      	beq.n	800312c <ADC_ConfigureBoostMode+0xd8>
 80030f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030fa:	d836      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 80030fc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003100:	d014      	beq.n	800312c <ADC_ConfigureBoostMode+0xd8>
 8003102:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003106:	d830      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 8003108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800310c:	d00e      	beq.n	800312c <ADC_ConfigureBoostMode+0xd8>
 800310e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003112:	d82a      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 8003114:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003118:	d008      	beq.n	800312c <ADC_ConfigureBoostMode+0xd8>
 800311a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800311e:	d824      	bhi.n	800316a <ADC_ConfigureBoostMode+0x116>
 8003120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003124:	d002      	beq.n	800312c <ADC_ConfigureBoostMode+0xd8>
 8003126:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800312a:	d11e      	bne.n	800316a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	60fb      	str	r3, [r7, #12]
        break;
 800313c:	e016      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
        break;
 8003144:	e012      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	60fb      	str	r3, [r7, #12]
        break;
 800314c:	e00e      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	60fb      	str	r3, [r7, #12]
        break;
 8003154:	e00a      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	09db      	lsrs	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]
        break;
 800315c:	e006      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	60fb      	str	r3, [r7, #12]
        break;
 8003164:	e002      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
        break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800316a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <ADC_ConfigureBoostMode+0x190>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d808      	bhi.n	800318c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003188:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800318a:	e025      	b.n	80031d8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <ADC_ConfigureBoostMode+0x194>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d80a      	bhi.n	80031aa <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	e016      	b.n	80031d8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <ADC_ConfigureBoostMode+0x198>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d80a      	bhi.n	80031c8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	609a      	str	r2, [r3, #8]
}
 80031c6:	e007      	b.n	80031d8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40022300 	.word	0x40022300
 80031e4:	005f5e10 	.word	0x005f5e10
 80031e8:	00bebc20 	.word	0x00bebc20
 80031ec:	017d7840 	.word	0x017d7840

080031f0 <LL_ADC_IsEnabled>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <LL_ADC_IsEnabled+0x18>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <LL_ADC_IsEnabled+0x1a>
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_ADC_REG_IsConversionOngoing>:
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b04      	cmp	r3, #4
 8003228:	d101      	bne.n	800322e <LL_ADC_REG_IsConversionOngoing+0x18>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b09f      	sub	sp, #124	; 0x7c
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003256:	2302      	movs	r3, #2
 8003258:	e080      	b.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3d      	ldr	r2, [pc, #244]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d102      	bne.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	e001      	b.n	800327e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e05f      	b.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ffb9 	bl	8003216 <LL_ADC_REG_IsConversionOngoing>
 80032a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ffb3 	bl	8003216 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d141      	bne.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d13e      	bne.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80032be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032da:	4822      	ldr	r0, [pc, #136]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032dc:	f7ff ff88 	bl	80031f0 <LL_ADC_IsEnabled>
 80032e0:	4604      	mov	r4, r0
 80032e2:	4821      	ldr	r0, [pc, #132]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80032e4:	f7ff ff84 	bl	80031f0 <LL_ADC_IsEnabled>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4323      	orrs	r3, r4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d12e      	bne.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	6811      	ldr	r1, [r2, #0]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	6892      	ldr	r2, [r2, #8]
 8003300:	430a      	orrs	r2, r1
 8003302:	431a      	orrs	r2, r3
 8003304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003306:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003308:	e021      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800330a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003316:	4813      	ldr	r0, [pc, #76]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003318:	f7ff ff6a 	bl	80031f0 <LL_ADC_IsEnabled>
 800331c:	4604      	mov	r4, r0
 800331e:	4812      	ldr	r0, [pc, #72]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003320:	f7ff ff66 	bl	80031f0 <LL_ADC_IsEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	4323      	orrs	r3, r4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d110      	bne.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800332c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003332:	4013      	ands	r3, r2
 8003334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003336:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003338:	e009      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800334c:	e000      	b.n	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800334e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003358:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800335c:	4618      	mov	r0, r3
 800335e:	377c      	adds	r7, #124	; 0x7c
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}
 8003364:	40022000 	.word	0x40022000
 8003368:	40022100 	.word	0x40022100
 800336c:	40022300 	.word	0x40022300
 8003370:	fffff0e0 	.word	0xfffff0e0

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <__NVIC_SetPriorityGrouping+0x40>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00
 80033b8:	05fa0000 	.word	0x05fa0000

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	; (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ff4c 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f2:	f7ff ff63 	bl	80033bc <__NVIC_GetPriorityGrouping>
 80034f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	6978      	ldr	r0, [r7, #20]
 80034fe:	f7ff ffb3 	bl	8003468 <NVIC_EncodePriority>
 8003502:	4602      	mov	r2, r0
 8003504:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff82 	bl	8003414 <__NVIC_SetPriority>
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff56 	bl	80033d8 <__NVIC_EnableIRQ>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7fe fbb0 	bl	8001ca0 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e37f      	b.n	8003c4c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_DMA_Init+0x1b8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d04a      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <HAL_DMA_Init+0x1bc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d045      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a63      	ldr	r2, [pc, #396]	; (80036f4 <HAL_DMA_Init+0x1c0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d040      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <HAL_DMA_Init+0x1c4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d03b      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a60      	ldr	r2, [pc, #384]	; (80036fc <HAL_DMA_Init+0x1c8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d036      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <HAL_DMA_Init+0x1cc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d031      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_DMA_Init+0x1d0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02c      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5c      	ldr	r2, [pc, #368]	; (8003708 <HAL_DMA_Init+0x1d4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d027      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5a      	ldr	r2, [pc, #360]	; (800370c <HAL_DMA_Init+0x1d8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d022      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a59      	ldr	r2, [pc, #356]	; (8003710 <HAL_DMA_Init+0x1dc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d01d      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a57      	ldr	r2, [pc, #348]	; (8003714 <HAL_DMA_Init+0x1e0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_DMA_Init+0x1e4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_DMA_Init+0x1e8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a53      	ldr	r2, [pc, #332]	; (8003720 <HAL_DMA_Init+0x1ec>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a51      	ldr	r2, [pc, #324]	; (8003724 <HAL_DMA_Init+0x1f0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_DMA_Init+0xb8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a50      	ldr	r2, [pc, #320]	; (8003728 <HAL_DMA_Init+0x1f4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_DMA_Init+0xbc>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_DMA_Init+0xbe>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 813c 	beq.w	8003870 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a37      	ldr	r2, [pc, #220]	; (80036ec <HAL_DMA_Init+0x1b8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04a      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a36      	ldr	r2, [pc, #216]	; (80036f0 <HAL_DMA_Init+0x1bc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d045      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a34      	ldr	r2, [pc, #208]	; (80036f4 <HAL_DMA_Init+0x1c0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d040      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a33      	ldr	r2, [pc, #204]	; (80036f8 <HAL_DMA_Init+0x1c4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d03b      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_DMA_Init+0x1c8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d036      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a30      	ldr	r2, [pc, #192]	; (8003700 <HAL_DMA_Init+0x1cc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d031      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <HAL_DMA_Init+0x1d0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02c      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <HAL_DMA_Init+0x1d4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d027      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <HAL_DMA_Init+0x1d8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <HAL_DMA_Init+0x1dc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a28      	ldr	r2, [pc, #160]	; (8003714 <HAL_DMA_Init+0x1e0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a27      	ldr	r2, [pc, #156]	; (8003718 <HAL_DMA_Init+0x1e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_DMA_Init+0x1e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_DMA_Init+0x1ec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a22      	ldr	r2, [pc, #136]	; (8003724 <HAL_DMA_Init+0x1f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_DMA_Init+0x174>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_DMA_Init+0x1f4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <HAL_DMA_Init+0x186>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e007      	b.n	80036ca <HAL_DMA_Init+0x196>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036ca:	e02f      	b.n	800372c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036cc:	f7fe fae8 	bl	8001ca0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d928      	bls.n	800372c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2203      	movs	r2, #3
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e2af      	b.n	8003c4c <HAL_DMA_Init+0x718>
 80036ec:	40020010 	.word	0x40020010
 80036f0:	40020028 	.word	0x40020028
 80036f4:	40020040 	.word	0x40020040
 80036f8:	40020058 	.word	0x40020058
 80036fc:	40020070 	.word	0x40020070
 8003700:	40020088 	.word	0x40020088
 8003704:	400200a0 	.word	0x400200a0
 8003708:	400200b8 	.word	0x400200b8
 800370c:	40020410 	.word	0x40020410
 8003710:	40020428 	.word	0x40020428
 8003714:	40020440 	.word	0x40020440
 8003718:	40020458 	.word	0x40020458
 800371c:	40020470 	.word	0x40020470
 8003720:	40020488 	.word	0x40020488
 8003724:	400204a0 	.word	0x400204a0
 8003728:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1c8      	bne.n	80036cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4b73      	ldr	r3, [pc, #460]	; (8003914 <HAL_DMA_Init+0x3e0>)
 8003746:	4013      	ands	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003752:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4313      	orrs	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b28      	cmp	r3, #40	; 0x28
 8003796:	d903      	bls.n	80037a0 <HAL_DMA_Init+0x26c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b2e      	cmp	r3, #46	; 0x2e
 800379e:	d91f      	bls.n	80037e0 <HAL_DMA_Init+0x2ac>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b3e      	cmp	r3, #62	; 0x3e
 80037a6:	d903      	bls.n	80037b0 <HAL_DMA_Init+0x27c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b42      	cmp	r3, #66	; 0x42
 80037ae:	d917      	bls.n	80037e0 <HAL_DMA_Init+0x2ac>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b46      	cmp	r3, #70	; 0x46
 80037b6:	d903      	bls.n	80037c0 <HAL_DMA_Init+0x28c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b48      	cmp	r3, #72	; 0x48
 80037be:	d90f      	bls.n	80037e0 <HAL_DMA_Init+0x2ac>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b4e      	cmp	r3, #78	; 0x4e
 80037c6:	d903      	bls.n	80037d0 <HAL_DMA_Init+0x29c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b52      	cmp	r3, #82	; 0x52
 80037ce:	d907      	bls.n	80037e0 <HAL_DMA_Init+0x2ac>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b73      	cmp	r3, #115	; 0x73
 80037d6:	d905      	bls.n	80037e4 <HAL_DMA_Init+0x2b0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b77      	cmp	r3, #119	; 0x77
 80037de:	d801      	bhi.n	80037e4 <HAL_DMA_Init+0x2b0>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_DMA_Init+0x2b2>
 80037e4:	2300      	movs	r3, #0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0307 	bic.w	r3, r3, #7
 8003808:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2b04      	cmp	r3, #4
 800381a:	d117      	bne.n	800384c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f002 f990 	bl	8005b54 <DMA_CheckFifoParam>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2240      	movs	r2, #64	; 0x40
 800383e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e1ff      	b.n	8003c4c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f002 f8cb 	bl	80059f0 <DMA_CalcBaseAndBitshift>
 800385a:	4603      	mov	r3, r0
 800385c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	223f      	movs	r2, #63	; 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	e0fe      	b.n	8003a6e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a28      	ldr	r2, [pc, #160]	; (8003918 <HAL_DMA_Init+0x3e4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04a      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a27      	ldr	r2, [pc, #156]	; (800391c <HAL_DMA_Init+0x3e8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d045      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a25      	ldr	r2, [pc, #148]	; (8003920 <HAL_DMA_Init+0x3ec>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d040      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a24      	ldr	r2, [pc, #144]	; (8003924 <HAL_DMA_Init+0x3f0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d03b      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a22      	ldr	r2, [pc, #136]	; (8003928 <HAL_DMA_Init+0x3f4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d036      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a21      	ldr	r2, [pc, #132]	; (800392c <HAL_DMA_Init+0x3f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d031      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <HAL_DMA_Init+0x3fc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02c      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <HAL_DMA_Init+0x400>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d027      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <HAL_DMA_Init+0x404>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_DMA_Init+0x408>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01d      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_DMA_Init+0x40c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_DMA_Init+0x410>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_DMA_Init+0x414>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_DMA_Init+0x418>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a13      	ldr	r2, [pc, #76]	; (8003950 <HAL_DMA_Init+0x41c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_DMA_Init+0x3dc>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <HAL_DMA_Init+0x420>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d123      	bne.n	8003958 <HAL_DMA_Init+0x424>
 8003910:	2301      	movs	r3, #1
 8003912:	e022      	b.n	800395a <HAL_DMA_Init+0x426>
 8003914:	fe10803f 	.word	0xfe10803f
 8003918:	48022c08 	.word	0x48022c08
 800391c:	48022c1c 	.word	0x48022c1c
 8003920:	48022c30 	.word	0x48022c30
 8003924:	48022c44 	.word	0x48022c44
 8003928:	48022c58 	.word	0x48022c58
 800392c:	48022c6c 	.word	0x48022c6c
 8003930:	48022c80 	.word	0x48022c80
 8003934:	48022c94 	.word	0x48022c94
 8003938:	58025408 	.word	0x58025408
 800393c:	5802541c 	.word	0x5802541c
 8003940:	58025430 	.word	0x58025430
 8003944:	58025444 	.word	0x58025444
 8003948:	58025458 	.word	0x58025458
 800394c:	5802546c 	.word	0x5802546c
 8003950:	58025480 	.word	0x58025480
 8003954:	58025494 	.word	0x58025494
 8003958:	2300      	movs	r3, #0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d07e      	beq.n	8003a5c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a80      	ldr	r2, [pc, #512]	; (8003b64 <HAL_DMA_Init+0x630>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d021      	beq.n	80039ac <HAL_DMA_Init+0x478>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a7e      	ldr	r2, [pc, #504]	; (8003b68 <HAL_DMA_Init+0x634>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01c      	beq.n	80039ac <HAL_DMA_Init+0x478>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7d      	ldr	r2, [pc, #500]	; (8003b6c <HAL_DMA_Init+0x638>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d017      	beq.n	80039ac <HAL_DMA_Init+0x478>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7b      	ldr	r2, [pc, #492]	; (8003b70 <HAL_DMA_Init+0x63c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d012      	beq.n	80039ac <HAL_DMA_Init+0x478>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7a      	ldr	r2, [pc, #488]	; (8003b74 <HAL_DMA_Init+0x640>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00d      	beq.n	80039ac <HAL_DMA_Init+0x478>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a78      	ldr	r2, [pc, #480]	; (8003b78 <HAL_DMA_Init+0x644>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d008      	beq.n	80039ac <HAL_DMA_Init+0x478>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a77      	ldr	r2, [pc, #476]	; (8003b7c <HAL_DMA_Init+0x648>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <HAL_DMA_Init+0x478>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a75      	ldr	r2, [pc, #468]	; (8003b80 <HAL_DMA_Init+0x64c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <HAL_DMA_Init+0x650>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d008      	beq.n	80039e8 <HAL_DMA_Init+0x4b4>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d102      	bne.n	80039e4 <HAL_DMA_Init+0x4b0>
 80039de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039e2:	e002      	b.n	80039ea <HAL_DMA_Init+0x4b6>
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_DMA_Init+0x4b6>
 80039e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68d2      	ldr	r2, [r2, #12]
 80039ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b56      	ldr	r3, [pc, #344]	; (8003b88 <HAL_DMA_Init+0x654>)
 8003a30:	4413      	add	r3, r2
 8003a32:	4a56      	ldr	r2, [pc, #344]	; (8003b8c <HAL_DMA_Init+0x658>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 ffd5 	bl	80059f0 <DMA_CalcBaseAndBitshift>
 8003a46:	4603      	mov	r3, r0
 8003a48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	2201      	movs	r2, #1
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	e008      	b.n	8003a6e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2240      	movs	r2, #64	; 0x40
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0ee      	b.n	8003c4c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a47      	ldr	r2, [pc, #284]	; (8003b90 <HAL_DMA_Init+0x65c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d072      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a45      	ldr	r2, [pc, #276]	; (8003b94 <HAL_DMA_Init+0x660>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d06d      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a44      	ldr	r2, [pc, #272]	; (8003b98 <HAL_DMA_Init+0x664>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d068      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a42      	ldr	r2, [pc, #264]	; (8003b9c <HAL_DMA_Init+0x668>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d063      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a41      	ldr	r2, [pc, #260]	; (8003ba0 <HAL_DMA_Init+0x66c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d05e      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3f      	ldr	r2, [pc, #252]	; (8003ba4 <HAL_DMA_Init+0x670>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d059      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3e      	ldr	r2, [pc, #248]	; (8003ba8 <HAL_DMA_Init+0x674>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d054      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <HAL_DMA_Init+0x678>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04f      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <HAL_DMA_Init+0x67c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a39      	ldr	r2, [pc, #228]	; (8003bb4 <HAL_DMA_Init+0x680>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a38      	ldr	r2, [pc, #224]	; (8003bb8 <HAL_DMA_Init+0x684>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a36      	ldr	r2, [pc, #216]	; (8003bbc <HAL_DMA_Init+0x688>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a35      	ldr	r2, [pc, #212]	; (8003bc0 <HAL_DMA_Init+0x68c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <HAL_DMA_Init+0x690>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <HAL_DMA_Init+0x694>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <HAL_DMA_Init+0x698>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <HAL_DMA_Init+0x630>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <HAL_DMA_Init+0x634>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <HAL_DMA_Init+0x638>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <HAL_DMA_Init+0x63c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_DMA_Init+0x640>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <HAL_DMA_Init+0x644>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <HAL_DMA_Init+0x648>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_Init+0x62a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_DMA_Init+0x64c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d138      	bne.n	8003bd0 <HAL_DMA_Init+0x69c>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e037      	b.n	8003bd2 <HAL_DMA_Init+0x69e>
 8003b62:	bf00      	nop
 8003b64:	58025408 	.word	0x58025408
 8003b68:	5802541c 	.word	0x5802541c
 8003b6c:	58025430 	.word	0x58025430
 8003b70:	58025444 	.word	0x58025444
 8003b74:	58025458 	.word	0x58025458
 8003b78:	5802546c 	.word	0x5802546c
 8003b7c:	58025480 	.word	0x58025480
 8003b80:	58025494 	.word	0x58025494
 8003b84:	fffe000f 	.word	0xfffe000f
 8003b88:	a7fdabf8 	.word	0xa7fdabf8
 8003b8c:	cccccccd 	.word	0xcccccccd
 8003b90:	40020010 	.word	0x40020010
 8003b94:	40020028 	.word	0x40020028
 8003b98:	40020040 	.word	0x40020040
 8003b9c:	40020058 	.word	0x40020058
 8003ba0:	40020070 	.word	0x40020070
 8003ba4:	40020088 	.word	0x40020088
 8003ba8:	400200a0 	.word	0x400200a0
 8003bac:	400200b8 	.word	0x400200b8
 8003bb0:	40020410 	.word	0x40020410
 8003bb4:	40020428 	.word	0x40020428
 8003bb8:	40020440 	.word	0x40020440
 8003bbc:	40020458 	.word	0x40020458
 8003bc0:	40020470 	.word	0x40020470
 8003bc4:	40020488 	.word	0x40020488
 8003bc8:	400204a0 	.word	0x400204a0
 8003bcc:	400204b8 	.word	0x400204b8
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d032      	beq.n	8003c3c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f002 f838 	bl	8005c4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d102      	bne.n	8003bea <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bfe:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_DMA_Init+0x6f6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d80c      	bhi.n	8003c2a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f002 f8b5 	bl	8005d80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	e008      	b.n	8003c3c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e226      	b.n	80040be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_DMA_Start_IT+0x2a>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e21f      	b.n	80040be <HAL_DMA_Start_IT+0x46a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	f040 820a 	bne.w	80040a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a68      	ldr	r2, [pc, #416]	; (8003e48 <HAL_DMA_Start_IT+0x1f4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04a      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a66      	ldr	r2, [pc, #408]	; (8003e4c <HAL_DMA_Start_IT+0x1f8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d045      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_DMA_Start_IT+0x1fc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d040      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a63      	ldr	r2, [pc, #396]	; (8003e54 <HAL_DMA_Start_IT+0x200>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d03b      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a62      	ldr	r2, [pc, #392]	; (8003e58 <HAL_DMA_Start_IT+0x204>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d036      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a60      	ldr	r2, [pc, #384]	; (8003e5c <HAL_DMA_Start_IT+0x208>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d031      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a5f      	ldr	r2, [pc, #380]	; (8003e60 <HAL_DMA_Start_IT+0x20c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d02c      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5d      	ldr	r2, [pc, #372]	; (8003e64 <HAL_DMA_Start_IT+0x210>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d027      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5c      	ldr	r2, [pc, #368]	; (8003e68 <HAL_DMA_Start_IT+0x214>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a5a      	ldr	r2, [pc, #360]	; (8003e6c <HAL_DMA_Start_IT+0x218>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a59      	ldr	r2, [pc, #356]	; (8003e70 <HAL_DMA_Start_IT+0x21c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a57      	ldr	r2, [pc, #348]	; (8003e74 <HAL_DMA_Start_IT+0x220>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a56      	ldr	r2, [pc, #344]	; (8003e78 <HAL_DMA_Start_IT+0x224>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a54      	ldr	r2, [pc, #336]	; (8003e7c <HAL_DMA_Start_IT+0x228>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a53      	ldr	r2, [pc, #332]	; (8003e80 <HAL_DMA_Start_IT+0x22c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_Start_IT+0xee>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a51      	ldr	r2, [pc, #324]	; (8003e84 <HAL_DMA_Start_IT+0x230>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <HAL_DMA_Start_IT+0x100>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e007      	b.n	8003d64 <HAL_DMA_Start_IT+0x110>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f001 fc5c 	bl	8005628 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a34      	ldr	r2, [pc, #208]	; (8003e48 <HAL_DMA_Start_IT+0x1f4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04a      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a33      	ldr	r2, [pc, #204]	; (8003e4c <HAL_DMA_Start_IT+0x1f8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d045      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a31      	ldr	r2, [pc, #196]	; (8003e50 <HAL_DMA_Start_IT+0x1fc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d040      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <HAL_DMA_Start_IT+0x200>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d03b      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2e      	ldr	r2, [pc, #184]	; (8003e58 <HAL_DMA_Start_IT+0x204>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d036      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2d      	ldr	r2, [pc, #180]	; (8003e5c <HAL_DMA_Start_IT+0x208>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d031      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2b      	ldr	r2, [pc, #172]	; (8003e60 <HAL_DMA_Start_IT+0x20c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <HAL_DMA_Start_IT+0x210>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d027      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <HAL_DMA_Start_IT+0x214>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <HAL_DMA_Start_IT+0x218>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a25      	ldr	r2, [pc, #148]	; (8003e70 <HAL_DMA_Start_IT+0x21c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <HAL_DMA_Start_IT+0x220>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <HAL_DMA_Start_IT+0x224>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <HAL_DMA_Start_IT+0x228>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_DMA_Start_IT+0x22c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_DMA_Start_IT+0x1bc>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <HAL_DMA_Start_IT+0x230>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_DMA_Start_IT+0x1c0>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_DMA_Start_IT+0x1c2>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f023 021e 	bic.w	r2, r3, #30
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0216 	orr.w	r2, r2, #22
 8003e2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03e      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0208 	orr.w	r2, r2, #8
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e035      	b.n	8003eb4 <HAL_DMA_Start_IT+0x260>
 8003e48:	40020010 	.word	0x40020010
 8003e4c:	40020028 	.word	0x40020028
 8003e50:	40020040 	.word	0x40020040
 8003e54:	40020058 	.word	0x40020058
 8003e58:	40020070 	.word	0x40020070
 8003e5c:	40020088 	.word	0x40020088
 8003e60:	400200a0 	.word	0x400200a0
 8003e64:	400200b8 	.word	0x400200b8
 8003e68:	40020410 	.word	0x40020410
 8003e6c:	40020428 	.word	0x40020428
 8003e70:	40020440 	.word	0x40020440
 8003e74:	40020458 	.word	0x40020458
 8003e78:	40020470 	.word	0x40020470
 8003e7c:	40020488 	.word	0x40020488
 8003e80:	400204a0 	.word	0x400204a0
 8003e84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 020e 	bic.w	r2, r3, #14
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 020a 	orr.w	r2, r2, #10
 8003e9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0204 	orr.w	r2, r2, #4
 8003eb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a83      	ldr	r2, [pc, #524]	; (80040c8 <HAL_DMA_Start_IT+0x474>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d072      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a82      	ldr	r2, [pc, #520]	; (80040cc <HAL_DMA_Start_IT+0x478>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d06d      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a80      	ldr	r2, [pc, #512]	; (80040d0 <HAL_DMA_Start_IT+0x47c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d068      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7f      	ldr	r2, [pc, #508]	; (80040d4 <HAL_DMA_Start_IT+0x480>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d063      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a7d      	ldr	r2, [pc, #500]	; (80040d8 <HAL_DMA_Start_IT+0x484>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d05e      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7c      	ldr	r2, [pc, #496]	; (80040dc <HAL_DMA_Start_IT+0x488>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d059      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a7a      	ldr	r2, [pc, #488]	; (80040e0 <HAL_DMA_Start_IT+0x48c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d054      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a79      	ldr	r2, [pc, #484]	; (80040e4 <HAL_DMA_Start_IT+0x490>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d04f      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a77      	ldr	r2, [pc, #476]	; (80040e8 <HAL_DMA_Start_IT+0x494>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d04a      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a76      	ldr	r2, [pc, #472]	; (80040ec <HAL_DMA_Start_IT+0x498>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d045      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a74      	ldr	r2, [pc, #464]	; (80040f0 <HAL_DMA_Start_IT+0x49c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d040      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a73      	ldr	r2, [pc, #460]	; (80040f4 <HAL_DMA_Start_IT+0x4a0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d03b      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a71      	ldr	r2, [pc, #452]	; (80040f8 <HAL_DMA_Start_IT+0x4a4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d036      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a70      	ldr	r2, [pc, #448]	; (80040fc <HAL_DMA_Start_IT+0x4a8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d031      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a6e      	ldr	r2, [pc, #440]	; (8004100 <HAL_DMA_Start_IT+0x4ac>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d02c      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a6d      	ldr	r2, [pc, #436]	; (8004104 <HAL_DMA_Start_IT+0x4b0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d027      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a6b      	ldr	r2, [pc, #428]	; (8004108 <HAL_DMA_Start_IT+0x4b4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d022      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6a      	ldr	r2, [pc, #424]	; (800410c <HAL_DMA_Start_IT+0x4b8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d01d      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a68      	ldr	r2, [pc, #416]	; (8004110 <HAL_DMA_Start_IT+0x4bc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d018      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a67      	ldr	r2, [pc, #412]	; (8004114 <HAL_DMA_Start_IT+0x4c0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_DMA_Start_IT+0x4c4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00e      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a64      	ldr	r2, [pc, #400]	; (800411c <HAL_DMA_Start_IT+0x4c8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d009      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a62      	ldr	r2, [pc, #392]	; (8004120 <HAL_DMA_Start_IT+0x4cc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x350>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a61      	ldr	r2, [pc, #388]	; (8004124 <HAL_DMA_Start_IT+0x4d0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <HAL_DMA_Start_IT+0x354>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_DMA_Start_IT+0x356>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01a      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a37      	ldr	r2, [pc, #220]	; (80040c8 <HAL_DMA_Start_IT+0x474>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04a      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a36      	ldr	r2, [pc, #216]	; (80040cc <HAL_DMA_Start_IT+0x478>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d045      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <HAL_DMA_Start_IT+0x47c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d040      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a33      	ldr	r2, [pc, #204]	; (80040d4 <HAL_DMA_Start_IT+0x480>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d03b      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a31      	ldr	r2, [pc, #196]	; (80040d8 <HAL_DMA_Start_IT+0x484>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d036      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a30      	ldr	r2, [pc, #192]	; (80040dc <HAL_DMA_Start_IT+0x488>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d031      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2e      	ldr	r2, [pc, #184]	; (80040e0 <HAL_DMA_Start_IT+0x48c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02c      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2d      	ldr	r2, [pc, #180]	; (80040e4 <HAL_DMA_Start_IT+0x490>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d027      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <HAL_DMA_Start_IT+0x494>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <HAL_DMA_Start_IT+0x498>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d01d      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a28      	ldr	r2, [pc, #160]	; (80040f0 <HAL_DMA_Start_IT+0x49c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <HAL_DMA_Start_IT+0x4a0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <HAL_DMA_Start_IT+0x4a4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a24      	ldr	r2, [pc, #144]	; (80040fc <HAL_DMA_Start_IT+0x4a8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <HAL_DMA_Start_IT+0x4ac>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_DMA_Start_IT+0x430>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a21      	ldr	r2, [pc, #132]	; (8004104 <HAL_DMA_Start_IT+0x4b0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d108      	bne.n	8004096 <HAL_DMA_Start_IT+0x442>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e012      	b.n	80040bc <HAL_DMA_Start_IT+0x468>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e009      	b.n	80040bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
 8004108:	58025408 	.word	0x58025408
 800410c:	5802541c 	.word	0x5802541c
 8004110:	58025430 	.word	0x58025430
 8004114:	58025444 	.word	0x58025444
 8004118:	58025458 	.word	0x58025458
 800411c:	5802546c 	.word	0x5802546c
 8004120:	58025480 	.word	0x58025480
 8004124:	58025494 	.word	0x58025494

08004128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004130:	f7fd fdb6 	bl	8001ca0 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e2dc      	b.n	80046fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d008      	beq.n	800415e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e2cd      	b.n	80046fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a76      	ldr	r2, [pc, #472]	; (800433c <HAL_DMA_Abort+0x214>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d04a      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a74      	ldr	r2, [pc, #464]	; (8004340 <HAL_DMA_Abort+0x218>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d045      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a73      	ldr	r2, [pc, #460]	; (8004344 <HAL_DMA_Abort+0x21c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d040      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a71      	ldr	r2, [pc, #452]	; (8004348 <HAL_DMA_Abort+0x220>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d03b      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a70      	ldr	r2, [pc, #448]	; (800434c <HAL_DMA_Abort+0x224>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d036      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6e      	ldr	r2, [pc, #440]	; (8004350 <HAL_DMA_Abort+0x228>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d031      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a6d      	ldr	r2, [pc, #436]	; (8004354 <HAL_DMA_Abort+0x22c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d02c      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a6b      	ldr	r2, [pc, #428]	; (8004358 <HAL_DMA_Abort+0x230>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d027      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6a      	ldr	r2, [pc, #424]	; (800435c <HAL_DMA_Abort+0x234>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d022      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a68      	ldr	r2, [pc, #416]	; (8004360 <HAL_DMA_Abort+0x238>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01d      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a67      	ldr	r2, [pc, #412]	; (8004364 <HAL_DMA_Abort+0x23c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d018      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a65      	ldr	r2, [pc, #404]	; (8004368 <HAL_DMA_Abort+0x240>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a64      	ldr	r2, [pc, #400]	; (800436c <HAL_DMA_Abort+0x244>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a62      	ldr	r2, [pc, #392]	; (8004370 <HAL_DMA_Abort+0x248>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a61      	ldr	r2, [pc, #388]	; (8004374 <HAL_DMA_Abort+0x24c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_DMA_Abort+0xd6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a5f      	ldr	r2, [pc, #380]	; (8004378 <HAL_DMA_Abort+0x250>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_DMA_Abort+0xda>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_DMA_Abort+0xdc>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 021e 	bic.w	r2, r2, #30
 8004216:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004226:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e00a      	b.n	8004246 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 020e 	bic.w	r2, r2, #14
 800423e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <HAL_DMA_Abort+0x214>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d072      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a3a      	ldr	r2, [pc, #232]	; (8004340 <HAL_DMA_Abort+0x218>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d06d      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a39      	ldr	r2, [pc, #228]	; (8004344 <HAL_DMA_Abort+0x21c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d068      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a37      	ldr	r2, [pc, #220]	; (8004348 <HAL_DMA_Abort+0x220>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d063      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a36      	ldr	r2, [pc, #216]	; (800434c <HAL_DMA_Abort+0x224>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d05e      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a34      	ldr	r2, [pc, #208]	; (8004350 <HAL_DMA_Abort+0x228>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d059      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a33      	ldr	r2, [pc, #204]	; (8004354 <HAL_DMA_Abort+0x22c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d054      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a31      	ldr	r2, [pc, #196]	; (8004358 <HAL_DMA_Abort+0x230>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d04f      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a30      	ldr	r2, [pc, #192]	; (800435c <HAL_DMA_Abort+0x234>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2e      	ldr	r2, [pc, #184]	; (8004360 <HAL_DMA_Abort+0x238>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2d      	ldr	r2, [pc, #180]	; (8004364 <HAL_DMA_Abort+0x23c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2b      	ldr	r2, [pc, #172]	; (8004368 <HAL_DMA_Abort+0x240>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a2a      	ldr	r2, [pc, #168]	; (800436c <HAL_DMA_Abort+0x244>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a28      	ldr	r2, [pc, #160]	; (8004370 <HAL_DMA_Abort+0x248>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a27      	ldr	r2, [pc, #156]	; (8004374 <HAL_DMA_Abort+0x24c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a25      	ldr	r2, [pc, #148]	; (8004378 <HAL_DMA_Abort+0x250>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a24      	ldr	r2, [pc, #144]	; (800437c <HAL_DMA_Abort+0x254>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	; (8004380 <HAL_DMA_Abort+0x258>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	; (8004384 <HAL_DMA_Abort+0x25c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <HAL_DMA_Abort+0x260>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <HAL_DMA_Abort+0x264>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <HAL_DMA_Abort+0x268>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_DMA_Abort+0x26c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_Abort+0x20e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_DMA_Abort+0x270>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d132      	bne.n	800439c <HAL_DMA_Abort+0x274>
 8004336:	2301      	movs	r3, #1
 8004338:	e031      	b.n	800439e <HAL_DMA_Abort+0x276>
 800433a:	bf00      	nop
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	58025408 	.word	0x58025408
 8004380:	5802541c 	.word	0x5802541c
 8004384:	58025430 	.word	0x58025430
 8004388:	58025444 	.word	0x58025444
 800438c:	58025458 	.word	0x58025458
 8004390:	5802546c 	.word	0x5802546c
 8004394:	58025480 	.word	0x58025480
 8004398:	58025494 	.word	0x58025494
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6d      	ldr	r2, [pc, #436]	; (800456c <HAL_DMA_Abort+0x444>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d04a      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6b      	ldr	r2, [pc, #428]	; (8004570 <HAL_DMA_Abort+0x448>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d045      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6a      	ldr	r2, [pc, #424]	; (8004574 <HAL_DMA_Abort+0x44c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d040      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a68      	ldr	r2, [pc, #416]	; (8004578 <HAL_DMA_Abort+0x450>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d03b      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a67      	ldr	r2, [pc, #412]	; (800457c <HAL_DMA_Abort+0x454>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d036      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a65      	ldr	r2, [pc, #404]	; (8004580 <HAL_DMA_Abort+0x458>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d031      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a64      	ldr	r2, [pc, #400]	; (8004584 <HAL_DMA_Abort+0x45c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d02c      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a62      	ldr	r2, [pc, #392]	; (8004588 <HAL_DMA_Abort+0x460>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d027      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a61      	ldr	r2, [pc, #388]	; (800458c <HAL_DMA_Abort+0x464>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d022      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5f      	ldr	r2, [pc, #380]	; (8004590 <HAL_DMA_Abort+0x468>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5e      	ldr	r2, [pc, #376]	; (8004594 <HAL_DMA_Abort+0x46c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d018      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5c      	ldr	r2, [pc, #368]	; (8004598 <HAL_DMA_Abort+0x470>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a5b      	ldr	r2, [pc, #364]	; (800459c <HAL_DMA_Abort+0x474>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a59      	ldr	r2, [pc, #356]	; (80045a0 <HAL_DMA_Abort+0x478>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a58      	ldr	r2, [pc, #352]	; (80045a4 <HAL_DMA_Abort+0x47c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_DMA_Abort+0x32a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a56      	ldr	r2, [pc, #344]	; (80045a8 <HAL_DMA_Abort+0x480>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <HAL_DMA_Abort+0x33c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e007      	b.n	8004474 <HAL_DMA_Abort+0x34c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004474:	e013      	b.n	800449e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004476:	f7fd fc13 	bl	8001ca0 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b05      	cmp	r3, #5
 8004482:	d90c      	bls.n	800449e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e12d      	b.n	80046fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e5      	bne.n	8004476 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2f      	ldr	r2, [pc, #188]	; (800456c <HAL_DMA_Abort+0x444>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <HAL_DMA_Abort+0x448>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_DMA_Abort+0x44c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_DMA_Abort+0x450>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a29      	ldr	r2, [pc, #164]	; (800457c <HAL_DMA_Abort+0x454>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a27      	ldr	r2, [pc, #156]	; (8004580 <HAL_DMA_Abort+0x458>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_DMA_Abort+0x45c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a24      	ldr	r2, [pc, #144]	; (8004588 <HAL_DMA_Abort+0x460>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_Abort+0x422>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a23      	ldr	r2, [pc, #140]	; (800458c <HAL_DMA_Abort+0x464>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_Abort+0x422>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a21      	ldr	r2, [pc, #132]	; (8004590 <HAL_DMA_Abort+0x468>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_Abort+0x422>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a20      	ldr	r2, [pc, #128]	; (8004594 <HAL_DMA_Abort+0x46c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_Abort+0x422>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <HAL_DMA_Abort+0x470>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_Abort+0x422>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_DMA_Abort+0x474>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_Abort+0x422>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_DMA_Abort+0x478>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_Abort+0x422>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_DMA_Abort+0x47c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_Abort+0x422>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_DMA_Abort+0x480>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_DMA_Abort+0x426>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_DMA_Abort+0x428>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02b      	beq.n	80045ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	223f      	movs	r2, #63	; 0x3f
 8004564:	409a      	lsls	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	609a      	str	r2, [r3, #8]
 800456a:	e02a      	b.n	80045c2 <HAL_DMA_Abort+0x49a>
 800456c:	40020010 	.word	0x40020010
 8004570:	40020028 	.word	0x40020028
 8004574:	40020040 	.word	0x40020040
 8004578:	40020058 	.word	0x40020058
 800457c:	40020070 	.word	0x40020070
 8004580:	40020088 	.word	0x40020088
 8004584:	400200a0 	.word	0x400200a0
 8004588:	400200b8 	.word	0x400200b8
 800458c:	40020410 	.word	0x40020410
 8004590:	40020428 	.word	0x40020428
 8004594:	40020440 	.word	0x40020440
 8004598:	40020458 	.word	0x40020458
 800459c:	40020470 	.word	0x40020470
 80045a0:	40020488 	.word	0x40020488
 80045a4:	400204a0 	.word	0x400204a0
 80045a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2201      	movs	r2, #1
 80045bc:	409a      	lsls	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a4f      	ldr	r2, [pc, #316]	; (8004704 <HAL_DMA_Abort+0x5dc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d072      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a4d      	ldr	r2, [pc, #308]	; (8004708 <HAL_DMA_Abort+0x5e0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d06d      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a4c      	ldr	r2, [pc, #304]	; (800470c <HAL_DMA_Abort+0x5e4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d068      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a4a      	ldr	r2, [pc, #296]	; (8004710 <HAL_DMA_Abort+0x5e8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d063      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a49      	ldr	r2, [pc, #292]	; (8004714 <HAL_DMA_Abort+0x5ec>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d05e      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a47      	ldr	r2, [pc, #284]	; (8004718 <HAL_DMA_Abort+0x5f0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d059      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a46      	ldr	r2, [pc, #280]	; (800471c <HAL_DMA_Abort+0x5f4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d054      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a44      	ldr	r2, [pc, #272]	; (8004720 <HAL_DMA_Abort+0x5f8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d04f      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a43      	ldr	r2, [pc, #268]	; (8004724 <HAL_DMA_Abort+0x5fc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d04a      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a41      	ldr	r2, [pc, #260]	; (8004728 <HAL_DMA_Abort+0x600>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d045      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a40      	ldr	r2, [pc, #256]	; (800472c <HAL_DMA_Abort+0x604>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d040      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <HAL_DMA_Abort+0x608>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d03b      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3d      	ldr	r2, [pc, #244]	; (8004734 <HAL_DMA_Abort+0x60c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d036      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a3b      	ldr	r2, [pc, #236]	; (8004738 <HAL_DMA_Abort+0x610>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3a      	ldr	r2, [pc, #232]	; (800473c <HAL_DMA_Abort+0x614>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d02c      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a38      	ldr	r2, [pc, #224]	; (8004740 <HAL_DMA_Abort+0x618>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d027      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a37      	ldr	r2, [pc, #220]	; (8004744 <HAL_DMA_Abort+0x61c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a35      	ldr	r2, [pc, #212]	; (8004748 <HAL_DMA_Abort+0x620>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a34      	ldr	r2, [pc, #208]	; (800474c <HAL_DMA_Abort+0x624>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a32      	ldr	r2, [pc, #200]	; (8004750 <HAL_DMA_Abort+0x628>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a31      	ldr	r2, [pc, #196]	; (8004754 <HAL_DMA_Abort+0x62c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2f      	ldr	r2, [pc, #188]	; (8004758 <HAL_DMA_Abort+0x630>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2e      	ldr	r2, [pc, #184]	; (800475c <HAL_DMA_Abort+0x634>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_DMA_Abort+0x58a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	; (8004760 <HAL_DMA_Abort+0x638>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_DMA_Abort+0x58e>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_DMA_Abort+0x590>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	40020040 	.word	0x40020040
 8004710:	40020058 	.word	0x40020058
 8004714:	40020070 	.word	0x40020070
 8004718:	40020088 	.word	0x40020088
 800471c:	400200a0 	.word	0x400200a0
 8004720:	400200b8 	.word	0x400200b8
 8004724:	40020410 	.word	0x40020410
 8004728:	40020428 	.word	0x40020428
 800472c:	40020440 	.word	0x40020440
 8004730:	40020458 	.word	0x40020458
 8004734:	40020470 	.word	0x40020470
 8004738:	40020488 	.word	0x40020488
 800473c:	400204a0 	.word	0x400204a0
 8004740:	400204b8 	.word	0x400204b8
 8004744:	58025408 	.word	0x58025408
 8004748:	5802541c 	.word	0x5802541c
 800474c:	58025430 	.word	0x58025430
 8004750:	58025444 	.word	0x58025444
 8004754:	58025458 	.word	0x58025458
 8004758:	5802546c 	.word	0x5802546c
 800475c:	58025480 	.word	0x58025480
 8004760:	58025494 	.word	0x58025494

08004764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004770:	4b67      	ldr	r3, [pc, #412]	; (8004910 <HAL_DMA_IRQHandler+0x1ac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a67      	ldr	r2, [pc, #412]	; (8004914 <HAL_DMA_IRQHandler+0x1b0>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	0a9b      	lsrs	r3, r3, #10
 800477c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a5f      	ldr	r2, [pc, #380]	; (8004918 <HAL_DMA_IRQHandler+0x1b4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04a      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5d      	ldr	r2, [pc, #372]	; (800491c <HAL_DMA_IRQHandler+0x1b8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d045      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5c      	ldr	r2, [pc, #368]	; (8004920 <HAL_DMA_IRQHandler+0x1bc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5a      	ldr	r2, [pc, #360]	; (8004924 <HAL_DMA_IRQHandler+0x1c0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d03b      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a59      	ldr	r2, [pc, #356]	; (8004928 <HAL_DMA_IRQHandler+0x1c4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d036      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_DMA_IRQHandler+0x1c8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d031      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a56      	ldr	r2, [pc, #344]	; (8004930 <HAL_DMA_IRQHandler+0x1cc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a54      	ldr	r2, [pc, #336]	; (8004934 <HAL_DMA_IRQHandler+0x1d0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d027      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a53      	ldr	r2, [pc, #332]	; (8004938 <HAL_DMA_IRQHandler+0x1d4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a51      	ldr	r2, [pc, #324]	; (800493c <HAL_DMA_IRQHandler+0x1d8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a50      	ldr	r2, [pc, #320]	; (8004940 <HAL_DMA_IRQHandler+0x1dc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a4e      	ldr	r2, [pc, #312]	; (8004944 <HAL_DMA_IRQHandler+0x1e0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a4d      	ldr	r2, [pc, #308]	; (8004948 <HAL_DMA_IRQHandler+0x1e4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a4b      	ldr	r2, [pc, #300]	; (800494c <HAL_DMA_IRQHandler+0x1e8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a4a      	ldr	r2, [pc, #296]	; (8004950 <HAL_DMA_IRQHandler+0x1ec>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_IRQHandler+0xd2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a48      	ldr	r2, [pc, #288]	; (8004954 <HAL_DMA_IRQHandler+0x1f0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d101      	bne.n	800483a <HAL_DMA_IRQHandler+0xd6>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <HAL_DMA_IRQHandler+0xd8>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 842b 	beq.w	8005098 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2208      	movs	r2, #8
 800484c:	409a      	lsls	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80a2 	beq.w	800499c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2e      	ldr	r2, [pc, #184]	; (8004918 <HAL_DMA_IRQHandler+0x1b4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d04a      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2d      	ldr	r2, [pc, #180]	; (800491c <HAL_DMA_IRQHandler+0x1b8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d045      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2b      	ldr	r2, [pc, #172]	; (8004920 <HAL_DMA_IRQHandler+0x1bc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d040      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2a      	ldr	r2, [pc, #168]	; (8004924 <HAL_DMA_IRQHandler+0x1c0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d03b      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <HAL_DMA_IRQHandler+0x1c4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d036      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a27      	ldr	r2, [pc, #156]	; (800492c <HAL_DMA_IRQHandler+0x1c8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d031      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a25      	ldr	r2, [pc, #148]	; (8004930 <HAL_DMA_IRQHandler+0x1cc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02c      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a24      	ldr	r2, [pc, #144]	; (8004934 <HAL_DMA_IRQHandler+0x1d0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d027      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a22      	ldr	r2, [pc, #136]	; (8004938 <HAL_DMA_IRQHandler+0x1d4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a21      	ldr	r2, [pc, #132]	; (800493c <HAL_DMA_IRQHandler+0x1d8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01d      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <HAL_DMA_IRQHandler+0x1dc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <HAL_DMA_IRQHandler+0x1e0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_DMA_IRQHandler+0x1e4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1b      	ldr	r2, [pc, #108]	; (800494c <HAL_DMA_IRQHandler+0x1e8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_DMA_IRQHandler+0x1ec>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x194>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a18      	ldr	r2, [pc, #96]	; (8004954 <HAL_DMA_IRQHandler+0x1f0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d12f      	bne.n	8004958 <HAL_DMA_IRQHandler+0x1f4>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf14      	ite	ne
 8004906:	2301      	movne	r3, #1
 8004908:	2300      	moveq	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e02e      	b.n	800496c <HAL_DMA_IRQHandler+0x208>
 800490e:	bf00      	nop
 8004910:	24000004 	.word	0x24000004
 8004914:	1b4e81b5 	.word	0x1b4e81b5
 8004918:	40020010 	.word	0x40020010
 800491c:	40020028 	.word	0x40020028
 8004920:	40020040 	.word	0x40020040
 8004924:	40020058 	.word	0x40020058
 8004928:	40020070 	.word	0x40020070
 800492c:	40020088 	.word	0x40020088
 8004930:	400200a0 	.word	0x400200a0
 8004934:	400200b8 	.word	0x400200b8
 8004938:	40020410 	.word	0x40020410
 800493c:	40020428 	.word	0x40020428
 8004940:	40020440 	.word	0x40020440
 8004944:	40020458 	.word	0x40020458
 8004948:	40020470 	.word	0x40020470
 800494c:	40020488 	.word	0x40020488
 8004950:	400204a0 	.word	0x400204a0
 8004954:	400204b8 	.word	0x400204b8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d015      	beq.n	800499c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0204 	bic.w	r2, r2, #4
 800497e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2208      	movs	r2, #8
 800498a:	409a      	lsls	r2, r3
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004994:	f043 0201 	orr.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d06e      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a69      	ldr	r2, [pc, #420]	; (8004b5c <HAL_DMA_IRQHandler+0x3f8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d04a      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a67      	ldr	r2, [pc, #412]	; (8004b60 <HAL_DMA_IRQHandler+0x3fc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d045      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a66      	ldr	r2, [pc, #408]	; (8004b64 <HAL_DMA_IRQHandler+0x400>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d040      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a64      	ldr	r2, [pc, #400]	; (8004b68 <HAL_DMA_IRQHandler+0x404>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d03b      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a63      	ldr	r2, [pc, #396]	; (8004b6c <HAL_DMA_IRQHandler+0x408>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d036      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a61      	ldr	r2, [pc, #388]	; (8004b70 <HAL_DMA_IRQHandler+0x40c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d031      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a60      	ldr	r2, [pc, #384]	; (8004b74 <HAL_DMA_IRQHandler+0x410>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d02c      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5e      	ldr	r2, [pc, #376]	; (8004b78 <HAL_DMA_IRQHandler+0x414>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d027      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a5d      	ldr	r2, [pc, #372]	; (8004b7c <HAL_DMA_IRQHandler+0x418>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d022      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a5b      	ldr	r2, [pc, #364]	; (8004b80 <HAL_DMA_IRQHandler+0x41c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01d      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a5a      	ldr	r2, [pc, #360]	; (8004b84 <HAL_DMA_IRQHandler+0x420>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d018      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <HAL_DMA_IRQHandler+0x424>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <HAL_DMA_IRQHandler+0x428>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a55      	ldr	r2, [pc, #340]	; (8004b90 <HAL_DMA_IRQHandler+0x42c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a54      	ldr	r2, [pc, #336]	; (8004b94 <HAL_DMA_IRQHandler+0x430>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x2ee>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a52      	ldr	r2, [pc, #328]	; (8004b98 <HAL_DMA_IRQHandler+0x434>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10a      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x304>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e003      	b.n	8004a70 <HAL_DMA_IRQHandler+0x30c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	f043 0202 	orr.w	r2, r3, #2
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2204      	movs	r2, #4
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 808f 	beq.w	8004bc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2c      	ldr	r2, [pc, #176]	; (8004b5c <HAL_DMA_IRQHandler+0x3f8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d04a      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <HAL_DMA_IRQHandler+0x3fc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d045      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <HAL_DMA_IRQHandler+0x400>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d040      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_DMA_IRQHandler+0x404>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d03b      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a26      	ldr	r2, [pc, #152]	; (8004b6c <HAL_DMA_IRQHandler+0x408>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d036      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <HAL_DMA_IRQHandler+0x40c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d031      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <HAL_DMA_IRQHandler+0x410>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d02c      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_DMA_IRQHandler+0x414>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d027      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a20      	ldr	r2, [pc, #128]	; (8004b7c <HAL_DMA_IRQHandler+0x418>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d022      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_DMA_IRQHandler+0x41c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01d      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <HAL_DMA_IRQHandler+0x420>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d018      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HAL_DMA_IRQHandler+0x424>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <HAL_DMA_IRQHandler+0x428>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00e      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_DMA_IRQHandler+0x42c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d009      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <HAL_DMA_IRQHandler+0x430>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x3e2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_DMA_IRQHandler+0x434>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d12a      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x438>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e023      	b.n	8004ba4 <HAL_DMA_IRQHandler+0x440>
 8004b5c:	40020010 	.word	0x40020010
 8004b60:	40020028 	.word	0x40020028
 8004b64:	40020040 	.word	0x40020040
 8004b68:	40020058 	.word	0x40020058
 8004b6c:	40020070 	.word	0x40020070
 8004b70:	40020088 	.word	0x40020088
 8004b74:	400200a0 	.word	0x400200a0
 8004b78:	400200b8 	.word	0x400200b8
 8004b7c:	40020410 	.word	0x40020410
 8004b80:	40020428 	.word	0x40020428
 8004b84:	40020440 	.word	0x40020440
 8004b88:	40020458 	.word	0x40020458
 8004b8c:	40020470 	.word	0x40020470
 8004b90:	40020488 	.word	0x40020488
 8004b94:	400204a0 	.word	0x400204a0
 8004b98:	400204b8 	.word	0x400204b8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	f043 0204 	orr.w	r2, r3, #4
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2210      	movs	r2, #16
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a6 	beq.w	8004d26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a85      	ldr	r2, [pc, #532]	; (8004df4 <HAL_DMA_IRQHandler+0x690>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d04a      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a83      	ldr	r2, [pc, #524]	; (8004df8 <HAL_DMA_IRQHandler+0x694>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d045      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a82      	ldr	r2, [pc, #520]	; (8004dfc <HAL_DMA_IRQHandler+0x698>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d040      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a80      	ldr	r2, [pc, #512]	; (8004e00 <HAL_DMA_IRQHandler+0x69c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d03b      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7f      	ldr	r2, [pc, #508]	; (8004e04 <HAL_DMA_IRQHandler+0x6a0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d036      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a7d      	ldr	r2, [pc, #500]	; (8004e08 <HAL_DMA_IRQHandler+0x6a4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d031      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7c      	ldr	r2, [pc, #496]	; (8004e0c <HAL_DMA_IRQHandler+0x6a8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d02c      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a7a      	ldr	r2, [pc, #488]	; (8004e10 <HAL_DMA_IRQHandler+0x6ac>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d027      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a79      	ldr	r2, [pc, #484]	; (8004e14 <HAL_DMA_IRQHandler+0x6b0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a77      	ldr	r2, [pc, #476]	; (8004e18 <HAL_DMA_IRQHandler+0x6b4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a76      	ldr	r2, [pc, #472]	; (8004e1c <HAL_DMA_IRQHandler+0x6b8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a74      	ldr	r2, [pc, #464]	; (8004e20 <HAL_DMA_IRQHandler+0x6bc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a73      	ldr	r2, [pc, #460]	; (8004e24 <HAL_DMA_IRQHandler+0x6c0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a71      	ldr	r2, [pc, #452]	; (8004e28 <HAL_DMA_IRQHandler+0x6c4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a70      	ldr	r2, [pc, #448]	; (8004e2c <HAL_DMA_IRQHandler+0x6c8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x516>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a6e      	ldr	r2, [pc, #440]	; (8004e30 <HAL_DMA_IRQHandler+0x6cc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10a      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x52c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	e009      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x540>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf14      	ite	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	2300      	moveq	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d03e      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d024      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
 8004ce4:	e01f      	b.n	8004d26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01b      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
 8004cf6:	e016      	b.n	8004d26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0208 	bic.w	r2, r2, #8
 8004d14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2220      	movs	r2, #32
 8004d30:	409a      	lsls	r2, r3
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8110 	beq.w	8004f5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <HAL_DMA_IRQHandler+0x690>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d04a      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <HAL_DMA_IRQHandler+0x694>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d045      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <HAL_DMA_IRQHandler+0x698>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d040      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <HAL_DMA_IRQHandler+0x69c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d03b      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a26      	ldr	r2, [pc, #152]	; (8004e04 <HAL_DMA_IRQHandler+0x6a0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d036      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <HAL_DMA_IRQHandler+0x6a4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d031      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <HAL_DMA_IRQHandler+0x6a8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d02c      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a22      	ldr	r2, [pc, #136]	; (8004e10 <HAL_DMA_IRQHandler+0x6ac>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d027      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <HAL_DMA_IRQHandler+0x6b0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d022      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <HAL_DMA_IRQHandler+0x6b4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d01d      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <HAL_DMA_IRQHandler+0x6b8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d018      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <HAL_DMA_IRQHandler+0x6bc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_DMA_IRQHandler+0x6c0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_DMA_IRQHandler+0x6c4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_DMA_IRQHandler+0x6c8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x678>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <HAL_DMA_IRQHandler+0x6cc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d12b      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x6d0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	e02a      	b.n	8004e48 <HAL_DMA_IRQHandler+0x6e4>
 8004df2:	bf00      	nop
 8004df4:	40020010 	.word	0x40020010
 8004df8:	40020028 	.word	0x40020028
 8004dfc:	40020040 	.word	0x40020040
 8004e00:	40020058 	.word	0x40020058
 8004e04:	40020070 	.word	0x40020070
 8004e08:	40020088 	.word	0x40020088
 8004e0c:	400200a0 	.word	0x400200a0
 8004e10:	400200b8 	.word	0x400200b8
 8004e14:	40020410 	.word	0x40020410
 8004e18:	40020428 	.word	0x40020428
 8004e1c:	40020440 	.word	0x40020440
 8004e20:	40020458 	.word	0x40020458
 8004e24:	40020470 	.word	0x40020470
 8004e28:	40020488 	.word	0x40020488
 8004e2c:	400204a0 	.word	0x400204a0
 8004e30:	400204b8 	.word	0x400204b8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8087 	beq.w	8004f5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	2220      	movs	r2, #32
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d139      	bne.n	8004ede <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0216 	bic.w	r2, r2, #22
 8004e78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <HAL_DMA_IRQHandler+0x736>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0208 	bic.w	r2, r2, #8
 8004ea8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	223f      	movs	r2, #63	; 0x3f
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8382 	beq.w	80055d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
          }
          return;
 8004edc:	e37c      	b.n	80055d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d018      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d108      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d02c      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	e027      	b.n	8004f5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d023      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
 8004f1c:	e01e      	b.n	8004f5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10f      	bne.n	8004f4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0210 	bic.w	r2, r2, #16
 8004f3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 833e 	beq.w	80055e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8088 	beq.w	8005084 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2204      	movs	r2, #4
 8004f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a89      	ldr	r2, [pc, #548]	; (80051a8 <HAL_DMA_IRQHandler+0xa44>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d04a      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a88      	ldr	r2, [pc, #544]	; (80051ac <HAL_DMA_IRQHandler+0xa48>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d045      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a86      	ldr	r2, [pc, #536]	; (80051b0 <HAL_DMA_IRQHandler+0xa4c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d040      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a85      	ldr	r2, [pc, #532]	; (80051b4 <HAL_DMA_IRQHandler+0xa50>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d03b      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a83      	ldr	r2, [pc, #524]	; (80051b8 <HAL_DMA_IRQHandler+0xa54>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d036      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a82      	ldr	r2, [pc, #520]	; (80051bc <HAL_DMA_IRQHandler+0xa58>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d031      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a80      	ldr	r2, [pc, #512]	; (80051c0 <HAL_DMA_IRQHandler+0xa5c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02c      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7f      	ldr	r2, [pc, #508]	; (80051c4 <HAL_DMA_IRQHandler+0xa60>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d027      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7d      	ldr	r2, [pc, #500]	; (80051c8 <HAL_DMA_IRQHandler+0xa64>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7c      	ldr	r2, [pc, #496]	; (80051cc <HAL_DMA_IRQHandler+0xa68>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d01d      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a7a      	ldr	r2, [pc, #488]	; (80051d0 <HAL_DMA_IRQHandler+0xa6c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a79      	ldr	r2, [pc, #484]	; (80051d4 <HAL_DMA_IRQHandler+0xa70>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a77      	ldr	r2, [pc, #476]	; (80051d8 <HAL_DMA_IRQHandler+0xa74>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a76      	ldr	r2, [pc, #472]	; (80051dc <HAL_DMA_IRQHandler+0xa78>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a74      	ldr	r2, [pc, #464]	; (80051e0 <HAL_DMA_IRQHandler+0xa7c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_DMA_IRQHandler+0x8b8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a73      	ldr	r2, [pc, #460]	; (80051e4 <HAL_DMA_IRQHandler+0xa80>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d108      	bne.n	800502e <HAL_DMA_IRQHandler+0x8ca>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e007      	b.n	800503e <HAL_DMA_IRQHandler+0x8da>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	429a      	cmp	r2, r3
 8005048:	d307      	bcc.n	800505a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f2      	bne.n	800503e <HAL_DMA_IRQHandler+0x8da>
 8005058:	e000      	b.n	800505c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800505a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2203      	movs	r2, #3
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005072:	e003      	b.n	800507c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 82aa 	beq.w	80055e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
 8005096:	e2a4      	b.n	80055e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a52      	ldr	r2, [pc, #328]	; (80051e8 <HAL_DMA_IRQHandler+0xa84>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d04a      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a51      	ldr	r2, [pc, #324]	; (80051ec <HAL_DMA_IRQHandler+0xa88>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d045      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a4f      	ldr	r2, [pc, #316]	; (80051f0 <HAL_DMA_IRQHandler+0xa8c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d040      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4e      	ldr	r2, [pc, #312]	; (80051f4 <HAL_DMA_IRQHandler+0xa90>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d03b      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a4c      	ldr	r2, [pc, #304]	; (80051f8 <HAL_DMA_IRQHandler+0xa94>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d036      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a4b      	ldr	r2, [pc, #300]	; (80051fc <HAL_DMA_IRQHandler+0xa98>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d031      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a49      	ldr	r2, [pc, #292]	; (8005200 <HAL_DMA_IRQHandler+0xa9c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02c      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a48      	ldr	r2, [pc, #288]	; (8005204 <HAL_DMA_IRQHandler+0xaa0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d027      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a46      	ldr	r2, [pc, #280]	; (8005208 <HAL_DMA_IRQHandler+0xaa4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a45      	ldr	r2, [pc, #276]	; (800520c <HAL_DMA_IRQHandler+0xaa8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d01d      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a43      	ldr	r2, [pc, #268]	; (8005210 <HAL_DMA_IRQHandler+0xaac>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a42      	ldr	r2, [pc, #264]	; (8005214 <HAL_DMA_IRQHandler+0xab0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a40      	ldr	r2, [pc, #256]	; (8005218 <HAL_DMA_IRQHandler+0xab4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3f      	ldr	r2, [pc, #252]	; (800521c <HAL_DMA_IRQHandler+0xab8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <HAL_DMA_IRQHandler+0xabc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_DMA_IRQHandler+0x9d4>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a3c      	ldr	r2, [pc, #240]	; (8005224 <HAL_DMA_IRQHandler+0xac0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_DMA_IRQHandler+0x9d8>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_DMA_IRQHandler+0x9da>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 824f 	beq.w	80055e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2204      	movs	r2, #4
 8005156:	409a      	lsls	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80dd 	beq.w	800531c <HAL_DMA_IRQHandler+0xbb8>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80d7 	beq.w	800531c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2204      	movs	r2, #4
 8005178:	409a      	lsls	r2, r3
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d059      	beq.n	800523c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d14a      	bne.n	8005228 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8220 	beq.w	80055dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a4:	e21a      	b.n	80055dc <HAL_DMA_IRQHandler+0xe78>
 80051a6:	bf00      	nop
 80051a8:	40020010 	.word	0x40020010
 80051ac:	40020028 	.word	0x40020028
 80051b0:	40020040 	.word	0x40020040
 80051b4:	40020058 	.word	0x40020058
 80051b8:	40020070 	.word	0x40020070
 80051bc:	40020088 	.word	0x40020088
 80051c0:	400200a0 	.word	0x400200a0
 80051c4:	400200b8 	.word	0x400200b8
 80051c8:	40020410 	.word	0x40020410
 80051cc:	40020428 	.word	0x40020428
 80051d0:	40020440 	.word	0x40020440
 80051d4:	40020458 	.word	0x40020458
 80051d8:	40020470 	.word	0x40020470
 80051dc:	40020488 	.word	0x40020488
 80051e0:	400204a0 	.word	0x400204a0
 80051e4:	400204b8 	.word	0x400204b8
 80051e8:	48022c08 	.word	0x48022c08
 80051ec:	48022c1c 	.word	0x48022c1c
 80051f0:	48022c30 	.word	0x48022c30
 80051f4:	48022c44 	.word	0x48022c44
 80051f8:	48022c58 	.word	0x48022c58
 80051fc:	48022c6c 	.word	0x48022c6c
 8005200:	48022c80 	.word	0x48022c80
 8005204:	48022c94 	.word	0x48022c94
 8005208:	58025408 	.word	0x58025408
 800520c:	5802541c 	.word	0x5802541c
 8005210:	58025430 	.word	0x58025430
 8005214:	58025444 	.word	0x58025444
 8005218:	58025458 	.word	0x58025458
 800521c:	5802546c 	.word	0x5802546c
 8005220:	58025480 	.word	0x58025480
 8005224:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 81d5 	beq.w	80055dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800523a:	e1cf      	b.n	80055dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d160      	bne.n	8005308 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a7f      	ldr	r2, [pc, #508]	; (8005448 <HAL_DMA_IRQHandler+0xce4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d04a      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a7d      	ldr	r2, [pc, #500]	; (800544c <HAL_DMA_IRQHandler+0xce8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d045      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a7c      	ldr	r2, [pc, #496]	; (8005450 <HAL_DMA_IRQHandler+0xcec>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d040      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7a      	ldr	r2, [pc, #488]	; (8005454 <HAL_DMA_IRQHandler+0xcf0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d03b      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a79      	ldr	r2, [pc, #484]	; (8005458 <HAL_DMA_IRQHandler+0xcf4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d036      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a77      	ldr	r2, [pc, #476]	; (800545c <HAL_DMA_IRQHandler+0xcf8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d031      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a76      	ldr	r2, [pc, #472]	; (8005460 <HAL_DMA_IRQHandler+0xcfc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d02c      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a74      	ldr	r2, [pc, #464]	; (8005464 <HAL_DMA_IRQHandler+0xd00>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d027      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a73      	ldr	r2, [pc, #460]	; (8005468 <HAL_DMA_IRQHandler+0xd04>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d022      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a71      	ldr	r2, [pc, #452]	; (800546c <HAL_DMA_IRQHandler+0xd08>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01d      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a70      	ldr	r2, [pc, #448]	; (8005470 <HAL_DMA_IRQHandler+0xd0c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d018      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a6e      	ldr	r2, [pc, #440]	; (8005474 <HAL_DMA_IRQHandler+0xd10>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a6d      	ldr	r2, [pc, #436]	; (8005478 <HAL_DMA_IRQHandler+0xd14>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6b      	ldr	r2, [pc, #428]	; (800547c <HAL_DMA_IRQHandler+0xd18>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d009      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6a      	ldr	r2, [pc, #424]	; (8005480 <HAL_DMA_IRQHandler+0xd1c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d004      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xb82>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a68      	ldr	r2, [pc, #416]	; (8005484 <HAL_DMA_IRQHandler+0xd20>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <HAL_DMA_IRQHandler+0xb94>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0208 	bic.w	r2, r2, #8
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e007      	b.n	8005308 <HAL_DMA_IRQHandler+0xba4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0204 	bic.w	r2, r2, #4
 8005306:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8165 	beq.w	80055dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800531a:	e15f      	b.n	80055dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2202      	movs	r2, #2
 8005326:	409a      	lsls	r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80c5 	beq.w	80054bc <HAL_DMA_IRQHandler+0xd58>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80bf 	beq.w	80054bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2202      	movs	r2, #2
 8005348:	409a      	lsls	r2, r3
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d018      	beq.n	800538a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 813a 	beq.w	80055e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005374:	e134      	b.n	80055e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8130 	beq.w	80055e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005388:	e12a      	b.n	80055e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	f040 8089 	bne.w	80054a8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <HAL_DMA_IRQHandler+0xce4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04a      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a29      	ldr	r2, [pc, #164]	; (800544c <HAL_DMA_IRQHandler+0xce8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d045      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a28      	ldr	r2, [pc, #160]	; (8005450 <HAL_DMA_IRQHandler+0xcec>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d040      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a26      	ldr	r2, [pc, #152]	; (8005454 <HAL_DMA_IRQHandler+0xcf0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03b      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a25      	ldr	r2, [pc, #148]	; (8005458 <HAL_DMA_IRQHandler+0xcf4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d036      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a23      	ldr	r2, [pc, #140]	; (800545c <HAL_DMA_IRQHandler+0xcf8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_DMA_IRQHandler+0xcfc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02c      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a20      	ldr	r2, [pc, #128]	; (8005464 <HAL_DMA_IRQHandler+0xd00>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d027      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <HAL_DMA_IRQHandler+0xd04>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <HAL_DMA_IRQHandler+0xd08>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <HAL_DMA_IRQHandler+0xd0c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1a      	ldr	r2, [pc, #104]	; (8005474 <HAL_DMA_IRQHandler+0xd10>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a19      	ldr	r2, [pc, #100]	; (8005478 <HAL_DMA_IRQHandler+0xd14>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a17      	ldr	r2, [pc, #92]	; (800547c <HAL_DMA_IRQHandler+0xd18>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_DMA_IRQHandler+0xd1c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_DMA_IRQHandler+0xcd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a14      	ldr	r2, [pc, #80]	; (8005484 <HAL_DMA_IRQHandler+0xd20>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d128      	bne.n	8005488 <HAL_DMA_IRQHandler+0xd24>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0214 	bic.w	r2, r2, #20
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e027      	b.n	8005498 <HAL_DMA_IRQHandler+0xd34>
 8005448:	40020010 	.word	0x40020010
 800544c:	40020028 	.word	0x40020028
 8005450:	40020040 	.word	0x40020040
 8005454:	40020058 	.word	0x40020058
 8005458:	40020070 	.word	0x40020070
 800545c:	40020088 	.word	0x40020088
 8005460:	400200a0 	.word	0x400200a0
 8005464:	400200b8 	.word	0x400200b8
 8005468:	40020410 	.word	0x40020410
 800546c:	40020428 	.word	0x40020428
 8005470:	40020440 	.word	0x40020440
 8005474:	40020458 	.word	0x40020458
 8005478:	40020470 	.word	0x40020470
 800547c:	40020488 	.word	0x40020488
 8005480:	400204a0 	.word	0x400204a0
 8005484:	400204b8 	.word	0x400204b8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 020a 	bic.w	r2, r2, #10
 8005496:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8097 	beq.w	80055e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ba:	e091      	b.n	80055e0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	2208      	movs	r2, #8
 80054c6:	409a      	lsls	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8088 	beq.w	80055e2 <HAL_DMA_IRQHandler+0xe7e>
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8082 	beq.w	80055e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a41      	ldr	r2, [pc, #260]	; (80055e8 <HAL_DMA_IRQHandler+0xe84>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d04a      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a3f      	ldr	r2, [pc, #252]	; (80055ec <HAL_DMA_IRQHandler+0xe88>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d045      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a3e      	ldr	r2, [pc, #248]	; (80055f0 <HAL_DMA_IRQHandler+0xe8c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d040      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3c      	ldr	r2, [pc, #240]	; (80055f4 <HAL_DMA_IRQHandler+0xe90>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d03b      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3b      	ldr	r2, [pc, #236]	; (80055f8 <HAL_DMA_IRQHandler+0xe94>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d036      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a39      	ldr	r2, [pc, #228]	; (80055fc <HAL_DMA_IRQHandler+0xe98>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d031      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a38      	ldr	r2, [pc, #224]	; (8005600 <HAL_DMA_IRQHandler+0xe9c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d02c      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a36      	ldr	r2, [pc, #216]	; (8005604 <HAL_DMA_IRQHandler+0xea0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d027      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a35      	ldr	r2, [pc, #212]	; (8005608 <HAL_DMA_IRQHandler+0xea4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d022      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a33      	ldr	r2, [pc, #204]	; (800560c <HAL_DMA_IRQHandler+0xea8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01d      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a32      	ldr	r2, [pc, #200]	; (8005610 <HAL_DMA_IRQHandler+0xeac>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d018      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a30      	ldr	r2, [pc, #192]	; (8005614 <HAL_DMA_IRQHandler+0xeb0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2f      	ldr	r2, [pc, #188]	; (8005618 <HAL_DMA_IRQHandler+0xeb4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2d      	ldr	r2, [pc, #180]	; (800561c <HAL_DMA_IRQHandler+0xeb8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2c      	ldr	r2, [pc, #176]	; (8005620 <HAL_DMA_IRQHandler+0xebc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_DMA_IRQHandler+0xe1a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <HAL_DMA_IRQHandler+0xec0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <HAL_DMA_IRQHandler+0xe2c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 021c 	bic.w	r2, r2, #28
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e007      	b.n	80055a0 <HAL_DMA_IRQHandler+0xe3c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 020e 	bic.w	r2, r2, #14
 800559e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
 80055d6:	e004      	b.n	80055e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80055d8:	bf00      	nop
 80055da:	e002      	b.n	80055e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055dc:	bf00      	nop
 80055de:	e000      	b.n	80055e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055e2:	3728      	adds	r7, #40	; 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40020010 	.word	0x40020010
 80055ec:	40020028 	.word	0x40020028
 80055f0:	40020040 	.word	0x40020040
 80055f4:	40020058 	.word	0x40020058
 80055f8:	40020070 	.word	0x40020070
 80055fc:	40020088 	.word	0x40020088
 8005600:	400200a0 	.word	0x400200a0
 8005604:	400200b8 	.word	0x400200b8
 8005608:	40020410 	.word	0x40020410
 800560c:	40020428 	.word	0x40020428
 8005610:	40020440 	.word	0x40020440
 8005614:	40020458 	.word	0x40020458
 8005618:	40020470 	.word	0x40020470
 800561c:	40020488 	.word	0x40020488
 8005620:	400204a0 	.word	0x400204a0
 8005624:	400204b8 	.word	0x400204b8

08005628 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a7f      	ldr	r2, [pc, #508]	; (8005844 <DMA_SetConfig+0x21c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d072      	beq.n	8005732 <DMA_SetConfig+0x10a>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a7d      	ldr	r2, [pc, #500]	; (8005848 <DMA_SetConfig+0x220>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d06d      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a7c      	ldr	r2, [pc, #496]	; (800584c <DMA_SetConfig+0x224>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d068      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a7a      	ldr	r2, [pc, #488]	; (8005850 <DMA_SetConfig+0x228>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d063      	beq.n	8005732 <DMA_SetConfig+0x10a>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a79      	ldr	r2, [pc, #484]	; (8005854 <DMA_SetConfig+0x22c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d05e      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a77      	ldr	r2, [pc, #476]	; (8005858 <DMA_SetConfig+0x230>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d059      	beq.n	8005732 <DMA_SetConfig+0x10a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a76      	ldr	r2, [pc, #472]	; (800585c <DMA_SetConfig+0x234>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d054      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a74      	ldr	r2, [pc, #464]	; (8005860 <DMA_SetConfig+0x238>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d04f      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a73      	ldr	r2, [pc, #460]	; (8005864 <DMA_SetConfig+0x23c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d04a      	beq.n	8005732 <DMA_SetConfig+0x10a>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a71      	ldr	r2, [pc, #452]	; (8005868 <DMA_SetConfig+0x240>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d045      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a70      	ldr	r2, [pc, #448]	; (800586c <DMA_SetConfig+0x244>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d040      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a6e      	ldr	r2, [pc, #440]	; (8005870 <DMA_SetConfig+0x248>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d03b      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a6d      	ldr	r2, [pc, #436]	; (8005874 <DMA_SetConfig+0x24c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d036      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a6b      	ldr	r2, [pc, #428]	; (8005878 <DMA_SetConfig+0x250>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d031      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a6a      	ldr	r2, [pc, #424]	; (800587c <DMA_SetConfig+0x254>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d02c      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a68      	ldr	r2, [pc, #416]	; (8005880 <DMA_SetConfig+0x258>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a67      	ldr	r2, [pc, #412]	; (8005884 <DMA_SetConfig+0x25c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a65      	ldr	r2, [pc, #404]	; (8005888 <DMA_SetConfig+0x260>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01d      	beq.n	8005732 <DMA_SetConfig+0x10a>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a64      	ldr	r2, [pc, #400]	; (800588c <DMA_SetConfig+0x264>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a62      	ldr	r2, [pc, #392]	; (8005890 <DMA_SetConfig+0x268>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <DMA_SetConfig+0x10a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a61      	ldr	r2, [pc, #388]	; (8005894 <DMA_SetConfig+0x26c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a5f      	ldr	r2, [pc, #380]	; (8005898 <DMA_SetConfig+0x270>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <DMA_SetConfig+0x10a>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a5e      	ldr	r2, [pc, #376]	; (800589c <DMA_SetConfig+0x274>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <DMA_SetConfig+0x10a>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <DMA_SetConfig+0x278>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <DMA_SetConfig+0x10e>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <DMA_SetConfig+0x110>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00d      	beq.n	8005758 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005744:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005756:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a39      	ldr	r2, [pc, #228]	; (8005844 <DMA_SetConfig+0x21c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d04a      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a38      	ldr	r2, [pc, #224]	; (8005848 <DMA_SetConfig+0x220>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d045      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a36      	ldr	r2, [pc, #216]	; (800584c <DMA_SetConfig+0x224>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d040      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a35      	ldr	r2, [pc, #212]	; (8005850 <DMA_SetConfig+0x228>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d03b      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a33      	ldr	r2, [pc, #204]	; (8005854 <DMA_SetConfig+0x22c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d036      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a32      	ldr	r2, [pc, #200]	; (8005858 <DMA_SetConfig+0x230>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d031      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a30      	ldr	r2, [pc, #192]	; (800585c <DMA_SetConfig+0x234>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d02c      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2f      	ldr	r2, [pc, #188]	; (8005860 <DMA_SetConfig+0x238>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d027      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2d      	ldr	r2, [pc, #180]	; (8005864 <DMA_SetConfig+0x23c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d022      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <DMA_SetConfig+0x240>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d01d      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	; (800586c <DMA_SetConfig+0x244>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d018      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a29      	ldr	r2, [pc, #164]	; (8005870 <DMA_SetConfig+0x248>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a27      	ldr	r2, [pc, #156]	; (8005874 <DMA_SetConfig+0x24c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a26      	ldr	r2, [pc, #152]	; (8005878 <DMA_SetConfig+0x250>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d009      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a24      	ldr	r2, [pc, #144]	; (800587c <DMA_SetConfig+0x254>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <DMA_SetConfig+0x1d0>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a23      	ldr	r2, [pc, #140]	; (8005880 <DMA_SetConfig+0x258>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d101      	bne.n	80057fc <DMA_SetConfig+0x1d4>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <DMA_SetConfig+0x1d6>
 80057fc:	2300      	movs	r3, #0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d059      	beq.n	80058b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	223f      	movs	r2, #63	; 0x3f
 800580c:	409a      	lsls	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005820:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d138      	bne.n	80058a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005842:	e0ae      	b.n	80059a2 <DMA_SetConfig+0x37a>
 8005844:	40020010 	.word	0x40020010
 8005848:	40020028 	.word	0x40020028
 800584c:	40020040 	.word	0x40020040
 8005850:	40020058 	.word	0x40020058
 8005854:	40020070 	.word	0x40020070
 8005858:	40020088 	.word	0x40020088
 800585c:	400200a0 	.word	0x400200a0
 8005860:	400200b8 	.word	0x400200b8
 8005864:	40020410 	.word	0x40020410
 8005868:	40020428 	.word	0x40020428
 800586c:	40020440 	.word	0x40020440
 8005870:	40020458 	.word	0x40020458
 8005874:	40020470 	.word	0x40020470
 8005878:	40020488 	.word	0x40020488
 800587c:	400204a0 	.word	0x400204a0
 8005880:	400204b8 	.word	0x400204b8
 8005884:	58025408 	.word	0x58025408
 8005888:	5802541c 	.word	0x5802541c
 800588c:	58025430 	.word	0x58025430
 8005890:	58025444 	.word	0x58025444
 8005894:	58025458 	.word	0x58025458
 8005898:	5802546c 	.word	0x5802546c
 800589c:	58025480 	.word	0x58025480
 80058a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]
}
 80058b4:	e075      	b.n	80059a2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3d      	ldr	r2, [pc, #244]	; (80059b0 <DMA_SetConfig+0x388>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d04a      	beq.n	8005956 <DMA_SetConfig+0x32e>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a3b      	ldr	r2, [pc, #236]	; (80059b4 <DMA_SetConfig+0x38c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d045      	beq.n	8005956 <DMA_SetConfig+0x32e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a3a      	ldr	r2, [pc, #232]	; (80059b8 <DMA_SetConfig+0x390>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d040      	beq.n	8005956 <DMA_SetConfig+0x32e>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a38      	ldr	r2, [pc, #224]	; (80059bc <DMA_SetConfig+0x394>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d03b      	beq.n	8005956 <DMA_SetConfig+0x32e>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a37      	ldr	r2, [pc, #220]	; (80059c0 <DMA_SetConfig+0x398>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d036      	beq.n	8005956 <DMA_SetConfig+0x32e>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a35      	ldr	r2, [pc, #212]	; (80059c4 <DMA_SetConfig+0x39c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d031      	beq.n	8005956 <DMA_SetConfig+0x32e>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a34      	ldr	r2, [pc, #208]	; (80059c8 <DMA_SetConfig+0x3a0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d02c      	beq.n	8005956 <DMA_SetConfig+0x32e>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a32      	ldr	r2, [pc, #200]	; (80059cc <DMA_SetConfig+0x3a4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d027      	beq.n	8005956 <DMA_SetConfig+0x32e>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a31      	ldr	r2, [pc, #196]	; (80059d0 <DMA_SetConfig+0x3a8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d022      	beq.n	8005956 <DMA_SetConfig+0x32e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <DMA_SetConfig+0x3ac>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01d      	beq.n	8005956 <DMA_SetConfig+0x32e>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2e      	ldr	r2, [pc, #184]	; (80059d8 <DMA_SetConfig+0x3b0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d018      	beq.n	8005956 <DMA_SetConfig+0x32e>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2c      	ldr	r2, [pc, #176]	; (80059dc <DMA_SetConfig+0x3b4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <DMA_SetConfig+0x32e>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2b      	ldr	r2, [pc, #172]	; (80059e0 <DMA_SetConfig+0x3b8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <DMA_SetConfig+0x32e>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <DMA_SetConfig+0x3bc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d009      	beq.n	8005956 <DMA_SetConfig+0x32e>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a28      	ldr	r2, [pc, #160]	; (80059e8 <DMA_SetConfig+0x3c0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <DMA_SetConfig+0x32e>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a26      	ldr	r2, [pc, #152]	; (80059ec <DMA_SetConfig+0x3c4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <DMA_SetConfig+0x332>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <DMA_SetConfig+0x334>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d020      	beq.n	80059a2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2201      	movs	r2, #1
 800596a:	409a      	lsls	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d108      	bne.n	8005992 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	60da      	str	r2, [r3, #12]
}
 8005990:	e007      	b.n	80059a2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	48022c08 	.word	0x48022c08
 80059b4:	48022c1c 	.word	0x48022c1c
 80059b8:	48022c30 	.word	0x48022c30
 80059bc:	48022c44 	.word	0x48022c44
 80059c0:	48022c58 	.word	0x48022c58
 80059c4:	48022c6c 	.word	0x48022c6c
 80059c8:	48022c80 	.word	0x48022c80
 80059cc:	48022c94 	.word	0x48022c94
 80059d0:	58025408 	.word	0x58025408
 80059d4:	5802541c 	.word	0x5802541c
 80059d8:	58025430 	.word	0x58025430
 80059dc:	58025444 	.word	0x58025444
 80059e0:	58025458 	.word	0x58025458
 80059e4:	5802546c 	.word	0x5802546c
 80059e8:	58025480 	.word	0x58025480
 80059ec:	58025494 	.word	0x58025494

080059f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a42      	ldr	r2, [pc, #264]	; (8005b08 <DMA_CalcBaseAndBitshift+0x118>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d04a      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a41      	ldr	r2, [pc, #260]	; (8005b0c <DMA_CalcBaseAndBitshift+0x11c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d045      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3f      	ldr	r2, [pc, #252]	; (8005b10 <DMA_CalcBaseAndBitshift+0x120>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d040      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3e      	ldr	r2, [pc, #248]	; (8005b14 <DMA_CalcBaseAndBitshift+0x124>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d03b      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a3c      	ldr	r2, [pc, #240]	; (8005b18 <DMA_CalcBaseAndBitshift+0x128>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d036      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3b      	ldr	r2, [pc, #236]	; (8005b1c <DMA_CalcBaseAndBitshift+0x12c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d031      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a39      	ldr	r2, [pc, #228]	; (8005b20 <DMA_CalcBaseAndBitshift+0x130>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d02c      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a38      	ldr	r2, [pc, #224]	; (8005b24 <DMA_CalcBaseAndBitshift+0x134>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d027      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a36      	ldr	r2, [pc, #216]	; (8005b28 <DMA_CalcBaseAndBitshift+0x138>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d022      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a35      	ldr	r2, [pc, #212]	; (8005b2c <DMA_CalcBaseAndBitshift+0x13c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d01d      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a33      	ldr	r2, [pc, #204]	; (8005b30 <DMA_CalcBaseAndBitshift+0x140>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d018      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a32      	ldr	r2, [pc, #200]	; (8005b34 <DMA_CalcBaseAndBitshift+0x144>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d013      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a30      	ldr	r2, [pc, #192]	; (8005b38 <DMA_CalcBaseAndBitshift+0x148>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2f      	ldr	r2, [pc, #188]	; (8005b3c <DMA_CalcBaseAndBitshift+0x14c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d009      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2d      	ldr	r2, [pc, #180]	; (8005b40 <DMA_CalcBaseAndBitshift+0x150>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <DMA_CalcBaseAndBitshift+0xa8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2c      	ldr	r2, [pc, #176]	; (8005b44 <DMA_CalcBaseAndBitshift+0x154>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d101      	bne.n	8005a9c <DMA_CalcBaseAndBitshift+0xac>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <DMA_CalcBaseAndBitshift+0xae>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d024      	beq.n	8005aec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	3b10      	subs	r3, #16
 8005aaa:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <DMA_CalcBaseAndBitshift+0x158>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	4a24      	ldr	r2, [pc, #144]	; (8005b4c <DMA_CalcBaseAndBitshift+0x15c>)
 8005abc:	5cd3      	ldrb	r3, [r2, r3]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d908      	bls.n	8005adc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <DMA_CalcBaseAndBitshift+0x160>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	1d1a      	adds	r2, r3, #4
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	659a      	str	r2, [r3, #88]	; 0x58
 8005ada:	e00d      	b.n	8005af8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <DMA_CalcBaseAndBitshift+0x160>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8005aea:	e005      	b.n	8005af8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40020010 	.word	0x40020010
 8005b0c:	40020028 	.word	0x40020028
 8005b10:	40020040 	.word	0x40020040
 8005b14:	40020058 	.word	0x40020058
 8005b18:	40020070 	.word	0x40020070
 8005b1c:	40020088 	.word	0x40020088
 8005b20:	400200a0 	.word	0x400200a0
 8005b24:	400200b8 	.word	0x400200b8
 8005b28:	40020410 	.word	0x40020410
 8005b2c:	40020428 	.word	0x40020428
 8005b30:	40020440 	.word	0x40020440
 8005b34:	40020458 	.word	0x40020458
 8005b38:	40020470 	.word	0x40020470
 8005b3c:	40020488 	.word	0x40020488
 8005b40:	400204a0 	.word	0x400204a0
 8005b44:	400204b8 	.word	0x400204b8
 8005b48:	aaaaaaab 	.word	0xaaaaaaab
 8005b4c:	08011120 	.word	0x08011120
 8005b50:	fffffc00 	.word	0xfffffc00

08005b54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d120      	bne.n	8005baa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d858      	bhi.n	8005c22 <DMA_CheckFifoParam+0xce>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <DMA_CheckFifoParam+0x24>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005b9b 	.word	0x08005b9b
 8005b80:	08005b89 	.word	0x08005b89
 8005b84:	08005c23 	.word	0x08005c23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d048      	beq.n	8005c26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b98:	e045      	b.n	8005c26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ba2:	d142      	bne.n	8005c2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ba8:	e03f      	b.n	8005c2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb2:	d123      	bne.n	8005bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d838      	bhi.n	8005c2e <DMA_CheckFifoParam+0xda>
 8005bbc:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <DMA_CheckFifoParam+0x70>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005bdb 	.word	0x08005bdb
 8005bcc:	08005bd5 	.word	0x08005bd5
 8005bd0:	08005bed 	.word	0x08005bed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
        break;
 8005bd8:	e030      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d025      	beq.n	8005c32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bea:	e022      	b.n	8005c32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bf4:	d11f      	bne.n	8005c36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bfa:	e01c      	b.n	8005c36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d902      	bls.n	8005c0a <DMA_CheckFifoParam+0xb6>
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d003      	beq.n	8005c10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c08:	e018      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c0e:	e015      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00e      	beq.n	8005c3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8005c20:	e00b      	b.n	8005c3a <DMA_CheckFifoParam+0xe6>
        break;
 8005c22:	bf00      	nop
 8005c24:	e00a      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
        break;
 8005c26:	bf00      	nop
 8005c28:	e008      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e006      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e004      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
        break;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
        break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <DMA_CheckFifoParam+0xe8>
    break;
 8005c3a:	bf00      	nop
    }
  }

  return status;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop

08005c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a38      	ldr	r2, [pc, #224]	; (8005d40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d022      	beq.n	8005caa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a36      	ldr	r2, [pc, #216]	; (8005d44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d01d      	beq.n	8005caa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a35      	ldr	r2, [pc, #212]	; (8005d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d018      	beq.n	8005caa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a33      	ldr	r2, [pc, #204]	; (8005d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a32      	ldr	r2, [pc, #200]	; (8005d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00e      	beq.n	8005caa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a30      	ldr	r2, [pc, #192]	; (8005d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d009      	beq.n	8005caa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d004      	beq.n	8005caa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2d      	ldr	r2, [pc, #180]	; (8005d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d101      	bne.n	8005cae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	3b08      	subs	r3, #8
 8005cbc:	4a28      	ldr	r2, [pc, #160]	; (8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4b26      	ldr	r3, [pc, #152]	; (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005cd8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ce8:	e024      	b.n	8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	3b10      	subs	r3, #16
 8005cf2:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	091b      	lsrs	r3, r3, #4
 8005cfa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d806      	bhi.n	8005d12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d902      	bls.n	8005d12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 031f 	and.w	r3, r3, #31
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	409a      	lsls	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	58025408 	.word	0x58025408
 8005d44:	5802541c 	.word	0x5802541c
 8005d48:	58025430 	.word	0x58025430
 8005d4c:	58025444 	.word	0x58025444
 8005d50:	58025458 	.word	0x58025458
 8005d54:	5802546c 	.word	0x5802546c
 8005d58:	58025480 	.word	0x58025480
 8005d5c:	58025494 	.word	0x58025494
 8005d60:	cccccccd 	.word	0xcccccccd
 8005d64:	16009600 	.word	0x16009600
 8005d68:	58025880 	.word	0x58025880
 8005d6c:	aaaaaaab 	.word	0xaaaaaaab
 8005d70:	400204b8 	.word	0x400204b8
 8005d74:	4002040f 	.word	0x4002040f
 8005d78:	10008200 	.word	0x10008200
 8005d7c:	40020880 	.word	0x40020880

08005d80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d04a      	beq.n	8005e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d847      	bhi.n	8005e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a25      	ldr	r2, [pc, #148]	; (8005e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a24      	ldr	r2, [pc, #144]	; (8005e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d01d      	beq.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a22      	ldr	r2, [pc, #136]	; (8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a21      	ldr	r2, [pc, #132]	; (8005e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1f      	ldr	r2, [pc, #124]	; (8005e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	461a      	mov	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e08:	671a      	str	r2, [r3, #112]	; 0x70
 8005e0a:	e009      	b.n	8005e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a11      	ldr	r2, [pc, #68]	; (8005e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e1e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	2201      	movs	r2, #1
 8005e26:	409a      	lsls	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	58025408 	.word	0x58025408
 8005e3c:	5802541c 	.word	0x5802541c
 8005e40:	58025430 	.word	0x58025430
 8005e44:	58025444 	.word	0x58025444
 8005e48:	58025458 	.word	0x58025458
 8005e4c:	5802546c 	.word	0x5802546c
 8005e50:	58025480 	.word	0x58025480
 8005e54:	58025494 	.word	0x58025494
 8005e58:	1600963f 	.word	0x1600963f
 8005e5c:	58025940 	.word	0x58025940
 8005e60:	1000823f 	.word	0x1000823f
 8005e64:	40020940 	.word	0x40020940

08005e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e76:	4b89      	ldr	r3, [pc, #548]	; (800609c <HAL_GPIO_Init+0x234>)
 8005e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e7a:	e194      	b.n	80061a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2101      	movs	r1, #1
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 8186 	beq.w	80061a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d005      	beq.n	8005eac <HAL_GPIO_Init+0x44>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d130      	bne.n	8005f0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 0201 	and.w	r2, r3, #1
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d017      	beq.n	8005f4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	2203      	movs	r2, #3
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d123      	bne.n	8005f9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	08da      	lsrs	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3208      	adds	r2, #8
 8005f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	220f      	movs	r2, #15
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43db      	mvns	r3, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4013      	ands	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	08da      	lsrs	r2, r3, #3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3208      	adds	r2, #8
 8005f98:	69b9      	ldr	r1, [r7, #24]
 8005f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2203      	movs	r2, #3
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f003 0203 	and.w	r2, r3, #3
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80e0 	beq.w	80061a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe0:	4b2f      	ldr	r3, [pc, #188]	; (80060a0 <HAL_GPIO_Init+0x238>)
 8005fe2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005fe6:	4a2e      	ldr	r2, [pc, #184]	; (80060a0 <HAL_GPIO_Init+0x238>)
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <HAL_GPIO_Init+0x238>)
 8005ff2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ffe:	4a29      	ldr	r2, [pc, #164]	; (80060a4 <HAL_GPIO_Init+0x23c>)
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	089b      	lsrs	r3, r3, #2
 8006004:	3302      	adds	r3, #2
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	220f      	movs	r2, #15
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a20      	ldr	r2, [pc, #128]	; (80060a8 <HAL_GPIO_Init+0x240>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d052      	beq.n	80060d0 <HAL_GPIO_Init+0x268>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_GPIO_Init+0x244>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d031      	beq.n	8006096 <HAL_GPIO_Init+0x22e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_GPIO_Init+0x248>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02b      	beq.n	8006092 <HAL_GPIO_Init+0x22a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <HAL_GPIO_Init+0x24c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d025      	beq.n	800608e <HAL_GPIO_Init+0x226>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <HAL_GPIO_Init+0x250>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01f      	beq.n	800608a <HAL_GPIO_Init+0x222>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <HAL_GPIO_Init+0x254>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d019      	beq.n	8006086 <HAL_GPIO_Init+0x21e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <HAL_GPIO_Init+0x258>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <HAL_GPIO_Init+0x21a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a19      	ldr	r2, [pc, #100]	; (80060c4 <HAL_GPIO_Init+0x25c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00d      	beq.n	800607e <HAL_GPIO_Init+0x216>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_GPIO_Init+0x260>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <HAL_GPIO_Init+0x212>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_GPIO_Init+0x264>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d101      	bne.n	8006076 <HAL_GPIO_Init+0x20e>
 8006072:	2309      	movs	r3, #9
 8006074:	e02d      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 8006076:	230a      	movs	r3, #10
 8006078:	e02b      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 800607a:	2308      	movs	r3, #8
 800607c:	e029      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 800607e:	2307      	movs	r3, #7
 8006080:	e027      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 8006082:	2306      	movs	r3, #6
 8006084:	e025      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 8006086:	2305      	movs	r3, #5
 8006088:	e023      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 800608a:	2304      	movs	r3, #4
 800608c:	e021      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 800608e:	2303      	movs	r3, #3
 8006090:	e01f      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 8006092:	2302      	movs	r3, #2
 8006094:	e01d      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 8006096:	2301      	movs	r3, #1
 8006098:	e01b      	b.n	80060d2 <HAL_GPIO_Init+0x26a>
 800609a:	bf00      	nop
 800609c:	58000080 	.word	0x58000080
 80060a0:	58024400 	.word	0x58024400
 80060a4:	58000400 	.word	0x58000400
 80060a8:	58020000 	.word	0x58020000
 80060ac:	58020400 	.word	0x58020400
 80060b0:	58020800 	.word	0x58020800
 80060b4:	58020c00 	.word	0x58020c00
 80060b8:	58021000 	.word	0x58021000
 80060bc:	58021400 	.word	0x58021400
 80060c0:	58021800 	.word	0x58021800
 80060c4:	58021c00 	.word	0x58021c00
 80060c8:	58022000 	.word	0x58022000
 80060cc:	58022400 	.word	0x58022400
 80060d0:	2300      	movs	r3, #0
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	f002 0203 	and.w	r2, r2, #3
 80060d8:	0092      	lsls	r2, r2, #2
 80060da:	4093      	lsls	r3, r2
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4313      	orrs	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060e2:	4938      	ldr	r1, [pc, #224]	; (80061c4 <HAL_GPIO_Init+0x35c>)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	089b      	lsrs	r3, r3, #2
 80060e8:	3302      	adds	r3, #2
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	43db      	mvns	r3, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	3301      	adds	r3, #1
 80061a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f47f ae63 	bne.w	8005e7c <HAL_GPIO_Init+0x14>
  }
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	3724      	adds	r7, #36	; 0x24
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	58000400 	.word	0x58000400

080061c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	807b      	strh	r3, [r7, #2]
 80061d4:	4613      	mov	r3, r2
 80061d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061d8:	787b      	ldrb	r3, [r7, #1]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061e4:	e003      	b.n	80061ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061e6:	887b      	ldrh	r3, [r7, #2]
 80061e8:	041a      	lsls	r2, r3, #16
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	619a      	str	r2, [r3, #24]
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800620c:	887a      	ldrh	r2, [r7, #2]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4013      	ands	r3, r2
 8006212:	041a      	lsls	r2, r3, #16
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	43d9      	mvns	r1, r3
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	400b      	ands	r3, r1
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	619a      	str	r2, [r3, #24]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
	...

08006230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006238:	4b29      	ldr	r3, [pc, #164]	; (80062e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	2b06      	cmp	r3, #6
 8006242:	d00a      	beq.n	800625a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006244:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	429a      	cmp	r2, r3
 8006250:	d001      	beq.n	8006256 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e040      	b.n	80062d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e03e      	b.n	80062d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800625a:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006262:	491f      	ldr	r1, [pc, #124]	; (80062e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4313      	orrs	r3, r2
 8006268:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800626a:	f7fb fd19 	bl	8001ca0 <HAL_GetTick>
 800626e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006270:	e009      	b.n	8006286 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006272:	f7fb fd15 	bl	8001ca0 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006280:	d901      	bls.n	8006286 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e028      	b.n	80062d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800628e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006292:	d1ee      	bne.n	8006272 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b1e      	cmp	r3, #30
 8006298:	d008      	beq.n	80062ac <HAL_PWREx_ConfigSupply+0x7c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b2e      	cmp	r3, #46	; 0x2e
 800629e:	d005      	beq.n	80062ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b1d      	cmp	r3, #29
 80062a4:	d002      	beq.n	80062ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b2d      	cmp	r3, #45	; 0x2d
 80062aa:	d114      	bne.n	80062d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80062ac:	f7fb fcf8 	bl	8001ca0 <HAL_GetTick>
 80062b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062b2:	e009      	b.n	80062c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062b4:	f7fb fcf4 	bl	8001ca0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c2:	d901      	bls.n	80062c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e007      	b.n	80062d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d4:	d1ee      	bne.n	80062b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	58024800 	.word	0x58024800

080062e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08c      	sub	sp, #48	; 0x30
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f000 bc1f 	b.w	8006b36 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80b3 	beq.w	800646c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006306:	4b95      	ldr	r3, [pc, #596]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006310:	4b92      	ldr	r3, [pc, #584]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	2b10      	cmp	r3, #16
 800631a:	d007      	beq.n	800632c <HAL_RCC_OscConfig+0x48>
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	2b18      	cmp	r3, #24
 8006320:	d112      	bne.n	8006348 <HAL_RCC_OscConfig+0x64>
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d10d      	bne.n	8006348 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800632c:	4b8b      	ldr	r3, [pc, #556]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8098 	beq.w	800646a <HAL_RCC_OscConfig+0x186>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 8093 	bne.w	800646a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e3f6      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006350:	d106      	bne.n	8006360 <HAL_RCC_OscConfig+0x7c>
 8006352:	4b82      	ldr	r3, [pc, #520]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a81      	ldr	r2, [pc, #516]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	e058      	b.n	8006412 <HAL_RCC_OscConfig+0x12e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d112      	bne.n	800638e <HAL_RCC_OscConfig+0xaa>
 8006368:	4b7c      	ldr	r3, [pc, #496]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a7b      	ldr	r2, [pc, #492]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800636e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	4b79      	ldr	r3, [pc, #484]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a78      	ldr	r2, [pc, #480]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800637a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b76      	ldr	r3, [pc, #472]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a75      	ldr	r2, [pc, #468]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e041      	b.n	8006412 <HAL_RCC_OscConfig+0x12e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006396:	d112      	bne.n	80063be <HAL_RCC_OscConfig+0xda>
 8006398:	4b70      	ldr	r3, [pc, #448]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6f      	ldr	r2, [pc, #444]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800639e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	4b6d      	ldr	r3, [pc, #436]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6c      	ldr	r2, [pc, #432]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	4b6a      	ldr	r3, [pc, #424]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a69      	ldr	r2, [pc, #420]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e029      	b.n	8006412 <HAL_RCC_OscConfig+0x12e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80063c6:	d112      	bne.n	80063ee <HAL_RCC_OscConfig+0x10a>
 80063c8:	4b64      	ldr	r3, [pc, #400]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a63      	ldr	r2, [pc, #396]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4b61      	ldr	r3, [pc, #388]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a60      	ldr	r2, [pc, #384]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4b5e      	ldr	r3, [pc, #376]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a5d      	ldr	r2, [pc, #372]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e011      	b.n	8006412 <HAL_RCC_OscConfig+0x12e>
 80063ee:	4b5b      	ldr	r3, [pc, #364]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5a      	ldr	r2, [pc, #360]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	4b58      	ldr	r3, [pc, #352]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a57      	ldr	r2, [pc, #348]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b55      	ldr	r3, [pc, #340]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a54      	ldr	r2, [pc, #336]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800640c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006410:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d013      	beq.n	8006442 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641a:	f7fb fc41 	bl	8001ca0 <HAL_GetTick>
 800641e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006422:	f7fb fc3d 	bl	8001ca0 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b64      	cmp	r3, #100	; 0x64
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e380      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006434:	4b49      	ldr	r3, [pc, #292]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <HAL_RCC_OscConfig+0x13e>
 8006440:	e014      	b.n	800646c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fb fc2d 	bl	8001ca0 <HAL_GetTick>
 8006446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800644a:	f7fb fc29 	bl	8001ca0 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b64      	cmp	r3, #100	; 0x64
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e36c      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800645c:	4b3f      	ldr	r3, [pc, #252]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f0      	bne.n	800644a <HAL_RCC_OscConfig+0x166>
 8006468:	e000      	b.n	800646c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800646a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 808c 	beq.w	8006592 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800647a:	4b38      	ldr	r3, [pc, #224]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006482:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006484:	4b35      	ldr	r3, [pc, #212]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_RCC_OscConfig+0x1bc>
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b18      	cmp	r3, #24
 8006494:	d137      	bne.n	8006506 <HAL_RCC_OscConfig+0x222>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d132      	bne.n	8006506 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064a0:	4b2e      	ldr	r3, [pc, #184]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_OscConfig+0x1d4>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e33e      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064b8:	4b28      	ldr	r3, [pc, #160]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f023 0219 	bic.w	r2, r3, #25
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4925      	ldr	r1, [pc, #148]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ca:	f7fb fbe9 	bl	8001ca0 <HAL_GetTick>
 80064ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d2:	f7fb fbe5 	bl	8001ca0 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e328      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <HAL_RCC_OscConfig+0x278>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	061b      	lsls	r3, r3, #24
 80064fe:	4917      	ldr	r1, [pc, #92]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006500:	4313      	orrs	r3, r2
 8006502:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006504:	e045      	b.n	8006592 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d028      	beq.n	8006560 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f023 0219 	bic.w	r2, r3, #25
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4910      	ldr	r1, [pc, #64]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fb fbbe 	bl	8001ca0 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006528:	f7fb fbba 	bl	8001ca0 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e2fd      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <HAL_RCC_OscConfig+0x278>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f0      	beq.n	8006528 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	061b      	lsls	r3, r3, #24
 8006554:	4901      	ldr	r1, [pc, #4]	; (800655c <HAL_RCC_OscConfig+0x278>)
 8006556:	4313      	orrs	r3, r2
 8006558:	604b      	str	r3, [r1, #4]
 800655a:	e01a      	b.n	8006592 <HAL_RCC_OscConfig+0x2ae>
 800655c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006560:	4b97      	ldr	r3, [pc, #604]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a96      	ldr	r2, [pc, #600]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656c:	f7fb fb98 	bl	8001ca0 <HAL_GetTick>
 8006570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006574:	f7fb fb94 	bl	8001ca0 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e2d7      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006586:	4b8e      	ldr	r3, [pc, #568]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	2b00      	cmp	r3, #0
 800659c:	d06a      	beq.n	8006674 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800659e:	4b88      	ldr	r3, [pc, #544]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065a8:	4b85      	ldr	r3, [pc, #532]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d007      	beq.n	80065c4 <HAL_RCC_OscConfig+0x2e0>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b18      	cmp	r3, #24
 80065b8:	d11b      	bne.n	80065f2 <HAL_RCC_OscConfig+0x30e>
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d116      	bne.n	80065f2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065c4:	4b7e      	ldr	r3, [pc, #504]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_RCC_OscConfig+0x2f8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d001      	beq.n	80065dc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e2ac      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065dc:	4b78      	ldr	r3, [pc, #480]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	4975      	ldr	r1, [pc, #468]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f0:	e040      	b.n	8006674 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d023      	beq.n	8006642 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80065fa:	4b71      	ldr	r3, [pc, #452]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a70      	ldr	r2, [pc, #448]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006606:	f7fb fb4b 	bl	8001ca0 <HAL_GetTick>
 800660a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800660e:	f7fb fb47 	bl	8001ca0 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e28a      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006620:	4b67      	ldr	r3, [pc, #412]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800662c:	4b64      	ldr	r3, [pc, #400]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	061b      	lsls	r3, r3, #24
 800663a:	4961      	ldr	r1, [pc, #388]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800663c:	4313      	orrs	r3, r2
 800663e:	60cb      	str	r3, [r1, #12]
 8006640:	e018      	b.n	8006674 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006642:	4b5f      	ldr	r3, [pc, #380]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a5e      	ldr	r2, [pc, #376]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664e:	f7fb fb27 	bl	8001ca0 <HAL_GetTick>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006656:	f7fb fb23 	bl	8001ca0 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e266      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006668:	4b55      	ldr	r3, [pc, #340]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f0      	bne.n	8006656 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d036      	beq.n	80066ee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d019      	beq.n	80066bc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006688:	4b4d      	ldr	r3, [pc, #308]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800668a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668c:	4a4c      	ldr	r2, [pc, #304]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fb fb04 	bl	8001ca0 <HAL_GetTick>
 8006698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800669c:	f7fb fb00 	bl	8001ca0 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e243      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066ae:	4b44      	ldr	r3, [pc, #272]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80066b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCC_OscConfig+0x3b8>
 80066ba:	e018      	b.n	80066ee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066bc:	4b40      	ldr	r3, [pc, #256]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80066be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c0:	4a3f      	ldr	r2, [pc, #252]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c8:	f7fb faea 	bl	8001ca0 <HAL_GetTick>
 80066cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d0:	f7fb fae6 	bl	8001ca0 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e229      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066e2:	4b37      	ldr	r3, [pc, #220]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80066e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d036      	beq.n	8006768 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d019      	beq.n	8006736 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006702:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2e      	ldr	r2, [pc, #184]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800670c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800670e:	f7fb fac7 	bl	8001ca0 <HAL_GetTick>
 8006712:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006716:	f7fb fac3 	bl	8001ca0 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e206      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006728:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x432>
 8006734:	e018      	b.n	8006768 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006736:	4b22      	ldr	r3, [pc, #136]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a21      	ldr	r2, [pc, #132]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800673c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006742:	f7fb faad 	bl	8001ca0 <HAL_GetTick>
 8006746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800674a:	f7fb faa9 	bl	8001ca0 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e1ec      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800675c:	4b18      	ldr	r3, [pc, #96]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f0      	bne.n	800674a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80af 	beq.w	80068d4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_RCC_OscConfig+0x4e0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <HAL_RCC_OscConfig+0x4e0>)
 800677c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006780:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006782:	f7fb fa8d 	bl	8001ca0 <HAL_GetTick>
 8006786:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800678a:	f7fb fa89 	bl	8001ca0 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b64      	cmp	r3, #100	; 0x64
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e1cc      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <HAL_RCC_OscConfig+0x4e0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d10b      	bne.n	80067c8 <HAL_RCC_OscConfig+0x4e4>
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	4a02      	ldr	r2, [pc, #8]	; (80067c0 <HAL_RCC_OscConfig+0x4dc>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6713      	str	r3, [r2, #112]	; 0x70
 80067bc:	e05b      	b.n	8006876 <HAL_RCC_OscConfig+0x592>
 80067be:	bf00      	nop
 80067c0:	58024400 	.word	0x58024400
 80067c4:	58024800 	.word	0x58024800
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d112      	bne.n	80067f6 <HAL_RCC_OscConfig+0x512>
 80067d0:	4b9d      	ldr	r3, [pc, #628]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	4a9c      	ldr	r2, [pc, #624]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	6713      	str	r3, [r2, #112]	; 0x70
 80067dc:	4b9a      	ldr	r3, [pc, #616]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e0:	4a99      	ldr	r2, [pc, #612]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80067e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e6:	6713      	str	r3, [r2, #112]	; 0x70
 80067e8:	4b97      	ldr	r3, [pc, #604]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	4a96      	ldr	r2, [pc, #600]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80067ee:	f023 0304 	bic.w	r3, r3, #4
 80067f2:	6713      	str	r3, [r2, #112]	; 0x70
 80067f4:	e03f      	b.n	8006876 <HAL_RCC_OscConfig+0x592>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	d112      	bne.n	8006824 <HAL_RCC_OscConfig+0x540>
 80067fe:	4b92      	ldr	r3, [pc, #584]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	4a91      	ldr	r2, [pc, #580]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006804:	f043 0304 	orr.w	r3, r3, #4
 8006808:	6713      	str	r3, [r2, #112]	; 0x70
 800680a:	4b8f      	ldr	r3, [pc, #572]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	4a8e      	ldr	r2, [pc, #568]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006814:	6713      	str	r3, [r2, #112]	; 0x70
 8006816:	4b8c      	ldr	r3, [pc, #560]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	4a8b      	ldr	r2, [pc, #556]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	6713      	str	r3, [r2, #112]	; 0x70
 8006822:	e028      	b.n	8006876 <HAL_RCC_OscConfig+0x592>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b85      	cmp	r3, #133	; 0x85
 800682a:	d112      	bne.n	8006852 <HAL_RCC_OscConfig+0x56e>
 800682c:	4b86      	ldr	r3, [pc, #536]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006830:	4a85      	ldr	r2, [pc, #532]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006832:	f043 0304 	orr.w	r3, r3, #4
 8006836:	6713      	str	r3, [r2, #112]	; 0x70
 8006838:	4b83      	ldr	r3, [pc, #524]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	4a82      	ldr	r2, [pc, #520]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800683e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006842:	6713      	str	r3, [r2, #112]	; 0x70
 8006844:	4b80      	ldr	r3, [pc, #512]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006848:	4a7f      	ldr	r2, [pc, #508]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	6713      	str	r3, [r2, #112]	; 0x70
 8006850:	e011      	b.n	8006876 <HAL_RCC_OscConfig+0x592>
 8006852:	4b7d      	ldr	r3, [pc, #500]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	4a7c      	ldr	r2, [pc, #496]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	6713      	str	r3, [r2, #112]	; 0x70
 800685e:	4b7a      	ldr	r3, [pc, #488]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a79      	ldr	r2, [pc, #484]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006864:	f023 0304 	bic.w	r3, r3, #4
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
 800686a:	4b77      	ldr	r3, [pc, #476]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a76      	ldr	r2, [pc, #472]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d015      	beq.n	80068aa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687e:	f7fb fa0f 	bl	8001ca0 <HAL_GetTick>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006884:	e00a      	b.n	800689c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fb fa0b 	bl	8001ca0 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	; 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e14c      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800689c:	4b6a      	ldr	r3, [pc, #424]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0ee      	beq.n	8006886 <HAL_RCC_OscConfig+0x5a2>
 80068a8:	e014      	b.n	80068d4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068aa:	f7fb f9f9 	bl	8001ca0 <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068b0:	e00a      	b.n	80068c8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f7fb f9f5 	bl	8001ca0 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e136      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068c8:	4b5f      	ldr	r3, [pc, #380]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1ee      	bne.n	80068b2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 812b 	beq.w	8006b34 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068de:	4b5a      	ldr	r3, [pc, #360]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068e6:	2b18      	cmp	r3, #24
 80068e8:	f000 80bb 	beq.w	8006a62 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f040 8095 	bne.w	8006a20 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f6:	4b54      	ldr	r3, [pc, #336]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a53      	ldr	r2, [pc, #332]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80068fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006902:	f7fb f9cd 	bl	8001ca0 <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800690a:	f7fb f9c9 	bl	8001ca0 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e10c      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800691c:	4b4a      	ldr	r3, [pc, #296]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f0      	bne.n	800690a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006928:	4b47      	ldr	r3, [pc, #284]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800692a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800692c:	4b47      	ldr	r3, [pc, #284]	; (8006a4c <HAL_RCC_OscConfig+0x768>)
 800692e:	4013      	ands	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006938:	0112      	lsls	r2, r2, #4
 800693a:	430a      	orrs	r2, r1
 800693c:	4942      	ldr	r1, [pc, #264]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800693e:	4313      	orrs	r3, r2
 8006940:	628b      	str	r3, [r1, #40]	; 0x28
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	3b01      	subs	r3, #1
 8006948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	3b01      	subs	r3, #1
 8006952:	025b      	lsls	r3, r3, #9
 8006954:	b29b      	uxth	r3, r3
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	3b01      	subs	r3, #1
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	3b01      	subs	r3, #1
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006972:	4935      	ldr	r1, [pc, #212]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006974:	4313      	orrs	r3, r2
 8006976:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006978:	4b33      	ldr	r3, [pc, #204]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4a32      	ldr	r2, [pc, #200]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006984:	4b30      	ldr	r3, [pc, #192]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006988:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <HAL_RCC_OscConfig+0x76c>)
 800698a:	4013      	ands	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006990:	00d2      	lsls	r2, r2, #3
 8006992:	492d      	ldr	r1, [pc, #180]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006994:	4313      	orrs	r3, r2
 8006996:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006998:	4b2b      	ldr	r3, [pc, #172]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f023 020c 	bic.w	r2, r3, #12
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	4928      	ldr	r1, [pc, #160]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069aa:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	f023 0202 	bic.w	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	4924      	ldr	r1, [pc, #144]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069bc:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4a21      	ldr	r2, [pc, #132]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4a1e      	ldr	r2, [pc, #120]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069d4:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80069e0:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fb f952 	bl	8001ca0 <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fb f94e 	bl	8001ca0 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e091      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x71c>
 8006a1e:	e089      	b.n	8006b34 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <HAL_RCC_OscConfig+0x764>)
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fb f938 	bl	8001ca0 <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a32:	e00f      	b.n	8006a54 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fb f934 	bl	8001ca0 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d908      	bls.n	8006a54 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e077      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
 8006a46:	bf00      	nop
 8006a48:	58024400 	.word	0x58024400
 8006a4c:	fffffc0c 	.word	0xfffffc0c
 8006a50:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a54:	4b3a      	ldr	r3, [pc, #232]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e9      	bne.n	8006a34 <HAL_RCC_OscConfig+0x750>
 8006a60:	e068      	b.n	8006b34 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a62:	4b37      	ldr	r3, [pc, #220]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a68:	4b35      	ldr	r3, [pc, #212]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d031      	beq.n	8006ada <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f003 0203 	and.w	r2, r3, #3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d12a      	bne.n	8006ada <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d122      	bne.n	8006ada <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d11a      	bne.n	8006ada <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	0a5b      	lsrs	r3, r3, #9
 8006aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d111      	bne.n	8006ada <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d108      	bne.n	8006ada <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0e1b      	lsrs	r3, r3, #24
 8006acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d001      	beq.n	8006ade <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e02b      	b.n	8006b36 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ade:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae2:	08db      	lsrs	r3, r3, #3
 8006ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d01f      	beq.n	8006b34 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006af4:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	4a11      	ldr	r2, [pc, #68]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b00:	f7fb f8ce 	bl	8001ca0 <HAL_GetTick>
 8006b04:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b06:	bf00      	nop
 8006b08:	f7fb f8ca 	bl	8001ca0 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d0f9      	beq.n	8006b08 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <HAL_RCC_OscConfig+0x860>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b20:	00d2      	lsls	r2, r2, #3
 8006b22:	4907      	ldr	r1, [pc, #28]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b28:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <HAL_RCC_OscConfig+0x85c>)
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3730      	adds	r7, #48	; 0x30
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	58024400 	.word	0x58024400
 8006b44:	ffff0007 	.word	0xffff0007

08006b48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e19c      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b5c:	4b8a      	ldr	r3, [pc, #552]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d910      	bls.n	8006b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6a:	4b87      	ldr	r3, [pc, #540]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f023 020f 	bic.w	r2, r3, #15
 8006b72:	4985      	ldr	r1, [pc, #532]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b83      	ldr	r3, [pc, #524]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d001      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e184      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	4b7b      	ldr	r3, [pc, #492]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d908      	bls.n	8006bba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ba8:	4b78      	ldr	r3, [pc, #480]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	4975      	ldr	r1, [pc, #468]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d010      	beq.n	8006be8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	4b70      	ldr	r3, [pc, #448]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d908      	bls.n	8006be8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bd6:	4b6d      	ldr	r3, [pc, #436]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	496a      	ldr	r1, [pc, #424]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d010      	beq.n	8006c16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	4b64      	ldr	r3, [pc, #400]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d908      	bls.n	8006c16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c04:	4b61      	ldr	r3, [pc, #388]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	495e      	ldr	r1, [pc, #376]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69da      	ldr	r2, [r3, #28]
 8006c26:	4b59      	ldr	r3, [pc, #356]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d908      	bls.n	8006c44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c32:	4b56      	ldr	r3, [pc, #344]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	4953      	ldr	r1, [pc, #332]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	4b4d      	ldr	r3, [pc, #308]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d908      	bls.n	8006c72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c60:	4b4a      	ldr	r3, [pc, #296]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f023 020f 	bic.w	r2, r3, #15
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4947      	ldr	r1, [pc, #284]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d055      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c7e:	4b43      	ldr	r3, [pc, #268]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4940      	ldr	r1, [pc, #256]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d107      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c98:	4b3c      	ldr	r3, [pc, #240]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d121      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0f6      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cb0:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d115      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0ea      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d107      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cc8:	4b30      	ldr	r3, [pc, #192]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0de      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cd8:	4b2c      	ldr	r3, [pc, #176]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0d6      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f023 0207 	bic.w	r2, r3, #7
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	4925      	ldr	r1, [pc, #148]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfa:	f7fa ffd1 	bl	8001ca0 <HAL_GetTick>
 8006cfe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d02:	f7fa ffcd 	bl	8001ca0 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e0be      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d18:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d1eb      	bne.n	8006d02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d208      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d46:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f023 020f 	bic.w	r2, r3, #15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	490e      	ldr	r1, [pc, #56]	; (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d214      	bcs.n	8006d90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f023 020f 	bic.w	r2, r3, #15
 8006d6e:	4906      	ldr	r1, [pc, #24]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d005      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e086      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
 8006d88:	52002000 	.word	0x52002000
 8006d8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	4b3f      	ldr	r3, [pc, #252]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d208      	bcs.n	8006dbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dac:	4b3c      	ldr	r3, [pc, #240]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	4939      	ldr	r1, [pc, #228]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	4b34      	ldr	r3, [pc, #208]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d208      	bcs.n	8006dec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dda:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	492e      	ldr	r1, [pc, #184]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d208      	bcs.n	8006e1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e08:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	4922      	ldr	r1, [pc, #136]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d010      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d208      	bcs.n	8006e48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e36:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4917      	ldr	r1, [pc, #92]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006e48:	f000 f834 	bl	8006eb4 <HAL_RCC_GetSysClockFreq>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	f003 030f 	and.w	r3, r3, #15
 8006e58:	4912      	ldr	r1, [pc, #72]	; (8006ea4 <HAL_RCC_ClockConfig+0x35c>)
 8006e5a:	5ccb      	ldrb	r3, [r1, r3]
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	fa22 f303 	lsr.w	r3, r2, r3
 8006e64:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006e66:	4b0e      	ldr	r3, [pc, #56]	; (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <HAL_RCC_ClockConfig+0x35c>)
 8006e70:	5cd3      	ldrb	r3, [r2, r3]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ea8 <HAL_RCC_ClockConfig+0x360>)
 8006e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e80:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <HAL_RCC_ClockConfig+0x364>)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e86:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <HAL_RCC_ClockConfig+0x368>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fa fd82 	bl	8001994 <HAL_InitTick>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	08011110 	.word	0x08011110
 8006ea8:	24000008 	.word	0x24000008
 8006eac:	24000004 	.word	0x24000004
 8006eb0:	2400000c 	.word	0x2400000c

08006eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b089      	sub	sp, #36	; 0x24
 8006eb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eba:	4bb3      	ldr	r3, [pc, #716]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ec2:	2b18      	cmp	r3, #24
 8006ec4:	f200 8155 	bhi.w	8007172 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006f35 	.word	0x08006f35
 8006ed4:	08007173 	.word	0x08007173
 8006ed8:	08007173 	.word	0x08007173
 8006edc:	08007173 	.word	0x08007173
 8006ee0:	08007173 	.word	0x08007173
 8006ee4:	08007173 	.word	0x08007173
 8006ee8:	08007173 	.word	0x08007173
 8006eec:	08007173 	.word	0x08007173
 8006ef0:	08006f5b 	.word	0x08006f5b
 8006ef4:	08007173 	.word	0x08007173
 8006ef8:	08007173 	.word	0x08007173
 8006efc:	08007173 	.word	0x08007173
 8006f00:	08007173 	.word	0x08007173
 8006f04:	08007173 	.word	0x08007173
 8006f08:	08007173 	.word	0x08007173
 8006f0c:	08007173 	.word	0x08007173
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08007173 	.word	0x08007173
 8006f18:	08007173 	.word	0x08007173
 8006f1c:	08007173 	.word	0x08007173
 8006f20:	08007173 	.word	0x08007173
 8006f24:	08007173 	.word	0x08007173
 8006f28:	08007173 	.word	0x08007173
 8006f2c:	08007173 	.word	0x08007173
 8006f30:	08006f67 	.word	0x08006f67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f34:	4b94      	ldr	r3, [pc, #592]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f40:	4b91      	ldr	r3, [pc, #580]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	08db      	lsrs	r3, r3, #3
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	4a90      	ldr	r2, [pc, #576]	; (800718c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f52:	e111      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f54:	4b8d      	ldr	r3, [pc, #564]	; (800718c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f56:	61bb      	str	r3, [r7, #24]
      break;
 8006f58:	e10e      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f5a:	4b8d      	ldr	r3, [pc, #564]	; (8007190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f5c:	61bb      	str	r3, [r7, #24]
      break;
 8006f5e:	e10b      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f60:	4b8c      	ldr	r3, [pc, #560]	; (8007194 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f62:	61bb      	str	r3, [r7, #24]
      break;
 8006f64:	e108      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f66:	4b88      	ldr	r3, [pc, #544]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f70:	4b85      	ldr	r3, [pc, #532]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f7c:	4b82      	ldr	r3, [pc, #520]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f86:	4b80      	ldr	r3, [pc, #512]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	08db      	lsrs	r3, r3, #3
 8006f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80e1 	beq.w	800716c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	f000 8083 	beq.w	80070b8 <HAL_RCC_GetSysClockFreq+0x204>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	f200 80a1 	bhi.w	80070fc <HAL_RCC_GetSysClockFreq+0x248>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x114>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d056      	beq.n	8007074 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fc6:	e099      	b.n	80070fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d02d      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd4:	4b6c      	ldr	r3, [pc, #432]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	4a6b      	ldr	r2, [pc, #428]	; (800718c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b62      	ldr	r3, [pc, #392]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007012:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800702e:	e087      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800719c <HAL_RCC_GetSysClockFreq+0x2e8>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b51      	ldr	r3, [pc, #324]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a02 	vldr	s12, [r7, #8]
 8007056:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007072:	e065      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80071a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b40      	ldr	r3, [pc, #256]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a02 	vldr	s12, [r7, #8]
 800709a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070b6:	e043      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80071a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b2f      	ldr	r3, [pc, #188]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a02 	vldr	s12, [r7, #8]
 80070de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070fa:	e021      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a26 	vldr	s13, [pc, #152]	; 80071a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007122:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800713e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007140:	4b11      	ldr	r3, [pc, #68]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	0a5b      	lsrs	r3, r3, #9
 8007146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714a:	3301      	adds	r3, #1
 800714c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007158:	edd7 6a07 	vldr	s13, [r7, #28]
 800715c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007164:	ee17 3a90 	vmov	r3, s15
 8007168:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800716a:	e005      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	61bb      	str	r3, [r7, #24]
      break;
 8007170:	e002      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007174:	61bb      	str	r3, [r7, #24]
      break;
 8007176:	bf00      	nop
  }

  return sysclockfreq;
 8007178:	69bb      	ldr	r3, [r7, #24]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3724      	adds	r7, #36	; 0x24
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	58024400 	.word	0x58024400
 800718c:	03d09000 	.word	0x03d09000
 8007190:	003d0900 	.word	0x003d0900
 8007194:	007a1200 	.word	0x007a1200
 8007198:	46000000 	.word	0x46000000
 800719c:	4c742400 	.word	0x4c742400
 80071a0:	4a742400 	.word	0x4a742400
 80071a4:	4af42400 	.word	0x4af42400

080071a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80071ae:	f7ff fe81 	bl	8006eb4 <HAL_RCC_GetSysClockFreq>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	490f      	ldr	r1, [pc, #60]	; (80071fc <HAL_RCC_GetHCLKFreq+0x54>)
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80071cc:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	4a09      	ldr	r2, [pc, #36]	; (80071fc <HAL_RCC_GetHCLKFreq+0x54>)
 80071d6:	5cd3      	ldrb	r3, [r2, r3]
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	fa22 f303 	lsr.w	r3, r2, r3
 80071e2:	4a07      	ldr	r2, [pc, #28]	; (8007200 <HAL_RCC_GetHCLKFreq+0x58>)
 80071e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071e6:	4a07      	ldr	r2, [pc, #28]	; (8007204 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071ec:	4b04      	ldr	r3, [pc, #16]	; (8007200 <HAL_RCC_GetHCLKFreq+0x58>)
 80071ee:	681b      	ldr	r3, [r3, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	58024400 	.word	0x58024400
 80071fc:	08011110 	.word	0x08011110
 8007200:	24000008 	.word	0x24000008
 8007204:	24000004 	.word	0x24000004

08007208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800720c:	f7ff ffcc 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 8007210:	4602      	mov	r2, r0
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	4904      	ldr	r1, [pc, #16]	; (8007230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800721e:	5ccb      	ldrb	r3, [r1, r3]
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007228:	4618      	mov	r0, r3
 800722a:	bd80      	pop	{r7, pc}
 800722c:	58024400 	.word	0x58024400
 8007230:	08011110 	.word	0x08011110

08007234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007238:	f7ff ffb6 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	4b06      	ldr	r3, [pc, #24]	; (8007258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	4904      	ldr	r1, [pc, #16]	; (800725c <HAL_RCC_GetPCLK2Freq+0x28>)
 800724a:	5ccb      	ldrb	r3, [r1, r3]
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	58024400 	.word	0x58024400
 800725c:	08011110 	.word	0x08011110

08007260 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	223f      	movs	r2, #63	; 0x3f
 800726e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007270:	4b1a      	ldr	r3, [pc, #104]	; (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f003 0207 	and.w	r2, r3, #7
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800727c:	4b17      	ldr	r3, [pc, #92]	; (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8007288:	4b14      	ldr	r3, [pc, #80]	; (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8007294:	4b11      	ldr	r3, [pc, #68]	; (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <HAL_RCC_GetClockConfig+0x80>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	58024400 	.word	0x58024400
 80072e0:	52002000 	.word	0x52002000

080072e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e8:	b0c8      	sub	sp, #288	; 0x120
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072f6:	2300      	movs	r3, #0
 80072f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007308:	2500      	movs	r5, #0
 800730a:	ea54 0305 	orrs.w	r3, r4, r5
 800730e:	d049      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007316:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800731a:	d02f      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800731c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007320:	d828      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007326:	d01a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800732c:	d822      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007336:	d007      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007338:	e01c      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733a:	4ba7      	ldr	r3, [pc, #668]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	4aa6      	ldr	r2, [pc, #664]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007344:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007346:	e01a      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800734c:	3308      	adds	r3, #8
 800734e:	2102      	movs	r1, #2
 8007350:	4618      	mov	r0, r3
 8007352:	f002 fa6d 	bl	8009830 <RCCEx_PLL2_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800735c:	e00f      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800735e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007362:	3328      	adds	r3, #40	; 0x28
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f002 fb14 	bl	8009994 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007372:	e004      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800737a:	e000      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800737c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007386:	4b94      	ldr	r3, [pc, #592]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800738e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007394:	4a90      	ldr	r2, [pc, #576]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007396:	430b      	orrs	r3, r1
 8007398:	6513      	str	r3, [r2, #80]	; 0x50
 800739a:	e003      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80073b0:	f04f 0900 	mov.w	r9, #0
 80073b4:	ea58 0309 	orrs.w	r3, r8, r9
 80073b8:	d047      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d82a      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	080073e1 	.word	0x080073e1
 80073d0:	080073ef 	.word	0x080073ef
 80073d4:	08007405 	.word	0x08007405
 80073d8:	08007423 	.word	0x08007423
 80073dc:	08007423 	.word	0x08007423
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e0:	4b7d      	ldr	r3, [pc, #500]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	4a7c      	ldr	r2, [pc, #496]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073ec:	e01a      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f2:	3308      	adds	r3, #8
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f002 fa1a 	bl	8009830 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007402:	e00f      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007408:	3328      	adds	r3, #40	; 0x28
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f002 fac1 	bl	8009994 <RCCEx_PLL3_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007418:	e004      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007420:	e000      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800742c:	4b6a      	ldr	r3, [pc, #424]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800742e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007430:	f023 0107 	bic.w	r1, r3, #7
 8007434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743a:	4a67      	ldr	r2, [pc, #412]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800743c:	430b      	orrs	r3, r1
 800743e:	6513      	str	r3, [r2, #80]	; 0x50
 8007440:	e003      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007442:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007446:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007456:	f04f 0b00 	mov.w	fp, #0
 800745a:	ea5a 030b 	orrs.w	r3, sl, fp
 800745e:	d054      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007466:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800746a:	d036      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800746c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007470:	d82f      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007476:	d032      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747c:	d829      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800747e:	2bc0      	cmp	r3, #192	; 0xc0
 8007480:	d02f      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007482:	2bc0      	cmp	r3, #192	; 0xc0
 8007484:	d825      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007486:	2b80      	cmp	r3, #128	; 0x80
 8007488:	d018      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800748a:	2b80      	cmp	r3, #128	; 0x80
 800748c:	d821      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d007      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007496:	e01c      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007498:	4b4f      	ldr	r3, [pc, #316]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a4e      	ldr	r2, [pc, #312]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800749e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80074a4:	e01e      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074aa:	3308      	adds	r3, #8
 80074ac:	2100      	movs	r1, #0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f002 f9be 	bl	8009830 <RCCEx_PLL2_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80074ba:	e013      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074c0:	3328      	adds	r3, #40	; 0x28
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f002 fa65 	bl	8009994 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80074d0:	e008      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80074d8:	e004      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80074da:	bf00      	nop
 80074dc:	e002      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80074de:	bf00      	nop
 80074e0:	e000      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80074e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80074ec:	4b3a      	ldr	r3, [pc, #232]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80074f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	4a37      	ldr	r2, [pc, #220]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6513      	str	r3, [r2, #80]	; 0x50
 8007500:	e003      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007502:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007506:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800750a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007516:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800751a:	2300      	movs	r3, #0
 800751c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007520:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007524:	460b      	mov	r3, r1
 8007526:	4313      	orrs	r3, r2
 8007528:	d05c      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800752a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800752e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007530:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007534:	d03b      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007536:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800753a:	d834      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800753c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007540:	d037      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007546:	d82e      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007548:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800754c:	d033      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800754e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007552:	d828      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007558:	d01a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800755a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755e:	d822      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007568:	d007      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800756a:	e01c      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756c:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007578:	e01e      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800757a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800757e:	3308      	adds	r3, #8
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f002 f954 	bl	8009830 <RCCEx_PLL2_Config>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800758e:	e013      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007594:	3328      	adds	r3, #40	; 0x28
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f002 f9fb 	bl	8009994 <RCCEx_PLL3_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80075a4:	e008      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075ac:	e004      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80075ae:	bf00      	nop
 80075b0:	e002      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80075b2:	bf00      	nop
 80075b4:	e000      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80075b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10d      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80075c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ce:	4a02      	ldr	r2, [pc, #8]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6513      	str	r3, [r2, #80]	; 0x50
 80075d4:	e006      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80075d6:	bf00      	nop
 80075d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80075f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075f4:	2300      	movs	r3, #0
 80075f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d03a      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760a:	2b30      	cmp	r3, #48	; 0x30
 800760c:	d01f      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800760e:	2b30      	cmp	r3, #48	; 0x30
 8007610:	d819      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007612:	2b20      	cmp	r3, #32
 8007614:	d00c      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007616:	2b20      	cmp	r3, #32
 8007618:	d815      	bhi.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d019      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800761e:	2b10      	cmp	r3, #16
 8007620:	d111      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007622:	4bae      	ldr	r3, [pc, #696]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	4aad      	ldr	r2, [pc, #692]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800762c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800762e:	e011      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007634:	3308      	adds	r3, #8
 8007636:	2102      	movs	r1, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f002 f8f9 	bl	8009830 <RCCEx_PLL2_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007644:	e006      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800764c:	e002      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800764e:	bf00      	nop
 8007650:	e000      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007654:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800765c:	4b9f      	ldr	r3, [pc, #636]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800765e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007660:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	4a9c      	ldr	r2, [pc, #624]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800766c:	430b      	orrs	r3, r1
 800766e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007670:	e003      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007672:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007676:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800767a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007686:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800768a:	2300      	movs	r3, #0
 800768c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007690:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007694:	460b      	mov	r3, r1
 8007696:	4313      	orrs	r3, r2
 8007698:	d051      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800769a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800769e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a4:	d035      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80076a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076aa:	d82e      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80076ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076b0:	d031      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80076b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076b6:	d828      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80076b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076bc:	d01a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c2:	d822      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80076c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076cc:	d007      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80076ce:	e01c      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b82      	ldr	r3, [pc, #520]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a81      	ldr	r2, [pc, #516]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076dc:	e01c      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e2:	3308      	adds	r3, #8
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f002 f8a2 	bl	8009830 <RCCEx_PLL2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076f2:	e011      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f8:	3328      	adds	r3, #40	; 0x28
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f002 f949 	bl	8009994 <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007708:	e006      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007720:	4b6e      	ldr	r3, [pc, #440]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007724:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800772c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772e:	4a6b      	ldr	r2, [pc, #428]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007730:	430b      	orrs	r3, r1
 8007732:	6513      	str	r3, [r2, #80]	; 0x50
 8007734:	e003      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007736:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800773a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800773e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800774a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007754:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007758:	460b      	mov	r3, r1
 800775a:	4313      	orrs	r3, r2
 800775c:	d053      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800775e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007768:	d033      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800776a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800776e:	d82c      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007770:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007774:	d02f      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800777a:	d826      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800777c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007780:	d02b      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007786:	d820      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800778c:	d012      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800778e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007792:	d81a      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d022      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779c:	d115      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800779e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a2:	3308      	adds	r3, #8
 80077a4:	2101      	movs	r1, #1
 80077a6:	4618      	mov	r0, r3
 80077a8:	f002 f842 	bl	8009830 <RCCEx_PLL2_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077b2:	e015      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b8:	3328      	adds	r3, #40	; 0x28
 80077ba:	2101      	movs	r1, #1
 80077bc:	4618      	mov	r0, r3
 80077be:	f002 f8e9 	bl	8009994 <RCCEx_PLL3_Config>
 80077c2:	4603      	mov	r3, r0
 80077c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80077c8:	e00a      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80077d0:	e006      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80077d2:	bf00      	nop
 80077d4:	e004      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80077d6:	bf00      	nop
 80077d8:	e002      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80077da:	bf00      	nop
 80077dc:	e000      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80077de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077e8:	4b3c      	ldr	r3, [pc, #240]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80077f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f6:	4a39      	ldr	r2, [pc, #228]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077f8:	430b      	orrs	r3, r1
 80077fa:	6513      	str	r3, [r2, #80]	; 0x50
 80077fc:	e003      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007802:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007816:	2300      	movs	r3, #0
 8007818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800781c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007820:	460b      	mov	r3, r1
 8007822:	4313      	orrs	r3, r2
 8007824:	d060      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800782a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800782e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007832:	d039      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007834:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007838:	d832      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800783a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800783e:	d035      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007844:	d82c      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784a:	d031      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800784c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007850:	d826      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007852:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007856:	d02d      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007858:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800785c:	d820      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800785e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007862:	d012      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007868:	d81a      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d024      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800786e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007872:	d115      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007878:	3308      	adds	r3, #8
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f001 ffd7 	bl	8009830 <RCCEx_PLL2_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007888:	e017      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800788a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800788e:	3328      	adds	r3, #40	; 0x28
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f002 f87e 	bl	8009994 <RCCEx_PLL3_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800789e:	e00c      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078a6:	e008      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078a8:	bf00      	nop
 80078aa:	e006      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078ac:	bf00      	nop
 80078ae:	e004      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078b0:	bf00      	nop
 80078b2:	e002      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80078b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10e      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078c2:	4b06      	ldr	r3, [pc, #24]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80078ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078d2:	4a02      	ldr	r2, [pc, #8]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078d4:	430b      	orrs	r3, r1
 80078d6:	6593      	str	r3, [r2, #88]	; 0x58
 80078d8:	e006      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80078da:	bf00      	nop
 80078dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80078f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007902:	460b      	mov	r3, r1
 8007904:	4313      	orrs	r3, r2
 8007906:	d037      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007912:	d00e      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007918:	d816      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d018      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800791e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007922:	d111      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007924:	4bc4      	ldr	r3, [pc, #784]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	4ac3      	ldr	r2, [pc, #780]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800792a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800792e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007930:	e00f      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007936:	3308      	adds	r3, #8
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f001 ff78 	bl	8009830 <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007946:	e004      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800794e:	e000      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007952:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800795a:	4bb7      	ldr	r3, [pc, #732]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800795c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007968:	4ab3      	ldr	r2, [pc, #716]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796a:	430b      	orrs	r3, r1
 800796c:	6513      	str	r3, [r2, #80]	; 0x50
 800796e:	e003      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007974:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007988:	2300      	movs	r3, #0
 800798a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800798e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007992:	460b      	mov	r3, r1
 8007994:	4313      	orrs	r3, r2
 8007996:	d039      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d81c      	bhi.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079e5 	.word	0x080079e5
 80079ac:	080079b9 	.word	0x080079b9
 80079b0:	080079c7 	.word	0x080079c7
 80079b4:	080079e5 	.word	0x080079e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b8:	4b9f      	ldr	r3, [pc, #636]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	4a9e      	ldr	r2, [pc, #632]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079c4:	e00f      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ca:	3308      	adds	r3, #8
 80079cc:	2102      	movs	r1, #2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 ff2e 	bl	8009830 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80079da:	e004      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80079e2:	e000      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80079e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079ee:	4b92      	ldr	r3, [pc, #584]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f2:	f023 0103 	bic.w	r1, r3, #3
 80079f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fc:	4a8e      	ldr	r2, [pc, #568]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f000 8099 	beq.w	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a2e:	4b83      	ldr	r3, [pc, #524]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a82      	ldr	r2, [pc, #520]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a3a:	f7fa f931 	bl	8001ca0 <HAL_GetTick>
 8007a3e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a42:	e00b      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a44:	f7fa f92c 	bl	8001ca0 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b64      	cmp	r3, #100	; 0x64
 8007a52:	d903      	bls.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a5a:	e005      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5c:	4b77      	ldr	r3, [pc, #476]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0ed      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007a68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d173      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a70:	4b71      	ldr	r3, [pc, #452]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a7c:	4053      	eors	r3, r2
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d015      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a86:	4b6c      	ldr	r3, [pc, #432]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a92:	4b69      	ldr	r3, [pc, #420]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	4a68      	ldr	r2, [pc, #416]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a9c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a9e:	4b66      	ldr	r3, [pc, #408]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa2:	4a65      	ldr	r2, [pc, #404]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007aaa:	4a63      	ldr	r2, [pc, #396]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007abe:	d118      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac0:	f7fa f8ee 	bl	8001ca0 <HAL_GetTick>
 8007ac4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ac8:	e00d      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aca:	f7fa f8e9 	bl	8001ca0 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ad4:	1ad2      	subs	r2, r2, r3
 8007ad6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d903      	bls.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8007ae4:	e005      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ae6:	4b54      	ldr	r3, [pc, #336]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0eb      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007af2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d129      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b0a:	d10e      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007b0c:	4b4a      	ldr	r3, [pc, #296]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b1c:	091a      	lsrs	r2, r3, #4
 8007b1e:	4b48      	ldr	r3, [pc, #288]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	4a45      	ldr	r2, [pc, #276]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	6113      	str	r3, [r2, #16]
 8007b28:	e005      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007b2a:	4b43      	ldr	r3, [pc, #268]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	4a42      	ldr	r2, [pc, #264]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b34:	6113      	str	r3, [r2, #16]
 8007b36:	4b40      	ldr	r3, [pc, #256]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b46:	4a3c      	ldr	r2, [pc, #240]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b4c:	e008      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007b56:	e003      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f002 0301 	and.w	r3, r2, #1
 8007b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f000 8090 	beq.w	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8a:	2b28      	cmp	r3, #40	; 0x28
 8007b8c:	d870      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007c79 	.word	0x08007c79
 8007b98:	08007c71 	.word	0x08007c71
 8007b9c:	08007c71 	.word	0x08007c71
 8007ba0:	08007c71 	.word	0x08007c71
 8007ba4:	08007c71 	.word	0x08007c71
 8007ba8:	08007c71 	.word	0x08007c71
 8007bac:	08007c71 	.word	0x08007c71
 8007bb0:	08007c71 	.word	0x08007c71
 8007bb4:	08007c45 	.word	0x08007c45
 8007bb8:	08007c71 	.word	0x08007c71
 8007bbc:	08007c71 	.word	0x08007c71
 8007bc0:	08007c71 	.word	0x08007c71
 8007bc4:	08007c71 	.word	0x08007c71
 8007bc8:	08007c71 	.word	0x08007c71
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007c71 	.word	0x08007c71
 8007bd4:	08007c5b 	.word	0x08007c5b
 8007bd8:	08007c71 	.word	0x08007c71
 8007bdc:	08007c71 	.word	0x08007c71
 8007be0:	08007c71 	.word	0x08007c71
 8007be4:	08007c71 	.word	0x08007c71
 8007be8:	08007c71 	.word	0x08007c71
 8007bec:	08007c71 	.word	0x08007c71
 8007bf0:	08007c71 	.word	0x08007c71
 8007bf4:	08007c79 	.word	0x08007c79
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c71 	.word	0x08007c71
 8007c00:	08007c71 	.word	0x08007c71
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c79 	.word	0x08007c79
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c71 	.word	0x08007c71
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c71 	.word	0x08007c71
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c79 	.word	0x08007c79
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	58024800 	.word	0x58024800
 8007c40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c48:	3308      	adds	r3, #8
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 fdef 	bl	8009830 <RCCEx_PLL2_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c58:	e00f      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c5e:	3328      	adds	r3, #40	; 0x28
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 fe96 	bl	8009994 <RCCEx_PLL3_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e004      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007c76:	e000      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c82:	4bc0      	ldr	r3, [pc, #768]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c92:	4abc      	ldr	r2, [pc, #752]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6553      	str	r3, [r2, #84]	; 0x54
 8007c98:	e003      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f002 0302 	and.w	r3, r2, #2
 8007cae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	d043      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d824      	bhi.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007d21 	.word	0x08007d21
 8007cd8:	08007ced 	.word	0x08007ced
 8007cdc:	08007d03 	.word	0x08007d03
 8007ce0:	08007d21 	.word	0x08007d21
 8007ce4:	08007d21 	.word	0x08007d21
 8007ce8:	08007d21 	.word	0x08007d21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fd9b 	bl	8009830 <RCCEx_PLL2_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d00:	e00f      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d06:	3328      	adds	r3, #40	; 0x28
 8007d08:	2101      	movs	r1, #1
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 fe42 	bl	8009994 <RCCEx_PLL3_Config>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d16:	e004      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007d1e:	e000      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d2a:	4b96      	ldr	r3, [pc, #600]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2e:	f023 0107 	bic.w	r1, r3, #7
 8007d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d3a:	4a92      	ldr	r2, [pc, #584]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6553      	str	r3, [r2, #84]	; 0x54
 8007d40:	e003      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	f002 0304 	and.w	r3, r2, #4
 8007d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d60:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4313      	orrs	r3, r2
 8007d68:	d043      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d72:	2b05      	cmp	r3, #5
 8007d74:	d824      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007d95 	.word	0x08007d95
 8007d84:	08007dab 	.word	0x08007dab
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d98:	3308      	adds	r3, #8
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fd47 	bl	8009830 <RCCEx_PLL2_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007da8:	e00f      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dae:	3328      	adds	r3, #40	; 0x28
 8007db0:	2101      	movs	r1, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 fdee 	bl	8009994 <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dd2:	4b6c      	ldr	r3, [pc, #432]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	f023 0107 	bic.w	r1, r3, #7
 8007dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007de2:	4a68      	ldr	r2, [pc, #416]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	6593      	str	r3, [r2, #88]	; 0x58
 8007de8:	e003      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007dee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f002 0320 	and.w	r3, r2, #32
 8007dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e02:	2300      	movs	r3, #0
 8007e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	d055      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e1e:	d033      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e24:	d82c      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2a:	d02f      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e30:	d826      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e36:	d02b      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e3c:	d820      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e42:	d012      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e48:	d81a      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d022      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e52:	d115      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e58:	3308      	adds	r3, #8
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f001 fce7 	bl	8009830 <RCCEx_PLL2_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e68:	e015      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e6e:	3328      	adds	r3, #40	; 0x28
 8007e70:	2102      	movs	r1, #2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 fd8e 	bl	8009994 <RCCEx_PLL3_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e7e:	e00a      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007e86:	e006      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e88:	bf00      	nop
 8007e8a:	e004      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e8c:	bf00      	nop
 8007e8e:	e002      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e90:	bf00      	nop
 8007e92:	e000      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10b      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e9e:	4b39      	ldr	r3, [pc, #228]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eae:	4a35      	ldr	r2, [pc, #212]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6553      	str	r3, [r2, #84]	; 0x54
 8007eb4:	e003      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007eba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ed4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4313      	orrs	r3, r2
 8007edc:	d058      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ee2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ee6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007eea:	d033      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007eec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ef0:	d82c      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef6:	d02f      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efc:	d826      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f02:	d02b      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f08:	d820      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0e:	d012      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f14:	d81a      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d022      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1e:	d115      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f24:	3308      	adds	r3, #8
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 fc81 	bl	8009830 <RCCEx_PLL2_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f34:	e015      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f3a:	3328      	adds	r3, #40	; 0x28
 8007f3c:	2102      	movs	r1, #2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f001 fd28 	bl	8009994 <RCCEx_PLL3_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f4a:	e00a      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007f52:	e006      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f54:	bf00      	nop
 8007f56:	e004      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f58:	bf00      	nop
 8007f5a:	e002      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f5c:	bf00      	nop
 8007f5e:	e000      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10e      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f6a:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f7a:	4a02      	ldr	r2, [pc, #8]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8007f80:	e006      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007f82:	bf00      	nop
 8007f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fa6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007faa:	460b      	mov	r3, r1
 8007fac:	4313      	orrs	r3, r2
 8007fae:	d055      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fbc:	d033      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007fbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fc2:	d82c      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc8:	d02f      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fce:	d826      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007fd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fd4:	d02b      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007fd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fda:	d820      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe0:	d012      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe6:	d81a      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d022      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff0:	d115      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 fc18 	bl	8009830 <RCCEx_PLL2_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008006:	e015      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800800c:	3328      	adds	r3, #40	; 0x28
 800800e:	2102      	movs	r1, #2
 8008010:	4618      	mov	r0, r3
 8008012:	f001 fcbf 	bl	8009994 <RCCEx_PLL3_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800801c:	e00a      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8008024:	e006      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008026:	bf00      	nop
 8008028:	e004      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800802a:	bf00      	nop
 800802c:	e002      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10b      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800803c:	4ba1      	ldr	r3, [pc, #644]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800803e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008040:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008048:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800804c:	4a9d      	ldr	r2, [pc, #628]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800804e:	430b      	orrs	r3, r1
 8008050:	6593      	str	r3, [r2, #88]	; 0x58
 8008052:	e003      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008058:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800805c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f002 0308 	and.w	r3, r2, #8
 8008068:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800806c:	2300      	movs	r3, #0
 800806e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008072:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008076:	460b      	mov	r3, r1
 8008078:	4313      	orrs	r3, r2
 800807a:	d01e      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800807c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008088:	d10c      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800808a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800808e:	3328      	adds	r3, #40	; 0x28
 8008090:	2102      	movs	r1, #2
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fc7e 	bl	8009994 <RCCEx_PLL3_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80080a4:	4b87      	ldr	r3, [pc, #540]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080b4:	4a83      	ldr	r2, [pc, #524]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080b6:	430b      	orrs	r3, r1
 80080b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	f002 0310 	and.w	r3, r2, #16
 80080c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080ca:	2300      	movs	r3, #0
 80080cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80080d4:	460b      	mov	r3, r1
 80080d6:	4313      	orrs	r3, r2
 80080d8:	d01e      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80080da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e6:	d10c      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ec:	3328      	adds	r3, #40	; 0x28
 80080ee:	2102      	movs	r1, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fc4f 	bl	8009994 <RCCEx_PLL3_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008102:	4b70      	ldr	r3, [pc, #448]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800810a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800810e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008112:	4a6c      	ldr	r2, [pc, #432]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008114:	430b      	orrs	r3, r1
 8008116:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008128:	2300      	movs	r3, #0
 800812a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800812e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008132:	460b      	mov	r3, r1
 8008134:	4313      	orrs	r3, r2
 8008136:	d03e      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800813c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008144:	d022      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800814a:	d81b      	bhi.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008154:	d00b      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008156:	e015      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800815c:	3308      	adds	r3, #8
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f001 fb65 	bl	8009830 <RCCEx_PLL2_Config>
 8008166:	4603      	mov	r3, r0
 8008168:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800816c:	e00f      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800816e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008172:	3328      	adds	r3, #40	; 0x28
 8008174:	2102      	movs	r1, #2
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fc0c 	bl	8009994 <RCCEx_PLL3_Config>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008182:	e004      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800818a:	e000      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800818c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008196:	4b4b      	ldr	r3, [pc, #300]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800819e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081a6:	4a47      	ldr	r2, [pc, #284]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081a8:	430b      	orrs	r3, r1
 80081aa:	6593      	str	r3, [r2, #88]	; 0x58
 80081ac:	e003      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80081b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80081b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80081c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80081c4:	2300      	movs	r3, #0
 80081c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d03b      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80081d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081de:	d01f      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80081e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081e4:	d818      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80081e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ea:	d003      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80081ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081f0:	d007      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80081f2:	e011      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f4:	4b33      	ldr	r3, [pc, #204]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	4a32      	ldr	r2, [pc, #200]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008200:	e00f      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008206:	3328      	adds	r3, #40	; 0x28
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fbc2 	bl	8009994 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008216:	e004      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008222:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800822a:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823a:	4a22      	ldr	r2, [pc, #136]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800823c:	430b      	orrs	r3, r1
 800823e:	6553      	str	r3, [r2, #84]	; 0x54
 8008240:	e003      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008242:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008246:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800824a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008256:	673b      	str	r3, [r7, #112]	; 0x70
 8008258:	2300      	movs	r3, #0
 800825a:	677b      	str	r3, [r7, #116]	; 0x74
 800825c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008260:	460b      	mov	r3, r1
 8008262:	4313      	orrs	r3, r2
 8008264:	d034      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800826a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008274:	d007      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008276:	e011      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008278:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	4a11      	ldr	r2, [pc, #68]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800827e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008284:	e00e      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800828a:	3308      	adds	r3, #8
 800828c:	2102      	movs	r1, #2
 800828e:	4618      	mov	r0, r3
 8008290:	f001 face 	bl	8009830 <RCCEx_PLL2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80082a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10d      	bne.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ba:	4a02      	ldr	r2, [pc, #8]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082bc:	430b      	orrs	r3, r1
 80082be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082c0:	e006      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80082c2:	bf00      	nop
 80082c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80082cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80082dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80082de:	2300      	movs	r3, #0
 80082e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80082e6:	460b      	mov	r3, r1
 80082e8:	4313      	orrs	r3, r2
 80082ea:	d00c      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082f0:	3328      	adds	r3, #40	; 0x28
 80082f2:	2102      	movs	r1, #2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fb4d 	bl	8009994 <RCCEx_PLL3_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008312:	663b      	str	r3, [r7, #96]	; 0x60
 8008314:	2300      	movs	r3, #0
 8008316:	667b      	str	r3, [r7, #100]	; 0x64
 8008318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800831c:	460b      	mov	r3, r1
 800831e:	4313      	orrs	r3, r2
 8008320:	d038      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800832e:	d018      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008334:	d811      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833a:	d014      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800833c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008340:	d80b      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d011      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834a:	d106      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834c:	4bc3      	ldr	r3, [pc, #780]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4ac2      	ldr	r2, [pc, #776]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008358:	e008      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8008360:	e004      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008362:	bf00      	nop
 8008364:	e002      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008366:	bf00      	nop
 8008368:	e000      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800836a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800836c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10b      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008374:	4bb9      	ldr	r3, [pc, #740]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008378:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008384:	4ab5      	ldr	r2, [pc, #724]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008386:	430b      	orrs	r3, r1
 8008388:	6553      	str	r3, [r2, #84]	; 0x54
 800838a:	e003      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008390:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80083a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80083a2:	2300      	movs	r3, #0
 80083a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80083aa:	460b      	mov	r3, r1
 80083ac:	4313      	orrs	r3, r2
 80083ae:	d009      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083b0:	4baa      	ldr	r3, [pc, #680]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083be:	4aa7      	ldr	r2, [pc, #668]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80083d0:	653b      	str	r3, [r7, #80]	; 0x50
 80083d2:	2300      	movs	r3, #0
 80083d4:	657b      	str	r3, [r7, #84]	; 0x54
 80083d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80083da:	460b      	mov	r3, r1
 80083dc:	4313      	orrs	r3, r2
 80083de:	d009      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083e0:	4b9e      	ldr	r3, [pc, #632]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80083e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ee:	4a9b      	ldr	r2, [pc, #620]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80083f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008400:	64bb      	str	r3, [r7, #72]	; 0x48
 8008402:	2300      	movs	r3, #0
 8008404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008406:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800840a:	460b      	mov	r3, r1
 800840c:	4313      	orrs	r3, r2
 800840e:	d009      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008410:	4b92      	ldr	r3, [pc, #584]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008414:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8008418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800841c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800841e:	4a8f      	ldr	r2, [pc, #572]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008420:	430b      	orrs	r3, r1
 8008422:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
 8008432:	2300      	movs	r3, #0
 8008434:	647b      	str	r3, [r7, #68]	; 0x44
 8008436:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800843a:	460b      	mov	r3, r1
 800843c:	4313      	orrs	r3, r2
 800843e:	d00e      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008440:	4b86      	ldr	r3, [pc, #536]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	4a85      	ldr	r2, [pc, #532]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008446:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800844a:	6113      	str	r3, [r2, #16]
 800844c:	4b83      	ldr	r3, [pc, #524]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800844e:	6919      	ldr	r1, [r3, #16]
 8008450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008454:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008458:	4a80      	ldr	r2, [pc, #512]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800845a:	430b      	orrs	r3, r1
 800845c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800845e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800846a:	63bb      	str	r3, [r7, #56]	; 0x38
 800846c:	2300      	movs	r3, #0
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008470:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008474:	460b      	mov	r3, r1
 8008476:	4313      	orrs	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800847a:	4b78      	ldr	r3, [pc, #480]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800847c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008488:	4a74      	ldr	r2, [pc, #464]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800848a:	430b      	orrs	r3, r1
 800848c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800848e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800849a:	633b      	str	r3, [r7, #48]	; 0x30
 800849c:	2300      	movs	r3, #0
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
 80084a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80084a4:	460b      	mov	r3, r1
 80084a6:	4313      	orrs	r3, r2
 80084a8:	d00a      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084aa:	4b6c      	ldr	r3, [pc, #432]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80084b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ba:	4a68      	ldr	r2, [pc, #416]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084bc:	430b      	orrs	r3, r1
 80084be:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80084c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	2100      	movs	r1, #0
 80084ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80084d6:	460b      	mov	r3, r1
 80084d8:	4313      	orrs	r3, r2
 80084da:	d011      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084e0:	3308      	adds	r3, #8
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f001 f9a3 	bl	8009830 <RCCEx_PLL2_Config>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80084f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80084fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	2100      	movs	r1, #0
 800850a:	6239      	str	r1, [r7, #32]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
 8008512:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008516:	460b      	mov	r3, r1
 8008518:	4313      	orrs	r3, r2
 800851a:	d011      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800851c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008520:	3308      	adds	r3, #8
 8008522:	2101      	movs	r1, #1
 8008524:	4618      	mov	r0, r3
 8008526:	f001 f983 	bl	8009830 <RCCEx_PLL2_Config>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008530:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008538:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800853c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	2100      	movs	r1, #0
 800854a:	61b9      	str	r1, [r7, #24]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d011      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800855c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008560:	3308      	adds	r3, #8
 8008562:	2102      	movs	r1, #2
 8008564:	4618      	mov	r0, r3
 8008566:	f001 f963 	bl	8009830 <RCCEx_PLL2_Config>
 800856a:	4603      	mov	r3, r0
 800856c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008570:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008578:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800857c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	2100      	movs	r1, #0
 800858a:	6139      	str	r1, [r7, #16]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	617b      	str	r3, [r7, #20]
 8008592:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	d011      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800859c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085a0:	3328      	adds	r3, #40	; 0x28
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 f9f5 	bl	8009994 <RCCEx_PLL3_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80085b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80085bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80085c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	2100      	movs	r1, #0
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085d6:	460b      	mov	r3, r1
 80085d8:	4313      	orrs	r3, r2
 80085da:	d011      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e0:	3328      	adds	r3, #40	; 0x28
 80085e2:	2101      	movs	r1, #1
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f9d5 	bl	8009994 <RCCEx_PLL3_Config>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80085f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80085fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	2100      	movs	r1, #0
 800860a:	6039      	str	r1, [r7, #0]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	607b      	str	r3, [r7, #4]
 8008612:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d011      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800861c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008620:	3328      	adds	r3, #40	; 0x28
 8008622:	2102      	movs	r1, #2
 8008624:	4618      	mov	r0, r3
 8008626:	f001 f9b5 	bl	8009994 <RCCEx_PLL3_Config>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008638:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800863c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8008640:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
}
 800864e:	4618      	mov	r0, r3
 8008650:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008654:	46bd      	mov	sp, r7
 8008656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800865a:	bf00      	nop
 800865c:	58024400 	.word	0x58024400

08008660 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b090      	sub	sp, #64	; 0x40
 8008664:	af00      	add	r7, sp, #0
 8008666:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800866a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800866e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008672:	430b      	orrs	r3, r1
 8008674:	f040 8094 	bne.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008678:	4b97      	ldr	r3, [pc, #604]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800867a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	2b04      	cmp	r3, #4
 8008686:	f200 8087 	bhi.w	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800868a:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086cd 	.word	0x080086cd
 8008698:	080086f5 	.word	0x080086f5
 800869c:	08008791 	.word	0x08008791
 80086a0:	0800871d 	.word	0x0800871d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086a4:	4b8c      	ldr	r3, [pc, #560]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086b0:	d108      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 ff68 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c0:	f000 bc97 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c8:	f000 bc93 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086cc:	4b82      	ldr	r3, [pc, #520]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086d8:	d108      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086da:	f107 0318 	add.w	r3, r7, #24
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fcac 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e8:	f000 bc83 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f0:	f000 bc7f 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086f4:	4b78      	ldr	r3, [pc, #480]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008700:	d108      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fdec 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008710:	f000 bc6f 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008718:	f000 bc6b 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800871c:	4b6e      	ldr	r3, [pc, #440]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800871e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008724:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008726:	4b6c      	ldr	r3, [pc, #432]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b04      	cmp	r3, #4
 8008730:	d10c      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008734:	2b00      	cmp	r3, #0
 8008736:	d109      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008738:	4b67      	ldr	r3, [pc, #412]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	08db      	lsrs	r3, r3, #3
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	4a66      	ldr	r2, [pc, #408]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008744:	fa22 f303 	lsr.w	r3, r2, r3
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874a:	e01f      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800874c:	4b62      	ldr	r3, [pc, #392]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008758:	d106      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008760:	d102      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008762:	4b5f      	ldr	r3, [pc, #380]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008766:	e011      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008768:	4b5b      	ldr	r3, [pc, #364]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008774:	d106      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800877c:	d102      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800877e:	4b59      	ldr	r3, [pc, #356]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008782:	e003      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008788:	f000 bc33 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800878c:	f000 bc31 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008790:	4b55      	ldr	r3, [pc, #340]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008794:	f000 bc2d 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879c:	f000 bc29 	b.w	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80087a8:	430b      	orrs	r3, r1
 80087aa:	f040 809f 	bne.w	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80087ae:	4b4a      	ldr	r3, [pc, #296]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80087b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087be:	d04d      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c6:	f200 8084 	bhi.w	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2bc0      	cmp	r3, #192	; 0xc0
 80087ce:	d07d      	beq.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	2bc0      	cmp	r3, #192	; 0xc0
 80087d4:	d87d      	bhi.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	2b80      	cmp	r3, #128	; 0x80
 80087da:	d02d      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	2b80      	cmp	r3, #128	; 0x80
 80087e0:	d877      	bhi.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	2b40      	cmp	r3, #64	; 0x40
 80087ec:	d012      	beq.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80087ee:	e070      	b.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087f0:	4b39      	ldr	r3, [pc, #228]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087fc:	d107      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fec2 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800880c:	e3f1      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008812:	e3ee      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008814:	4b30      	ldr	r3, [pc, #192]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800881c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008820:	d107      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008822:	f107 0318 	add.w	r3, r7, #24
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fc08 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008830:	e3df      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008836:	e3dc      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008838:	4b27      	ldr	r3, [pc, #156]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008844:	d107      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008846:	f107 030c 	add.w	r3, r7, #12
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fd4a 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008854:	e3cd      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885a:	e3ca      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800885c:	4b1e      	ldr	r3, [pc, #120]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800885e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008864:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008866:	4b1c      	ldr	r3, [pc, #112]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b04      	cmp	r3, #4
 8008870:	d10c      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008878:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	08db      	lsrs	r3, r3, #3
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	4a16      	ldr	r2, [pc, #88]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800888a:	e01e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800888c:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008898:	d106      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a0:	d102      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a6:	e010      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b4:	d106      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088bc:	d102      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c2:	e002      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80088c8:	e393      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80088ca:	e392      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d0:	e38f      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d6:	e38c      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80088d8:	58024400 	.word	0x58024400
 80088dc:	03d09000 	.word	0x03d09000
 80088e0:	003d0900 	.word	0x003d0900
 80088e4:	007a1200 	.word	0x007a1200
 80088e8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80088ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80088f4:	430b      	orrs	r3, r1
 80088f6:	f040 809c 	bne.w	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80088fa:	4b9e      	ldr	r3, [pc, #632]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80088fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fe:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008902:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800890a:	d054      	beq.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008912:	f200 808b 	bhi.w	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800891c:	f000 8083 	beq.w	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008926:	f200 8081 	bhi.w	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008930:	d02f      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008938:	d878      	bhi.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008946:	d012      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008948:	e070      	b.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800894a:	4b8a      	ldr	r3, [pc, #552]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008956:	d107      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fe15 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008966:	e344      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800896c:	e341      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800896e:	4b81      	ldr	r3, [pc, #516]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800897a:	d107      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897c:	f107 0318 	add.w	r3, r7, #24
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fb5b 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898a:	e332      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008990:	e32f      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008992:	4b78      	ldr	r3, [pc, #480]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800899a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800899e:	d107      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a0:	f107 030c 	add.w	r3, r7, #12
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fc9d 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ae:	e320      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b4:	e31d      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089b6:	4b6f      	ldr	r3, [pc, #444]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80089b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089c0:	4b6c      	ldr	r3, [pc, #432]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d10c      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80089cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d109      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089d2:	4b68      	ldr	r3, [pc, #416]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	08db      	lsrs	r3, r3, #3
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	4a66      	ldr	r2, [pc, #408]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80089de:	fa22 f303 	lsr.w	r3, r2, r3
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e4:	e01e      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089e6:	4b63      	ldr	r3, [pc, #396]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f2:	d106      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089fa:	d102      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089fc:	4b5f      	ldr	r3, [pc, #380]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a00:	e010      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a02:	4b5c      	ldr	r3, [pc, #368]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a0e:	d106      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a16:	d102      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a18:	4b59      	ldr	r3, [pc, #356]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a1c:	e002      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8008a22:	e2e6      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008a24:	e2e5      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a26:	4b57      	ldr	r3, [pc, #348]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a2a:	e2e2      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a30:	e2df      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a36:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	f040 80a7 	bne.w	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a40:	4b4c      	ldr	r3, [pc, #304]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a44:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008a48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a50:	d055      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a58:	f200 8096 	bhi.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a62:	f000 8084 	beq.w	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a6c:	f200 808c 	bhi.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a76:	d030      	beq.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7e:	f200 8083 	bhi.w	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8e:	d012      	beq.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008a90:	e07a      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a92:	4b38      	ldr	r3, [pc, #224]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a9e:	d107      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fd71 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aae:	e2a0      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab4:	e29d      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ab6:	4b2f      	ldr	r3, [pc, #188]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ac2:	d107      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac4:	f107 0318 	add.w	r3, r7, #24
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fab7 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad2:	e28e      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad8:	e28b      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ada:	4b26      	ldr	r3, [pc, #152]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae8:	f107 030c 	add.w	r3, r7, #12
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fbf9 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af6:	e27c      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008afc:	e279      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008afe:	4b1d      	ldr	r3, [pc, #116]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b08:	4b1a      	ldr	r3, [pc, #104]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d10c      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b1a:	4b16      	ldr	r3, [pc, #88]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	08db      	lsrs	r3, r3, #3
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	4a14      	ldr	r2, [pc, #80]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008b26:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b2c:	e01e      	b.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b2e:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3a:	d106      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b42:	d102      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b44:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b48:	e010      	b.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b56:	d106      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b5e:	d102      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b64:	e002      	b.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b6a:	e242      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008b6c:	e241      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b72:	e23e      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008b74:	58024400 	.word	0x58024400
 8008b78:	03d09000 	.word	0x03d09000
 8008b7c:	003d0900 	.word	0x003d0900
 8008b80:	007a1200 	.word	0x007a1200
 8008b84:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b8c:	e231      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b92:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008b96:	430b      	orrs	r3, r1
 8008b98:	f040 8085 	bne.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b9c:	4b9c      	ldr	r3, [pc, #624]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bac:	d06b      	beq.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bb4:	d874      	bhi.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bbc:	d056      	beq.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bc4:	d86c      	bhi.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bcc:	d03b      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bd4:	d864      	bhi.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bdc:	d021      	beq.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be4:	d85c      	bhi.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf2:	d004      	beq.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008bf4:	e054      	b.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008bf6:	f7fe fb07 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8008bfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bfc:	e1f9      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bfe:	4b84      	ldr	r3, [pc, #528]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c0a:	d107      	bne.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c0c:	f107 0318 	add.w	r3, r7, #24
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 fa13 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c1a:	e1ea      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c20:	e1e7      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c22:	4b7b      	ldr	r3, [pc, #492]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c2e:	d107      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c30:	f107 030c 	add.w	r3, r7, #12
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fb55 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3e:	e1d8      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c44:	e1d5      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c46:	4b72      	ldr	r3, [pc, #456]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d109      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c52:	4b6f      	ldr	r3, [pc, #444]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	08db      	lsrs	r3, r3, #3
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	4a6d      	ldr	r2, [pc, #436]	; (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c64:	e1c5      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c6a:	e1c2      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c6c:	4b68      	ldr	r3, [pc, #416]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c78:	d102      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8008c7a:	4b67      	ldr	r3, [pc, #412]	; (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7e:	e1b8      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c84:	e1b5      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c86:	4b62      	ldr	r3, [pc, #392]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c92:	d102      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008c94:	4b61      	ldr	r3, [pc, #388]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c98:	e1ab      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c9e:	e1a8      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca4:	e1a5      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008caa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	d173      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008cb2:	4b57      	ldr	r3, [pc, #348]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cc2:	d02f      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cca:	d863      	bhi.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd8:	d012      	beq.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008cda:	e05b      	b.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cdc:	4b4c      	ldr	r3, [pc, #304]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ce8:	d107      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cea:	f107 0318 	add.w	r3, r7, #24
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f9a4 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf8:	e17b      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cfe:	e178      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d00:	4b43      	ldr	r3, [pc, #268]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d0c:	d107      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0e:	f107 030c 	add.w	r3, r7, #12
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 fae6 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1c:	e169      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d22:	e166      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d24:	4b3a      	ldr	r3, [pc, #232]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d2e:	4b38      	ldr	r3, [pc, #224]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d10c      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d40:	4b33      	ldr	r3, [pc, #204]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	4a32      	ldr	r2, [pc, #200]	; (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d52:	e01e      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d54:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d60:	d106      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d68:	d102      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d6a:	4b2b      	ldr	r3, [pc, #172]	; (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d6e:	e010      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d70:	4b27      	ldr	r3, [pc, #156]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d7c:	d106      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d84:	d102      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d86:	4b25      	ldr	r3, [pc, #148]	; (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8a:	e002      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d90:	e12f      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008d92:	e12e      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d98:	e12b      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008da2:	430b      	orrs	r3, r1
 8008da4:	d13c      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d004      	beq.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbc:	d012      	beq.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008dbe:	e023      	b.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dc0:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dcc:	d107      	bne.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fbda 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ddc:	e109      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008de2:	e106      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008df0:	d107      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df2:	f107 0318 	add.w	r3, r7, #24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f920 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e00:	e0f7      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e06:	e0f4      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e0c:	e0f1      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008e0e:	bf00      	nop
 8008e10:	58024400 	.word	0x58024400
 8008e14:	03d09000 	.word	0x03d09000
 8008e18:	003d0900 	.word	0x003d0900
 8008e1c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e24:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	f040 8091 	bne.w	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e2e:	4b73      	ldr	r3, [pc, #460]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008e36:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008e3e:	f000 8081 	beq.w	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008e48:	d87f      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e50:	d06b      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e58:	d877      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e60:	d056      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e68:	d86f      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e70:	d03b      	beq.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e78:	d867      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e80:	d021      	beq.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e88:	d85f      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e96:	d004      	beq.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008e98:	e057      	b.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e9a:	f000 f8b9 	bl	8009010 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ea0:	e0a7      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea2:	4b56      	ldr	r3, [pc, #344]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eae:	d107      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb0:	f107 0318 	add.w	r3, r7, #24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f8c1 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ebe:	e098      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec4:	e095      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ec6:	4b4d      	ldr	r3, [pc, #308]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed2:	d107      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed4:	f107 030c 	add.w	r3, r7, #12
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fa03 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee2:	e086      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ee8:	e083      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008eea:	4b44      	ldr	r3, [pc, #272]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d109      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef6:	4b41      	ldr	r3, [pc, #260]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	4a3f      	ldr	r2, [pc, #252]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f08:	e073      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f0e:	e070      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f10:	4b3a      	ldr	r3, [pc, #232]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1c:	d102      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008f1e:	4b39      	ldr	r3, [pc, #228]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f22:	e066      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f28:	e063      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f2a:	4b34      	ldr	r3, [pc, #208]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f36:	d102      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008f38:	4b33      	ldr	r3, [pc, #204]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3c:	e059      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f42:	e056      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f44:	4b31      	ldr	r3, [pc, #196]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f48:	e053      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f4e:	e050      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f54:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	d148      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f5c:	4b27      	ldr	r3, [pc, #156]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f6c:	d02a      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f74:	d838      	bhi.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f82:	d00d      	beq.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008f84:	e030      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f86:	4b1d      	ldr	r3, [pc, #116]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f92:	d102      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008f94:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f98:	e02b      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f9e:	e028      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fa0:	4b16      	ldr	r3, [pc, #88]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fac:	d107      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 faea 	bl	800958c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fbc:	e019      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc2:	e016      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd0:	d107      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd2:	f107 0318 	add.w	r3, r7, #24
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f830 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe0:	e007      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe6:	e004      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fec:	e001      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3740      	adds	r7, #64	; 0x40
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	58024400 	.word	0x58024400
 8009000:	03d09000 	.word	0x03d09000
 8009004:	003d0900 	.word	0x003d0900
 8009008:	007a1200 	.word	0x007a1200
 800900c:	00bb8000 	.word	0x00bb8000

08009010 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009014:	f7fe f8c8 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 8009018:	4602      	mov	r2, r0
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	091b      	lsrs	r3, r3, #4
 8009020:	f003 0307 	and.w	r3, r3, #7
 8009024:	4904      	ldr	r1, [pc, #16]	; (8009038 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009026:	5ccb      	ldrb	r3, [r1, r3]
 8009028:	f003 031f 	and.w	r3, r3, #31
 800902c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009030:	4618      	mov	r0, r3
 8009032:	bd80      	pop	{r7, pc}
 8009034:	58024400 	.word	0x58024400
 8009038:	08011110 	.word	0x08011110

0800903c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800903c:	b480      	push	{r7}
 800903e:	b089      	sub	sp, #36	; 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009044:	4ba1      	ldr	r3, [pc, #644]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800904e:	4b9f      	ldr	r3, [pc, #636]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009052:	0b1b      	lsrs	r3, r3, #12
 8009054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009058:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800905a:	4b9c      	ldr	r3, [pc, #624]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	091b      	lsrs	r3, r3, #4
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009066:	4b99      	ldr	r3, [pc, #612]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906a:	08db      	lsrs	r3, r3, #3
 800906c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	fb02 f303 	mul.w	r3, r2, r3
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8111 	beq.w	80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b02      	cmp	r3, #2
 800908e:	f000 8083 	beq.w	8009198 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b02      	cmp	r3, #2
 8009096:	f200 80a1 	bhi.w	80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d056      	beq.n	8009154 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090a6:	e099      	b.n	80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a8:	4b88      	ldr	r3, [pc, #544]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0320 	and.w	r3, r3, #32
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d02d      	beq.n	8009110 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b4:	4b85      	ldr	r3, [pc, #532]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	4a84      	ldr	r2, [pc, #528]	; (80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090de:	4b7b      	ldr	r3, [pc, #492]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800910e:	e087      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800911e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009122:	4b6a      	ldr	r3, [pc, #424]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009132:	ed97 6a03 	vldr	s12, [r7, #12]
 8009136:	eddf 5a67 	vldr	s11, [pc, #412]	; 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800913a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009152:	e065      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80092dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	4b59      	ldr	r3, [pc, #356]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009176:	ed97 6a03 	vldr	s12, [r7, #12]
 800917a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009196:	e043      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091aa:	4b48      	ldr	r3, [pc, #288]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80091be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091da:	e021      	b.n	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80092dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ee:	4b37      	ldr	r3, [pc, #220]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009202:	eddf 5a34 	vldr	s11, [pc, #208]	; 80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800921e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009220:	4b2a      	ldr	r3, [pc, #168]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	0a5b      	lsrs	r3, r3, #9
 8009226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800923a:	edd7 6a07 	vldr	s13, [r7, #28]
 800923e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009246:	ee17 2a90 	vmov	r2, s15
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800924e:	4b1f      	ldr	r3, [pc, #124]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009258:	ee07 3a90 	vmov	s15, r3
 800925c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009268:	edd7 6a07 	vldr	s13, [r7, #28]
 800926c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009274:	ee17 2a90 	vmov	r2, s15
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800927c:	4b13      	ldr	r3, [pc, #76]	; (80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	0e1b      	lsrs	r3, r3, #24
 8009282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009296:	edd7 6a07 	vldr	s13, [r7, #28]
 800929a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a2:	ee17 2a90 	vmov	r2, s15
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092aa:	e008      	b.n	80092be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	609a      	str	r2, [r3, #8]
}
 80092be:	bf00      	nop
 80092c0:	3724      	adds	r7, #36	; 0x24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400
 80092d0:	03d09000 	.word	0x03d09000
 80092d4:	46000000 	.word	0x46000000
 80092d8:	4c742400 	.word	0x4c742400
 80092dc:	4a742400 	.word	0x4a742400
 80092e0:	4af42400 	.word	0x4af42400

080092e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b089      	sub	sp, #36	; 0x24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092ec:	4ba1      	ldr	r3, [pc, #644]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f0:	f003 0303 	and.w	r3, r3, #3
 80092f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80092f6:	4b9f      	ldr	r3, [pc, #636]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fa:	0d1b      	lsrs	r3, r3, #20
 80092fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009300:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009302:	4b9c      	ldr	r3, [pc, #624]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009306:	0a1b      	lsrs	r3, r3, #8
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800930e:	4b99      	ldr	r3, [pc, #612]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009312:	08db      	lsrs	r3, r3, #3
 8009314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	fb02 f303 	mul.w	r3, r2, r3
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8111 	beq.w	8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b02      	cmp	r3, #2
 8009336:	f000 8083 	beq.w	8009440 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b02      	cmp	r3, #2
 800933e:	f200 80a1 	bhi.w	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d056      	beq.n	80093fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800934e:	e099      	b.n	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009350:	4b88      	ldr	r3, [pc, #544]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d02d      	beq.n	80093b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800935c:	4b85      	ldr	r3, [pc, #532]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	08db      	lsrs	r3, r3, #3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	4a84      	ldr	r2, [pc, #528]	; (8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009386:	4b7b      	ldr	r3, [pc, #492]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009396:	ed97 6a03 	vldr	s12, [r7, #12]
 800939a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800939e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093b6:	e087      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ca:	4b6a      	ldr	r3, [pc, #424]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a03 	vldr	s12, [r7, #12]
 80093de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093fa:	e065      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b59      	ldr	r3, [pc, #356]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009422:	eddf 5a56 	vldr	s11, [pc, #344]	; 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943e:	e043      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b48      	ldr	r3, [pc, #288]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a03 	vldr	s12, [r7, #12]
 8009466:	eddf 5a45 	vldr	s11, [pc, #276]	; 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009482:	e021      	b.n	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b37      	ldr	r3, [pc, #220]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800957c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80094c8:	4b2a      	ldr	r3, [pc, #168]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	0a5b      	lsrs	r3, r3, #9
 80094ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ee:	ee17 2a90 	vmov	r2, s15
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80094f6:	4b1f      	ldr	r3, [pc, #124]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	0c1b      	lsrs	r3, r3, #16
 80094fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009500:	ee07 3a90 	vmov	s15, r3
 8009504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800950c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009510:	edd7 6a07 	vldr	s13, [r7, #28]
 8009514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951c:	ee17 2a90 	vmov	r2, s15
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009524:	4b13      	ldr	r3, [pc, #76]	; (8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	0e1b      	lsrs	r3, r3, #24
 800952a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800952e:	ee07 3a90 	vmov	s15, r3
 8009532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800953a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800953e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954a:	ee17 2a90 	vmov	r2, s15
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009552:	e008      	b.n	8009566 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	609a      	str	r2, [r3, #8]
}
 8009566:	bf00      	nop
 8009568:	3724      	adds	r7, #36	; 0x24
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	58024400 	.word	0x58024400
 8009578:	03d09000 	.word	0x03d09000
 800957c:	46000000 	.word	0x46000000
 8009580:	4c742400 	.word	0x4c742400
 8009584:	4a742400 	.word	0x4a742400
 8009588:	4af42400 	.word	0x4af42400

0800958c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800958c:	b480      	push	{r7}
 800958e:	b089      	sub	sp, #36	; 0x24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009594:	4ba0      	ldr	r3, [pc, #640]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009598:	f003 0303 	and.w	r3, r3, #3
 800959c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800959e:	4b9e      	ldr	r3, [pc, #632]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	091b      	lsrs	r3, r3, #4
 80095a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095aa:	4b9b      	ldr	r3, [pc, #620]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80095b4:	4b98      	ldr	r3, [pc, #608]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b8:	08db      	lsrs	r3, r3, #3
 80095ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	fb02 f303 	mul.w	r3, r2, r3
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8111 	beq.w	80097fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	f000 8083 	beq.w	80096e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	f200 80a1 	bhi.w	800972a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d056      	beq.n	80096a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80095f4:	e099      	b.n	800972a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f6:	4b88      	ldr	r3, [pc, #544]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d02d      	beq.n	800965e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009602:	4b85      	ldr	r3, [pc, #532]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	08db      	lsrs	r3, r3, #3
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	4a83      	ldr	r2, [pc, #524]	; (800981c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800960e:	fa22 f303 	lsr.w	r3, r2, r3
 8009612:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962c:	4b7a      	ldr	r3, [pc, #488]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800962e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009640:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009658:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800965c:	e087      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009668:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800966c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009670:	4b69      	ldr	r3, [pc, #420]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009680:	ed97 6a03 	vldr	s12, [r7, #12]
 8009684:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096a0:	e065      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009828 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b4:	4b58      	ldr	r3, [pc, #352]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e4:	e043      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800982c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80096f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f8:	4b47      	ldr	r3, [pc, #284]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009708:	ed97 6a03 	vldr	s12, [r7, #12]
 800970c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800971c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009728:	e021      	b.n	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009734:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009824 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973c:	4b36      	ldr	r3, [pc, #216]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009750:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800976c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800976e:	4b2a      	ldr	r3, [pc, #168]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009772:	0a5b      	lsrs	r3, r3, #9
 8009774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009778:	ee07 3a90 	vmov	s15, r3
 800977c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009788:	edd7 6a07 	vldr	s13, [r7, #28]
 800978c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009794:	ee17 2a90 	vmov	r2, s15
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800979c:	4b1e      	ldr	r3, [pc, #120]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a0:	0c1b      	lsrs	r3, r3, #16
 80097a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c2:	ee17 2a90 	vmov	r2, s15
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80097ca:	4b13      	ldr	r3, [pc, #76]	; (8009818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	0e1b      	lsrs	r3, r3, #24
 80097d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f0:	ee17 2a90 	vmov	r2, s15
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097f8:	e008      	b.n	800980c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	609a      	str	r2, [r3, #8]
}
 800980c:	bf00      	nop
 800980e:	3724      	adds	r7, #36	; 0x24
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	58024400 	.word	0x58024400
 800981c:	03d09000 	.word	0x03d09000
 8009820:	46000000 	.word	0x46000000
 8009824:	4c742400 	.word	0x4c742400
 8009828:	4a742400 	.word	0x4a742400
 800982c:	4af42400 	.word	0x4af42400

08009830 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800983e:	4b53      	ldr	r3, [pc, #332]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	2b03      	cmp	r3, #3
 8009848:	d101      	bne.n	800984e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e099      	b.n	8009982 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800984e:	4b4f      	ldr	r3, [pc, #316]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a4e      	ldr	r2, [pc, #312]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009854:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800985a:	f7f8 fa21 	bl	8001ca0 <HAL_GetTick>
 800985e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009860:	e008      	b.n	8009874 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009862:	f7f8 fa1d 	bl	8001ca0 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b02      	cmp	r3, #2
 800986e:	d901      	bls.n	8009874 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e086      	b.n	8009982 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009874:	4b45      	ldr	r3, [pc, #276]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1f0      	bne.n	8009862 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009880:	4b42      	ldr	r3, [pc, #264]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	031b      	lsls	r3, r3, #12
 800988e:	493f      	ldr	r1, [pc, #252]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009890:	4313      	orrs	r3, r2
 8009892:	628b      	str	r3, [r1, #40]	; 0x28
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	3b01      	subs	r3, #1
 800989a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	025b      	lsls	r3, r3, #9
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	041b      	lsls	r3, r3, #16
 80098b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	3b01      	subs	r3, #1
 80098be:	061b      	lsls	r3, r3, #24
 80098c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098c4:	4931      	ldr	r1, [pc, #196]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098ca:	4b30      	ldr	r3, [pc, #192]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	492d      	ldr	r1, [pc, #180]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098dc:	4b2b      	ldr	r3, [pc, #172]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	f023 0220 	bic.w	r2, r3, #32
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	4928      	ldr	r1, [pc, #160]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ee:	4b27      	ldr	r3, [pc, #156]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f2:	4a26      	ldr	r2, [pc, #152]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098f4:	f023 0310 	bic.w	r3, r3, #16
 80098f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098fa:	4b24      	ldr	r3, [pc, #144]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 80098fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098fe:	4b24      	ldr	r3, [pc, #144]	; (8009990 <RCCEx_PLL2_Config+0x160>)
 8009900:	4013      	ands	r3, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	69d2      	ldr	r2, [r2, #28]
 8009906:	00d2      	lsls	r2, r2, #3
 8009908:	4920      	ldr	r1, [pc, #128]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 800990a:	4313      	orrs	r3, r2
 800990c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800990e:	4b1f      	ldr	r3, [pc, #124]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	4a1e      	ldr	r2, [pc, #120]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009914:	f043 0310 	orr.w	r3, r3, #16
 8009918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d106      	bne.n	800992e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009920:	4b1a      	ldr	r3, [pc, #104]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	4a19      	ldr	r2, [pc, #100]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009926:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800992a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800992c:	e00f      	b.n	800994e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d106      	bne.n	8009942 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009934:	4b15      	ldr	r3, [pc, #84]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	4a14      	ldr	r2, [pc, #80]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 800993a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800993e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009940:	e005      	b.n	800994e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009942:	4b12      	ldr	r3, [pc, #72]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	4a11      	ldr	r2, [pc, #68]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800994c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a0e      	ldr	r2, [pc, #56]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800995a:	f7f8 f9a1 	bl	8001ca0 <HAL_GetTick>
 800995e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009960:	e008      	b.n	8009974 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009962:	f7f8 f99d 	bl	8001ca0 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b02      	cmp	r3, #2
 800996e:	d901      	bls.n	8009974 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e006      	b.n	8009982 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <RCCEx_PLL2_Config+0x15c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0f0      	beq.n	8009962 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	58024400 	.word	0x58024400
 8009990:	ffff0007 	.word	0xffff0007

08009994 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099a2:	4b53      	ldr	r3, [pc, #332]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d101      	bne.n	80099b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e099      	b.n	8009ae6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099b2:	4b4f      	ldr	r3, [pc, #316]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a4e      	ldr	r2, [pc, #312]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099be:	f7f8 f96f 	bl	8001ca0 <HAL_GetTick>
 80099c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099c4:	e008      	b.n	80099d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099c6:	f7f8 f96b 	bl	8001ca0 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d901      	bls.n	80099d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e086      	b.n	8009ae6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099d8:	4b45      	ldr	r3, [pc, #276]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1f0      	bne.n	80099c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099e4:	4b42      	ldr	r3, [pc, #264]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	051b      	lsls	r3, r3, #20
 80099f2:	493f      	ldr	r1, [pc, #252]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	628b      	str	r3, [r1, #40]	; 0x28
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	025b      	lsls	r3, r3, #9
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	061b      	lsls	r3, r3, #24
 8009a24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a28:	4931      	ldr	r1, [pc, #196]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a2e:	4b30      	ldr	r3, [pc, #192]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	492d      	ldr	r1, [pc, #180]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a40:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	4928      	ldr	r1, [pc, #160]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a52:	4b27      	ldr	r3, [pc, #156]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4a26      	ldr	r2, [pc, #152]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a5e:	4b24      	ldr	r3, [pc, #144]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <RCCEx_PLL3_Config+0x160>)
 8009a64:	4013      	ands	r3, r2
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	69d2      	ldr	r2, [r2, #28]
 8009a6a:	00d2      	lsls	r2, r2, #3
 8009a6c:	4920      	ldr	r1, [pc, #128]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a72:	4b1f      	ldr	r3, [pc, #124]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	4a1e      	ldr	r2, [pc, #120]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a84:	4b1a      	ldr	r3, [pc, #104]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	4a19      	ldr	r2, [pc, #100]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a90:	e00f      	b.n	8009ab2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4a14      	ldr	r2, [pc, #80]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009a9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aa4:	e005      	b.n	8009ab2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aa6:	4b12      	ldr	r3, [pc, #72]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	4a11      	ldr	r2, [pc, #68]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a0e      	ldr	r2, [pc, #56]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009abe:	f7f8 f8ef 	bl	8001ca0 <HAL_GetTick>
 8009ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ac4:	e008      	b.n	8009ad8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ac6:	f7f8 f8eb 	bl	8001ca0 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d901      	bls.n	8009ad8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e006      	b.n	8009ae6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <RCCEx_PLL3_Config+0x15c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f0      	beq.n	8009ac6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	58024400 	.word	0x58024400
 8009af4:	ffff0007 	.word	0xffff0007

08009af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e049      	b.n	8009b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7f7 fe20 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f000 fd48 	bl	800a5cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d001      	beq.n	8009bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e04c      	b.n	8009c5a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a26      	ldr	r2, [pc, #152]	; (8009c68 <HAL_TIM_Base_Start+0xc0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d022      	beq.n	8009c18 <HAL_TIM_Base_Start+0x70>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bda:	d01d      	beq.n	8009c18 <HAL_TIM_Base_Start+0x70>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a22      	ldr	r2, [pc, #136]	; (8009c6c <HAL_TIM_Base_Start+0xc4>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d018      	beq.n	8009c18 <HAL_TIM_Base_Start+0x70>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a21      	ldr	r2, [pc, #132]	; (8009c70 <HAL_TIM_Base_Start+0xc8>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d013      	beq.n	8009c18 <HAL_TIM_Base_Start+0x70>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a1f      	ldr	r2, [pc, #124]	; (8009c74 <HAL_TIM_Base_Start+0xcc>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d00e      	beq.n	8009c18 <HAL_TIM_Base_Start+0x70>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a1e      	ldr	r2, [pc, #120]	; (8009c78 <HAL_TIM_Base_Start+0xd0>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d009      	beq.n	8009c18 <HAL_TIM_Base_Start+0x70>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a1c      	ldr	r2, [pc, #112]	; (8009c7c <HAL_TIM_Base_Start+0xd4>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d004      	beq.n	8009c18 <HAL_TIM_Base_Start+0x70>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <HAL_TIM_Base_Start+0xd8>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d115      	bne.n	8009c44 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	4b19      	ldr	r3, [pc, #100]	; (8009c84 <HAL_TIM_Base_Start+0xdc>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b06      	cmp	r3, #6
 8009c28:	d015      	beq.n	8009c56 <HAL_TIM_Base_Start+0xae>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c30:	d011      	beq.n	8009c56 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0201 	orr.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c42:	e008      	b.n	8009c56 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0201 	orr.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	e000      	b.n	8009c58 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	40000400 	.word	0x40000400
 8009c70:	40000800 	.word	0x40000800
 8009c74:	40000c00 	.word	0x40000c00
 8009c78:	40010400 	.word	0x40010400
 8009c7c:	40001800 	.word	0x40001800
 8009c80:	40014000 	.word	0x40014000
 8009c84:	00010007 	.word	0x00010007

08009c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d001      	beq.n	8009ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e054      	b.n	8009d4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f042 0201 	orr.w	r2, r2, #1
 8009cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a26      	ldr	r2, [pc, #152]	; (8009d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d022      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x80>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cca:	d01d      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x80>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a22      	ldr	r2, [pc, #136]	; (8009d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d018      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x80>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a21      	ldr	r2, [pc, #132]	; (8009d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d013      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x80>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a1f      	ldr	r2, [pc, #124]	; (8009d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d00e      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x80>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a1e      	ldr	r2, [pc, #120]	; (8009d68 <HAL_TIM_Base_Start_IT+0xe0>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d009      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x80>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a1c      	ldr	r2, [pc, #112]	; (8009d6c <HAL_TIM_Base_Start_IT+0xe4>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d004      	beq.n	8009d08 <HAL_TIM_Base_Start_IT+0x80>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a1b      	ldr	r2, [pc, #108]	; (8009d70 <HAL_TIM_Base_Start_IT+0xe8>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d115      	bne.n	8009d34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	689a      	ldr	r2, [r3, #8]
 8009d0e:	4b19      	ldr	r3, [pc, #100]	; (8009d74 <HAL_TIM_Base_Start_IT+0xec>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b06      	cmp	r3, #6
 8009d18:	d015      	beq.n	8009d46 <HAL_TIM_Base_Start_IT+0xbe>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d20:	d011      	beq.n	8009d46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f042 0201 	orr.w	r2, r2, #1
 8009d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d32:	e008      	b.n	8009d46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	e000      	b.n	8009d48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	40010000 	.word	0x40010000
 8009d5c:	40000400 	.word	0x40000400
 8009d60:	40000800 	.word	0x40000800
 8009d64:	40000c00 	.word	0x40000c00
 8009d68:	40010400 	.word	0x40010400
 8009d6c:	40001800 	.word	0x40001800
 8009d70:	40014000 	.word	0x40014000
 8009d74:	00010007 	.word	0x00010007

08009d78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e049      	b.n	8009e1e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f841 	bl	8009e26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f000 fc08 	bl	800a5cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009e2e:	bf00      	nop
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d109      	bne.n	8009e60 <HAL_TIM_OC_Start+0x24>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	bf14      	ite	ne
 8009e58:	2301      	movne	r3, #1
 8009e5a:	2300      	moveq	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	e03c      	b.n	8009eda <HAL_TIM_OC_Start+0x9e>
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d109      	bne.n	8009e7a <HAL_TIM_OC_Start+0x3e>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	bf14      	ite	ne
 8009e72:	2301      	movne	r3, #1
 8009e74:	2300      	moveq	r3, #0
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	e02f      	b.n	8009eda <HAL_TIM_OC_Start+0x9e>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d109      	bne.n	8009e94 <HAL_TIM_OC_Start+0x58>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	bf14      	ite	ne
 8009e8c:	2301      	movne	r3, #1
 8009e8e:	2300      	moveq	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	e022      	b.n	8009eda <HAL_TIM_OC_Start+0x9e>
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b0c      	cmp	r3, #12
 8009e98:	d109      	bne.n	8009eae <HAL_TIM_OC_Start+0x72>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	bf14      	ite	ne
 8009ea6:	2301      	movne	r3, #1
 8009ea8:	2300      	moveq	r3, #0
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	e015      	b.n	8009eda <HAL_TIM_OC_Start+0x9e>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d109      	bne.n	8009ec8 <HAL_TIM_OC_Start+0x8c>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	bf14      	ite	ne
 8009ec0:	2301      	movne	r3, #1
 8009ec2:	2300      	moveq	r3, #0
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	e008      	b.n	8009eda <HAL_TIM_OC_Start+0x9e>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	bf14      	ite	ne
 8009ed4:	2301      	movne	r3, #1
 8009ed6:	2300      	moveq	r3, #0
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e0a1      	b.n	800a026 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <HAL_TIM_OC_Start+0xb6>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ef0:	e023      	b.n	8009f3a <HAL_TIM_OC_Start+0xfe>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d104      	bne.n	8009f02 <HAL_TIM_OC_Start+0xc6>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2202      	movs	r2, #2
 8009efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f00:	e01b      	b.n	8009f3a <HAL_TIM_OC_Start+0xfe>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d104      	bne.n	8009f12 <HAL_TIM_OC_Start+0xd6>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f10:	e013      	b.n	8009f3a <HAL_TIM_OC_Start+0xfe>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b0c      	cmp	r3, #12
 8009f16:	d104      	bne.n	8009f22 <HAL_TIM_OC_Start+0xe6>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f20:	e00b      	b.n	8009f3a <HAL_TIM_OC_Start+0xfe>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b10      	cmp	r3, #16
 8009f26:	d104      	bne.n	8009f32 <HAL_TIM_OC_Start+0xf6>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f30:	e003      	b.n	8009f3a <HAL_TIM_OC_Start+0xfe>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2202      	movs	r2, #2
 8009f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 ff50 	bl	800ade8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a38      	ldr	r2, [pc, #224]	; (800a030 <HAL_TIM_OC_Start+0x1f4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d013      	beq.n	8009f7a <HAL_TIM_OC_Start+0x13e>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a37      	ldr	r2, [pc, #220]	; (800a034 <HAL_TIM_OC_Start+0x1f8>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d00e      	beq.n	8009f7a <HAL_TIM_OC_Start+0x13e>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a35      	ldr	r2, [pc, #212]	; (800a038 <HAL_TIM_OC_Start+0x1fc>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d009      	beq.n	8009f7a <HAL_TIM_OC_Start+0x13e>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a34      	ldr	r2, [pc, #208]	; (800a03c <HAL_TIM_OC_Start+0x200>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d004      	beq.n	8009f7a <HAL_TIM_OC_Start+0x13e>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a32      	ldr	r2, [pc, #200]	; (800a040 <HAL_TIM_OC_Start+0x204>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d101      	bne.n	8009f7e <HAL_TIM_OC_Start+0x142>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e000      	b.n	8009f80 <HAL_TIM_OC_Start+0x144>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a25      	ldr	r2, [pc, #148]	; (800a030 <HAL_TIM_OC_Start+0x1f4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d022      	beq.n	8009fe4 <HAL_TIM_OC_Start+0x1a8>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa6:	d01d      	beq.n	8009fe4 <HAL_TIM_OC_Start+0x1a8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a25      	ldr	r2, [pc, #148]	; (800a044 <HAL_TIM_OC_Start+0x208>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d018      	beq.n	8009fe4 <HAL_TIM_OC_Start+0x1a8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a24      	ldr	r2, [pc, #144]	; (800a048 <HAL_TIM_OC_Start+0x20c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d013      	beq.n	8009fe4 <HAL_TIM_OC_Start+0x1a8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a22      	ldr	r2, [pc, #136]	; (800a04c <HAL_TIM_OC_Start+0x210>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00e      	beq.n	8009fe4 <HAL_TIM_OC_Start+0x1a8>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a1a      	ldr	r2, [pc, #104]	; (800a034 <HAL_TIM_OC_Start+0x1f8>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d009      	beq.n	8009fe4 <HAL_TIM_OC_Start+0x1a8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a1e      	ldr	r2, [pc, #120]	; (800a050 <HAL_TIM_OC_Start+0x214>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <HAL_TIM_OC_Start+0x1a8>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a16      	ldr	r2, [pc, #88]	; (800a038 <HAL_TIM_OC_Start+0x1fc>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d115      	bne.n	800a010 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <HAL_TIM_OC_Start+0x218>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b06      	cmp	r3, #6
 8009ff4:	d015      	beq.n	800a022 <HAL_TIM_OC_Start+0x1e6>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffc:	d011      	beq.n	800a022 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f042 0201 	orr.w	r2, r2, #1
 800a00c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00e:	e008      	b.n	800a022 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	e000      	b.n	800a024 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a022:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	40010000 	.word	0x40010000
 800a034:	40010400 	.word	0x40010400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40014400 	.word	0x40014400
 800a040:	40014800 	.word	0x40014800
 800a044:	40000400 	.word	0x40000400
 800a048:	40000800 	.word	0x40000800
 800a04c:	40000c00 	.word	0x40000c00
 800a050:	40001800 	.word	0x40001800
 800a054:	00010007 	.word	0x00010007

0800a058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d122      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d11b      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f06f 0202 	mvn.w	r2, #2
 800a084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa78 	bl	800a590 <HAL_TIM_IC_CaptureCallback>
 800a0a0:	e005      	b.n	800a0ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa6a 	bl	800a57c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa7b 	bl	800a5a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d122      	bne.n	800a108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d11b      	bne.n	800a108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0204 	mvn.w	r2, #4
 800a0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa4e 	bl	800a590 <HAL_TIM_IC_CaptureCallback>
 800a0f4:	e005      	b.n	800a102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fa40 	bl	800a57c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fa51 	bl	800a5a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	f003 0308 	and.w	r3, r3, #8
 800a112:	2b08      	cmp	r3, #8
 800a114:	d122      	bne.n	800a15c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b08      	cmp	r3, #8
 800a122:	d11b      	bne.n	800a15c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f06f 0208 	mvn.w	r2, #8
 800a12c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2204      	movs	r2, #4
 800a132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa24 	bl	800a590 <HAL_TIM_IC_CaptureCallback>
 800a148:	e005      	b.n	800a156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fa16 	bl	800a57c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fa27 	bl	800a5a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f003 0310 	and.w	r3, r3, #16
 800a166:	2b10      	cmp	r3, #16
 800a168:	d122      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f003 0310 	and.w	r3, r3, #16
 800a174:	2b10      	cmp	r3, #16
 800a176:	d11b      	bne.n	800a1b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f06f 0210 	mvn.w	r2, #16
 800a180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2208      	movs	r2, #8
 800a186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9fa 	bl	800a590 <HAL_TIM_IC_CaptureCallback>
 800a19c:	e005      	b.n	800a1aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f9ec 	bl	800a57c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f9fd 	bl	800a5a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d10e      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d107      	bne.n	800a1dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0201 	mvn.w	r2, #1
 800a1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7f7 f9ec 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e6:	2b80      	cmp	r3, #128	; 0x80
 800a1e8:	d10e      	bne.n	800a208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f4:	2b80      	cmp	r3, #128	; 0x80
 800a1f6:	d107      	bne.n	800a208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 ff4e 	bl	800b0a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a216:	d10e      	bne.n	800a236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a222:	2b80      	cmp	r3, #128	; 0x80
 800a224:	d107      	bne.n	800a236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 ff41 	bl	800b0b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a240:	2b40      	cmp	r3, #64	; 0x40
 800a242:	d10e      	bne.n	800a262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24e:	2b40      	cmp	r3, #64	; 0x40
 800a250:	d107      	bne.n	800a262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f9ab 	bl	800a5b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	f003 0320 	and.w	r3, r3, #32
 800a26c:	2b20      	cmp	r3, #32
 800a26e:	d10e      	bne.n	800a28e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d107      	bne.n	800a28e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f06f 0220 	mvn.w	r2, #32
 800a286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 ff01 	bl	800b090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e066      	b.n	800a384 <HAL_TIM_OC_ConfigChannel+0xec>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b14      	cmp	r3, #20
 800a2c2:	d857      	bhi.n	800a374 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a2c4:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <HAL_TIM_OC_ConfigChannel+0x34>)
 800a2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	0800a321 	.word	0x0800a321
 800a2d0:	0800a375 	.word	0x0800a375
 800a2d4:	0800a375 	.word	0x0800a375
 800a2d8:	0800a375 	.word	0x0800a375
 800a2dc:	0800a32f 	.word	0x0800a32f
 800a2e0:	0800a375 	.word	0x0800a375
 800a2e4:	0800a375 	.word	0x0800a375
 800a2e8:	0800a375 	.word	0x0800a375
 800a2ec:	0800a33d 	.word	0x0800a33d
 800a2f0:	0800a375 	.word	0x0800a375
 800a2f4:	0800a375 	.word	0x0800a375
 800a2f8:	0800a375 	.word	0x0800a375
 800a2fc:	0800a34b 	.word	0x0800a34b
 800a300:	0800a375 	.word	0x0800a375
 800a304:	0800a375 	.word	0x0800a375
 800a308:	0800a375 	.word	0x0800a375
 800a30c:	0800a359 	.word	0x0800a359
 800a310:	0800a375 	.word	0x0800a375
 800a314:	0800a375 	.word	0x0800a375
 800a318:	0800a375 	.word	0x0800a375
 800a31c:	0800a367 	.word	0x0800a367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f9ea 	bl	800a700 <TIM_OC1_SetConfig>
      break;
 800a32c:	e025      	b.n	800a37a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fa73 	bl	800a820 <TIM_OC2_SetConfig>
      break;
 800a33a:	e01e      	b.n	800a37a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	4618      	mov	r0, r3
 800a344:	f000 faf6 	bl	800a934 <TIM_OC3_SetConfig>
      break;
 800a348:	e017      	b.n	800a37a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	4618      	mov	r0, r3
 800a352:	f000 fb77 	bl	800aa44 <TIM_OC4_SetConfig>
      break;
 800a356:	e010      	b.n	800a37a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68b9      	ldr	r1, [r7, #8]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fbda 	bl	800ab18 <TIM_OC5_SetConfig>
      break;
 800a364:	e009      	b.n	800a37a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68b9      	ldr	r1, [r7, #8]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fc37 	bl	800abe0 <TIM_OC6_SetConfig>
      break;
 800a372:	e002      	b.n	800a37a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	75fb      	strb	r3, [r7, #23]
      break;
 800a378:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIM_ConfigClockSource+0x1c>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e0dc      	b.n	800a562 <HAL_TIM_ConfigClockSource+0x1d6>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	4b6a      	ldr	r3, [pc, #424]	; (800a56c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a64      	ldr	r2, [pc, #400]	; (800a570 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	f000 80a9 	beq.w	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a3e4:	4a62      	ldr	r2, [pc, #392]	; (800a570 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	f200 80ae 	bhi.w	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3ec:	4a61      	ldr	r2, [pc, #388]	; (800a574 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	f000 80a1 	beq.w	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a3f4:	4a5f      	ldr	r2, [pc, #380]	; (800a574 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	f200 80a6 	bhi.w	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a3fc:	4a5e      	ldr	r2, [pc, #376]	; (800a578 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	f000 8099 	beq.w	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a404:	4a5c      	ldr	r2, [pc, #368]	; (800a578 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a406:	4293      	cmp	r3, r2
 800a408:	f200 809e 	bhi.w	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a40c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a410:	f000 8091 	beq.w	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a414:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a418:	f200 8096 	bhi.w	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a41c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a420:	f000 8089 	beq.w	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a428:	f200 808e 	bhi.w	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a430:	d03e      	beq.n	800a4b0 <HAL_TIM_ConfigClockSource+0x124>
 800a432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a436:	f200 8087 	bhi.w	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a43e:	f000 8086 	beq.w	800a54e <HAL_TIM_ConfigClockSource+0x1c2>
 800a442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a446:	d87f      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a448:	2b70      	cmp	r3, #112	; 0x70
 800a44a:	d01a      	beq.n	800a482 <HAL_TIM_ConfigClockSource+0xf6>
 800a44c:	2b70      	cmp	r3, #112	; 0x70
 800a44e:	d87b      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a450:	2b60      	cmp	r3, #96	; 0x60
 800a452:	d050      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0x16a>
 800a454:	2b60      	cmp	r3, #96	; 0x60
 800a456:	d877      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a458:	2b50      	cmp	r3, #80	; 0x50
 800a45a:	d03c      	beq.n	800a4d6 <HAL_TIM_ConfigClockSource+0x14a>
 800a45c:	2b50      	cmp	r3, #80	; 0x50
 800a45e:	d873      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a460:	2b40      	cmp	r3, #64	; 0x40
 800a462:	d058      	beq.n	800a516 <HAL_TIM_ConfigClockSource+0x18a>
 800a464:	2b40      	cmp	r3, #64	; 0x40
 800a466:	d86f      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a468:	2b30      	cmp	r3, #48	; 0x30
 800a46a:	d064      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a46c:	2b30      	cmp	r3, #48	; 0x30
 800a46e:	d86b      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a470:	2b20      	cmp	r3, #32
 800a472:	d060      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a474:	2b20      	cmp	r3, #32
 800a476:	d867      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d05c      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d05a      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x1aa>
 800a480:	e062      	b.n	800a548 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	6899      	ldr	r1, [r3, #8]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f000 fc89 	bl	800ada8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	609a      	str	r2, [r3, #8]
      break;
 800a4ae:	e04f      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	6899      	ldr	r1, [r3, #8]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f000 fc72 	bl	800ada8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4d2:	609a      	str	r2, [r3, #8]
      break;
 800a4d4:	e03c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	6859      	ldr	r1, [r3, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f000 fbe2 	bl	800acac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2150      	movs	r1, #80	; 0x50
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fc3c 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800a4f4:	e02c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	6859      	ldr	r1, [r3, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	461a      	mov	r2, r3
 800a504:	f000 fc01 	bl	800ad0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2160      	movs	r1, #96	; 0x60
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fc2c 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800a514:	e01c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	6859      	ldr	r1, [r3, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	461a      	mov	r2, r3
 800a524:	f000 fbc2 	bl	800acac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2140      	movs	r1, #64	; 0x40
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fc1c 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800a534:	e00c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4619      	mov	r1, r3
 800a540:	4610      	mov	r0, r2
 800a542:	f000 fc13 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800a546:	e003      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
      break;
 800a54c:	e000      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	ffceff88 	.word	0xffceff88
 800a570:	00100040 	.word	0x00100040
 800a574:	00100030 	.word	0x00100030
 800a578:	00100020 	.word	0x00100020

0800a57c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a40      	ldr	r2, [pc, #256]	; (800a6e0 <TIM_Base_SetConfig+0x114>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d013      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ea:	d00f      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a3d      	ldr	r2, [pc, #244]	; (800a6e4 <TIM_Base_SetConfig+0x118>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00b      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a3c      	ldr	r2, [pc, #240]	; (800a6e8 <TIM_Base_SetConfig+0x11c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d007      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a3b      	ldr	r2, [pc, #236]	; (800a6ec <TIM_Base_SetConfig+0x120>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d003      	beq.n	800a60c <TIM_Base_SetConfig+0x40>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a3a      	ldr	r2, [pc, #232]	; (800a6f0 <TIM_Base_SetConfig+0x124>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d108      	bne.n	800a61e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a2f      	ldr	r2, [pc, #188]	; (800a6e0 <TIM_Base_SetConfig+0x114>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d01f      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a62c:	d01b      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2c      	ldr	r2, [pc, #176]	; (800a6e4 <TIM_Base_SetConfig+0x118>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d017      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a2b      	ldr	r2, [pc, #172]	; (800a6e8 <TIM_Base_SetConfig+0x11c>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d013      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a2a      	ldr	r2, [pc, #168]	; (800a6ec <TIM_Base_SetConfig+0x120>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00f      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a29      	ldr	r2, [pc, #164]	; (800a6f0 <TIM_Base_SetConfig+0x124>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00b      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a28      	ldr	r2, [pc, #160]	; (800a6f4 <TIM_Base_SetConfig+0x128>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d007      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a27      	ldr	r2, [pc, #156]	; (800a6f8 <TIM_Base_SetConfig+0x12c>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d003      	beq.n	800a666 <TIM_Base_SetConfig+0x9a>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a26      	ldr	r2, [pc, #152]	; (800a6fc <TIM_Base_SetConfig+0x130>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d108      	bne.n	800a678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a66c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	4313      	orrs	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a10      	ldr	r2, [pc, #64]	; (800a6e0 <TIM_Base_SetConfig+0x114>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00f      	beq.n	800a6c4 <TIM_Base_SetConfig+0xf8>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a12      	ldr	r2, [pc, #72]	; (800a6f0 <TIM_Base_SetConfig+0x124>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00b      	beq.n	800a6c4 <TIM_Base_SetConfig+0xf8>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a11      	ldr	r2, [pc, #68]	; (800a6f4 <TIM_Base_SetConfig+0x128>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d007      	beq.n	800a6c4 <TIM_Base_SetConfig+0xf8>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a10      	ldr	r2, [pc, #64]	; (800a6f8 <TIM_Base_SetConfig+0x12c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d003      	beq.n	800a6c4 <TIM_Base_SetConfig+0xf8>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a0f      	ldr	r2, [pc, #60]	; (800a6fc <TIM_Base_SetConfig+0x130>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d103      	bne.n	800a6cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	615a      	str	r2, [r3, #20]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40010000 	.word	0x40010000
 800a6e4:	40000400 	.word	0x40000400
 800a6e8:	40000800 	.word	0x40000800
 800a6ec:	40000c00 	.word	0x40000c00
 800a6f0:	40010400 	.word	0x40010400
 800a6f4:	40014000 	.word	0x40014000
 800a6f8:	40014400 	.word	0x40014400
 800a6fc:	40014800 	.word	0x40014800

0800a700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	f023 0201 	bic.w	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4b37      	ldr	r3, [pc, #220]	; (800a808 <TIM_OC1_SetConfig+0x108>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f023 0303 	bic.w	r3, r3, #3
 800a736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4313      	orrs	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f023 0302 	bic.w	r3, r3, #2
 800a748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a2d      	ldr	r2, [pc, #180]	; (800a80c <TIM_OC1_SetConfig+0x10c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00f      	beq.n	800a77c <TIM_OC1_SetConfig+0x7c>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a2c      	ldr	r2, [pc, #176]	; (800a810 <TIM_OC1_SetConfig+0x110>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d00b      	beq.n	800a77c <TIM_OC1_SetConfig+0x7c>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a2b      	ldr	r2, [pc, #172]	; (800a814 <TIM_OC1_SetConfig+0x114>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d007      	beq.n	800a77c <TIM_OC1_SetConfig+0x7c>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a2a      	ldr	r2, [pc, #168]	; (800a818 <TIM_OC1_SetConfig+0x118>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d003      	beq.n	800a77c <TIM_OC1_SetConfig+0x7c>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a29      	ldr	r2, [pc, #164]	; (800a81c <TIM_OC1_SetConfig+0x11c>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d10c      	bne.n	800a796 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f023 0308 	bic.w	r3, r3, #8
 800a782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f023 0304 	bic.w	r3, r3, #4
 800a794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a1c      	ldr	r2, [pc, #112]	; (800a80c <TIM_OC1_SetConfig+0x10c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d00f      	beq.n	800a7be <TIM_OC1_SetConfig+0xbe>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a1b      	ldr	r2, [pc, #108]	; (800a810 <TIM_OC1_SetConfig+0x110>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d00b      	beq.n	800a7be <TIM_OC1_SetConfig+0xbe>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a1a      	ldr	r2, [pc, #104]	; (800a814 <TIM_OC1_SetConfig+0x114>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d007      	beq.n	800a7be <TIM_OC1_SetConfig+0xbe>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a19      	ldr	r2, [pc, #100]	; (800a818 <TIM_OC1_SetConfig+0x118>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d003      	beq.n	800a7be <TIM_OC1_SetConfig+0xbe>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a18      	ldr	r2, [pc, #96]	; (800a81c <TIM_OC1_SetConfig+0x11c>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d111      	bne.n	800a7e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	621a      	str	r2, [r3, #32]
}
 800a7fc:	bf00      	nop
 800a7fe:	371c      	adds	r7, #28
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	fffeff8f 	.word	0xfffeff8f
 800a80c:	40010000 	.word	0x40010000
 800a810:	40010400 	.word	0x40010400
 800a814:	40014000 	.word	0x40014000
 800a818:	40014400 	.word	0x40014400
 800a81c:	40014800 	.word	0x40014800

0800a820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	f023 0210 	bic.w	r2, r3, #16
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	4b34      	ldr	r3, [pc, #208]	; (800a91c <TIM_OC2_SetConfig+0xfc>)
 800a84c:	4013      	ands	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4313      	orrs	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f023 0320 	bic.w	r3, r3, #32
 800a86a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a29      	ldr	r2, [pc, #164]	; (800a920 <TIM_OC2_SetConfig+0x100>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d003      	beq.n	800a888 <TIM_OC2_SetConfig+0x68>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a28      	ldr	r2, [pc, #160]	; (800a924 <TIM_OC2_SetConfig+0x104>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d10d      	bne.n	800a8a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	011b      	lsls	r3, r3, #4
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4313      	orrs	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <TIM_OC2_SetConfig+0x100>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d00f      	beq.n	800a8cc <TIM_OC2_SetConfig+0xac>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <TIM_OC2_SetConfig+0x104>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00b      	beq.n	800a8cc <TIM_OC2_SetConfig+0xac>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a1c      	ldr	r2, [pc, #112]	; (800a928 <TIM_OC2_SetConfig+0x108>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d007      	beq.n	800a8cc <TIM_OC2_SetConfig+0xac>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <TIM_OC2_SetConfig+0x10c>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d003      	beq.n	800a8cc <TIM_OC2_SetConfig+0xac>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a1a      	ldr	r2, [pc, #104]	; (800a930 <TIM_OC2_SetConfig+0x110>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d113      	bne.n	800a8f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	695b      	ldr	r3, [r3, #20]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	621a      	str	r2, [r3, #32]
}
 800a90e:	bf00      	nop
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	feff8fff 	.word	0xfeff8fff
 800a920:	40010000 	.word	0x40010000
 800a924:	40010400 	.word	0x40010400
 800a928:	40014000 	.word	0x40014000
 800a92c:	40014400 	.word	0x40014400
 800a930:	40014800 	.word	0x40014800

0800a934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4b33      	ldr	r3, [pc, #204]	; (800aa2c <TIM_OC3_SetConfig+0xf8>)
 800a960:	4013      	ands	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0303 	bic.w	r3, r3, #3
 800a96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	4313      	orrs	r3, r2
 800a974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a97c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a28      	ldr	r2, [pc, #160]	; (800aa30 <TIM_OC3_SetConfig+0xfc>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d003      	beq.n	800a99a <TIM_OC3_SetConfig+0x66>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a27      	ldr	r2, [pc, #156]	; (800aa34 <TIM_OC3_SetConfig+0x100>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d10d      	bne.n	800a9b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	021b      	lsls	r3, r3, #8
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a1d      	ldr	r2, [pc, #116]	; (800aa30 <TIM_OC3_SetConfig+0xfc>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00f      	beq.n	800a9de <TIM_OC3_SetConfig+0xaa>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a1c      	ldr	r2, [pc, #112]	; (800aa34 <TIM_OC3_SetConfig+0x100>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d00b      	beq.n	800a9de <TIM_OC3_SetConfig+0xaa>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a1b      	ldr	r2, [pc, #108]	; (800aa38 <TIM_OC3_SetConfig+0x104>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d007      	beq.n	800a9de <TIM_OC3_SetConfig+0xaa>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a1a      	ldr	r2, [pc, #104]	; (800aa3c <TIM_OC3_SetConfig+0x108>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d003      	beq.n	800a9de <TIM_OC3_SetConfig+0xaa>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a19      	ldr	r2, [pc, #100]	; (800aa40 <TIM_OC3_SetConfig+0x10c>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d113      	bne.n	800aa06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	011b      	lsls	r3, r3, #4
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	621a      	str	r2, [r3, #32]
}
 800aa20:	bf00      	nop
 800aa22:	371c      	adds	r7, #28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	fffeff8f 	.word	0xfffeff8f
 800aa30:	40010000 	.word	0x40010000
 800aa34:	40010400 	.word	0x40010400
 800aa38:	40014000 	.word	0x40014000
 800aa3c:	40014400 	.word	0x40014400
 800aa40:	40014800 	.word	0x40014800

0800aa44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <TIM_OC4_SetConfig+0xbc>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	021b      	lsls	r3, r3, #8
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	031b      	lsls	r3, r3, #12
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a19      	ldr	r2, [pc, #100]	; (800ab04 <TIM_OC4_SetConfig+0xc0>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00f      	beq.n	800aac4 <TIM_OC4_SetConfig+0x80>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a18      	ldr	r2, [pc, #96]	; (800ab08 <TIM_OC4_SetConfig+0xc4>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d00b      	beq.n	800aac4 <TIM_OC4_SetConfig+0x80>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a17      	ldr	r2, [pc, #92]	; (800ab0c <TIM_OC4_SetConfig+0xc8>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d007      	beq.n	800aac4 <TIM_OC4_SetConfig+0x80>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a16      	ldr	r2, [pc, #88]	; (800ab10 <TIM_OC4_SetConfig+0xcc>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d003      	beq.n	800aac4 <TIM_OC4_SetConfig+0x80>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a15      	ldr	r2, [pc, #84]	; (800ab14 <TIM_OC4_SetConfig+0xd0>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d109      	bne.n	800aad8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	019b      	lsls	r3, r3, #6
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	621a      	str	r2, [r3, #32]
}
 800aaf2:	bf00      	nop
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	feff8fff 	.word	0xfeff8fff
 800ab04:	40010000 	.word	0x40010000
 800ab08:	40010400 	.word	0x40010400
 800ab0c:	40014000 	.word	0x40014000
 800ab10:	40014400 	.word	0x40014400
 800ab14:	40014800 	.word	0x40014800

0800ab18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4b21      	ldr	r3, [pc, #132]	; (800abc8 <TIM_OC5_SetConfig+0xb0>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ab58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	041b      	lsls	r3, r3, #16
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a18      	ldr	r2, [pc, #96]	; (800abcc <TIM_OC5_SetConfig+0xb4>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00f      	beq.n	800ab8e <TIM_OC5_SetConfig+0x76>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a17      	ldr	r2, [pc, #92]	; (800abd0 <TIM_OC5_SetConfig+0xb8>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00b      	beq.n	800ab8e <TIM_OC5_SetConfig+0x76>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a16      	ldr	r2, [pc, #88]	; (800abd4 <TIM_OC5_SetConfig+0xbc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d007      	beq.n	800ab8e <TIM_OC5_SetConfig+0x76>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a15      	ldr	r2, [pc, #84]	; (800abd8 <TIM_OC5_SetConfig+0xc0>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d003      	beq.n	800ab8e <TIM_OC5_SetConfig+0x76>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a14      	ldr	r2, [pc, #80]	; (800abdc <TIM_OC5_SetConfig+0xc4>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d109      	bne.n	800aba2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	021b      	lsls	r3, r3, #8
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	621a      	str	r2, [r3, #32]
}
 800abbc:	bf00      	nop
 800abbe:	371c      	adds	r7, #28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	fffeff8f 	.word	0xfffeff8f
 800abcc:	40010000 	.word	0x40010000
 800abd0:	40010400 	.word	0x40010400
 800abd4:	40014000 	.word	0x40014000
 800abd8:	40014400 	.word	0x40014400
 800abdc:	40014800 	.word	0x40014800

0800abe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4b22      	ldr	r3, [pc, #136]	; (800ac94 <TIM_OC6_SetConfig+0xb4>)
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	051b      	lsls	r3, r3, #20
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a19      	ldr	r2, [pc, #100]	; (800ac98 <TIM_OC6_SetConfig+0xb8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00f      	beq.n	800ac58 <TIM_OC6_SetConfig+0x78>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a18      	ldr	r2, [pc, #96]	; (800ac9c <TIM_OC6_SetConfig+0xbc>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00b      	beq.n	800ac58 <TIM_OC6_SetConfig+0x78>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a17      	ldr	r2, [pc, #92]	; (800aca0 <TIM_OC6_SetConfig+0xc0>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d007      	beq.n	800ac58 <TIM_OC6_SetConfig+0x78>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a16      	ldr	r2, [pc, #88]	; (800aca4 <TIM_OC6_SetConfig+0xc4>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d003      	beq.n	800ac58 <TIM_OC6_SetConfig+0x78>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a15      	ldr	r2, [pc, #84]	; (800aca8 <TIM_OC6_SetConfig+0xc8>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d109      	bne.n	800ac6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	029b      	lsls	r3, r3, #10
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	621a      	str	r2, [r3, #32]
}
 800ac86:	bf00      	nop
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	feff8fff 	.word	0xfeff8fff
 800ac98:	40010000 	.word	0x40010000
 800ac9c:	40010400 	.word	0x40010400
 800aca0:	40014000 	.word	0x40014000
 800aca4:	40014400 	.word	0x40014400
 800aca8:	40014800 	.word	0x40014800

0800acac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	f023 0201 	bic.w	r2, r3, #1
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	011b      	lsls	r3, r3, #4
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	4313      	orrs	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f023 030a 	bic.w	r3, r3, #10
 800ace8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	4313      	orrs	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	621a      	str	r2, [r3, #32]
}
 800acfe:	bf00      	nop
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b087      	sub	sp, #28
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	f023 0210 	bic.w	r2, r3, #16
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	031b      	lsls	r3, r3, #12
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	621a      	str	r2, [r3, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
	...

0800ad6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4b09      	ldr	r3, [pc, #36]	; (800ada4 <TIM_ITRx_SetConfig+0x38>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	f043 0307 	orr.w	r3, r3, #7
 800ad8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	609a      	str	r2, [r3, #8]
}
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	ffcfff8f 	.word	0xffcfff8f

0800ada8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	021a      	lsls	r2, r3, #8
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	431a      	orrs	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4313      	orrs	r3, r2
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	609a      	str	r2, [r3, #8]
}
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f003 031f 	and.w	r3, r3, #31
 800adfa:	2201      	movs	r2, #1
 800adfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ae00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a1a      	ldr	r2, [r3, #32]
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	401a      	ands	r2, r3
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a1a      	ldr	r2, [r3, #32]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f003 031f 	and.w	r3, r3, #31
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae20:	431a      	orrs	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	621a      	str	r2, [r3, #32]
}
 800ae26:	bf00      	nop
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
	...

0800ae34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d101      	bne.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e06d      	b.n	800af28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2202      	movs	r2, #2
 800ae58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a30      	ldr	r2, [pc, #192]	; (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d004      	beq.n	800ae80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a2f      	ldr	r2, [pc, #188]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d108      	bne.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a20      	ldr	r2, [pc, #128]	; (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d022      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aebe:	d01d      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a1d      	ldr	r2, [pc, #116]	; (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d018      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a1c      	ldr	r2, [pc, #112]	; (800af40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d013      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a1a      	ldr	r2, [pc, #104]	; (800af44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d00e      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a15      	ldr	r2, [pc, #84]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d009      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a16      	ldr	r2, [pc, #88]	; (800af48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d004      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a15      	ldr	r2, [pc, #84]	; (800af4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d10c      	bne.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	40010000 	.word	0x40010000
 800af38:	40010400 	.word	0x40010400
 800af3c:	40000400 	.word	0x40000400
 800af40:	40000800 	.word	0x40000800
 800af44:	40000c00 	.word	0x40000c00
 800af48:	40001800 	.word	0x40001800
 800af4c:	40014000 	.word	0x40014000

0800af50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af64:	2b01      	cmp	r3, #1
 800af66:	d101      	bne.n	800af6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af68:	2302      	movs	r3, #2
 800af6a:	e087      	b.n	800b07c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd2:	4313      	orrs	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	041b      	lsls	r3, r3, #16
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a27      	ldr	r2, [pc, #156]	; (800b088 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d004      	beq.n	800affa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a25      	ldr	r2, [pc, #148]	; (800b08c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d106      	bne.n	800b008 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a1e      	ldr	r2, [pc, #120]	; (800b088 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d004      	beq.n	800b01c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a1d      	ldr	r2, [pc, #116]	; (800b08c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d126      	bne.n	800b06a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	051b      	lsls	r3, r3, #20
 800b028:	4313      	orrs	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a0e      	ldr	r2, [pc, #56]	; (800b088 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d004      	beq.n	800b05c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a0d      	ldr	r2, [pc, #52]	; (800b08c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d106      	bne.n	800b06a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	40010000 	.word	0x40010000
 800b08c:	40010400 	.word	0x40010400

0800b090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e042      	b.n	800b164 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7f6 fb95 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2224      	movs	r2, #36	; 0x24
 800b0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f022 0201 	bic.w	r2, r2, #1
 800b10c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f912 	bl	800b338 <UART_SetConfig>
 800b114:	4603      	mov	r3, r0
 800b116:	2b01      	cmp	r3, #1
 800b118:	d101      	bne.n	800b11e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e022      	b.n	800b164 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 ff72 	bl	800c010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b13a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	689a      	ldr	r2, [r3, #8]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b14a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0201 	orr.w	r2, r2, #1
 800b15a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fff9 	bl	800c154 <UART_CheckIdleState>
 800b162:	4603      	mov	r3, r0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e04a      	b.n	800b214 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7f6 fb45 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2224      	movs	r2, #36	; 0x24
 800b19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f022 0201 	bic.w	r2, r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f8c2 	bl	800b338 <UART_SetConfig>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d101      	bne.n	800b1be <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e02a      	b.n	800b214 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 ff22 	bl	800c010 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800b1ea:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689a      	ldr	r2, [r3, #8]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0208 	orr.w	r2, r2, #8
 800b1fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f042 0201 	orr.w	r2, r2, #1
 800b20a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 ffa1 	bl	800c154 <UART_CheckIdleState>
 800b212:	4603      	mov	r3, r0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	; 0x28
 800b220:	af02      	add	r7, sp, #8
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	4613      	mov	r3, r2
 800b22a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b232:	2b20      	cmp	r3, #32
 800b234:	d17b      	bne.n	800b32e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <HAL_UART_Transmit+0x26>
 800b23c:	88fb      	ldrh	r3, [r7, #6]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e074      	b.n	800b330 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2221      	movs	r2, #33	; 0x21
 800b252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b256:	f7f6 fd23 	bl	8001ca0 <HAL_GetTick>
 800b25a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	88fa      	ldrh	r2, [r7, #6]
 800b260:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	88fa      	ldrh	r2, [r7, #6]
 800b268:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b274:	d108      	bne.n	800b288 <HAL_UART_Transmit+0x6c>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d104      	bne.n	800b288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	61bb      	str	r3, [r7, #24]
 800b286:	e003      	b.n	800b290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b290:	e030      	b.n	800b2f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2200      	movs	r2, #0
 800b29a:	2180      	movs	r1, #128	; 0x80
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f001 f803 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2220      	movs	r2, #32
 800b2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e03d      	b.n	800b330 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10b      	bne.n	800b2d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	e007      	b.n	800b2e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	781a      	ldrb	r2, [r3, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1c8      	bne.n	800b292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2200      	movs	r2, #0
 800b308:	2140      	movs	r1, #64	; 0x40
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f000 ffcc 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2220      	movs	r2, #32
 800b31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e006      	b.n	800b330 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2220      	movs	r2, #32
 800b326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	e000      	b.n	800b330 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b32e:	2302      	movs	r3, #2
  }
}
 800b330:	4618      	mov	r0, r3
 800b332:	3720      	adds	r7, #32
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b33c:	b092      	sub	sp, #72	; 0x48
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	689a      	ldr	r2, [r3, #8]
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	431a      	orrs	r2, r3
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	431a      	orrs	r2, r3
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	4bbe      	ldr	r3, [pc, #760]	; (800b660 <UART_SetConfig+0x328>)
 800b368:	4013      	ands	r3, r2
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	6812      	ldr	r2, [r2, #0]
 800b36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b370:	430b      	orrs	r3, r1
 800b372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	68da      	ldr	r2, [r3, #12]
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	430a      	orrs	r2, r1
 800b388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4ab3      	ldr	r2, [pc, #716]	; (800b664 <UART_SetConfig+0x32c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d004      	beq.n	800b3a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	689a      	ldr	r2, [r3, #8]
 800b3aa:	4baf      	ldr	r3, [pc, #700]	; (800b668 <UART_SetConfig+0x330>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	6812      	ldr	r2, [r2, #0]
 800b3b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3b4:	430b      	orrs	r3, r1
 800b3b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3be:	f023 010f 	bic.w	r1, r3, #15
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4aa6      	ldr	r2, [pc, #664]	; (800b66c <UART_SetConfig+0x334>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d177      	bne.n	800b4c8 <UART_SetConfig+0x190>
 800b3d8:	4ba5      	ldr	r3, [pc, #660]	; (800b670 <UART_SetConfig+0x338>)
 800b3da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3e0:	2b28      	cmp	r3, #40	; 0x28
 800b3e2:	d86d      	bhi.n	800b4c0 <UART_SetConfig+0x188>
 800b3e4:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <UART_SetConfig+0xb4>)
 800b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ea:	bf00      	nop
 800b3ec:	0800b491 	.word	0x0800b491
 800b3f0:	0800b4c1 	.word	0x0800b4c1
 800b3f4:	0800b4c1 	.word	0x0800b4c1
 800b3f8:	0800b4c1 	.word	0x0800b4c1
 800b3fc:	0800b4c1 	.word	0x0800b4c1
 800b400:	0800b4c1 	.word	0x0800b4c1
 800b404:	0800b4c1 	.word	0x0800b4c1
 800b408:	0800b4c1 	.word	0x0800b4c1
 800b40c:	0800b499 	.word	0x0800b499
 800b410:	0800b4c1 	.word	0x0800b4c1
 800b414:	0800b4c1 	.word	0x0800b4c1
 800b418:	0800b4c1 	.word	0x0800b4c1
 800b41c:	0800b4c1 	.word	0x0800b4c1
 800b420:	0800b4c1 	.word	0x0800b4c1
 800b424:	0800b4c1 	.word	0x0800b4c1
 800b428:	0800b4c1 	.word	0x0800b4c1
 800b42c:	0800b4a1 	.word	0x0800b4a1
 800b430:	0800b4c1 	.word	0x0800b4c1
 800b434:	0800b4c1 	.word	0x0800b4c1
 800b438:	0800b4c1 	.word	0x0800b4c1
 800b43c:	0800b4c1 	.word	0x0800b4c1
 800b440:	0800b4c1 	.word	0x0800b4c1
 800b444:	0800b4c1 	.word	0x0800b4c1
 800b448:	0800b4c1 	.word	0x0800b4c1
 800b44c:	0800b4a9 	.word	0x0800b4a9
 800b450:	0800b4c1 	.word	0x0800b4c1
 800b454:	0800b4c1 	.word	0x0800b4c1
 800b458:	0800b4c1 	.word	0x0800b4c1
 800b45c:	0800b4c1 	.word	0x0800b4c1
 800b460:	0800b4c1 	.word	0x0800b4c1
 800b464:	0800b4c1 	.word	0x0800b4c1
 800b468:	0800b4c1 	.word	0x0800b4c1
 800b46c:	0800b4b1 	.word	0x0800b4b1
 800b470:	0800b4c1 	.word	0x0800b4c1
 800b474:	0800b4c1 	.word	0x0800b4c1
 800b478:	0800b4c1 	.word	0x0800b4c1
 800b47c:	0800b4c1 	.word	0x0800b4c1
 800b480:	0800b4c1 	.word	0x0800b4c1
 800b484:	0800b4c1 	.word	0x0800b4c1
 800b488:	0800b4c1 	.word	0x0800b4c1
 800b48c:	0800b4b9 	.word	0x0800b4b9
 800b490:	2301      	movs	r3, #1
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b496:	e326      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b498:	2304      	movs	r3, #4
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49e:	e322      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b4a0:	2308      	movs	r3, #8
 800b4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4a6:	e31e      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b4a8:	2310      	movs	r3, #16
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ae:	e31a      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b4b0:	2320      	movs	r3, #32
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4b6:	e316      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b4b8:	2340      	movs	r3, #64	; 0x40
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4be:	e312      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b4c0:	2380      	movs	r3, #128	; 0x80
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c6:	e30e      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a69      	ldr	r2, [pc, #420]	; (800b674 <UART_SetConfig+0x33c>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d130      	bne.n	800b534 <UART_SetConfig+0x1fc>
 800b4d2:	4b67      	ldr	r3, [pc, #412]	; (800b670 <UART_SetConfig+0x338>)
 800b4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d6:	f003 0307 	and.w	r3, r3, #7
 800b4da:	2b05      	cmp	r3, #5
 800b4dc:	d826      	bhi.n	800b52c <UART_SetConfig+0x1f4>
 800b4de:	a201      	add	r2, pc, #4	; (adr r2, 800b4e4 <UART_SetConfig+0x1ac>)
 800b4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e4:	0800b4fd 	.word	0x0800b4fd
 800b4e8:	0800b505 	.word	0x0800b505
 800b4ec:	0800b50d 	.word	0x0800b50d
 800b4f0:	0800b515 	.word	0x0800b515
 800b4f4:	0800b51d 	.word	0x0800b51d
 800b4f8:	0800b525 	.word	0x0800b525
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b502:	e2f0      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b504:	2304      	movs	r3, #4
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50a:	e2ec      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b50c:	2308      	movs	r3, #8
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b512:	e2e8      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b514:	2310      	movs	r3, #16
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51a:	e2e4      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b51c:	2320      	movs	r3, #32
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b522:	e2e0      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b524:	2340      	movs	r3, #64	; 0x40
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52a:	e2dc      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b52c:	2380      	movs	r3, #128	; 0x80
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b532:	e2d8      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a4f      	ldr	r2, [pc, #316]	; (800b678 <UART_SetConfig+0x340>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d130      	bne.n	800b5a0 <UART_SetConfig+0x268>
 800b53e:	4b4c      	ldr	r3, [pc, #304]	; (800b670 <UART_SetConfig+0x338>)
 800b540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	2b05      	cmp	r3, #5
 800b548:	d826      	bhi.n	800b598 <UART_SetConfig+0x260>
 800b54a:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <UART_SetConfig+0x218>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b569 	.word	0x0800b569
 800b554:	0800b571 	.word	0x0800b571
 800b558:	0800b579 	.word	0x0800b579
 800b55c:	0800b581 	.word	0x0800b581
 800b560:	0800b589 	.word	0x0800b589
 800b564:	0800b591 	.word	0x0800b591
 800b568:	2300      	movs	r3, #0
 800b56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b56e:	e2ba      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b570:	2304      	movs	r3, #4
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b576:	e2b6      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b578:	2308      	movs	r3, #8
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b57e:	e2b2      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b580:	2310      	movs	r3, #16
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b586:	e2ae      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b588:	2320      	movs	r3, #32
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58e:	e2aa      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b590:	2340      	movs	r3, #64	; 0x40
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b596:	e2a6      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b598:	2380      	movs	r3, #128	; 0x80
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59e:	e2a2      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a35      	ldr	r2, [pc, #212]	; (800b67c <UART_SetConfig+0x344>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d130      	bne.n	800b60c <UART_SetConfig+0x2d4>
 800b5aa:	4b31      	ldr	r3, [pc, #196]	; (800b670 <UART_SetConfig+0x338>)
 800b5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ae:	f003 0307 	and.w	r3, r3, #7
 800b5b2:	2b05      	cmp	r3, #5
 800b5b4:	d826      	bhi.n	800b604 <UART_SetConfig+0x2cc>
 800b5b6:	a201      	add	r2, pc, #4	; (adr r2, 800b5bc <UART_SetConfig+0x284>)
 800b5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5bc:	0800b5d5 	.word	0x0800b5d5
 800b5c0:	0800b5dd 	.word	0x0800b5dd
 800b5c4:	0800b5e5 	.word	0x0800b5e5
 800b5c8:	0800b5ed 	.word	0x0800b5ed
 800b5cc:	0800b5f5 	.word	0x0800b5f5
 800b5d0:	0800b5fd 	.word	0x0800b5fd
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5da:	e284      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b5dc:	2304      	movs	r3, #4
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5e2:	e280      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b5e4:	2308      	movs	r3, #8
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ea:	e27c      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b5ec:	2310      	movs	r3, #16
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f2:	e278      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b5f4:	2320      	movs	r3, #32
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5fa:	e274      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b5fc:	2340      	movs	r3, #64	; 0x40
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b602:	e270      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b604:	2380      	movs	r3, #128	; 0x80
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60a:	e26c      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a1b      	ldr	r2, [pc, #108]	; (800b680 <UART_SetConfig+0x348>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d142      	bne.n	800b69c <UART_SetConfig+0x364>
 800b616:	4b16      	ldr	r3, [pc, #88]	; (800b670 <UART_SetConfig+0x338>)
 800b618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b61a:	f003 0307 	and.w	r3, r3, #7
 800b61e:	2b05      	cmp	r3, #5
 800b620:	d838      	bhi.n	800b694 <UART_SetConfig+0x35c>
 800b622:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <UART_SetConfig+0x2f0>)
 800b624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b628:	0800b641 	.word	0x0800b641
 800b62c:	0800b649 	.word	0x0800b649
 800b630:	0800b651 	.word	0x0800b651
 800b634:	0800b659 	.word	0x0800b659
 800b638:	0800b685 	.word	0x0800b685
 800b63c:	0800b68d 	.word	0x0800b68d
 800b640:	2300      	movs	r3, #0
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b646:	e24e      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b648:	2304      	movs	r3, #4
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64e:	e24a      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b650:	2308      	movs	r3, #8
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b656:	e246      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b658:	2310      	movs	r3, #16
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65e:	e242      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b660:	cfff69f3 	.word	0xcfff69f3
 800b664:	58000c00 	.word	0x58000c00
 800b668:	11fff4ff 	.word	0x11fff4ff
 800b66c:	40011000 	.word	0x40011000
 800b670:	58024400 	.word	0x58024400
 800b674:	40004400 	.word	0x40004400
 800b678:	40004800 	.word	0x40004800
 800b67c:	40004c00 	.word	0x40004c00
 800b680:	40005000 	.word	0x40005000
 800b684:	2320      	movs	r3, #32
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68a:	e22c      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b68c:	2340      	movs	r3, #64	; 0x40
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b692:	e228      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b694:	2380      	movs	r3, #128	; 0x80
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69a:	e224      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4ab1      	ldr	r2, [pc, #708]	; (800b968 <UART_SetConfig+0x630>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d176      	bne.n	800b794 <UART_SetConfig+0x45c>
 800b6a6:	4bb1      	ldr	r3, [pc, #708]	; (800b96c <UART_SetConfig+0x634>)
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6ae:	2b28      	cmp	r3, #40	; 0x28
 800b6b0:	d86c      	bhi.n	800b78c <UART_SetConfig+0x454>
 800b6b2:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <UART_SetConfig+0x380>)
 800b6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b8:	0800b75d 	.word	0x0800b75d
 800b6bc:	0800b78d 	.word	0x0800b78d
 800b6c0:	0800b78d 	.word	0x0800b78d
 800b6c4:	0800b78d 	.word	0x0800b78d
 800b6c8:	0800b78d 	.word	0x0800b78d
 800b6cc:	0800b78d 	.word	0x0800b78d
 800b6d0:	0800b78d 	.word	0x0800b78d
 800b6d4:	0800b78d 	.word	0x0800b78d
 800b6d8:	0800b765 	.word	0x0800b765
 800b6dc:	0800b78d 	.word	0x0800b78d
 800b6e0:	0800b78d 	.word	0x0800b78d
 800b6e4:	0800b78d 	.word	0x0800b78d
 800b6e8:	0800b78d 	.word	0x0800b78d
 800b6ec:	0800b78d 	.word	0x0800b78d
 800b6f0:	0800b78d 	.word	0x0800b78d
 800b6f4:	0800b78d 	.word	0x0800b78d
 800b6f8:	0800b76d 	.word	0x0800b76d
 800b6fc:	0800b78d 	.word	0x0800b78d
 800b700:	0800b78d 	.word	0x0800b78d
 800b704:	0800b78d 	.word	0x0800b78d
 800b708:	0800b78d 	.word	0x0800b78d
 800b70c:	0800b78d 	.word	0x0800b78d
 800b710:	0800b78d 	.word	0x0800b78d
 800b714:	0800b78d 	.word	0x0800b78d
 800b718:	0800b775 	.word	0x0800b775
 800b71c:	0800b78d 	.word	0x0800b78d
 800b720:	0800b78d 	.word	0x0800b78d
 800b724:	0800b78d 	.word	0x0800b78d
 800b728:	0800b78d 	.word	0x0800b78d
 800b72c:	0800b78d 	.word	0x0800b78d
 800b730:	0800b78d 	.word	0x0800b78d
 800b734:	0800b78d 	.word	0x0800b78d
 800b738:	0800b77d 	.word	0x0800b77d
 800b73c:	0800b78d 	.word	0x0800b78d
 800b740:	0800b78d 	.word	0x0800b78d
 800b744:	0800b78d 	.word	0x0800b78d
 800b748:	0800b78d 	.word	0x0800b78d
 800b74c:	0800b78d 	.word	0x0800b78d
 800b750:	0800b78d 	.word	0x0800b78d
 800b754:	0800b78d 	.word	0x0800b78d
 800b758:	0800b785 	.word	0x0800b785
 800b75c:	2301      	movs	r3, #1
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b762:	e1c0      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b764:	2304      	movs	r3, #4
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b76a:	e1bc      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b76c:	2308      	movs	r3, #8
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b772:	e1b8      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b774:	2310      	movs	r3, #16
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b77a:	e1b4      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b77c:	2320      	movs	r3, #32
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b782:	e1b0      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b784:	2340      	movs	r3, #64	; 0x40
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78a:	e1ac      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b78c:	2380      	movs	r3, #128	; 0x80
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b792:	e1a8      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a75      	ldr	r2, [pc, #468]	; (800b970 <UART_SetConfig+0x638>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d130      	bne.n	800b800 <UART_SetConfig+0x4c8>
 800b79e:	4b73      	ldr	r3, [pc, #460]	; (800b96c <UART_SetConfig+0x634>)
 800b7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	d826      	bhi.n	800b7f8 <UART_SetConfig+0x4c0>
 800b7aa:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <UART_SetConfig+0x478>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7c9 	.word	0x0800b7c9
 800b7b4:	0800b7d1 	.word	0x0800b7d1
 800b7b8:	0800b7d9 	.word	0x0800b7d9
 800b7bc:	0800b7e1 	.word	0x0800b7e1
 800b7c0:	0800b7e9 	.word	0x0800b7e9
 800b7c4:	0800b7f1 	.word	0x0800b7f1
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ce:	e18a      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7d6:	e186      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b7d8:	2308      	movs	r3, #8
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7de:	e182      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7e6:	e17e      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b7e8:	2320      	movs	r3, #32
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ee:	e17a      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f6:	e176      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b7f8:	2380      	movs	r3, #128	; 0x80
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fe:	e172      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a5b      	ldr	r2, [pc, #364]	; (800b974 <UART_SetConfig+0x63c>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d130      	bne.n	800b86c <UART_SetConfig+0x534>
 800b80a:	4b58      	ldr	r3, [pc, #352]	; (800b96c <UART_SetConfig+0x634>)
 800b80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b80e:	f003 0307 	and.w	r3, r3, #7
 800b812:	2b05      	cmp	r3, #5
 800b814:	d826      	bhi.n	800b864 <UART_SetConfig+0x52c>
 800b816:	a201      	add	r2, pc, #4	; (adr r2, 800b81c <UART_SetConfig+0x4e4>)
 800b818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81c:	0800b835 	.word	0x0800b835
 800b820:	0800b83d 	.word	0x0800b83d
 800b824:	0800b845 	.word	0x0800b845
 800b828:	0800b84d 	.word	0x0800b84d
 800b82c:	0800b855 	.word	0x0800b855
 800b830:	0800b85d 	.word	0x0800b85d
 800b834:	2300      	movs	r3, #0
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b83a:	e154      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b83c:	2304      	movs	r3, #4
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b842:	e150      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b844:	2308      	movs	r3, #8
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b84a:	e14c      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b84c:	2310      	movs	r3, #16
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b852:	e148      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b854:	2320      	movs	r3, #32
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b85a:	e144      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b85c:	2340      	movs	r3, #64	; 0x40
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b862:	e140      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b864:	2380      	movs	r3, #128	; 0x80
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b86a:	e13c      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a41      	ldr	r2, [pc, #260]	; (800b978 <UART_SetConfig+0x640>)
 800b872:	4293      	cmp	r3, r2
 800b874:	f040 8082 	bne.w	800b97c <UART_SetConfig+0x644>
 800b878:	4b3c      	ldr	r3, [pc, #240]	; (800b96c <UART_SetConfig+0x634>)
 800b87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b880:	2b28      	cmp	r3, #40	; 0x28
 800b882:	d86d      	bhi.n	800b960 <UART_SetConfig+0x628>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <UART_SetConfig+0x554>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b931 	.word	0x0800b931
 800b890:	0800b961 	.word	0x0800b961
 800b894:	0800b961 	.word	0x0800b961
 800b898:	0800b961 	.word	0x0800b961
 800b89c:	0800b961 	.word	0x0800b961
 800b8a0:	0800b961 	.word	0x0800b961
 800b8a4:	0800b961 	.word	0x0800b961
 800b8a8:	0800b961 	.word	0x0800b961
 800b8ac:	0800b939 	.word	0x0800b939
 800b8b0:	0800b961 	.word	0x0800b961
 800b8b4:	0800b961 	.word	0x0800b961
 800b8b8:	0800b961 	.word	0x0800b961
 800b8bc:	0800b961 	.word	0x0800b961
 800b8c0:	0800b961 	.word	0x0800b961
 800b8c4:	0800b961 	.word	0x0800b961
 800b8c8:	0800b961 	.word	0x0800b961
 800b8cc:	0800b941 	.word	0x0800b941
 800b8d0:	0800b961 	.word	0x0800b961
 800b8d4:	0800b961 	.word	0x0800b961
 800b8d8:	0800b961 	.word	0x0800b961
 800b8dc:	0800b961 	.word	0x0800b961
 800b8e0:	0800b961 	.word	0x0800b961
 800b8e4:	0800b961 	.word	0x0800b961
 800b8e8:	0800b961 	.word	0x0800b961
 800b8ec:	0800b949 	.word	0x0800b949
 800b8f0:	0800b961 	.word	0x0800b961
 800b8f4:	0800b961 	.word	0x0800b961
 800b8f8:	0800b961 	.word	0x0800b961
 800b8fc:	0800b961 	.word	0x0800b961
 800b900:	0800b961 	.word	0x0800b961
 800b904:	0800b961 	.word	0x0800b961
 800b908:	0800b961 	.word	0x0800b961
 800b90c:	0800b951 	.word	0x0800b951
 800b910:	0800b961 	.word	0x0800b961
 800b914:	0800b961 	.word	0x0800b961
 800b918:	0800b961 	.word	0x0800b961
 800b91c:	0800b961 	.word	0x0800b961
 800b920:	0800b961 	.word	0x0800b961
 800b924:	0800b961 	.word	0x0800b961
 800b928:	0800b961 	.word	0x0800b961
 800b92c:	0800b959 	.word	0x0800b959
 800b930:	2301      	movs	r3, #1
 800b932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b936:	e0d6      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b938:	2304      	movs	r3, #4
 800b93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b93e:	e0d2      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b940:	2308      	movs	r3, #8
 800b942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b946:	e0ce      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b948:	2310      	movs	r3, #16
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b94e:	e0ca      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b950:	2320      	movs	r3, #32
 800b952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b956:	e0c6      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b958:	2340      	movs	r3, #64	; 0x40
 800b95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b95e:	e0c2      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b960:	2380      	movs	r3, #128	; 0x80
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b966:	e0be      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800b968:	40011400 	.word	0x40011400
 800b96c:	58024400 	.word	0x58024400
 800b970:	40007800 	.word	0x40007800
 800b974:	40007c00 	.word	0x40007c00
 800b978:	40011800 	.word	0x40011800
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4aad      	ldr	r2, [pc, #692]	; (800bc38 <UART_SetConfig+0x900>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d176      	bne.n	800ba74 <UART_SetConfig+0x73c>
 800b986:	4bad      	ldr	r3, [pc, #692]	; (800bc3c <UART_SetConfig+0x904>)
 800b988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b98a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b98e:	2b28      	cmp	r3, #40	; 0x28
 800b990:	d86c      	bhi.n	800ba6c <UART_SetConfig+0x734>
 800b992:	a201      	add	r2, pc, #4	; (adr r2, 800b998 <UART_SetConfig+0x660>)
 800b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b998:	0800ba3d 	.word	0x0800ba3d
 800b99c:	0800ba6d 	.word	0x0800ba6d
 800b9a0:	0800ba6d 	.word	0x0800ba6d
 800b9a4:	0800ba6d 	.word	0x0800ba6d
 800b9a8:	0800ba6d 	.word	0x0800ba6d
 800b9ac:	0800ba6d 	.word	0x0800ba6d
 800b9b0:	0800ba6d 	.word	0x0800ba6d
 800b9b4:	0800ba6d 	.word	0x0800ba6d
 800b9b8:	0800ba45 	.word	0x0800ba45
 800b9bc:	0800ba6d 	.word	0x0800ba6d
 800b9c0:	0800ba6d 	.word	0x0800ba6d
 800b9c4:	0800ba6d 	.word	0x0800ba6d
 800b9c8:	0800ba6d 	.word	0x0800ba6d
 800b9cc:	0800ba6d 	.word	0x0800ba6d
 800b9d0:	0800ba6d 	.word	0x0800ba6d
 800b9d4:	0800ba6d 	.word	0x0800ba6d
 800b9d8:	0800ba4d 	.word	0x0800ba4d
 800b9dc:	0800ba6d 	.word	0x0800ba6d
 800b9e0:	0800ba6d 	.word	0x0800ba6d
 800b9e4:	0800ba6d 	.word	0x0800ba6d
 800b9e8:	0800ba6d 	.word	0x0800ba6d
 800b9ec:	0800ba6d 	.word	0x0800ba6d
 800b9f0:	0800ba6d 	.word	0x0800ba6d
 800b9f4:	0800ba6d 	.word	0x0800ba6d
 800b9f8:	0800ba55 	.word	0x0800ba55
 800b9fc:	0800ba6d 	.word	0x0800ba6d
 800ba00:	0800ba6d 	.word	0x0800ba6d
 800ba04:	0800ba6d 	.word	0x0800ba6d
 800ba08:	0800ba6d 	.word	0x0800ba6d
 800ba0c:	0800ba6d 	.word	0x0800ba6d
 800ba10:	0800ba6d 	.word	0x0800ba6d
 800ba14:	0800ba6d 	.word	0x0800ba6d
 800ba18:	0800ba5d 	.word	0x0800ba5d
 800ba1c:	0800ba6d 	.word	0x0800ba6d
 800ba20:	0800ba6d 	.word	0x0800ba6d
 800ba24:	0800ba6d 	.word	0x0800ba6d
 800ba28:	0800ba6d 	.word	0x0800ba6d
 800ba2c:	0800ba6d 	.word	0x0800ba6d
 800ba30:	0800ba6d 	.word	0x0800ba6d
 800ba34:	0800ba6d 	.word	0x0800ba6d
 800ba38:	0800ba65 	.word	0x0800ba65
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba42:	e050      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800ba44:	2304      	movs	r3, #4
 800ba46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba4a:	e04c      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba52:	e048      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800ba54:	2310      	movs	r3, #16
 800ba56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba5a:	e044      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800ba5c:	2320      	movs	r3, #32
 800ba5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba62:	e040      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800ba64:	2340      	movs	r3, #64	; 0x40
 800ba66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba6a:	e03c      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800ba6c:	2380      	movs	r3, #128	; 0x80
 800ba6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba72:	e038      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a71      	ldr	r2, [pc, #452]	; (800bc40 <UART_SetConfig+0x908>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d130      	bne.n	800bae0 <UART_SetConfig+0x7a8>
 800ba7e:	4b6f      	ldr	r3, [pc, #444]	; (800bc3c <UART_SetConfig+0x904>)
 800ba80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba82:	f003 0307 	and.w	r3, r3, #7
 800ba86:	2b05      	cmp	r3, #5
 800ba88:	d826      	bhi.n	800bad8 <UART_SetConfig+0x7a0>
 800ba8a:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <UART_SetConfig+0x758>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800baa9 	.word	0x0800baa9
 800ba94:	0800bab1 	.word	0x0800bab1
 800ba98:	0800bab9 	.word	0x0800bab9
 800ba9c:	0800bac1 	.word	0x0800bac1
 800baa0:	0800bac9 	.word	0x0800bac9
 800baa4:	0800bad1 	.word	0x0800bad1
 800baa8:	2302      	movs	r3, #2
 800baaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baae:	e01a      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800bab0:	2304      	movs	r3, #4
 800bab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bab6:	e016      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800bab8:	2308      	movs	r3, #8
 800baba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800babe:	e012      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800bac0:	2310      	movs	r3, #16
 800bac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bac6:	e00e      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800bac8:	2320      	movs	r3, #32
 800baca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bace:	e00a      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800bad0:	2340      	movs	r3, #64	; 0x40
 800bad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bad6:	e006      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800bad8:	2380      	movs	r3, #128	; 0x80
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bade:	e002      	b.n	800bae6 <UART_SetConfig+0x7ae>
 800bae0:	2380      	movs	r3, #128	; 0x80
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a55      	ldr	r2, [pc, #340]	; (800bc40 <UART_SetConfig+0x908>)
 800baec:	4293      	cmp	r3, r2
 800baee:	f040 80f8 	bne.w	800bce2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800baf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800baf6:	2b20      	cmp	r3, #32
 800baf8:	dc46      	bgt.n	800bb88 <UART_SetConfig+0x850>
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	db75      	blt.n	800bbea <UART_SetConfig+0x8b2>
 800bafe:	3b02      	subs	r3, #2
 800bb00:	2b1e      	cmp	r3, #30
 800bb02:	d872      	bhi.n	800bbea <UART_SetConfig+0x8b2>
 800bb04:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <UART_SetConfig+0x7d4>)
 800bb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0a:	bf00      	nop
 800bb0c:	0800bb8f 	.word	0x0800bb8f
 800bb10:	0800bbeb 	.word	0x0800bbeb
 800bb14:	0800bb97 	.word	0x0800bb97
 800bb18:	0800bbeb 	.word	0x0800bbeb
 800bb1c:	0800bbeb 	.word	0x0800bbeb
 800bb20:	0800bbeb 	.word	0x0800bbeb
 800bb24:	0800bba7 	.word	0x0800bba7
 800bb28:	0800bbeb 	.word	0x0800bbeb
 800bb2c:	0800bbeb 	.word	0x0800bbeb
 800bb30:	0800bbeb 	.word	0x0800bbeb
 800bb34:	0800bbeb 	.word	0x0800bbeb
 800bb38:	0800bbeb 	.word	0x0800bbeb
 800bb3c:	0800bbeb 	.word	0x0800bbeb
 800bb40:	0800bbeb 	.word	0x0800bbeb
 800bb44:	0800bbb7 	.word	0x0800bbb7
 800bb48:	0800bbeb 	.word	0x0800bbeb
 800bb4c:	0800bbeb 	.word	0x0800bbeb
 800bb50:	0800bbeb 	.word	0x0800bbeb
 800bb54:	0800bbeb 	.word	0x0800bbeb
 800bb58:	0800bbeb 	.word	0x0800bbeb
 800bb5c:	0800bbeb 	.word	0x0800bbeb
 800bb60:	0800bbeb 	.word	0x0800bbeb
 800bb64:	0800bbeb 	.word	0x0800bbeb
 800bb68:	0800bbeb 	.word	0x0800bbeb
 800bb6c:	0800bbeb 	.word	0x0800bbeb
 800bb70:	0800bbeb 	.word	0x0800bbeb
 800bb74:	0800bbeb 	.word	0x0800bbeb
 800bb78:	0800bbeb 	.word	0x0800bbeb
 800bb7c:	0800bbeb 	.word	0x0800bbeb
 800bb80:	0800bbeb 	.word	0x0800bbeb
 800bb84:	0800bbdd 	.word	0x0800bbdd
 800bb88:	2b40      	cmp	r3, #64	; 0x40
 800bb8a:	d02a      	beq.n	800bbe2 <UART_SetConfig+0x8aa>
 800bb8c:	e02d      	b.n	800bbea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bb8e:	f7fd fa3f 	bl	8009010 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb94:	e02f      	b.n	800bbf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fd fa4e 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba4:	e027      	b.n	800bbf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bba6:	f107 0318 	add.w	r3, r7, #24
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fd fb9a 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbb4:	e01f      	b.n	800bbf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbb6:	4b21      	ldr	r3, [pc, #132]	; (800bc3c <UART_SetConfig+0x904>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 0320 	and.w	r3, r3, #32
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d009      	beq.n	800bbd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbc2:	4b1e      	ldr	r3, [pc, #120]	; (800bc3c <UART_SetConfig+0x904>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	08db      	lsrs	r3, r3, #3
 800bbc8:	f003 0303 	and.w	r3, r3, #3
 800bbcc:	4a1d      	ldr	r2, [pc, #116]	; (800bc44 <UART_SetConfig+0x90c>)
 800bbce:	fa22 f303 	lsr.w	r3, r2, r3
 800bbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbd4:	e00f      	b.n	800bbf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bbd6:	4b1b      	ldr	r3, [pc, #108]	; (800bc44 <UART_SetConfig+0x90c>)
 800bbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbda:	e00c      	b.n	800bbf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bbdc:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <UART_SetConfig+0x910>)
 800bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe0:	e009      	b.n	800bbf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe8:	e005      	b.n	800bbf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bbea:	2300      	movs	r3, #0
 800bbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bbf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 81ee 	beq.w	800bfda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	4a12      	ldr	r2, [pc, #72]	; (800bc4c <UART_SetConfig+0x914>)
 800bc04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc10:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	4613      	mov	r3, r2
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	4413      	add	r3, r2
 800bc1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d305      	bcc.n	800bc2e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d910      	bls.n	800bc50 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bc34:	e1d1      	b.n	800bfda <UART_SetConfig+0xca2>
 800bc36:	bf00      	nop
 800bc38:	40011c00 	.word	0x40011c00
 800bc3c:	58024400 	.word	0x58024400
 800bc40:	58000c00 	.word	0x58000c00
 800bc44:	03d09000 	.word	0x03d09000
 800bc48:	003d0900 	.word	0x003d0900
 800bc4c:	08011128 	.word	0x08011128
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc52:	2200      	movs	r2, #0
 800bc54:	60bb      	str	r3, [r7, #8]
 800bc56:	60fa      	str	r2, [r7, #12]
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	4ac0      	ldr	r2, [pc, #768]	; (800bf60 <UART_SetConfig+0xc28>)
 800bc5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	2200      	movs	r2, #0
 800bc66:	603b      	str	r3, [r7, #0]
 800bc68:	607a      	str	r2, [r7, #4]
 800bc6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc72:	f7f4 fb3d 	bl	80002f0 <__aeabi_uldivmod>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f04f 0200 	mov.w	r2, #0
 800bc82:	f04f 0300 	mov.w	r3, #0
 800bc86:	020b      	lsls	r3, r1, #8
 800bc88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc8c:	0202      	lsls	r2, r0, #8
 800bc8e:	6979      	ldr	r1, [r7, #20]
 800bc90:	6849      	ldr	r1, [r1, #4]
 800bc92:	0849      	lsrs	r1, r1, #1
 800bc94:	2000      	movs	r0, #0
 800bc96:	460c      	mov	r4, r1
 800bc98:	4605      	mov	r5, r0
 800bc9a:	eb12 0804 	adds.w	r8, r2, r4
 800bc9e:	eb43 0905 	adc.w	r9, r3, r5
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	469a      	mov	sl, r3
 800bcaa:	4693      	mov	fp, r2
 800bcac:	4652      	mov	r2, sl
 800bcae:	465b      	mov	r3, fp
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	f7f4 fb1c 	bl	80002f0 <__aeabi_uldivmod>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcc6:	d308      	bcc.n	800bcda <UART_SetConfig+0x9a2>
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcce:	d204      	bcs.n	800bcda <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcd6:	60da      	str	r2, [r3, #12]
 800bcd8:	e17f      	b.n	800bfda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bce0:	e17b      	b.n	800bfda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcea:	f040 80bd 	bne.w	800be68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bcee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	dc48      	bgt.n	800bd88 <UART_SetConfig+0xa50>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	db7b      	blt.n	800bdf2 <UART_SetConfig+0xaba>
 800bcfa:	2b20      	cmp	r3, #32
 800bcfc:	d879      	bhi.n	800bdf2 <UART_SetConfig+0xaba>
 800bcfe:	a201      	add	r2, pc, #4	; (adr r2, 800bd04 <UART_SetConfig+0x9cc>)
 800bd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd04:	0800bd8f 	.word	0x0800bd8f
 800bd08:	0800bd97 	.word	0x0800bd97
 800bd0c:	0800bdf3 	.word	0x0800bdf3
 800bd10:	0800bdf3 	.word	0x0800bdf3
 800bd14:	0800bd9f 	.word	0x0800bd9f
 800bd18:	0800bdf3 	.word	0x0800bdf3
 800bd1c:	0800bdf3 	.word	0x0800bdf3
 800bd20:	0800bdf3 	.word	0x0800bdf3
 800bd24:	0800bdaf 	.word	0x0800bdaf
 800bd28:	0800bdf3 	.word	0x0800bdf3
 800bd2c:	0800bdf3 	.word	0x0800bdf3
 800bd30:	0800bdf3 	.word	0x0800bdf3
 800bd34:	0800bdf3 	.word	0x0800bdf3
 800bd38:	0800bdf3 	.word	0x0800bdf3
 800bd3c:	0800bdf3 	.word	0x0800bdf3
 800bd40:	0800bdf3 	.word	0x0800bdf3
 800bd44:	0800bdbf 	.word	0x0800bdbf
 800bd48:	0800bdf3 	.word	0x0800bdf3
 800bd4c:	0800bdf3 	.word	0x0800bdf3
 800bd50:	0800bdf3 	.word	0x0800bdf3
 800bd54:	0800bdf3 	.word	0x0800bdf3
 800bd58:	0800bdf3 	.word	0x0800bdf3
 800bd5c:	0800bdf3 	.word	0x0800bdf3
 800bd60:	0800bdf3 	.word	0x0800bdf3
 800bd64:	0800bdf3 	.word	0x0800bdf3
 800bd68:	0800bdf3 	.word	0x0800bdf3
 800bd6c:	0800bdf3 	.word	0x0800bdf3
 800bd70:	0800bdf3 	.word	0x0800bdf3
 800bd74:	0800bdf3 	.word	0x0800bdf3
 800bd78:	0800bdf3 	.word	0x0800bdf3
 800bd7c:	0800bdf3 	.word	0x0800bdf3
 800bd80:	0800bdf3 	.word	0x0800bdf3
 800bd84:	0800bde5 	.word	0x0800bde5
 800bd88:	2b40      	cmp	r3, #64	; 0x40
 800bd8a:	d02e      	beq.n	800bdea <UART_SetConfig+0xab2>
 800bd8c:	e031      	b.n	800bdf2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd8e:	f7fb fa3b 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 800bd92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd94:	e033      	b.n	800bdfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd96:	f7fb fa4d 	bl	8007234 <HAL_RCC_GetPCLK2Freq>
 800bd9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd9c:	e02f      	b.n	800bdfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fd f94a 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdac:	e027      	b.n	800bdfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdae:	f107 0318 	add.w	r3, r7, #24
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fd fa96 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdbc:	e01f      	b.n	800bdfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdbe:	4b69      	ldr	r3, [pc, #420]	; (800bf64 <UART_SetConfig+0xc2c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdca:	4b66      	ldr	r3, [pc, #408]	; (800bf64 <UART_SetConfig+0xc2c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	08db      	lsrs	r3, r3, #3
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	4a64      	ldr	r2, [pc, #400]	; (800bf68 <UART_SetConfig+0xc30>)
 800bdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bddc:	e00f      	b.n	800bdfe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bdde:	4b62      	ldr	r3, [pc, #392]	; (800bf68 <UART_SetConfig+0xc30>)
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde2:	e00c      	b.n	800bdfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bde4:	4b61      	ldr	r3, [pc, #388]	; (800bf6c <UART_SetConfig+0xc34>)
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde8:	e009      	b.n	800bdfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf0:	e005      	b.n	800bdfe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bdfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bdfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 80ea 	beq.w	800bfda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0a:	4a55      	ldr	r2, [pc, #340]	; (800bf60 <UART_SetConfig+0xc28>)
 800be0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be10:	461a      	mov	r2, r3
 800be12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be14:	fbb3 f3f2 	udiv	r3, r3, r2
 800be18:	005a      	lsls	r2, r3, #1
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	085b      	lsrs	r3, r3, #1
 800be20:	441a      	add	r2, r3
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	2b0f      	cmp	r3, #15
 800be30:	d916      	bls.n	800be60 <UART_SetConfig+0xb28>
 800be32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be38:	d212      	bcs.n	800be60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	f023 030f 	bic.w	r3, r3, #15
 800be42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	085b      	lsrs	r3, r3, #1
 800be48:	b29b      	uxth	r3, r3
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	b29a      	uxth	r2, r3
 800be50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be52:	4313      	orrs	r3, r2
 800be54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be5c:	60da      	str	r2, [r3, #12]
 800be5e:	e0bc      	b.n	800bfda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800be66:	e0b8      	b.n	800bfda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be6c:	2b20      	cmp	r3, #32
 800be6e:	dc4b      	bgt.n	800bf08 <UART_SetConfig+0xbd0>
 800be70:	2b00      	cmp	r3, #0
 800be72:	f2c0 8087 	blt.w	800bf84 <UART_SetConfig+0xc4c>
 800be76:	2b20      	cmp	r3, #32
 800be78:	f200 8084 	bhi.w	800bf84 <UART_SetConfig+0xc4c>
 800be7c:	a201      	add	r2, pc, #4	; (adr r2, 800be84 <UART_SetConfig+0xb4c>)
 800be7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be82:	bf00      	nop
 800be84:	0800bf0f 	.word	0x0800bf0f
 800be88:	0800bf17 	.word	0x0800bf17
 800be8c:	0800bf85 	.word	0x0800bf85
 800be90:	0800bf85 	.word	0x0800bf85
 800be94:	0800bf1f 	.word	0x0800bf1f
 800be98:	0800bf85 	.word	0x0800bf85
 800be9c:	0800bf85 	.word	0x0800bf85
 800bea0:	0800bf85 	.word	0x0800bf85
 800bea4:	0800bf2f 	.word	0x0800bf2f
 800bea8:	0800bf85 	.word	0x0800bf85
 800beac:	0800bf85 	.word	0x0800bf85
 800beb0:	0800bf85 	.word	0x0800bf85
 800beb4:	0800bf85 	.word	0x0800bf85
 800beb8:	0800bf85 	.word	0x0800bf85
 800bebc:	0800bf85 	.word	0x0800bf85
 800bec0:	0800bf85 	.word	0x0800bf85
 800bec4:	0800bf3f 	.word	0x0800bf3f
 800bec8:	0800bf85 	.word	0x0800bf85
 800becc:	0800bf85 	.word	0x0800bf85
 800bed0:	0800bf85 	.word	0x0800bf85
 800bed4:	0800bf85 	.word	0x0800bf85
 800bed8:	0800bf85 	.word	0x0800bf85
 800bedc:	0800bf85 	.word	0x0800bf85
 800bee0:	0800bf85 	.word	0x0800bf85
 800bee4:	0800bf85 	.word	0x0800bf85
 800bee8:	0800bf85 	.word	0x0800bf85
 800beec:	0800bf85 	.word	0x0800bf85
 800bef0:	0800bf85 	.word	0x0800bf85
 800bef4:	0800bf85 	.word	0x0800bf85
 800bef8:	0800bf85 	.word	0x0800bf85
 800befc:	0800bf85 	.word	0x0800bf85
 800bf00:	0800bf85 	.word	0x0800bf85
 800bf04:	0800bf77 	.word	0x0800bf77
 800bf08:	2b40      	cmp	r3, #64	; 0x40
 800bf0a:	d037      	beq.n	800bf7c <UART_SetConfig+0xc44>
 800bf0c:	e03a      	b.n	800bf84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf0e:	f7fb f97b 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 800bf12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf14:	e03c      	b.n	800bf90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf16:	f7fb f98d 	bl	8007234 <HAL_RCC_GetPCLK2Freq>
 800bf1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf1c:	e038      	b.n	800bf90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fd f88a 	bl	800903c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf2c:	e030      	b.n	800bf90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf2e:	f107 0318 	add.w	r3, r7, #24
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fd f9d6 	bl	80092e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf3c:	e028      	b.n	800bf90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf3e:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <UART_SetConfig+0xc2c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 0320 	and.w	r3, r3, #32
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d012      	beq.n	800bf70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf4a:	4b06      	ldr	r3, [pc, #24]	; (800bf64 <UART_SetConfig+0xc2c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	08db      	lsrs	r3, r3, #3
 800bf50:	f003 0303 	and.w	r3, r3, #3
 800bf54:	4a04      	ldr	r2, [pc, #16]	; (800bf68 <UART_SetConfig+0xc30>)
 800bf56:	fa22 f303 	lsr.w	r3, r2, r3
 800bf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf5c:	e018      	b.n	800bf90 <UART_SetConfig+0xc58>
 800bf5e:	bf00      	nop
 800bf60:	08011128 	.word	0x08011128
 800bf64:	58024400 	.word	0x58024400
 800bf68:	03d09000 	.word	0x03d09000
 800bf6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bf70:	4b24      	ldr	r3, [pc, #144]	; (800c004 <UART_SetConfig+0xccc>)
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf74:	e00c      	b.n	800bf90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf76:	4b24      	ldr	r3, [pc, #144]	; (800c008 <UART_SetConfig+0xcd0>)
 800bf78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf7a:	e009      	b.n	800bf90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf82:	e005      	b.n	800bf90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bf84:	2300      	movs	r3, #0
 800bf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bf8e:	bf00      	nop
    }

    if (pclk != 0U)
 800bf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d021      	beq.n	800bfda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	4a1c      	ldr	r2, [pc, #112]	; (800c00c <UART_SetConfig+0xcd4>)
 800bf9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	085b      	lsrs	r3, r3, #1
 800bfae:	441a      	add	r2, r3
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	2b0f      	cmp	r3, #15
 800bfbe:	d909      	bls.n	800bfd4 <UART_SetConfig+0xc9c>
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc6:	d205      	bcs.n	800bfd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60da      	str	r2, [r3, #12]
 800bfd2:	e002      	b.n	800bfda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2200      	movs	r2, #0
 800bfee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2200      	movs	r2, #0
 800bff4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bff6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3748      	adds	r7, #72	; 0x48
 800bffe:	46bd      	mov	sp, r7
 800c000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c004:	03d09000 	.word	0x03d09000
 800c008:	003d0900 	.word	0x003d0900
 800c00c:	08011128 	.word	0x08011128

0800c010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	f003 0301 	and.w	r3, r3, #1
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00a      	beq.n	800c03a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	430a      	orrs	r2, r1
 800c038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c03e:	f003 0302 	and.w	r3, r3, #2
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00a      	beq.n	800c05c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	430a      	orrs	r2, r1
 800c05a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00a      	beq.n	800c07e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	430a      	orrs	r2, r1
 800c07c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c082:	f003 0308 	and.w	r3, r3, #8
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00a      	beq.n	800c0a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	430a      	orrs	r2, r1
 800c09e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a4:	f003 0310 	and.w	r3, r3, #16
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00a      	beq.n	800c0c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c6:	f003 0320 	and.w	r3, r3, #32
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	430a      	orrs	r2, r1
 800c0e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d01a      	beq.n	800c126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	430a      	orrs	r2, r1
 800c104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c10a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c10e:	d10a      	bne.n	800c126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	430a      	orrs	r2, r1
 800c124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00a      	beq.n	800c148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	605a      	str	r2, [r3, #4]
  }
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b098      	sub	sp, #96	; 0x60
 800c158:	af02      	add	r7, sp, #8
 800c15a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c164:	f7f5 fd9c 	bl	8001ca0 <HAL_GetTick>
 800c168:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 0308 	and.w	r3, r3, #8
 800c174:	2b08      	cmp	r3, #8
 800c176:	d12f      	bne.n	800c1d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c180:	2200      	movs	r2, #0
 800c182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f88e 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d022      	beq.n	800c1d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19a:	e853 3f00 	ldrex	r3, [r3]
 800c19e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1a6:	653b      	str	r3, [r7, #80]	; 0x50
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b0:	647b      	str	r3, [r7, #68]	; 0x44
 800c1b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1b8:	e841 2300 	strex	r3, r2, [r1]
 800c1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1e6      	bne.n	800c192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2220      	movs	r2, #32
 800c1c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e063      	b.n	800c2a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0304 	and.w	r3, r3, #4
 800c1e2:	2b04      	cmp	r3, #4
 800c1e4:	d149      	bne.n	800c27a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f857 	bl	800c2a8 <UART_WaitOnFlagUntilTimeout>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d03c      	beq.n	800c27a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	e853 3f00 	ldrex	r3, [r3]
 800c20c:	623b      	str	r3, [r7, #32]
   return(result);
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c214:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c21e:	633b      	str	r3, [r7, #48]	; 0x30
 800c220:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c226:	e841 2300 	strex	r3, r2, [r1]
 800c22a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1e6      	bne.n	800c200 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3308      	adds	r3, #8
 800c238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	e853 3f00 	ldrex	r3, [r3]
 800c240:	60fb      	str	r3, [r7, #12]
   return(result);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f023 0301 	bic.w	r3, r3, #1
 800c248:	64bb      	str	r3, [r7, #72]	; 0x48
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3308      	adds	r3, #8
 800c250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c252:	61fa      	str	r2, [r7, #28]
 800c254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c256:	69b9      	ldr	r1, [r7, #24]
 800c258:	69fa      	ldr	r2, [r7, #28]
 800c25a:	e841 2300 	strex	r3, r2, [r1]
 800c25e:	617b      	str	r3, [r7, #20]
   return(result);
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1e5      	bne.n	800c232 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2220      	movs	r2, #32
 800c26a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	e012      	b.n	800c2a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2220      	movs	r2, #32
 800c27e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2220      	movs	r2, #32
 800c286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3758      	adds	r7, #88	; 0x58
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2b8:	e049      	b.n	800c34e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c0:	d045      	beq.n	800c34e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2c2:	f7f5 fced 	bl	8001ca0 <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	69ba      	ldr	r2, [r7, #24]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d302      	bcc.n	800c2d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e048      	b.n	800c36e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0304 	and.w	r3, r3, #4
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d031      	beq.n	800c34e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	69db      	ldr	r3, [r3, #28]
 800c2f0:	f003 0308 	and.w	r3, r3, #8
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	d110      	bne.n	800c31a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2208      	movs	r2, #8
 800c2fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 f839 	bl	800c378 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2208      	movs	r2, #8
 800c30a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2200      	movs	r2, #0
 800c312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e029      	b.n	800c36e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c328:	d111      	bne.n	800c34e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 f81f 	bl	800c378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2220      	movs	r2, #32
 800c33e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e00f      	b.n	800c36e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	69da      	ldr	r2, [r3, #28]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	4013      	ands	r3, r2
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	bf0c      	ite	eq
 800c35e:	2301      	moveq	r3, #1
 800c360:	2300      	movne	r3, #0
 800c362:	b2db      	uxtb	r3, r3
 800c364:	461a      	mov	r2, r3
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d0a6      	beq.n	800c2ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c378:	b480      	push	{r7}
 800c37a:	b095      	sub	sp, #84	; 0x54
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c388:	e853 3f00 	ldrex	r3, [r3]
 800c38c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c394:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c39e:	643b      	str	r3, [r7, #64]	; 0x40
 800c3a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3a6:	e841 2300 	strex	r3, r2, [r1]
 800c3aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1e6      	bne.n	800c380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	e853 3f00 	ldrex	r3, [r3]
 800c3c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	4b1e      	ldr	r3, [pc, #120]	; (800c440 <UART_EndRxTransfer+0xc8>)
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e5      	bne.n	800c3b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d118      	bne.n	800c420 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	e853 3f00 	ldrex	r3, [r3]
 800c3fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	f023 0310 	bic.w	r3, r3, #16
 800c402:	647b      	str	r3, [r7, #68]	; 0x44
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	461a      	mov	r2, r3
 800c40a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c40c:	61bb      	str	r3, [r7, #24]
 800c40e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c410:	6979      	ldr	r1, [r7, #20]
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	e841 2300 	strex	r3, r2, [r1]
 800c418:	613b      	str	r3, [r7, #16]
   return(result);
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d1e6      	bne.n	800c3ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2220      	movs	r2, #32
 800c424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c434:	bf00      	nop
 800c436:	3754      	adds	r7, #84	; 0x54
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	effffffe 	.word	0xeffffffe

0800c444 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c452:	2b01      	cmp	r3, #1
 800c454:	d101      	bne.n	800c45a <HAL_UARTEx_DisableFifoMode+0x16>
 800c456:	2302      	movs	r3, #2
 800c458:	e027      	b.n	800c4aa <HAL_UARTEx_DisableFifoMode+0x66>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2224      	movs	r2, #36	; 0x24
 800c466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 0201 	bic.w	r2, r2, #1
 800c480:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c488:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2220      	movs	r2, #32
 800c49c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d101      	bne.n	800c4ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c4ca:	2302      	movs	r3, #2
 800c4cc:	e02d      	b.n	800c52a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2224      	movs	r2, #36	; 0x24
 800c4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f022 0201 	bic.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f850 	bl	800c5b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2220      	movs	r2, #32
 800c51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c542:	2b01      	cmp	r3, #1
 800c544:	d101      	bne.n	800c54a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c546:	2302      	movs	r3, #2
 800c548:	e02d      	b.n	800c5a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2224      	movs	r2, #36	; 0x24
 800c556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f022 0201 	bic.w	r2, r2, #1
 800c570:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	430a      	orrs	r2, r1
 800c584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f812 	bl	800c5b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2220      	movs	r2, #32
 800c598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d108      	bne.n	800c5d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c5d0:	e031      	b.n	800c636 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c5d2:	2310      	movs	r3, #16
 800c5d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c5d6:	2310      	movs	r3, #16
 800c5d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	0e5b      	lsrs	r3, r3, #25
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	f003 0307 	and.w	r3, r3, #7
 800c5e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	0f5b      	lsrs	r3, r3, #29
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	f003 0307 	and.w	r3, r3, #7
 800c5f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	7b3a      	ldrb	r2, [r7, #12]
 800c5fe:	4911      	ldr	r1, [pc, #68]	; (800c644 <UARTEx_SetNbDataToProcess+0x94>)
 800c600:	5c8a      	ldrb	r2, [r1, r2]
 800c602:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c606:	7b3a      	ldrb	r2, [r7, #12]
 800c608:	490f      	ldr	r1, [pc, #60]	; (800c648 <UARTEx_SetNbDataToProcess+0x98>)
 800c60a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c60c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c610:	b29a      	uxth	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	7b7a      	ldrb	r2, [r7, #13]
 800c61c:	4909      	ldr	r1, [pc, #36]	; (800c644 <UARTEx_SetNbDataToProcess+0x94>)
 800c61e:	5c8a      	ldrb	r2, [r1, r2]
 800c620:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c624:	7b7a      	ldrb	r2, [r7, #13]
 800c626:	4908      	ldr	r1, [pc, #32]	; (800c648 <UARTEx_SetNbDataToProcess+0x98>)
 800c628:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c62a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c62e:	b29a      	uxth	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c636:	bf00      	nop
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	08011140 	.word	0x08011140
 800c648:	08011148 	.word	0x08011148

0800c64c <__NVIC_SetPriority>:
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	db0a      	blt.n	800c676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	b2da      	uxtb	r2, r3
 800c664:	490c      	ldr	r1, [pc, #48]	; (800c698 <__NVIC_SetPriority+0x4c>)
 800c666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c66a:	0112      	lsls	r2, r2, #4
 800c66c:	b2d2      	uxtb	r2, r2
 800c66e:	440b      	add	r3, r1
 800c670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c674:	e00a      	b.n	800c68c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	4908      	ldr	r1, [pc, #32]	; (800c69c <__NVIC_SetPriority+0x50>)
 800c67c:	88fb      	ldrh	r3, [r7, #6]
 800c67e:	f003 030f 	and.w	r3, r3, #15
 800c682:	3b04      	subs	r3, #4
 800c684:	0112      	lsls	r2, r2, #4
 800c686:	b2d2      	uxtb	r2, r2
 800c688:	440b      	add	r3, r1
 800c68a:	761a      	strb	r2, [r3, #24]
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	e000e100 	.word	0xe000e100
 800c69c:	e000ed00 	.word	0xe000ed00

0800c6a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c6a4:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <SysTick_Handler+0x1c>)
 800c6a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c6a8:	f002 f94c 	bl	800e944 <xTaskGetSchedulerState>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d001      	beq.n	800c6b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c6b2:	f003 f831 	bl	800f718 <xPortSysTickHandler>
  }
}
 800c6b6:	bf00      	nop
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	e000e010 	.word	0xe000e010

0800c6c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	f06f 0004 	mvn.w	r0, #4
 800c6ca:	f7ff ffbf 	bl	800c64c <__NVIC_SetPriority>
#endif
}
 800c6ce:	bf00      	nop
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6da:	f3ef 8305 	mrs	r3, IPSR
 800c6de:	603b      	str	r3, [r7, #0]
  return(result);
 800c6e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c6e6:	f06f 0305 	mvn.w	r3, #5
 800c6ea:	607b      	str	r3, [r7, #4]
 800c6ec:	e00c      	b.n	800c708 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c6ee:	4b0a      	ldr	r3, [pc, #40]	; (800c718 <osKernelInitialize+0x44>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d105      	bne.n	800c702 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c6f6:	4b08      	ldr	r3, [pc, #32]	; (800c718 <osKernelInitialize+0x44>)
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	607b      	str	r3, [r7, #4]
 800c700:	e002      	b.n	800c708 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c702:	f04f 33ff 	mov.w	r3, #4294967295
 800c706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c708:	687b      	ldr	r3, [r7, #4]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	2401738c 	.word	0x2401738c

0800c71c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c722:	f3ef 8305 	mrs	r3, IPSR
 800c726:	603b      	str	r3, [r7, #0]
  return(result);
 800c728:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d003      	beq.n	800c736 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c72e:	f06f 0305 	mvn.w	r3, #5
 800c732:	607b      	str	r3, [r7, #4]
 800c734:	e010      	b.n	800c758 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c736:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <osKernelStart+0x48>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d109      	bne.n	800c752 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c73e:	f7ff ffbf 	bl	800c6c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c742:	4b08      	ldr	r3, [pc, #32]	; (800c764 <osKernelStart+0x48>)
 800c744:	2202      	movs	r2, #2
 800c746:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c748:	f001 fcb4 	bl	800e0b4 <vTaskStartScheduler>
      stat = osOK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	607b      	str	r3, [r7, #4]
 800c750:	e002      	b.n	800c758 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c752:	f04f 33ff 	mov.w	r3, #4294967295
 800c756:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c758:	687b      	ldr	r3, [r7, #4]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	2401738c 	.word	0x2401738c

0800c768 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08e      	sub	sp, #56	; 0x38
 800c76c:	af04      	add	r7, sp, #16
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c774:	2300      	movs	r3, #0
 800c776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c778:	f3ef 8305 	mrs	r3, IPSR
 800c77c:	617b      	str	r3, [r7, #20]
  return(result);
 800c77e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c780:	2b00      	cmp	r3, #0
 800c782:	d17e      	bne.n	800c882 <osThreadNew+0x11a>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d07b      	beq.n	800c882 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c78a:	2380      	movs	r3, #128	; 0x80
 800c78c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c78e:	2318      	movs	r3, #24
 800c790:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c796:	f04f 33ff 	mov.w	r3, #4294967295
 800c79a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d045      	beq.n	800c82e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d002      	beq.n	800c7b0 <osThreadNew+0x48>
        name = attr->name;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	699b      	ldr	r3, [r3, #24]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d008      	beq.n	800c7d6 <osThreadNew+0x6e>
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	2b38      	cmp	r3, #56	; 0x38
 800c7c8:	d805      	bhi.n	800c7d6 <osThreadNew+0x6e>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <osThreadNew+0x72>
        return (NULL);
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	e054      	b.n	800c884 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	695b      	ldr	r3, [r3, #20]
 800c7e6:	089b      	lsrs	r3, r3, #2
 800c7e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00e      	beq.n	800c810 <osThreadNew+0xa8>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	2b5b      	cmp	r3, #91	; 0x5b
 800c7f8:	d90a      	bls.n	800c810 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d002      	beq.n	800c810 <osThreadNew+0xa8>
        mem = 1;
 800c80a:	2301      	movs	r3, #1
 800c80c:	61bb      	str	r3, [r7, #24]
 800c80e:	e010      	b.n	800c832 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10c      	bne.n	800c832 <osThreadNew+0xca>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d108      	bne.n	800c832 <osThreadNew+0xca>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d104      	bne.n	800c832 <osThreadNew+0xca>
          mem = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	61bb      	str	r3, [r7, #24]
 800c82c:	e001      	b.n	800c832 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d110      	bne.n	800c85a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	6a3a      	ldr	r2, [r7, #32]
 800c84c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f001 fa8e 	bl	800dd70 <xTaskCreateStatic>
 800c854:	4603      	mov	r3, r0
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	e013      	b.n	800c882 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d110      	bne.n	800c882 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	b29a      	uxth	r2, r3
 800c864:	f107 0310 	add.w	r3, r7, #16
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f001 fad9 	bl	800de2a <xTaskCreate>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d001      	beq.n	800c882 <osThreadNew+0x11a>
            hTask = NULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c882:	693b      	ldr	r3, [r7, #16]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3728      	adds	r7, #40	; 0x28
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08a      	sub	sp, #40	; 0x28
 800c890:	af02      	add	r7, sp, #8
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c898:	2300      	movs	r3, #0
 800c89a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c89c:	f3ef 8305 	mrs	r3, IPSR
 800c8a0:	613b      	str	r3, [r7, #16]
  return(result);
 800c8a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d175      	bne.n	800c994 <osSemaphoreNew+0x108>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d072      	beq.n	800c994 <osSemaphoreNew+0x108>
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d86e      	bhi.n	800c994 <osSemaphoreNew+0x108>
    mem = -1;
 800c8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d015      	beq.n	800c8ee <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d006      	beq.n	800c8d8 <osSemaphoreNew+0x4c>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	2b4f      	cmp	r3, #79	; 0x4f
 800c8d0:	d902      	bls.n	800c8d8 <osSemaphoreNew+0x4c>
        mem = 1;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	61bb      	str	r3, [r7, #24]
 800c8d6:	e00c      	b.n	800c8f2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d108      	bne.n	800c8f2 <osSemaphoreNew+0x66>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d104      	bne.n	800c8f2 <osSemaphoreNew+0x66>
          mem = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	61bb      	str	r3, [r7, #24]
 800c8ec:	e001      	b.n	800c8f2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f8:	d04c      	beq.n	800c994 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d128      	bne.n	800c952 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d10a      	bne.n	800c91c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	2203      	movs	r2, #3
 800c90c:	9200      	str	r2, [sp, #0]
 800c90e:	2200      	movs	r2, #0
 800c910:	2100      	movs	r1, #0
 800c912:	2001      	movs	r0, #1
 800c914:	f000 fa4a 	bl	800cdac <xQueueGenericCreateStatic>
 800c918:	61f8      	str	r0, [r7, #28]
 800c91a:	e005      	b.n	800c928 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c91c:	2203      	movs	r2, #3
 800c91e:	2100      	movs	r1, #0
 800c920:	2001      	movs	r0, #1
 800c922:	f000 fabb 	bl	800ce9c <xQueueGenericCreate>
 800c926:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d022      	beq.n	800c974 <osSemaphoreNew+0xe8>
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d01f      	beq.n	800c974 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c934:	2300      	movs	r3, #0
 800c936:	2200      	movs	r2, #0
 800c938:	2100      	movs	r1, #0
 800c93a:	69f8      	ldr	r0, [r7, #28]
 800c93c:	f000 fb76 	bl	800d02c <xQueueGenericSend>
 800c940:	4603      	mov	r3, r0
 800c942:	2b01      	cmp	r3, #1
 800c944:	d016      	beq.n	800c974 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c946:	69f8      	ldr	r0, [r7, #28]
 800c948:	f001 f83e 	bl	800d9c8 <vQueueDelete>
            hSemaphore = NULL;
 800c94c:	2300      	movs	r3, #0
 800c94e:	61fb      	str	r3, [r7, #28]
 800c950:	e010      	b.n	800c974 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d108      	bne.n	800c96a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	461a      	mov	r2, r3
 800c95e:	68b9      	ldr	r1, [r7, #8]
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 faf8 	bl	800cf56 <xQueueCreateCountingSemaphoreStatic>
 800c966:	61f8      	str	r0, [r7, #28]
 800c968:	e004      	b.n	800c974 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 fb29 	bl	800cfc4 <xQueueCreateCountingSemaphore>
 800c972:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00c      	beq.n	800c994 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d003      	beq.n	800c988 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	617b      	str	r3, [r7, #20]
 800c986:	e001      	b.n	800c98c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c988:	2300      	movs	r3, #0
 800c98a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c98c:	6979      	ldr	r1, [r7, #20]
 800c98e:	69f8      	ldr	r0, [r7, #28]
 800c990:	f001 f966 	bl	800dc60 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c994:	69fb      	ldr	r3, [r7, #28]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3720      	adds	r7, #32
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
	...

0800c9a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d103      	bne.n	800c9c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c9b8:	f06f 0303 	mvn.w	r3, #3
 800c9bc:	617b      	str	r3, [r7, #20]
 800c9be:	e039      	b.n	800ca34 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9c0:	f3ef 8305 	mrs	r3, IPSR
 800c9c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d022      	beq.n	800ca12 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d003      	beq.n	800c9da <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c9d2:	f06f 0303 	mvn.w	r3, #3
 800c9d6:	617b      	str	r3, [r7, #20]
 800c9d8:	e02c      	b.n	800ca34 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c9de:	f107 0308 	add.w	r3, r7, #8
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6938      	ldr	r0, [r7, #16]
 800c9e8:	f000 ff32 	bl	800d850 <xQueueReceiveFromISR>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d003      	beq.n	800c9fa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c9f2:	f06f 0302 	mvn.w	r3, #2
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e01c      	b.n	800ca34 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d019      	beq.n	800ca34 <osSemaphoreAcquire+0x94>
 800ca00:	4b0f      	ldr	r3, [pc, #60]	; (800ca40 <osSemaphoreAcquire+0xa0>)
 800ca02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca06:	601a      	str	r2, [r3, #0]
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	e010      	b.n	800ca34 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6938      	ldr	r0, [r7, #16]
 800ca16:	f000 fe0f 	bl	800d638 <xQueueSemaphoreTake>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d009      	beq.n	800ca34 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ca26:	f06f 0301 	mvn.w	r3, #1
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	e002      	b.n	800ca34 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ca2e:	f06f 0302 	mvn.w	r3, #2
 800ca32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ca34:	697b      	ldr	r3, [r7, #20]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	e000ed04 	.word	0xe000ed04

0800ca44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d103      	bne.n	800ca62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ca5a:	f06f 0303 	mvn.w	r3, #3
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	e02c      	b.n	800cabc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca62:	f3ef 8305 	mrs	r3, IPSR
 800ca66:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d01a      	beq.n	800caa4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca72:	f107 0308 	add.w	r3, r7, #8
 800ca76:	4619      	mov	r1, r3
 800ca78:	6938      	ldr	r0, [r7, #16]
 800ca7a:	f000 fc70 	bl	800d35e <xQueueGiveFromISR>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d003      	beq.n	800ca8c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ca84:	f06f 0302 	mvn.w	r3, #2
 800ca88:	617b      	str	r3, [r7, #20]
 800ca8a:	e017      	b.n	800cabc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d014      	beq.n	800cabc <osSemaphoreRelease+0x78>
 800ca92:	4b0d      	ldr	r3, [pc, #52]	; (800cac8 <osSemaphoreRelease+0x84>)
 800ca94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	e00b      	b.n	800cabc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800caa4:	2300      	movs	r3, #0
 800caa6:	2200      	movs	r2, #0
 800caa8:	2100      	movs	r1, #0
 800caaa:	6938      	ldr	r0, [r7, #16]
 800caac:	f000 fabe 	bl	800d02c <xQueueGenericSend>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d002      	beq.n	800cabc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cab6:	f06f 0302 	mvn.w	r3, #2
 800caba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cabc:	697b      	ldr	r3, [r7, #20]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	e000ed04 	.word	0xe000ed04

0800cacc <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d102      	bne.n	800cae4 <osSemaphoreGetCount+0x18>
    count = 0U;
 800cade:	2300      	movs	r3, #0
 800cae0:	617b      	str	r3, [r7, #20]
 800cae2:	e00e      	b.n	800cb02 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae4:	f3ef 8305 	mrs	r3, IPSR
 800cae8:	60fb      	str	r3, [r7, #12]
  return(result);
 800caea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800caf0:	6938      	ldr	r0, [r7, #16]
 800caf2:	f000 ff4b 	bl	800d98c <uxQueueMessagesWaitingFromISR>
 800caf6:	6178      	str	r0, [r7, #20]
 800caf8:	e003      	b.n	800cb02 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800cafa:	6938      	ldr	r0, [r7, #16]
 800cafc:	f000 ff28 	bl	800d950 <uxQueueMessagesWaiting>
 800cb00:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800cb02:	697b      	ldr	r3, [r7, #20]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4a07      	ldr	r2, [pc, #28]	; (800cb38 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	4a06      	ldr	r2, [pc, #24]	; (800cb3c <vApplicationGetIdleTaskMemory+0x30>)
 800cb22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2280      	movs	r2, #128	; 0x80
 800cb28:	601a      	str	r2, [r3, #0]
}
 800cb2a:	bf00      	nop
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	24017390 	.word	0x24017390
 800cb3c:	240173ec 	.word	0x240173ec

0800cb40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	4a07      	ldr	r2, [pc, #28]	; (800cb6c <vApplicationGetTimerTaskMemory+0x2c>)
 800cb50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	4a06      	ldr	r2, [pc, #24]	; (800cb70 <vApplicationGetTimerTaskMemory+0x30>)
 800cb56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb5e:	601a      	str	r2, [r3, #0]
}
 800cb60:	bf00      	nop
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	240175ec 	.word	0x240175ec
 800cb70:	24017648 	.word	0x24017648

0800cb74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f103 0208 	add.w	r2, r3, #8
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f103 0208 	add.w	r2, r3, #8
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f103 0208 	add.w	r2, r3, #8
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cbc2:	bf00      	nop
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbce:	b480      	push	{r7}
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	689a      	ldr	r2, [r3, #8]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	1c5a      	adds	r2, r3, #1
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	601a      	str	r2, [r3, #0]
}
 800cc0a:	bf00      	nop
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc16:	b480      	push	{r7}
 800cc18:	b085      	sub	sp, #20
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2c:	d103      	bne.n	800cc36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	e00c      	b.n	800cc50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3308      	adds	r3, #8
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	e002      	b.n	800cc44 <vListInsert+0x2e>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d2f6      	bcs.n	800cc3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	685a      	ldr	r2, [r3, #4]
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	601a      	str	r2, [r3, #0]
}
 800cc7c:	bf00      	nop
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	6892      	ldr	r2, [r2, #8]
 800cc9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6852      	ldr	r2, [r2, #4]
 800cca8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d103      	bne.n	800ccbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	1e5a      	subs	r2, r3, #1
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10a      	bne.n	800cd06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd06:	f002 fc75 	bl	800f5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd12:	68f9      	ldr	r1, [r7, #12]
 800cd14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd16:	fb01 f303 	mul.w	r3, r1, r3
 800cd1a:	441a      	add	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd36:	3b01      	subs	r3, #1
 800cd38:	68f9      	ldr	r1, [r7, #12]
 800cd3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd3c:	fb01 f303 	mul.w	r3, r1, r3
 800cd40:	441a      	add	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	22ff      	movs	r2, #255	; 0xff
 800cd4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	22ff      	movs	r2, #255	; 0xff
 800cd52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d114      	bne.n	800cd86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d01a      	beq.n	800cd9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	3310      	adds	r3, #16
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f001 fc2d 	bl	800e5c8 <xTaskRemoveFromEventList>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d012      	beq.n	800cd9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd74:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <xQueueGenericReset+0xcc>)
 800cd76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	e009      	b.n	800cd9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3310      	adds	r3, #16
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff fef2 	bl	800cb74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	3324      	adds	r3, #36	; 0x24
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff feed 	bl	800cb74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd9a:	f002 fc5b 	bl	800f654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd9e:	2301      	movs	r3, #1
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	e000ed04 	.word	0xe000ed04

0800cdac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08e      	sub	sp, #56	; 0x38
 800cdb0:	af02      	add	r7, sp, #8
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10a      	bne.n	800cdd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10a      	bne.n	800cdf2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdee:	bf00      	nop
 800cdf0:	e7fe      	b.n	800cdf0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <xQueueGenericCreateStatic+0x52>
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <xQueueGenericCreateStatic+0x56>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e000      	b.n	800ce04 <xQueueGenericCreateStatic+0x58>
 800ce02:	2300      	movs	r3, #0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10a      	bne.n	800ce1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ce08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0c:	f383 8811 	msr	BASEPRI, r3
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	f3bf 8f4f 	dsb	sy
 800ce18:	623b      	str	r3, [r7, #32]
}
 800ce1a:	bf00      	nop
 800ce1c:	e7fe      	b.n	800ce1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d102      	bne.n	800ce2a <xQueueGenericCreateStatic+0x7e>
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <xQueueGenericCreateStatic+0x82>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e000      	b.n	800ce30 <xQueueGenericCreateStatic+0x84>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10a      	bne.n	800ce4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	61fb      	str	r3, [r7, #28]
}
 800ce46:	bf00      	nop
 800ce48:	e7fe      	b.n	800ce48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce4a:	2350      	movs	r3, #80	; 0x50
 800ce4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	2b50      	cmp	r3, #80	; 0x50
 800ce52:	d00a      	beq.n	800ce6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	61bb      	str	r3, [r7, #24]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00d      	beq.n	800ce92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	4613      	mov	r3, r2
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	68b9      	ldr	r1, [r7, #8]
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f000 f83f 	bl	800cf10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3730      	adds	r7, #48	; 0x30
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	; 0x28
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	4613      	mov	r3, r2
 800cea8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10a      	bne.n	800cec6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ceb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	613b      	str	r3, [r7, #16]
}
 800cec2:	bf00      	nop
 800cec4:	e7fe      	b.n	800cec4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	fb02 f303 	mul.w	r3, r2, r3
 800cece:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	3350      	adds	r3, #80	; 0x50
 800ced4:	4618      	mov	r0, r3
 800ced6:	f002 fcaf 	bl	800f838 <pvPortMalloc>
 800ceda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d011      	beq.n	800cf06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	3350      	adds	r3, #80	; 0x50
 800ceea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cef4:	79fa      	ldrb	r2, [r7, #7]
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	4613      	mov	r3, r2
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f000 f805 	bl	800cf10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf06:	69bb      	ldr	r3, [r7, #24]
	}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3720      	adds	r7, #32
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d103      	bne.n	800cf2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	69ba      	ldr	r2, [r7, #24]
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	e002      	b.n	800cf32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	68ba      	ldr	r2, [r7, #8]
 800cf3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf3e:	2101      	movs	r1, #1
 800cf40:	69b8      	ldr	r0, [r7, #24]
 800cf42:	f7ff fecb 	bl	800ccdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	78fa      	ldrb	r2, [r7, #3]
 800cf4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b08a      	sub	sp, #40	; 0x28
 800cf5a:	af02      	add	r7, sp, #8
 800cf5c:	60f8      	str	r0, [r7, #12]
 800cf5e:	60b9      	str	r1, [r7, #8]
 800cf60:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d10a      	bne.n	800cf7e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	61bb      	str	r3, [r7, #24]
}
 800cf7a:	bf00      	nop
 800cf7c:	e7fe      	b.n	800cf7c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d90a      	bls.n	800cf9c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	617b      	str	r3, [r7, #20]
}
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff ff00 	bl	800cdac <xQueueGenericCreateStatic>
 800cfac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	68ba      	ldr	r2, [r7, #8]
 800cfb8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cfba:	69fb      	ldr	r3, [r7, #28]
	}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3720      	adds	r7, #32
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	613b      	str	r3, [r7, #16]
}
 800cfe6:	bf00      	nop
 800cfe8:	e7fe      	b.n	800cfe8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d90a      	bls.n	800d008 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	60fb      	str	r3, [r7, #12]
}
 800d004:	bf00      	nop
 800d006:	e7fe      	b.n	800d006 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d008:	2202      	movs	r2, #2
 800d00a:	2100      	movs	r1, #0
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff ff45 	bl	800ce9c <xQueueGenericCreate>
 800d012:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	683a      	ldr	r2, [r7, #0]
 800d01e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d020:	697b      	ldr	r3, [r7, #20]
	}
 800d022:	4618      	mov	r0, r3
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08e      	sub	sp, #56	; 0x38
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
 800d038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d03a:	2300      	movs	r3, #0
 800d03c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10a      	bne.n	800d05e <xQueueGenericSend+0x32>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d05a:	bf00      	nop
 800d05c:	e7fe      	b.n	800d05c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <xQueueGenericSend+0x40>
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <xQueueGenericSend+0x44>
 800d06c:	2301      	movs	r3, #1
 800d06e:	e000      	b.n	800d072 <xQueueGenericSend+0x46>
 800d070:	2300      	movs	r3, #0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10a      	bne.n	800d08c <xQueueGenericSend+0x60>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d088:	bf00      	nop
 800d08a:	e7fe      	b.n	800d08a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b02      	cmp	r3, #2
 800d090:	d103      	bne.n	800d09a <xQueueGenericSend+0x6e>
 800d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d096:	2b01      	cmp	r3, #1
 800d098:	d101      	bne.n	800d09e <xQueueGenericSend+0x72>
 800d09a:	2301      	movs	r3, #1
 800d09c:	e000      	b.n	800d0a0 <xQueueGenericSend+0x74>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10a      	bne.n	800d0ba <xQueueGenericSend+0x8e>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	623b      	str	r3, [r7, #32]
}
 800d0b6:	bf00      	nop
 800d0b8:	e7fe      	b.n	800d0b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0ba:	f001 fc43 	bl	800e944 <xTaskGetSchedulerState>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <xQueueGenericSend+0x9e>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <xQueueGenericSend+0xa2>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <xQueueGenericSend+0xa4>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10a      	bne.n	800d0ea <xQueueGenericSend+0xbe>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	61fb      	str	r3, [r7, #28]
}
 800d0e6:	bf00      	nop
 800d0e8:	e7fe      	b.n	800d0e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ea:	f002 fa83 	bl	800f5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d302      	bcc.n	800d100 <xQueueGenericSend+0xd4>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d129      	bne.n	800d154 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	68b9      	ldr	r1, [r7, #8]
 800d104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d106:	f000 fc9a 	bl	800da3e <prvCopyDataToQueue>
 800d10a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d110:	2b00      	cmp	r3, #0
 800d112:	d010      	beq.n	800d136 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d116:	3324      	adds	r3, #36	; 0x24
 800d118:	4618      	mov	r0, r3
 800d11a:	f001 fa55 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d013      	beq.n	800d14c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d124:	4b3f      	ldr	r3, [pc, #252]	; (800d224 <xQueueGenericSend+0x1f8>)
 800d126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	e00a      	b.n	800d14c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d007      	beq.n	800d14c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d13c:	4b39      	ldr	r3, [pc, #228]	; (800d224 <xQueueGenericSend+0x1f8>)
 800d13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d14c:	f002 fa82 	bl	800f654 <vPortExitCritical>
				return pdPASS;
 800d150:	2301      	movs	r3, #1
 800d152:	e063      	b.n	800d21c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d103      	bne.n	800d162 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d15a:	f002 fa7b 	bl	800f654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d15e:	2300      	movs	r3, #0
 800d160:	e05c      	b.n	800d21c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d164:	2b00      	cmp	r3, #0
 800d166:	d106      	bne.n	800d176 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d168:	f107 0314 	add.w	r3, r7, #20
 800d16c:	4618      	mov	r0, r3
 800d16e:	f001 fa8f 	bl	800e690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d172:	2301      	movs	r3, #1
 800d174:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d176:	f002 fa6d 	bl	800f654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d17a:	f001 f801 	bl	800e180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d17e:	f002 fa39 	bl	800f5f4 <vPortEnterCritical>
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d188:	b25b      	sxtb	r3, r3
 800d18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18e:	d103      	bne.n	800d198 <xQueueGenericSend+0x16c>
 800d190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d19e:	b25b      	sxtb	r3, r3
 800d1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a4:	d103      	bne.n	800d1ae <xQueueGenericSend+0x182>
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ae:	f002 fa51 	bl	800f654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1b2:	1d3a      	adds	r2, r7, #4
 800d1b4:	f107 0314 	add.w	r3, r7, #20
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f001 fa7e 	bl	800e6bc <xTaskCheckForTimeOut>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d124      	bne.n	800d210 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1c8:	f000 fd31 	bl	800dc2e <prvIsQueueFull>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d018      	beq.n	800d204 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d4:	3310      	adds	r3, #16
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f001 f9a4 	bl	800e528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e2:	f000 fcbc 	bl	800db5e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d1e6:	f000 ffd9 	bl	800e19c <xTaskResumeAll>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f47f af7c 	bne.w	800d0ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d1f2:	4b0c      	ldr	r3, [pc, #48]	; (800d224 <xQueueGenericSend+0x1f8>)
 800d1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	e772      	b.n	800d0ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d206:	f000 fcaa 	bl	800db5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d20a:	f000 ffc7 	bl	800e19c <xTaskResumeAll>
 800d20e:	e76c      	b.n	800d0ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d212:	f000 fca4 	bl	800db5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d216:	f000 ffc1 	bl	800e19c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d21a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3738      	adds	r7, #56	; 0x38
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	e000ed04 	.word	0xe000ed04

0800d228 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b090      	sub	sp, #64	; 0x40
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
 800d234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d103      	bne.n	800d264 <xQueueGenericSendFromISR+0x3c>
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <xQueueGenericSendFromISR+0x40>
 800d264:	2301      	movs	r3, #1
 800d266:	e000      	b.n	800d26a <xQueueGenericSendFromISR+0x42>
 800d268:	2300      	movs	r3, #0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10a      	bne.n	800d284 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d280:	bf00      	nop
 800d282:	e7fe      	b.n	800d282 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2b02      	cmp	r3, #2
 800d288:	d103      	bne.n	800d292 <xQueueGenericSendFromISR+0x6a>
 800d28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d101      	bne.n	800d296 <xQueueGenericSendFromISR+0x6e>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <xQueueGenericSendFromISR+0x70>
 800d296:	2300      	movs	r3, #0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10a      	bne.n	800d2b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	623b      	str	r3, [r7, #32]
}
 800d2ae:	bf00      	nop
 800d2b0:	e7fe      	b.n	800d2b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2b2:	f002 fa81 	bl	800f7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d2b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	61fa      	str	r2, [r7, #28]
 800d2cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d302      	bcc.n	800d2e4 <xQueueGenericSendFromISR+0xbc>
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d12f      	bne.n	800d344 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2fa:	f000 fba0 	bl	800da3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d2fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d306:	d112      	bne.n	800d32e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d016      	beq.n	800d33e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	3324      	adds	r3, #36	; 0x24
 800d314:	4618      	mov	r0, r3
 800d316:	f001 f957 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00e      	beq.n	800d33e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00b      	beq.n	800d33e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	e007      	b.n	800d33e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d32e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d332:	3301      	adds	r3, #1
 800d334:	b2db      	uxtb	r3, r3
 800d336:	b25a      	sxtb	r2, r3
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d33e:	2301      	movs	r3, #1
 800d340:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d342:	e001      	b.n	800d348 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d344:	2300      	movs	r3, #0
 800d346:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d352:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d356:	4618      	mov	r0, r3
 800d358:	3740      	adds	r7, #64	; 0x40
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b08e      	sub	sp, #56	; 0x38
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10a      	bne.n	800d388 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d376:	f383 8811 	msr	BASEPRI, r3
 800d37a:	f3bf 8f6f 	isb	sy
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	623b      	str	r3, [r7, #32]
}
 800d384:	bf00      	nop
 800d386:	e7fe      	b.n	800d386 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00a      	beq.n	800d3a6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	61fb      	str	r3, [r7, #28]
}
 800d3a2:	bf00      	nop
 800d3a4:	e7fe      	b.n	800d3a4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d103      	bne.n	800d3b6 <xQueueGiveFromISR+0x58>
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <xQueueGiveFromISR+0x5c>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <xQueueGiveFromISR+0x5e>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10a      	bne.n	800d3d6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	61bb      	str	r3, [r7, #24]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3d6:	f002 f9ef 	bl	800f7b8 <vPortValidateInterruptPriority>
	__asm volatile
 800d3da:	f3ef 8211 	mrs	r2, BASEPRI
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	617a      	str	r2, [r7, #20]
 800d3f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d3f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d402:	429a      	cmp	r2, r3
 800d404:	d22b      	bcs.n	800d45e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	1c5a      	adds	r2, r3, #1
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d420:	d112      	bne.n	800d448 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d426:	2b00      	cmp	r3, #0
 800d428:	d016      	beq.n	800d458 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	3324      	adds	r3, #36	; 0x24
 800d42e:	4618      	mov	r0, r3
 800d430:	f001 f8ca 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00e      	beq.n	800d458 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	2201      	movs	r2, #1
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	e007      	b.n	800d458 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d44c:	3301      	adds	r3, #1
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	b25a      	sxtb	r2, r3
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d458:	2301      	movs	r3, #1
 800d45a:	637b      	str	r3, [r7, #52]	; 0x34
 800d45c:	e001      	b.n	800d462 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d45e:	2300      	movs	r3, #0
 800d460:	637b      	str	r3, [r7, #52]	; 0x34
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f383 8811 	msr	BASEPRI, r3
}
 800d46c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d470:	4618      	mov	r0, r3
 800d472:	3738      	adds	r7, #56	; 0x38
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08c      	sub	sp, #48	; 0x30
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d484:	2300      	movs	r3, #0
 800d486:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10a      	bne.n	800d4a8 <xQueueReceive+0x30>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	623b      	str	r3, [r7, #32]
}
 800d4a4:	bf00      	nop
 800d4a6:	e7fe      	b.n	800d4a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d103      	bne.n	800d4b6 <xQueueReceive+0x3e>
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <xQueueReceive+0x42>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e000      	b.n	800d4bc <xQueueReceive+0x44>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xQueueReceive+0x5e>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	61fb      	str	r3, [r7, #28]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4d6:	f001 fa35 	bl	800e944 <xTaskGetSchedulerState>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <xQueueReceive+0x6e>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <xQueueReceive+0x72>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <xQueueReceive+0x74>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <xQueueReceive+0x8e>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	61bb      	str	r3, [r7, #24]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d506:	f002 f875 	bl	800f5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	2b00      	cmp	r3, #0
 800d514:	d01f      	beq.n	800d556 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d51a:	f000 fafa 	bl	800db12 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d520:	1e5a      	subs	r2, r3, #1
 800d522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d524:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00f      	beq.n	800d54e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d530:	3310      	adds	r3, #16
 800d532:	4618      	mov	r0, r3
 800d534:	f001 f848 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d53e:	4b3d      	ldr	r3, [pc, #244]	; (800d634 <xQueueReceive+0x1bc>)
 800d540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d54e:	f002 f881 	bl	800f654 <vPortExitCritical>
				return pdPASS;
 800d552:	2301      	movs	r3, #1
 800d554:	e069      	b.n	800d62a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d103      	bne.n	800d564 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d55c:	f002 f87a 	bl	800f654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d560:	2300      	movs	r3, #0
 800d562:	e062      	b.n	800d62a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d56a:	f107 0310 	add.w	r3, r7, #16
 800d56e:	4618      	mov	r0, r3
 800d570:	f001 f88e 	bl	800e690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d574:	2301      	movs	r3, #1
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d578:	f002 f86c 	bl	800f654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d57c:	f000 fe00 	bl	800e180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d580:	f002 f838 	bl	800f5f4 <vPortEnterCritical>
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d58a:	b25b      	sxtb	r3, r3
 800d58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d590:	d103      	bne.n	800d59a <xQueueReceive+0x122>
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5a0:	b25b      	sxtb	r3, r3
 800d5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a6:	d103      	bne.n	800d5b0 <xQueueReceive+0x138>
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5b0:	f002 f850 	bl	800f654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5b4:	1d3a      	adds	r2, r7, #4
 800d5b6:	f107 0310 	add.w	r3, r7, #16
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f001 f87d 	bl	800e6bc <xTaskCheckForTimeOut>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d123      	bne.n	800d610 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ca:	f000 fb1a 	bl	800dc02 <prvIsQueueEmpty>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d017      	beq.n	800d604 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	3324      	adds	r3, #36	; 0x24
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 ffa3 	bl	800e528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5e4:	f000 fabb 	bl	800db5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5e8:	f000 fdd8 	bl	800e19c <xTaskResumeAll>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d189      	bne.n	800d506 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d5f2:	4b10      	ldr	r3, [pc, #64]	; (800d634 <xQueueReceive+0x1bc>)
 800d5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	e780      	b.n	800d506 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d606:	f000 faaa 	bl	800db5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d60a:	f000 fdc7 	bl	800e19c <xTaskResumeAll>
 800d60e:	e77a      	b.n	800d506 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d612:	f000 faa4 	bl	800db5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d616:	f000 fdc1 	bl	800e19c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d61a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d61c:	f000 faf1 	bl	800dc02 <prvIsQueueEmpty>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	f43f af6f 	beq.w	800d506 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3730      	adds	r7, #48	; 0x30
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	e000ed04 	.word	0xe000ed04

0800d638 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08e      	sub	sp, #56	; 0x38
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d642:	2300      	movs	r3, #0
 800d644:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d64a:	2300      	movs	r3, #0
 800d64c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10a      	bne.n	800d66a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d658:	f383 8811 	msr	BASEPRI, r3
 800d65c:	f3bf 8f6f 	isb	sy
 800d660:	f3bf 8f4f 	dsb	sy
 800d664:	623b      	str	r3, [r7, #32]
}
 800d666:	bf00      	nop
 800d668:	e7fe      	b.n	800d668 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00a      	beq.n	800d688 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	61fb      	str	r3, [r7, #28]
}
 800d684:	bf00      	nop
 800d686:	e7fe      	b.n	800d686 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d688:	f001 f95c 	bl	800e944 <xTaskGetSchedulerState>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d102      	bne.n	800d698 <xQueueSemaphoreTake+0x60>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <xQueueSemaphoreTake+0x64>
 800d698:	2301      	movs	r3, #1
 800d69a:	e000      	b.n	800d69e <xQueueSemaphoreTake+0x66>
 800d69c:	2300      	movs	r3, #0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10a      	bne.n	800d6b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	61bb      	str	r3, [r7, #24]
}
 800d6b4:	bf00      	nop
 800d6b6:	e7fe      	b.n	800d6b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6b8:	f001 ff9c 	bl	800f5f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d024      	beq.n	800d712 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	1e5a      	subs	r2, r3, #1
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d104      	bne.n	800d6e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d6d8:	f001 faaa 	bl	800ec30 <pvTaskIncrementMutexHeldCount>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00f      	beq.n	800d70a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	3310      	adds	r3, #16
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 ff6a 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d007      	beq.n	800d70a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6fa:	4b54      	ldr	r3, [pc, #336]	; (800d84c <xQueueSemaphoreTake+0x214>)
 800d6fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d70a:	f001 ffa3 	bl	800f654 <vPortExitCritical>
				return pdPASS;
 800d70e:	2301      	movs	r3, #1
 800d710:	e097      	b.n	800d842 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d111      	bne.n	800d73c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	617b      	str	r3, [r7, #20]
}
 800d730:	bf00      	nop
 800d732:	e7fe      	b.n	800d732 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d734:	f001 ff8e 	bl	800f654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d738:	2300      	movs	r3, #0
 800d73a:	e082      	b.n	800d842 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d106      	bne.n	800d750 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d742:	f107 030c 	add.w	r3, r7, #12
 800d746:	4618      	mov	r0, r3
 800d748:	f000 ffa2 	bl	800e690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d74c:	2301      	movs	r3, #1
 800d74e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d750:	f001 ff80 	bl	800f654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d754:	f000 fd14 	bl	800e180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d758:	f001 ff4c 	bl	800f5f4 <vPortEnterCritical>
 800d75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d762:	b25b      	sxtb	r3, r3
 800d764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d768:	d103      	bne.n	800d772 <xQueueSemaphoreTake+0x13a>
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d778:	b25b      	sxtb	r3, r3
 800d77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d77e:	d103      	bne.n	800d788 <xQueueSemaphoreTake+0x150>
 800d780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d788:	f001 ff64 	bl	800f654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d78c:	463a      	mov	r2, r7
 800d78e:	f107 030c 	add.w	r3, r7, #12
 800d792:	4611      	mov	r1, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f000 ff91 	bl	800e6bc <xTaskCheckForTimeOut>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d132      	bne.n	800d806 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7a2:	f000 fa2e 	bl	800dc02 <prvIsQueueEmpty>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d026      	beq.n	800d7fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d109      	bne.n	800d7c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d7b4:	f001 ff1e 	bl	800f5f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f001 f8df 	bl	800e980 <xTaskPriorityInherit>
 800d7c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d7c4:	f001 ff46 	bl	800f654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	3324      	adds	r3, #36	; 0x24
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f000 fea9 	bl	800e528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7d8:	f000 f9c1 	bl	800db5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7dc:	f000 fcde 	bl	800e19c <xTaskResumeAll>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f47f af68 	bne.w	800d6b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d7e8:	4b18      	ldr	r3, [pc, #96]	; (800d84c <xQueueSemaphoreTake+0x214>)
 800d7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	e75e      	b.n	800d6b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d7fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7fc:	f000 f9af 	bl	800db5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d800:	f000 fccc 	bl	800e19c <xTaskResumeAll>
 800d804:	e758      	b.n	800d6b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d808:	f000 f9a9 	bl	800db5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d80c:	f000 fcc6 	bl	800e19c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d812:	f000 f9f6 	bl	800dc02 <prvIsQueueEmpty>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f43f af4d 	beq.w	800d6b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00d      	beq.n	800d840 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d824:	f001 fee6 	bl	800f5f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d82a:	f000 f8f0 	bl	800da0e <prvGetDisinheritPriorityAfterTimeout>
 800d82e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d836:	4618      	mov	r0, r3
 800d838:	f001 f978 	bl	800eb2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d83c:	f001 ff0a 	bl	800f654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d842:	4618      	mov	r0, r3
 800d844:	3738      	adds	r7, #56	; 0x38
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	e000ed04 	.word	0xe000ed04

0800d850 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08e      	sub	sp, #56	; 0x38
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	623b      	str	r3, [r7, #32]
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d103      	bne.n	800d88a <xQueueReceiveFromISR+0x3a>
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <xQueueReceiveFromISR+0x3e>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <xQueueReceiveFromISR+0x40>
 800d88e:	2300      	movs	r3, #0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10a      	bne.n	800d8aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	61fb      	str	r3, [r7, #28]
}
 800d8a6:	bf00      	nop
 800d8a8:	e7fe      	b.n	800d8a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8aa:	f001 ff85 	bl	800f7b8 <vPortValidateInterruptPriority>
	__asm volatile
 800d8ae:	f3ef 8211 	mrs	r2, BASEPRI
 800d8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	61ba      	str	r2, [r7, #24]
 800d8c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d8c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d02f      	beq.n	800d936 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8e0:	68b9      	ldr	r1, [r7, #8]
 800d8e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8e4:	f000 f915 	bl	800db12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	1e5a      	subs	r2, r3, #1
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d8f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f8:	d112      	bne.n	800d920 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d016      	beq.n	800d930 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d904:	3310      	adds	r3, #16
 800d906:	4618      	mov	r0, r3
 800d908:	f000 fe5e 	bl	800e5c8 <xTaskRemoveFromEventList>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00e      	beq.n	800d930 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00b      	beq.n	800d930 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	e007      	b.n	800d930 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d924:	3301      	adds	r3, #1
 800d926:	b2db      	uxtb	r3, r3
 800d928:	b25a      	sxtb	r2, r3
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d930:	2301      	movs	r3, #1
 800d932:	637b      	str	r3, [r7, #52]	; 0x34
 800d934:	e001      	b.n	800d93a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d936:	2300      	movs	r3, #0
 800d938:	637b      	str	r3, [r7, #52]	; 0x34
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f383 8811 	msr	BASEPRI, r3
}
 800d944:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3738      	adds	r7, #56	; 0x38
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	60bb      	str	r3, [r7, #8]
}
 800d970:	bf00      	nop
 800d972:	e7fe      	b.n	800d972 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d974:	f001 fe3e 	bl	800f5f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d97e:	f001 fe69 	bl	800f654 <vPortExitCritical>

	return uxReturn;
 800d982:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d984:	4618      	mov	r0, r3
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10a      	bne.n	800d9b4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	60fb      	str	r3, [r7, #12]
}
 800d9b0:	bf00      	nop
 800d9b2:	e7fe      	b.n	800d9b2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d9ba:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d9bc:	4618      	mov	r0, r3
 800d9be:	371c      	adds	r7, #28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10a      	bne.n	800d9f0 <vQueueDelete+0x28>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	60bb      	str	r3, [r7, #8]
}
 800d9ec:	bf00      	nop
 800d9ee:	e7fe      	b.n	800d9ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 f95f 	bl	800dcb4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f001 ffe5 	bl	800f9d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da06:	bf00      	nop
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da0e:	b480      	push	{r7}
 800da10:	b085      	sub	sp, #20
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d006      	beq.n	800da2c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800da28:	60fb      	str	r3, [r7, #12]
 800da2a:	e001      	b.n	800da30 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da30:	68fb      	ldr	r3, [r7, #12]
	}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b086      	sub	sp, #24
 800da42:	af00      	add	r7, sp, #0
 800da44:	60f8      	str	r0, [r7, #12]
 800da46:	60b9      	str	r1, [r7, #8]
 800da48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da4a:	2300      	movs	r3, #0
 800da4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10d      	bne.n	800da78 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d14d      	bne.n	800db00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	4618      	mov	r0, r3
 800da6a:	f000 fff1 	bl	800ea50 <xTaskPriorityDisinherit>
 800da6e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	609a      	str	r2, [r3, #8]
 800da76:	e043      	b.n	800db00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d119      	bne.n	800dab2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6858      	ldr	r0, [r3, #4]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da86:	461a      	mov	r2, r3
 800da88:	68b9      	ldr	r1, [r7, #8]
 800da8a:	f003 f9ab 	bl	8010de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da96:	441a      	add	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d32b      	bcc.n	800db00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	605a      	str	r2, [r3, #4]
 800dab0:	e026      	b.n	800db00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	68d8      	ldr	r0, [r3, #12]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daba:	461a      	mov	r2, r3
 800dabc:	68b9      	ldr	r1, [r7, #8]
 800dabe:	f003 f991 	bl	8010de4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	68da      	ldr	r2, [r3, #12]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daca:	425b      	negs	r3, r3
 800dacc:	441a      	add	r2, r3
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	68da      	ldr	r2, [r3, #12]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d207      	bcs.n	800daee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	689a      	ldr	r2, [r3, #8]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae6:	425b      	negs	r3, r3
 800dae8:	441a      	add	r2, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d105      	bne.n	800db00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d002      	beq.n	800db00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	3b01      	subs	r3, #1
 800dafe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db08:	697b      	ldr	r3, [r7, #20]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db20:	2b00      	cmp	r3, #0
 800db22:	d018      	beq.n	800db56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68da      	ldr	r2, [r3, #12]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2c:	441a      	add	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d303      	bcc.n	800db46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	68d9      	ldr	r1, [r3, #12]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db4e:	461a      	mov	r2, r3
 800db50:	6838      	ldr	r0, [r7, #0]
 800db52:	f003 f947 	bl	8010de4 <memcpy>
	}
}
 800db56:	bf00      	nop
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b084      	sub	sp, #16
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db66:	f001 fd45 	bl	800f5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db70:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db72:	e011      	b.n	800db98 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d012      	beq.n	800dba2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3324      	adds	r3, #36	; 0x24
 800db80:	4618      	mov	r0, r3
 800db82:	f000 fd21 	bl	800e5c8 <xTaskRemoveFromEventList>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db8c:	f000 fdf8 	bl	800e780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db90:	7bfb      	ldrb	r3, [r7, #15]
 800db92:	3b01      	subs	r3, #1
 800db94:	b2db      	uxtb	r3, r3
 800db96:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	dce9      	bgt.n	800db74 <prvUnlockQueue+0x16>
 800dba0:	e000      	b.n	800dba4 <prvUnlockQueue+0x46>
					break;
 800dba2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	22ff      	movs	r2, #255	; 0xff
 800dba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dbac:	f001 fd52 	bl	800f654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dbb0:	f001 fd20 	bl	800f5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbbc:	e011      	b.n	800dbe2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	691b      	ldr	r3, [r3, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d012      	beq.n	800dbec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	3310      	adds	r3, #16
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f000 fcfc 	bl	800e5c8 <xTaskRemoveFromEventList>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbd6:	f000 fdd3 	bl	800e780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dbda:	7bbb      	ldrb	r3, [r7, #14]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	dce9      	bgt.n	800dbbe <prvUnlockQueue+0x60>
 800dbea:	e000      	b.n	800dbee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dbec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	22ff      	movs	r2, #255	; 0xff
 800dbf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dbf6:	f001 fd2d 	bl	800f654 <vPortExitCritical>
}
 800dbfa:	bf00      	nop
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc0a:	f001 fcf3 	bl	800f5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d102      	bne.n	800dc1c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc16:	2301      	movs	r3, #1
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	e001      	b.n	800dc20 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc20:	f001 fd18 	bl	800f654 <vPortExitCritical>

	return xReturn;
 800dc24:	68fb      	ldr	r3, [r7, #12]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b084      	sub	sp, #16
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc36:	f001 fcdd 	bl	800f5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d102      	bne.n	800dc4c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc46:	2301      	movs	r3, #1
 800dc48:	60fb      	str	r3, [r7, #12]
 800dc4a:	e001      	b.n	800dc50 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc50:	f001 fd00 	bl	800f654 <vPortExitCritical>

	return xReturn;
 800dc54:	68fb      	ldr	r3, [r7, #12]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	60fb      	str	r3, [r7, #12]
 800dc6e:	e014      	b.n	800dc9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc70:	4a0f      	ldr	r2, [pc, #60]	; (800dcb0 <vQueueAddToRegistry+0x50>)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10b      	bne.n	800dc94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc7c:	490c      	ldr	r1, [pc, #48]	; (800dcb0 <vQueueAddToRegistry+0x50>)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	683a      	ldr	r2, [r7, #0]
 800dc82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc86:	4a0a      	ldr	r2, [pc, #40]	; (800dcb0 <vQueueAddToRegistry+0x50>)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	4413      	add	r3, r2
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc92:	e006      	b.n	800dca2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	3301      	adds	r3, #1
 800dc98:	60fb      	str	r3, [r7, #12]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b07      	cmp	r3, #7
 800dc9e:	d9e7      	bls.n	800dc70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dca0:	bf00      	nop
 800dca2:	bf00      	nop
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	24017a48 	.word	0x24017a48

0800dcb4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	60fb      	str	r3, [r7, #12]
 800dcc0:	e016      	b.n	800dcf0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dcc2:	4a10      	ldr	r2, [pc, #64]	; (800dd04 <vQueueUnregisterQueue+0x50>)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	00db      	lsls	r3, r3, #3
 800dcc8:	4413      	add	r3, r2
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d10b      	bne.n	800dcea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dcd2:	4a0c      	ldr	r2, [pc, #48]	; (800dd04 <vQueueUnregisterQueue+0x50>)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dcdc:	4a09      	ldr	r2, [pc, #36]	; (800dd04 <vQueueUnregisterQueue+0x50>)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	00db      	lsls	r3, r3, #3
 800dce2:	4413      	add	r3, r2
 800dce4:	2200      	movs	r2, #0
 800dce6:	605a      	str	r2, [r3, #4]
				break;
 800dce8:	e006      	b.n	800dcf8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	3301      	adds	r3, #1
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b07      	cmp	r3, #7
 800dcf4:	d9e5      	bls.n	800dcc2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dcf6:	bf00      	nop
 800dcf8:	bf00      	nop
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	24017a48 	.word	0x24017a48

0800dd08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd18:	f001 fc6c 	bl	800f5f4 <vPortEnterCritical>
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd22:	b25b      	sxtb	r3, r3
 800dd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd28:	d103      	bne.n	800dd32 <vQueueWaitForMessageRestricted+0x2a>
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd38:	b25b      	sxtb	r3, r3
 800dd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd3e:	d103      	bne.n	800dd48 <vQueueWaitForMessageRestricted+0x40>
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd48:	f001 fc84 	bl	800f654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d106      	bne.n	800dd62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	3324      	adds	r3, #36	; 0x24
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	68b9      	ldr	r1, [r7, #8]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f000 fc07 	bl	800e570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd62:	6978      	ldr	r0, [r7, #20]
 800dd64:	f7ff fefb 	bl	800db5e <prvUnlockQueue>
	}
 800dd68:	bf00      	nop
 800dd6a:	3718      	adds	r7, #24
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b08e      	sub	sp, #56	; 0x38
 800dd74:	af04      	add	r7, sp, #16
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	607a      	str	r2, [r7, #4]
 800dd7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10a      	bne.n	800dd9a <xTaskCreateStatic+0x2a>
	__asm volatile
 800dd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd88:	f383 8811 	msr	BASEPRI, r3
 800dd8c:	f3bf 8f6f 	isb	sy
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	623b      	str	r3, [r7, #32]
}
 800dd96:	bf00      	nop
 800dd98:	e7fe      	b.n	800dd98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10a      	bne.n	800ddb6 <xTaskCreateStatic+0x46>
	__asm volatile
 800dda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	61fb      	str	r3, [r7, #28]
}
 800ddb2:	bf00      	nop
 800ddb4:	e7fe      	b.n	800ddb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddb6:	235c      	movs	r3, #92	; 0x5c
 800ddb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b5c      	cmp	r3, #92	; 0x5c
 800ddbe:	d00a      	beq.n	800ddd6 <xTaskCreateStatic+0x66>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	61bb      	str	r3, [r7, #24]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ddd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d01e      	beq.n	800de1c <xTaskCreateStatic+0xac>
 800ddde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d01b      	beq.n	800de1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	2202      	movs	r2, #2
 800ddf2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	9303      	str	r3, [sp, #12]
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	9302      	str	r3, [sp, #8]
 800ddfe:	f107 0314 	add.w	r3, r7, #20
 800de02:	9301      	str	r3, [sp, #4]
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	68b9      	ldr	r1, [r7, #8]
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f000 f850 	bl	800deb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de16:	f000 f8dd 	bl	800dfd4 <prvAddNewTaskToReadyList>
 800de1a:	e001      	b.n	800de20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de1c:	2300      	movs	r3, #0
 800de1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de20:	697b      	ldr	r3, [r7, #20]
	}
 800de22:	4618      	mov	r0, r3
 800de24:	3728      	adds	r7, #40	; 0x28
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b08c      	sub	sp, #48	; 0x30
 800de2e:	af04      	add	r7, sp, #16
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	603b      	str	r3, [r7, #0]
 800de36:	4613      	mov	r3, r2
 800de38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de3a:	88fb      	ldrh	r3, [r7, #6]
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4618      	mov	r0, r3
 800de40:	f001 fcfa 	bl	800f838 <pvPortMalloc>
 800de44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00e      	beq.n	800de6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de4c:	205c      	movs	r0, #92	; 0x5c
 800de4e:	f001 fcf3 	bl	800f838 <pvPortMalloc>
 800de52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d003      	beq.n	800de62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	697a      	ldr	r2, [r7, #20]
 800de5e:	631a      	str	r2, [r3, #48]	; 0x30
 800de60:	e005      	b.n	800de6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de62:	6978      	ldr	r0, [r7, #20]
 800de64:	f001 fdb4 	bl	800f9d0 <vPortFree>
 800de68:	e001      	b.n	800de6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d017      	beq.n	800dea4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	2200      	movs	r2, #0
 800de78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de7c:	88fa      	ldrh	r2, [r7, #6]
 800de7e:	2300      	movs	r3, #0
 800de80:	9303      	str	r3, [sp, #12]
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	9302      	str	r3, [sp, #8]
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	9301      	str	r3, [sp, #4]
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f000 f80e 	bl	800deb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de98:	69f8      	ldr	r0, [r7, #28]
 800de9a:	f000 f89b 	bl	800dfd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de9e:	2301      	movs	r3, #1
 800dea0:	61bb      	str	r3, [r7, #24]
 800dea2:	e002      	b.n	800deaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dea4:	f04f 33ff 	mov.w	r3, #4294967295
 800dea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800deaa:	69bb      	ldr	r3, [r7, #24]
	}
 800deac:	4618      	mov	r0, r3
 800deae:	3720      	adds	r7, #32
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b088      	sub	sp, #32
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	461a      	mov	r2, r3
 800decc:	21a5      	movs	r1, #165	; 0xa5
 800dece:	f002 ff97 	bl	8010e00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ded2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ded6:	6879      	ldr	r1, [r7, #4]
 800ded8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dedc:	440b      	add	r3, r1
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	f023 0307 	bic.w	r3, r3, #7
 800deea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00a      	beq.n	800df0c <prvInitialiseNewTask+0x58>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	617b      	str	r3, [r7, #20]
}
 800df08:	bf00      	nop
 800df0a:	e7fe      	b.n	800df0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d01f      	beq.n	800df52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df12:	2300      	movs	r3, #0
 800df14:	61fb      	str	r3, [r7, #28]
 800df16:	e012      	b.n	800df3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	4413      	add	r3, r2
 800df1e:	7819      	ldrb	r1, [r3, #0]
 800df20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	4413      	add	r3, r2
 800df26:	3334      	adds	r3, #52	; 0x34
 800df28:	460a      	mov	r2, r1
 800df2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	4413      	add	r3, r2
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d006      	beq.n	800df46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	3301      	adds	r3, #1
 800df3c:	61fb      	str	r3, [r7, #28]
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	2b0f      	cmp	r3, #15
 800df42:	d9e9      	bls.n	800df18 <prvInitialiseNewTask+0x64>
 800df44:	e000      	b.n	800df48 <prvInitialiseNewTask+0x94>
			{
				break;
 800df46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df50:	e003      	b.n	800df5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	2200      	movs	r2, #0
 800df56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5c:	2b37      	cmp	r3, #55	; 0x37
 800df5e:	d901      	bls.n	800df64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df60:	2337      	movs	r3, #55	; 0x37
 800df62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800df70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df72:	2200      	movs	r2, #0
 800df74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df78:	3304      	adds	r3, #4
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe fe1a 	bl	800cbb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	3318      	adds	r3, #24
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe fe15 	bl	800cbb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	68f9      	ldr	r1, [r7, #12]
 800dfb2:	69b8      	ldr	r0, [r7, #24]
 800dfb4:	f001 f9f2 	bl	800f39c <pxPortInitialiseStack>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfca:	bf00      	nop
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
	...

0800dfd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dfdc:	f001 fb0a 	bl	800f5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dfe0:	4b2d      	ldr	r3, [pc, #180]	; (800e098 <prvAddNewTaskToReadyList+0xc4>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	4a2c      	ldr	r2, [pc, #176]	; (800e098 <prvAddNewTaskToReadyList+0xc4>)
 800dfe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dfea:	4b2c      	ldr	r3, [pc, #176]	; (800e09c <prvAddNewTaskToReadyList+0xc8>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d109      	bne.n	800e006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dff2:	4a2a      	ldr	r2, [pc, #168]	; (800e09c <prvAddNewTaskToReadyList+0xc8>)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dff8:	4b27      	ldr	r3, [pc, #156]	; (800e098 <prvAddNewTaskToReadyList+0xc4>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d110      	bne.n	800e022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e000:	f000 fbe2 	bl	800e7c8 <prvInitialiseTaskLists>
 800e004:	e00d      	b.n	800e022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e006:	4b26      	ldr	r3, [pc, #152]	; (800e0a0 <prvAddNewTaskToReadyList+0xcc>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d109      	bne.n	800e022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e00e:	4b23      	ldr	r3, [pc, #140]	; (800e09c <prvAddNewTaskToReadyList+0xc8>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e018:	429a      	cmp	r2, r3
 800e01a:	d802      	bhi.n	800e022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e01c:	4a1f      	ldr	r2, [pc, #124]	; (800e09c <prvAddNewTaskToReadyList+0xc8>)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e022:	4b20      	ldr	r3, [pc, #128]	; (800e0a4 <prvAddNewTaskToReadyList+0xd0>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	3301      	adds	r3, #1
 800e028:	4a1e      	ldr	r2, [pc, #120]	; (800e0a4 <prvAddNewTaskToReadyList+0xd0>)
 800e02a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e02c:	4b1d      	ldr	r3, [pc, #116]	; (800e0a4 <prvAddNewTaskToReadyList+0xd0>)
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e038:	4b1b      	ldr	r3, [pc, #108]	; (800e0a8 <prvAddNewTaskToReadyList+0xd4>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d903      	bls.n	800e048 <prvAddNewTaskToReadyList+0x74>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e044:	4a18      	ldr	r2, [pc, #96]	; (800e0a8 <prvAddNewTaskToReadyList+0xd4>)
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04c:	4613      	mov	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4a15      	ldr	r2, [pc, #84]	; (800e0ac <prvAddNewTaskToReadyList+0xd8>)
 800e056:	441a      	add	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	3304      	adds	r3, #4
 800e05c:	4619      	mov	r1, r3
 800e05e:	4610      	mov	r0, r2
 800e060:	f7fe fdb5 	bl	800cbce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e064:	f001 faf6 	bl	800f654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e068:	4b0d      	ldr	r3, [pc, #52]	; (800e0a0 <prvAddNewTaskToReadyList+0xcc>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00e      	beq.n	800e08e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e070:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <prvAddNewTaskToReadyList+0xc8>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d207      	bcs.n	800e08e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e07e:	4b0c      	ldr	r3, [pc, #48]	; (800e0b0 <prvAddNewTaskToReadyList+0xdc>)
 800e080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e08e:	bf00      	nop
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	24017f5c 	.word	0x24017f5c
 800e09c:	24017a88 	.word	0x24017a88
 800e0a0:	24017f68 	.word	0x24017f68
 800e0a4:	24017f78 	.word	0x24017f78
 800e0a8:	24017f64 	.word	0x24017f64
 800e0ac:	24017a8c 	.word	0x24017a8c
 800e0b0:	e000ed04 	.word	0xe000ed04

0800e0b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b08a      	sub	sp, #40	; 0x28
 800e0b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e0c2:	463a      	mov	r2, r7
 800e0c4:	1d39      	adds	r1, r7, #4
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7fe fd1e 	bl	800cb0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	9202      	str	r2, [sp, #8]
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	2300      	movs	r3, #0
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	460a      	mov	r2, r1
 800e0e2:	4921      	ldr	r1, [pc, #132]	; (800e168 <vTaskStartScheduler+0xb4>)
 800e0e4:	4821      	ldr	r0, [pc, #132]	; (800e16c <vTaskStartScheduler+0xb8>)
 800e0e6:	f7ff fe43 	bl	800dd70 <xTaskCreateStatic>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	4a20      	ldr	r2, [pc, #128]	; (800e170 <vTaskStartScheduler+0xbc>)
 800e0ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0f0:	4b1f      	ldr	r3, [pc, #124]	; (800e170 <vTaskStartScheduler+0xbc>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	617b      	str	r3, [r7, #20]
 800e0fc:	e001      	b.n	800e102 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0fe:	2300      	movs	r3, #0
 800e100:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d102      	bne.n	800e10e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e108:	f000 fdfa 	bl	800ed00 <xTimerCreateTimerTask>
 800e10c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d116      	bne.n	800e142 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	613b      	str	r3, [r7, #16]
}
 800e126:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e128:	4b12      	ldr	r3, [pc, #72]	; (800e174 <vTaskStartScheduler+0xc0>)
 800e12a:	f04f 32ff 	mov.w	r2, #4294967295
 800e12e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e130:	4b11      	ldr	r3, [pc, #68]	; (800e178 <vTaskStartScheduler+0xc4>)
 800e132:	2201      	movs	r2, #1
 800e134:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e136:	4b11      	ldr	r3, [pc, #68]	; (800e17c <vTaskStartScheduler+0xc8>)
 800e138:	2200      	movs	r2, #0
 800e13a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e13c:	f001 f9b8 	bl	800f4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e140:	e00e      	b.n	800e160 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e148:	d10a      	bne.n	800e160 <vTaskStartScheduler+0xac>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	60fb      	str	r3, [r7, #12]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <vTaskStartScheduler+0xaa>
}
 800e160:	bf00      	nop
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	08011018 	.word	0x08011018
 800e16c:	0800e799 	.word	0x0800e799
 800e170:	24017f80 	.word	0x24017f80
 800e174:	24017f7c 	.word	0x24017f7c
 800e178:	24017f68 	.word	0x24017f68
 800e17c:	24017f60 	.word	0x24017f60

0800e180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e180:	b480      	push	{r7}
 800e182:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e184:	4b04      	ldr	r3, [pc, #16]	; (800e198 <vTaskSuspendAll+0x18>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3301      	adds	r3, #1
 800e18a:	4a03      	ldr	r2, [pc, #12]	; (800e198 <vTaskSuspendAll+0x18>)
 800e18c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e18e:	bf00      	nop
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	24017f84 	.word	0x24017f84

0800e19c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e1aa:	4b42      	ldr	r3, [pc, #264]	; (800e2b4 <xTaskResumeAll+0x118>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10a      	bne.n	800e1c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	603b      	str	r3, [r7, #0]
}
 800e1c4:	bf00      	nop
 800e1c6:	e7fe      	b.n	800e1c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e1c8:	f001 fa14 	bl	800f5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e1cc:	4b39      	ldr	r3, [pc, #228]	; (800e2b4 <xTaskResumeAll+0x118>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	4a38      	ldr	r2, [pc, #224]	; (800e2b4 <xTaskResumeAll+0x118>)
 800e1d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1d6:	4b37      	ldr	r3, [pc, #220]	; (800e2b4 <xTaskResumeAll+0x118>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d162      	bne.n	800e2a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e1de:	4b36      	ldr	r3, [pc, #216]	; (800e2b8 <xTaskResumeAll+0x11c>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d05e      	beq.n	800e2a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1e6:	e02f      	b.n	800e248 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e8:	4b34      	ldr	r3, [pc, #208]	; (800e2bc <xTaskResumeAll+0x120>)
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	3318      	adds	r3, #24
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fe fd47 	bl	800cc88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fe fd42 	bl	800cc88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e208:	4b2d      	ldr	r3, [pc, #180]	; (800e2c0 <xTaskResumeAll+0x124>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d903      	bls.n	800e218 <xTaskResumeAll+0x7c>
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e214:	4a2a      	ldr	r2, [pc, #168]	; (800e2c0 <xTaskResumeAll+0x124>)
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21c:	4613      	mov	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4a27      	ldr	r2, [pc, #156]	; (800e2c4 <xTaskResumeAll+0x128>)
 800e226:	441a      	add	r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3304      	adds	r3, #4
 800e22c:	4619      	mov	r1, r3
 800e22e:	4610      	mov	r0, r2
 800e230:	f7fe fccd 	bl	800cbce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e238:	4b23      	ldr	r3, [pc, #140]	; (800e2c8 <xTaskResumeAll+0x12c>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23e:	429a      	cmp	r2, r3
 800e240:	d302      	bcc.n	800e248 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e242:	4b22      	ldr	r3, [pc, #136]	; (800e2cc <xTaskResumeAll+0x130>)
 800e244:	2201      	movs	r2, #1
 800e246:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e248:	4b1c      	ldr	r3, [pc, #112]	; (800e2bc <xTaskResumeAll+0x120>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1cb      	bne.n	800e1e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d001      	beq.n	800e25a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e256:	f000 fb55 	bl	800e904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e25a:	4b1d      	ldr	r3, [pc, #116]	; (800e2d0 <xTaskResumeAll+0x134>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d010      	beq.n	800e288 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e266:	f000 f847 	bl	800e2f8 <xTaskIncrementTick>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e270:	4b16      	ldr	r3, [pc, #88]	; (800e2cc <xTaskResumeAll+0x130>)
 800e272:	2201      	movs	r2, #1
 800e274:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	3b01      	subs	r3, #1
 800e27a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1f1      	bne.n	800e266 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e282:	4b13      	ldr	r3, [pc, #76]	; (800e2d0 <xTaskResumeAll+0x134>)
 800e284:	2200      	movs	r2, #0
 800e286:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e288:	4b10      	ldr	r3, [pc, #64]	; (800e2cc <xTaskResumeAll+0x130>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d009      	beq.n	800e2a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e290:	2301      	movs	r3, #1
 800e292:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e294:	4b0f      	ldr	r3, [pc, #60]	; (800e2d4 <xTaskResumeAll+0x138>)
 800e296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e29a:	601a      	str	r2, [r3, #0]
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2a4:	f001 f9d6 	bl	800f654 <vPortExitCritical>

	return xAlreadyYielded;
 800e2a8:	68bb      	ldr	r3, [r7, #8]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	24017f84 	.word	0x24017f84
 800e2b8:	24017f5c 	.word	0x24017f5c
 800e2bc:	24017f1c 	.word	0x24017f1c
 800e2c0:	24017f64 	.word	0x24017f64
 800e2c4:	24017a8c 	.word	0x24017a8c
 800e2c8:	24017a88 	.word	0x24017a88
 800e2cc:	24017f70 	.word	0x24017f70
 800e2d0:	24017f6c 	.word	0x24017f6c
 800e2d4:	e000ed04 	.word	0xe000ed04

0800e2d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e2de:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <xTaskGetTickCount+0x1c>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e2e4:	687b      	ldr	r3, [r7, #4]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	370c      	adds	r7, #12
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	24017f60 	.word	0x24017f60

0800e2f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e2fe:	2300      	movs	r3, #0
 800e300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e302:	4b4f      	ldr	r3, [pc, #316]	; (800e440 <xTaskIncrementTick+0x148>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f040 808f 	bne.w	800e42a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e30c:	4b4d      	ldr	r3, [pc, #308]	; (800e444 <xTaskIncrementTick+0x14c>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3301      	adds	r3, #1
 800e312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e314:	4a4b      	ldr	r2, [pc, #300]	; (800e444 <xTaskIncrementTick+0x14c>)
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d120      	bne.n	800e362 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e320:	4b49      	ldr	r3, [pc, #292]	; (800e448 <xTaskIncrementTick+0x150>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00a      	beq.n	800e340 <xTaskIncrementTick+0x48>
	__asm volatile
 800e32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	603b      	str	r3, [r7, #0]
}
 800e33c:	bf00      	nop
 800e33e:	e7fe      	b.n	800e33e <xTaskIncrementTick+0x46>
 800e340:	4b41      	ldr	r3, [pc, #260]	; (800e448 <xTaskIncrementTick+0x150>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	60fb      	str	r3, [r7, #12]
 800e346:	4b41      	ldr	r3, [pc, #260]	; (800e44c <xTaskIncrementTick+0x154>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a3f      	ldr	r2, [pc, #252]	; (800e448 <xTaskIncrementTick+0x150>)
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	4a3f      	ldr	r2, [pc, #252]	; (800e44c <xTaskIncrementTick+0x154>)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6013      	str	r3, [r2, #0]
 800e354:	4b3e      	ldr	r3, [pc, #248]	; (800e450 <xTaskIncrementTick+0x158>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	3301      	adds	r3, #1
 800e35a:	4a3d      	ldr	r2, [pc, #244]	; (800e450 <xTaskIncrementTick+0x158>)
 800e35c:	6013      	str	r3, [r2, #0]
 800e35e:	f000 fad1 	bl	800e904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e362:	4b3c      	ldr	r3, [pc, #240]	; (800e454 <xTaskIncrementTick+0x15c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	693a      	ldr	r2, [r7, #16]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d349      	bcc.n	800e400 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e36c:	4b36      	ldr	r3, [pc, #216]	; (800e448 <xTaskIncrementTick+0x150>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d104      	bne.n	800e380 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e376:	4b37      	ldr	r3, [pc, #220]	; (800e454 <xTaskIncrementTick+0x15c>)
 800e378:	f04f 32ff 	mov.w	r2, #4294967295
 800e37c:	601a      	str	r2, [r3, #0]
					break;
 800e37e:	e03f      	b.n	800e400 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e380:	4b31      	ldr	r3, [pc, #196]	; (800e448 <xTaskIncrementTick+0x150>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	429a      	cmp	r2, r3
 800e396:	d203      	bcs.n	800e3a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e398:	4a2e      	ldr	r2, [pc, #184]	; (800e454 <xTaskIncrementTick+0x15c>)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e39e:	e02f      	b.n	800e400 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7fe fc6f 	bl	800cc88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d004      	beq.n	800e3bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	3318      	adds	r3, #24
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fe fc66 	bl	800cc88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c0:	4b25      	ldr	r3, [pc, #148]	; (800e458 <xTaskIncrementTick+0x160>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d903      	bls.n	800e3d0 <xTaskIncrementTick+0xd8>
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3cc:	4a22      	ldr	r2, [pc, #136]	; (800e458 <xTaskIncrementTick+0x160>)
 800e3ce:	6013      	str	r3, [r2, #0]
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4a1f      	ldr	r2, [pc, #124]	; (800e45c <xTaskIncrementTick+0x164>)
 800e3de:	441a      	add	r2, r3
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	f7fe fbf1 	bl	800cbce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f0:	4b1b      	ldr	r3, [pc, #108]	; (800e460 <xTaskIncrementTick+0x168>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d3b8      	bcc.n	800e36c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3fe:	e7b5      	b.n	800e36c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e400:	4b17      	ldr	r3, [pc, #92]	; (800e460 <xTaskIncrementTick+0x168>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e406:	4915      	ldr	r1, [pc, #84]	; (800e45c <xTaskIncrementTick+0x164>)
 800e408:	4613      	mov	r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4413      	add	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d901      	bls.n	800e41c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e418:	2301      	movs	r3, #1
 800e41a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e41c:	4b11      	ldr	r3, [pc, #68]	; (800e464 <xTaskIncrementTick+0x16c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d007      	beq.n	800e434 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e424:	2301      	movs	r3, #1
 800e426:	617b      	str	r3, [r7, #20]
 800e428:	e004      	b.n	800e434 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e42a:	4b0f      	ldr	r3, [pc, #60]	; (800e468 <xTaskIncrementTick+0x170>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	4a0d      	ldr	r2, [pc, #52]	; (800e468 <xTaskIncrementTick+0x170>)
 800e432:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e434:	697b      	ldr	r3, [r7, #20]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	24017f84 	.word	0x24017f84
 800e444:	24017f60 	.word	0x24017f60
 800e448:	24017f14 	.word	0x24017f14
 800e44c:	24017f18 	.word	0x24017f18
 800e450:	24017f74 	.word	0x24017f74
 800e454:	24017f7c 	.word	0x24017f7c
 800e458:	24017f64 	.word	0x24017f64
 800e45c:	24017a8c 	.word	0x24017a8c
 800e460:	24017a88 	.word	0x24017a88
 800e464:	24017f70 	.word	0x24017f70
 800e468:	24017f6c 	.word	0x24017f6c

0800e46c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e472:	4b28      	ldr	r3, [pc, #160]	; (800e514 <vTaskSwitchContext+0xa8>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d003      	beq.n	800e482 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e47a:	4b27      	ldr	r3, [pc, #156]	; (800e518 <vTaskSwitchContext+0xac>)
 800e47c:	2201      	movs	r2, #1
 800e47e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e480:	e041      	b.n	800e506 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e482:	4b25      	ldr	r3, [pc, #148]	; (800e518 <vTaskSwitchContext+0xac>)
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e488:	4b24      	ldr	r3, [pc, #144]	; (800e51c <vTaskSwitchContext+0xb0>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	e010      	b.n	800e4b2 <vTaskSwitchContext+0x46>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10a      	bne.n	800e4ac <vTaskSwitchContext+0x40>
	__asm volatile
 800e496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49a:	f383 8811 	msr	BASEPRI, r3
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f3bf 8f4f 	dsb	sy
 800e4a6:	607b      	str	r3, [r7, #4]
}
 800e4a8:	bf00      	nop
 800e4aa:	e7fe      	b.n	800e4aa <vTaskSwitchContext+0x3e>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	491b      	ldr	r1, [pc, #108]	; (800e520 <vTaskSwitchContext+0xb4>)
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	440b      	add	r3, r1
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d0e4      	beq.n	800e490 <vTaskSwitchContext+0x24>
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	4413      	add	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4a13      	ldr	r2, [pc, #76]	; (800e520 <vTaskSwitchContext+0xb4>)
 800e4d2:	4413      	add	r3, r2
 800e4d4:	60bb      	str	r3, [r7, #8]
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	685a      	ldr	r2, [r3, #4]
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	605a      	str	r2, [r3, #4]
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d104      	bne.n	800e4f6 <vTaskSwitchContext+0x8a>
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	685a      	ldr	r2, [r3, #4]
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	605a      	str	r2, [r3, #4]
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	4a09      	ldr	r2, [pc, #36]	; (800e524 <vTaskSwitchContext+0xb8>)
 800e4fe:	6013      	str	r3, [r2, #0]
 800e500:	4a06      	ldr	r2, [pc, #24]	; (800e51c <vTaskSwitchContext+0xb0>)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6013      	str	r3, [r2, #0]
}
 800e506:	bf00      	nop
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	24017f84 	.word	0x24017f84
 800e518:	24017f70 	.word	0x24017f70
 800e51c:	24017f64 	.word	0x24017f64
 800e520:	24017a8c 	.word	0x24017a8c
 800e524:	24017a88 	.word	0x24017a88

0800e528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10a      	bne.n	800e54e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	60fb      	str	r3, [r7, #12]
}
 800e54a:	bf00      	nop
 800e54c:	e7fe      	b.n	800e54c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e54e:	4b07      	ldr	r3, [pc, #28]	; (800e56c <vTaskPlaceOnEventList+0x44>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3318      	adds	r3, #24
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7fe fb5d 	bl	800cc16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e55c:	2101      	movs	r1, #1
 800e55e:	6838      	ldr	r0, [r7, #0]
 800e560:	f000 fb7a 	bl	800ec58 <prvAddCurrentTaskToDelayedList>
}
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	24017a88 	.word	0x24017a88

0800e570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d10a      	bne.n	800e598 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	617b      	str	r3, [r7, #20]
}
 800e594:	bf00      	nop
 800e596:	e7fe      	b.n	800e596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3318      	adds	r3, #24
 800e59e:	4619      	mov	r1, r3
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f7fe fb14 	bl	800cbce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	68b8      	ldr	r0, [r7, #8]
 800e5b6:	f000 fb4f 	bl	800ec58 <prvAddCurrentTaskToDelayedList>
	}
 800e5ba:	bf00      	nop
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	24017a88 	.word	0x24017a88

0800e5c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10a      	bne.n	800e5f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	60fb      	str	r3, [r7, #12]
}
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	3318      	adds	r3, #24
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe fb45 	bl	800cc88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5fe:	4b1e      	ldr	r3, [pc, #120]	; (800e678 <xTaskRemoveFromEventList+0xb0>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d11d      	bne.n	800e642 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	3304      	adds	r3, #4
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fb3c 	bl	800cc88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e614:	4b19      	ldr	r3, [pc, #100]	; (800e67c <xTaskRemoveFromEventList+0xb4>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d903      	bls.n	800e624 <xTaskRemoveFromEventList+0x5c>
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e620:	4a16      	ldr	r2, [pc, #88]	; (800e67c <xTaskRemoveFromEventList+0xb4>)
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4a13      	ldr	r2, [pc, #76]	; (800e680 <xTaskRemoveFromEventList+0xb8>)
 800e632:	441a      	add	r2, r3
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	3304      	adds	r3, #4
 800e638:	4619      	mov	r1, r3
 800e63a:	4610      	mov	r0, r2
 800e63c:	f7fe fac7 	bl	800cbce <vListInsertEnd>
 800e640:	e005      	b.n	800e64e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	3318      	adds	r3, #24
 800e646:	4619      	mov	r1, r3
 800e648:	480e      	ldr	r0, [pc, #56]	; (800e684 <xTaskRemoveFromEventList+0xbc>)
 800e64a:	f7fe fac0 	bl	800cbce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	4b0d      	ldr	r3, [pc, #52]	; (800e688 <xTaskRemoveFromEventList+0xc0>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e658:	429a      	cmp	r2, r3
 800e65a:	d905      	bls.n	800e668 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e65c:	2301      	movs	r3, #1
 800e65e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e660:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <xTaskRemoveFromEventList+0xc4>)
 800e662:	2201      	movs	r2, #1
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	e001      	b.n	800e66c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e668:	2300      	movs	r3, #0
 800e66a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e66c:	697b      	ldr	r3, [r7, #20]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3718      	adds	r7, #24
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	24017f84 	.word	0x24017f84
 800e67c:	24017f64 	.word	0x24017f64
 800e680:	24017a8c 	.word	0x24017a8c
 800e684:	24017f1c 	.word	0x24017f1c
 800e688:	24017a88 	.word	0x24017a88
 800e68c:	24017f70 	.word	0x24017f70

0800e690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e698:	4b06      	ldr	r3, [pc, #24]	; (800e6b4 <vTaskInternalSetTimeOutState+0x24>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e6a0:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <vTaskInternalSetTimeOutState+0x28>)
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	605a      	str	r2, [r3, #4]
}
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	24017f74 	.word	0x24017f74
 800e6b8:	24017f60 	.word	0x24017f60

0800e6bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b088      	sub	sp, #32
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10a      	bne.n	800e6e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d0:	f383 8811 	msr	BASEPRI, r3
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	613b      	str	r3, [r7, #16]
}
 800e6de:	bf00      	nop
 800e6e0:	e7fe      	b.n	800e6e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d10a      	bne.n	800e6fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	60fb      	str	r3, [r7, #12]
}
 800e6fa:	bf00      	nop
 800e6fc:	e7fe      	b.n	800e6fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e6fe:	f000 ff79 	bl	800f5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e702:	4b1d      	ldr	r3, [pc, #116]	; (800e778 <xTaskCheckForTimeOut+0xbc>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	69ba      	ldr	r2, [r7, #24]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e71a:	d102      	bne.n	800e722 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e71c:	2300      	movs	r3, #0
 800e71e:	61fb      	str	r3, [r7, #28]
 800e720:	e023      	b.n	800e76a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	4b15      	ldr	r3, [pc, #84]	; (800e77c <xTaskCheckForTimeOut+0xc0>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d007      	beq.n	800e73e <xTaskCheckForTimeOut+0x82>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	429a      	cmp	r2, r3
 800e736:	d302      	bcc.n	800e73e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e738:	2301      	movs	r3, #1
 800e73a:	61fb      	str	r3, [r7, #28]
 800e73c:	e015      	b.n	800e76a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	429a      	cmp	r2, r3
 800e746:	d20b      	bcs.n	800e760 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	1ad2      	subs	r2, r2, r3
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7ff ff9b 	bl	800e690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e75a:	2300      	movs	r3, #0
 800e75c:	61fb      	str	r3, [r7, #28]
 800e75e:	e004      	b.n	800e76a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	2200      	movs	r2, #0
 800e764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e766:	2301      	movs	r3, #1
 800e768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e76a:	f000 ff73 	bl	800f654 <vPortExitCritical>

	return xReturn;
 800e76e:	69fb      	ldr	r3, [r7, #28]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3720      	adds	r7, #32
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	24017f60 	.word	0x24017f60
 800e77c:	24017f74 	.word	0x24017f74

0800e780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e780:	b480      	push	{r7}
 800e782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e784:	4b03      	ldr	r3, [pc, #12]	; (800e794 <vTaskMissedYield+0x14>)
 800e786:	2201      	movs	r2, #1
 800e788:	601a      	str	r2, [r3, #0]
}
 800e78a:	bf00      	nop
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	24017f70 	.word	0x24017f70

0800e798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e7a0:	f000 f852 	bl	800e848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e7a4:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <prvIdleTask+0x28>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d9f9      	bls.n	800e7a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <prvIdleTask+0x2c>)
 800e7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e7bc:	e7f0      	b.n	800e7a0 <prvIdleTask+0x8>
 800e7be:	bf00      	nop
 800e7c0:	24017a8c 	.word	0x24017a8c
 800e7c4:	e000ed04 	.word	0xe000ed04

0800e7c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	607b      	str	r3, [r7, #4]
 800e7d2:	e00c      	b.n	800e7ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4413      	add	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4a12      	ldr	r2, [pc, #72]	; (800e828 <prvInitialiseTaskLists+0x60>)
 800e7e0:	4413      	add	r3, r2
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe f9c6 	bl	800cb74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	607b      	str	r3, [r7, #4]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2b37      	cmp	r3, #55	; 0x37
 800e7f2:	d9ef      	bls.n	800e7d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e7f4:	480d      	ldr	r0, [pc, #52]	; (800e82c <prvInitialiseTaskLists+0x64>)
 800e7f6:	f7fe f9bd 	bl	800cb74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e7fa:	480d      	ldr	r0, [pc, #52]	; (800e830 <prvInitialiseTaskLists+0x68>)
 800e7fc:	f7fe f9ba 	bl	800cb74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e800:	480c      	ldr	r0, [pc, #48]	; (800e834 <prvInitialiseTaskLists+0x6c>)
 800e802:	f7fe f9b7 	bl	800cb74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e806:	480c      	ldr	r0, [pc, #48]	; (800e838 <prvInitialiseTaskLists+0x70>)
 800e808:	f7fe f9b4 	bl	800cb74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e80c:	480b      	ldr	r0, [pc, #44]	; (800e83c <prvInitialiseTaskLists+0x74>)
 800e80e:	f7fe f9b1 	bl	800cb74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e812:	4b0b      	ldr	r3, [pc, #44]	; (800e840 <prvInitialiseTaskLists+0x78>)
 800e814:	4a05      	ldr	r2, [pc, #20]	; (800e82c <prvInitialiseTaskLists+0x64>)
 800e816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e818:	4b0a      	ldr	r3, [pc, #40]	; (800e844 <prvInitialiseTaskLists+0x7c>)
 800e81a:	4a05      	ldr	r2, [pc, #20]	; (800e830 <prvInitialiseTaskLists+0x68>)
 800e81c:	601a      	str	r2, [r3, #0]
}
 800e81e:	bf00      	nop
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	24017a8c 	.word	0x24017a8c
 800e82c:	24017eec 	.word	0x24017eec
 800e830:	24017f00 	.word	0x24017f00
 800e834:	24017f1c 	.word	0x24017f1c
 800e838:	24017f30 	.word	0x24017f30
 800e83c:	24017f48 	.word	0x24017f48
 800e840:	24017f14 	.word	0x24017f14
 800e844:	24017f18 	.word	0x24017f18

0800e848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e84e:	e019      	b.n	800e884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e850:	f000 fed0 	bl	800f5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e854:	4b10      	ldr	r3, [pc, #64]	; (800e898 <prvCheckTasksWaitingTermination+0x50>)
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	3304      	adds	r3, #4
 800e860:	4618      	mov	r0, r3
 800e862:	f7fe fa11 	bl	800cc88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e866:	4b0d      	ldr	r3, [pc, #52]	; (800e89c <prvCheckTasksWaitingTermination+0x54>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3b01      	subs	r3, #1
 800e86c:	4a0b      	ldr	r2, [pc, #44]	; (800e89c <prvCheckTasksWaitingTermination+0x54>)
 800e86e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e870:	4b0b      	ldr	r3, [pc, #44]	; (800e8a0 <prvCheckTasksWaitingTermination+0x58>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3b01      	subs	r3, #1
 800e876:	4a0a      	ldr	r2, [pc, #40]	; (800e8a0 <prvCheckTasksWaitingTermination+0x58>)
 800e878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e87a:	f000 feeb 	bl	800f654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f810 	bl	800e8a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e884:	4b06      	ldr	r3, [pc, #24]	; (800e8a0 <prvCheckTasksWaitingTermination+0x58>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1e1      	bne.n	800e850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	24017f30 	.word	0x24017f30
 800e89c:	24017f5c 	.word	0x24017f5c
 800e8a0:	24017f44 	.word	0x24017f44

0800e8a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d108      	bne.n	800e8c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f001 f888 	bl	800f9d0 <vPortFree>
				vPortFree( pxTCB );
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f001 f885 	bl	800f9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e8c6:	e018      	b.n	800e8fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d103      	bne.n	800e8da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f001 f87c 	bl	800f9d0 <vPortFree>
	}
 800e8d8:	e00f      	b.n	800e8fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d00a      	beq.n	800e8fa <prvDeleteTCB+0x56>
	__asm volatile
 800e8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	60fb      	str	r3, [r7, #12]
}
 800e8f6:	bf00      	nop
 800e8f8:	e7fe      	b.n	800e8f8 <prvDeleteTCB+0x54>
	}
 800e8fa:	bf00      	nop
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
	...

0800e904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e90a:	4b0c      	ldr	r3, [pc, #48]	; (800e93c <prvResetNextTaskUnblockTime+0x38>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d104      	bne.n	800e91e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e914:	4b0a      	ldr	r3, [pc, #40]	; (800e940 <prvResetNextTaskUnblockTime+0x3c>)
 800e916:	f04f 32ff 	mov.w	r2, #4294967295
 800e91a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e91c:	e008      	b.n	800e930 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e91e:	4b07      	ldr	r3, [pc, #28]	; (800e93c <prvResetNextTaskUnblockTime+0x38>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	4a04      	ldr	r2, [pc, #16]	; (800e940 <prvResetNextTaskUnblockTime+0x3c>)
 800e92e:	6013      	str	r3, [r2, #0]
}
 800e930:	bf00      	nop
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	24017f14 	.word	0x24017f14
 800e940:	24017f7c 	.word	0x24017f7c

0800e944 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e94a:	4b0b      	ldr	r3, [pc, #44]	; (800e978 <xTaskGetSchedulerState+0x34>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d102      	bne.n	800e958 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e952:	2301      	movs	r3, #1
 800e954:	607b      	str	r3, [r7, #4]
 800e956:	e008      	b.n	800e96a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e958:	4b08      	ldr	r3, [pc, #32]	; (800e97c <xTaskGetSchedulerState+0x38>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d102      	bne.n	800e966 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e960:	2302      	movs	r3, #2
 800e962:	607b      	str	r3, [r7, #4]
 800e964:	e001      	b.n	800e96a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e966:	2300      	movs	r3, #0
 800e968:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e96a:	687b      	ldr	r3, [r7, #4]
	}
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr
 800e978:	24017f68 	.word	0x24017f68
 800e97c:	24017f84 	.word	0x24017f84

0800e980 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e98c:	2300      	movs	r3, #0
 800e98e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d051      	beq.n	800ea3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e99a:	4b2a      	ldr	r3, [pc, #168]	; (800ea44 <xTaskPriorityInherit+0xc4>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d241      	bcs.n	800ea28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	db06      	blt.n	800e9ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ac:	4b25      	ldr	r3, [pc, #148]	; (800ea44 <xTaskPriorityInherit+0xc4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	6959      	ldr	r1, [r3, #20]
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	4413      	add	r3, r2
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	4a1f      	ldr	r2, [pc, #124]	; (800ea48 <xTaskPriorityInherit+0xc8>)
 800e9cc:	4413      	add	r3, r2
 800e9ce:	4299      	cmp	r1, r3
 800e9d0:	d122      	bne.n	800ea18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fe f956 	bl	800cc88 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e9dc:	4b19      	ldr	r3, [pc, #100]	; (800ea44 <xTaskPriorityInherit+0xc4>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ea:	4b18      	ldr	r3, [pc, #96]	; (800ea4c <xTaskPriorityInherit+0xcc>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d903      	bls.n	800e9fa <xTaskPriorityInherit+0x7a>
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f6:	4a15      	ldr	r2, [pc, #84]	; (800ea4c <xTaskPriorityInherit+0xcc>)
 800e9f8:	6013      	str	r3, [r2, #0]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9fe:	4613      	mov	r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4413      	add	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4a10      	ldr	r2, [pc, #64]	; (800ea48 <xTaskPriorityInherit+0xc8>)
 800ea08:	441a      	add	r2, r3
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	3304      	adds	r3, #4
 800ea0e:	4619      	mov	r1, r3
 800ea10:	4610      	mov	r0, r2
 800ea12:	f7fe f8dc 	bl	800cbce <vListInsertEnd>
 800ea16:	e004      	b.n	800ea22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea18:	4b0a      	ldr	r3, [pc, #40]	; (800ea44 <xTaskPriorityInherit+0xc4>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ea22:	2301      	movs	r3, #1
 800ea24:	60fb      	str	r3, [r7, #12]
 800ea26:	e008      	b.n	800ea3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea2c:	4b05      	ldr	r3, [pc, #20]	; (800ea44 <xTaskPriorityInherit+0xc4>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d201      	bcs.n	800ea3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ea36:	2301      	movs	r3, #1
 800ea38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
	}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	24017a88 	.word	0x24017a88
 800ea48:	24017a8c 	.word	0x24017a8c
 800ea4c:	24017f64 	.word	0x24017f64

0800ea50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d056      	beq.n	800eb14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ea66:	4b2e      	ldr	r3, [pc, #184]	; (800eb20 <xTaskPriorityDisinherit+0xd0>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	693a      	ldr	r2, [r7, #16]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d00a      	beq.n	800ea86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	60fb      	str	r3, [r7, #12]
}
 800ea82:	bf00      	nop
 800ea84:	e7fe      	b.n	800ea84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d10a      	bne.n	800eaa4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	60bb      	str	r3, [r7, #8]
}
 800eaa0:	bf00      	nop
 800eaa2:	e7fe      	b.n	800eaa2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaa8:	1e5a      	subs	r2, r3, #1
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d02c      	beq.n	800eb14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d128      	bne.n	800eb14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	3304      	adds	r3, #4
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7fe f8de 	bl	800cc88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae4:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <xTaskPriorityDisinherit+0xd4>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d903      	bls.n	800eaf4 <xTaskPriorityDisinherit+0xa4>
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf0:	4a0c      	ldr	r2, [pc, #48]	; (800eb24 <xTaskPriorityDisinherit+0xd4>)
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf8:	4613      	mov	r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4413      	add	r3, r2
 800eafe:	009b      	lsls	r3, r3, #2
 800eb00:	4a09      	ldr	r2, [pc, #36]	; (800eb28 <xTaskPriorityDisinherit+0xd8>)
 800eb02:	441a      	add	r2, r3
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	3304      	adds	r3, #4
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4610      	mov	r0, r2
 800eb0c:	f7fe f85f 	bl	800cbce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eb10:	2301      	movs	r3, #1
 800eb12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb14:	697b      	ldr	r3, [r7, #20]
	}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3718      	adds	r7, #24
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	24017a88 	.word	0x24017a88
 800eb24:	24017f64 	.word	0x24017f64
 800eb28:	24017a8c 	.word	0x24017a8c

0800eb2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b088      	sub	sp, #32
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d06a      	beq.n	800ec1a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10a      	bne.n	800eb62 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800eb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	60fb      	str	r3, [r7, #12]
}
 800eb5e:	bf00      	nop
 800eb60:	e7fe      	b.n	800eb60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d902      	bls.n	800eb72 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	61fb      	str	r3, [r7, #28]
 800eb70:	e002      	b.n	800eb78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb76:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7c:	69fa      	ldr	r2, [r7, #28]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d04b      	beq.n	800ec1a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb86:	697a      	ldr	r2, [r7, #20]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d146      	bne.n	800ec1a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eb8c:	4b25      	ldr	r3, [pc, #148]	; (800ec24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d10a      	bne.n	800ebac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800eb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	60bb      	str	r3, [r7, #8]
}
 800eba8:	bf00      	nop
 800ebaa:	e7fe      	b.n	800ebaa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	69fa      	ldr	r2, [r7, #28]
 800ebb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	db04      	blt.n	800ebca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	6959      	ldr	r1, [r3, #20]
 800ebce:	693a      	ldr	r2, [r7, #16]
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	009b      	lsls	r3, r3, #2
 800ebd8:	4a13      	ldr	r2, [pc, #76]	; (800ec28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ebda:	4413      	add	r3, r2
 800ebdc:	4299      	cmp	r1, r3
 800ebde:	d11c      	bne.n	800ec1a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	3304      	adds	r3, #4
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fe f84f 	bl	800cc88 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebee:	4b0f      	ldr	r3, [pc, #60]	; (800ec2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d903      	bls.n	800ebfe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	4a0c      	ldr	r2, [pc, #48]	; (800ec2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ebfc:	6013      	str	r3, [r2, #0]
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec02:	4613      	mov	r3, r2
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	4413      	add	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4a07      	ldr	r2, [pc, #28]	; (800ec28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ec0c:	441a      	add	r2, r3
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	3304      	adds	r3, #4
 800ec12:	4619      	mov	r1, r3
 800ec14:	4610      	mov	r0, r2
 800ec16:	f7fd ffda 	bl	800cbce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec1a:	bf00      	nop
 800ec1c:	3720      	adds	r7, #32
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	24017a88 	.word	0x24017a88
 800ec28:	24017a8c 	.word	0x24017a8c
 800ec2c:	24017f64 	.word	0x24017f64

0800ec30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ec30:	b480      	push	{r7}
 800ec32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ec34:	4b07      	ldr	r3, [pc, #28]	; (800ec54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d004      	beq.n	800ec46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ec3c:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec42:	3201      	adds	r2, #1
 800ec44:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ec46:	4b03      	ldr	r3, [pc, #12]	; (800ec54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ec48:	681b      	ldr	r3, [r3, #0]
	}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	24017a88 	.word	0x24017a88

0800ec58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ec62:	4b21      	ldr	r3, [pc, #132]	; (800ece8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec68:	4b20      	ldr	r3, [pc, #128]	; (800ecec <prvAddCurrentTaskToDelayedList+0x94>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe f80a 	bl	800cc88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7a:	d10a      	bne.n	800ec92 <prvAddCurrentTaskToDelayedList+0x3a>
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d007      	beq.n	800ec92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec82:	4b1a      	ldr	r3, [pc, #104]	; (800ecec <prvAddCurrentTaskToDelayedList+0x94>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3304      	adds	r3, #4
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4819      	ldr	r0, [pc, #100]	; (800ecf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ec8c:	f7fd ff9f 	bl	800cbce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec90:	e026      	b.n	800ece0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	4413      	add	r3, r2
 800ec98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec9a:	4b14      	ldr	r3, [pc, #80]	; (800ecec <prvAddCurrentTaskToDelayedList+0x94>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	68ba      	ldr	r2, [r7, #8]
 800eca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d209      	bcs.n	800ecbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecaa:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	4b0f      	ldr	r3, [pc, #60]	; (800ecec <prvAddCurrentTaskToDelayedList+0x94>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	4610      	mov	r0, r2
 800ecb8:	f7fd ffad 	bl	800cc16 <vListInsert>
}
 800ecbc:	e010      	b.n	800ece0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecbe:	4b0e      	ldr	r3, [pc, #56]	; (800ecf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	4b0a      	ldr	r3, [pc, #40]	; (800ecec <prvAddCurrentTaskToDelayedList+0x94>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	4619      	mov	r1, r3
 800ecca:	4610      	mov	r0, r2
 800eccc:	f7fd ffa3 	bl	800cc16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ecd0:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68ba      	ldr	r2, [r7, #8]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d202      	bcs.n	800ece0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ecda:	4a08      	ldr	r2, [pc, #32]	; (800ecfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	6013      	str	r3, [r2, #0]
}
 800ece0:	bf00      	nop
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	24017f60 	.word	0x24017f60
 800ecec:	24017a88 	.word	0x24017a88
 800ecf0:	24017f48 	.word	0x24017f48
 800ecf4:	24017f18 	.word	0x24017f18
 800ecf8:	24017f14 	.word	0x24017f14
 800ecfc:	24017f7c 	.word	0x24017f7c

0800ed00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b08a      	sub	sp, #40	; 0x28
 800ed04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ed0a:	f000 fb07 	bl	800f31c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ed0e:	4b1c      	ldr	r3, [pc, #112]	; (800ed80 <xTimerCreateTimerTask+0x80>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d021      	beq.n	800ed5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ed16:	2300      	movs	r3, #0
 800ed18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ed1e:	1d3a      	adds	r2, r7, #4
 800ed20:	f107 0108 	add.w	r1, r7, #8
 800ed24:	f107 030c 	add.w	r3, r7, #12
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fd ff09 	bl	800cb40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ed2e:	6879      	ldr	r1, [r7, #4]
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	9202      	str	r2, [sp, #8]
 800ed36:	9301      	str	r3, [sp, #4]
 800ed38:	2302      	movs	r3, #2
 800ed3a:	9300      	str	r3, [sp, #0]
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	460a      	mov	r2, r1
 800ed40:	4910      	ldr	r1, [pc, #64]	; (800ed84 <xTimerCreateTimerTask+0x84>)
 800ed42:	4811      	ldr	r0, [pc, #68]	; (800ed88 <xTimerCreateTimerTask+0x88>)
 800ed44:	f7ff f814 	bl	800dd70 <xTaskCreateStatic>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	4a10      	ldr	r2, [pc, #64]	; (800ed8c <xTimerCreateTimerTask+0x8c>)
 800ed4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ed4e:	4b0f      	ldr	r3, [pc, #60]	; (800ed8c <xTimerCreateTimerTask+0x8c>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ed56:	2301      	movs	r3, #1
 800ed58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10a      	bne.n	800ed76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	613b      	str	r3, [r7, #16]
}
 800ed72:	bf00      	nop
 800ed74:	e7fe      	b.n	800ed74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ed76:	697b      	ldr	r3, [r7, #20]
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3718      	adds	r7, #24
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	24017fb8 	.word	0x24017fb8
 800ed84:	08011020 	.word	0x08011020
 800ed88:	0800eec5 	.word	0x0800eec5
 800ed8c:	24017fbc 	.word	0x24017fbc

0800ed90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b08a      	sub	sp, #40	; 0x28
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10a      	bne.n	800edbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800eda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	623b      	str	r3, [r7, #32]
}
 800edba:	bf00      	nop
 800edbc:	e7fe      	b.n	800edbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800edbe:	4b1a      	ldr	r3, [pc, #104]	; (800ee28 <xTimerGenericCommand+0x98>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d02a      	beq.n	800ee1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	2b05      	cmp	r3, #5
 800edd6:	dc18      	bgt.n	800ee0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800edd8:	f7ff fdb4 	bl	800e944 <xTaskGetSchedulerState>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d109      	bne.n	800edf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ede2:	4b11      	ldr	r3, [pc, #68]	; (800ee28 <xTimerGenericCommand+0x98>)
 800ede4:	6818      	ldr	r0, [r3, #0]
 800ede6:	f107 0110 	add.w	r1, r7, #16
 800edea:	2300      	movs	r3, #0
 800edec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edee:	f7fe f91d 	bl	800d02c <xQueueGenericSend>
 800edf2:	6278      	str	r0, [r7, #36]	; 0x24
 800edf4:	e012      	b.n	800ee1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800edf6:	4b0c      	ldr	r3, [pc, #48]	; (800ee28 <xTimerGenericCommand+0x98>)
 800edf8:	6818      	ldr	r0, [r3, #0]
 800edfa:	f107 0110 	add.w	r1, r7, #16
 800edfe:	2300      	movs	r3, #0
 800ee00:	2200      	movs	r2, #0
 800ee02:	f7fe f913 	bl	800d02c <xQueueGenericSend>
 800ee06:	6278      	str	r0, [r7, #36]	; 0x24
 800ee08:	e008      	b.n	800ee1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ee0a:	4b07      	ldr	r3, [pc, #28]	; (800ee28 <xTimerGenericCommand+0x98>)
 800ee0c:	6818      	ldr	r0, [r3, #0]
 800ee0e:	f107 0110 	add.w	r1, r7, #16
 800ee12:	2300      	movs	r3, #0
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	f7fe fa07 	bl	800d228 <xQueueGenericSendFromISR>
 800ee1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3728      	adds	r7, #40	; 0x28
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	24017fb8 	.word	0x24017fb8

0800ee2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b088      	sub	sp, #32
 800ee30:	af02      	add	r7, sp, #8
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee36:	4b22      	ldr	r3, [pc, #136]	; (800eec0 <prvProcessExpiredTimer+0x94>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	3304      	adds	r3, #4
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fd ff1f 	bl	800cc88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee50:	f003 0304 	and.w	r3, r3, #4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d022      	beq.n	800ee9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	699a      	ldr	r2, [r3, #24]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	18d1      	adds	r1, r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	683a      	ldr	r2, [r7, #0]
 800ee64:	6978      	ldr	r0, [r7, #20]
 800ee66:	f000 f8d1 	bl	800f00c <prvInsertTimerInActiveList>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d01f      	beq.n	800eeb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee70:	2300      	movs	r3, #0
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	2300      	movs	r3, #0
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	2100      	movs	r1, #0
 800ee7a:	6978      	ldr	r0, [r7, #20]
 800ee7c:	f7ff ff88 	bl	800ed90 <xTimerGenericCommand>
 800ee80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d113      	bne.n	800eeb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ee88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8c:	f383 8811 	msr	BASEPRI, r3
 800ee90:	f3bf 8f6f 	isb	sy
 800ee94:	f3bf 8f4f 	dsb	sy
 800ee98:	60fb      	str	r3, [r7, #12]
}
 800ee9a:	bf00      	nop
 800ee9c:	e7fe      	b.n	800ee9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eea4:	f023 0301 	bic.w	r3, r3, #1
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	6a1b      	ldr	r3, [r3, #32]
 800eeb4:	6978      	ldr	r0, [r7, #20]
 800eeb6:	4798      	blx	r3
}
 800eeb8:	bf00      	nop
 800eeba:	3718      	adds	r7, #24
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	24017fb0 	.word	0x24017fb0

0800eec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eecc:	f107 0308 	add.w	r3, r7, #8
 800eed0:	4618      	mov	r0, r3
 800eed2:	f000 f857 	bl	800ef84 <prvGetNextExpireTime>
 800eed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	4619      	mov	r1, r3
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f000 f803 	bl	800eee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eee2:	f000 f8d5 	bl	800f090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eee6:	e7f1      	b.n	800eecc <prvTimerTask+0x8>

0800eee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eef2:	f7ff f945 	bl	800e180 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eef6:	f107 0308 	add.w	r3, r7, #8
 800eefa:	4618      	mov	r0, r3
 800eefc:	f000 f866 	bl	800efcc <prvSampleTimeNow>
 800ef00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d130      	bne.n	800ef6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10a      	bne.n	800ef24 <prvProcessTimerOrBlockTask+0x3c>
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d806      	bhi.n	800ef24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ef16:	f7ff f941 	bl	800e19c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ef1a:	68f9      	ldr	r1, [r7, #12]
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7ff ff85 	bl	800ee2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ef22:	e024      	b.n	800ef6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d008      	beq.n	800ef3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ef2a:	4b13      	ldr	r3, [pc, #76]	; (800ef78 <prvProcessTimerOrBlockTask+0x90>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <prvProcessTimerOrBlockTask+0x50>
 800ef34:	2301      	movs	r3, #1
 800ef36:	e000      	b.n	800ef3a <prvProcessTimerOrBlockTask+0x52>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef3c:	4b0f      	ldr	r3, [pc, #60]	; (800ef7c <prvProcessTimerOrBlockTask+0x94>)
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	f7fe fedd 	bl	800dd08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef4e:	f7ff f925 	bl	800e19c <xTaskResumeAll>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10a      	bne.n	800ef6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ef58:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <prvProcessTimerOrBlockTask+0x98>)
 800ef5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	f3bf 8f4f 	dsb	sy
 800ef64:	f3bf 8f6f 	isb	sy
}
 800ef68:	e001      	b.n	800ef6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ef6a:	f7ff f917 	bl	800e19c <xTaskResumeAll>
}
 800ef6e:	bf00      	nop
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	24017fb4 	.word	0x24017fb4
 800ef7c:	24017fb8 	.word	0x24017fb8
 800ef80:	e000ed04 	.word	0xe000ed04

0800ef84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef8c:	4b0e      	ldr	r3, [pc, #56]	; (800efc8 <prvGetNextExpireTime+0x44>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d101      	bne.n	800ef9a <prvGetNextExpireTime+0x16>
 800ef96:	2201      	movs	r2, #1
 800ef98:	e000      	b.n	800ef9c <prvGetNextExpireTime+0x18>
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d105      	bne.n	800efb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efa8:	4b07      	ldr	r3, [pc, #28]	; (800efc8 <prvGetNextExpireTime+0x44>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	60fb      	str	r3, [r7, #12]
 800efb2:	e001      	b.n	800efb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800efb4:	2300      	movs	r3, #0
 800efb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800efb8:	68fb      	ldr	r3, [r7, #12]
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3714      	adds	r7, #20
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	24017fb0 	.word	0x24017fb0

0800efcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800efd4:	f7ff f980 	bl	800e2d8 <xTaskGetTickCount>
 800efd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800efda:	4b0b      	ldr	r3, [pc, #44]	; (800f008 <prvSampleTimeNow+0x3c>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d205      	bcs.n	800eff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800efe4:	f000 f936 	bl	800f254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	601a      	str	r2, [r3, #0]
 800efee:	e002      	b.n	800eff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eff6:	4a04      	ldr	r2, [pc, #16]	; (800f008 <prvSampleTimeNow+0x3c>)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800effc:	68fb      	ldr	r3, [r7, #12]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	24017fc0 	.word	0x24017fc0

0800f00c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
 800f018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f01a:	2300      	movs	r3, #0
 800f01c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d812      	bhi.n	800f058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	1ad2      	subs	r2, r2, r3
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	699b      	ldr	r3, [r3, #24]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d302      	bcc.n	800f046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f040:	2301      	movs	r3, #1
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	e01b      	b.n	800f07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f046:	4b10      	ldr	r3, [pc, #64]	; (800f088 <prvInsertTimerInActiveList+0x7c>)
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3304      	adds	r3, #4
 800f04e:	4619      	mov	r1, r3
 800f050:	4610      	mov	r0, r2
 800f052:	f7fd fde0 	bl	800cc16 <vListInsert>
 800f056:	e012      	b.n	800f07e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d206      	bcs.n	800f06e <prvInsertTimerInActiveList+0x62>
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	429a      	cmp	r2, r3
 800f066:	d302      	bcc.n	800f06e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f068:	2301      	movs	r3, #1
 800f06a:	617b      	str	r3, [r7, #20]
 800f06c:	e007      	b.n	800f07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f06e:	4b07      	ldr	r3, [pc, #28]	; (800f08c <prvInsertTimerInActiveList+0x80>)
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3304      	adds	r3, #4
 800f076:	4619      	mov	r1, r3
 800f078:	4610      	mov	r0, r2
 800f07a:	f7fd fdcc 	bl	800cc16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f07e:	697b      	ldr	r3, [r7, #20]
}
 800f080:	4618      	mov	r0, r3
 800f082:	3718      	adds	r7, #24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	24017fb4 	.word	0x24017fb4
 800f08c:	24017fb0 	.word	0x24017fb0

0800f090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b08e      	sub	sp, #56	; 0x38
 800f094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f096:	e0ca      	b.n	800f22e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	da18      	bge.n	800f0d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f09e:	1d3b      	adds	r3, r7, #4
 800f0a0:	3304      	adds	r3, #4
 800f0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d10a      	bne.n	800f0c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	61fb      	str	r3, [r7, #28]
}
 800f0bc:	bf00      	nop
 800f0be:	e7fe      	b.n	800f0be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0c6:	6850      	ldr	r0, [r2, #4]
 800f0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ca:	6892      	ldr	r2, [r2, #8]
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f2c0 80aa 	blt.w	800f22c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0de:	695b      	ldr	r3, [r3, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d004      	beq.n	800f0ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fd fdcd 	bl	800cc88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0ee:	463b      	mov	r3, r7
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7ff ff6b 	bl	800efcc <prvSampleTimeNow>
 800f0f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b09      	cmp	r3, #9
 800f0fc:	f200 8097 	bhi.w	800f22e <prvProcessReceivedCommands+0x19e>
 800f100:	a201      	add	r2, pc, #4	; (adr r2, 800f108 <prvProcessReceivedCommands+0x78>)
 800f102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f106:	bf00      	nop
 800f108:	0800f131 	.word	0x0800f131
 800f10c:	0800f131 	.word	0x0800f131
 800f110:	0800f131 	.word	0x0800f131
 800f114:	0800f1a5 	.word	0x0800f1a5
 800f118:	0800f1b9 	.word	0x0800f1b9
 800f11c:	0800f203 	.word	0x0800f203
 800f120:	0800f131 	.word	0x0800f131
 800f124:	0800f131 	.word	0x0800f131
 800f128:	0800f1a5 	.word	0x0800f1a5
 800f12c:	0800f1b9 	.word	0x0800f1b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f136:	f043 0301 	orr.w	r3, r3, #1
 800f13a:	b2da      	uxtb	r2, r3
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	18d1      	adds	r1, r2, r3
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f150:	f7ff ff5c 	bl	800f00c <prvInsertTimerInActiveList>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d069      	beq.n	800f22e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	6a1b      	ldr	r3, [r3, #32]
 800f15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f168:	f003 0304 	and.w	r3, r3, #4
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d05e      	beq.n	800f22e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	441a      	add	r2, r3
 800f178:	2300      	movs	r3, #0
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	2300      	movs	r3, #0
 800f17e:	2100      	movs	r1, #0
 800f180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f182:	f7ff fe05 	bl	800ed90 <xTimerGenericCommand>
 800f186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f188:	6a3b      	ldr	r3, [r7, #32]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d14f      	bne.n	800f22e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	61bb      	str	r3, [r7, #24]
}
 800f1a0:	bf00      	nop
 800f1a2:	e7fe      	b.n	800f1a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1aa:	f023 0301 	bic.w	r3, r3, #1
 800f1ae:	b2da      	uxtb	r2, r3
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f1b6:	e03a      	b.n	800f22e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1be:	f043 0301 	orr.w	r3, r3, #1
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10a      	bne.n	800f1ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	617b      	str	r3, [r7, #20]
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	699a      	ldr	r2, [r3, #24]
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f4:	18d1      	adds	r1, r2, r3
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1fc:	f7ff ff06 	bl	800f00c <prvInsertTimerInActiveList>
					break;
 800f200:	e015      	b.n	800f22e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f208:	f003 0302 	and.w	r3, r3, #2
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d103      	bne.n	800f218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f212:	f000 fbdd 	bl	800f9d0 <vPortFree>
 800f216:	e00a      	b.n	800f22e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f21e:	f023 0301 	bic.w	r3, r3, #1
 800f222:	b2da      	uxtb	r2, r3
 800f224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f22a:	e000      	b.n	800f22e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f22c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f22e:	4b08      	ldr	r3, [pc, #32]	; (800f250 <prvProcessReceivedCommands+0x1c0>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	1d39      	adds	r1, r7, #4
 800f234:	2200      	movs	r2, #0
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe f91e 	bl	800d478 <xQueueReceive>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f47f af2a 	bne.w	800f098 <prvProcessReceivedCommands+0x8>
	}
}
 800f244:	bf00      	nop
 800f246:	bf00      	nop
 800f248:	3730      	adds	r7, #48	; 0x30
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	24017fb8 	.word	0x24017fb8

0800f254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b088      	sub	sp, #32
 800f258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f25a:	e048      	b.n	800f2ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f25c:	4b2d      	ldr	r3, [pc, #180]	; (800f314 <prvSwitchTimerLists+0xc0>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f266:	4b2b      	ldr	r3, [pc, #172]	; (800f314 <prvSwitchTimerLists+0xc0>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3304      	adds	r3, #4
 800f274:	4618      	mov	r0, r3
 800f276:	f7fd fd07 	bl	800cc88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6a1b      	ldr	r3, [r3, #32]
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f288:	f003 0304 	and.w	r3, r3, #4
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d02e      	beq.n	800f2ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	693a      	ldr	r2, [r7, #16]
 800f296:	4413      	add	r3, r2
 800f298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d90e      	bls.n	800f2c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f2ae:	4b19      	ldr	r3, [pc, #100]	; (800f314 <prvSwitchTimerLists+0xc0>)
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	f7fd fcac 	bl	800cc16 <vListInsert>
 800f2be:	e016      	b.n	800f2ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	693a      	ldr	r2, [r7, #16]
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	f7ff fd60 	bl	800ed90 <xTimerGenericCommand>
 800f2d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10a      	bne.n	800f2ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2dc:	f383 8811 	msr	BASEPRI, r3
 800f2e0:	f3bf 8f6f 	isb	sy
 800f2e4:	f3bf 8f4f 	dsb	sy
 800f2e8:	603b      	str	r3, [r7, #0]
}
 800f2ea:	bf00      	nop
 800f2ec:	e7fe      	b.n	800f2ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f2ee:	4b09      	ldr	r3, [pc, #36]	; (800f314 <prvSwitchTimerLists+0xc0>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1b1      	bne.n	800f25c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f2f8:	4b06      	ldr	r3, [pc, #24]	; (800f314 <prvSwitchTimerLists+0xc0>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f2fe:	4b06      	ldr	r3, [pc, #24]	; (800f318 <prvSwitchTimerLists+0xc4>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4a04      	ldr	r2, [pc, #16]	; (800f314 <prvSwitchTimerLists+0xc0>)
 800f304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f306:	4a04      	ldr	r2, [pc, #16]	; (800f318 <prvSwitchTimerLists+0xc4>)
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	6013      	str	r3, [r2, #0]
}
 800f30c:	bf00      	nop
 800f30e:	3718      	adds	r7, #24
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	24017fb0 	.word	0x24017fb0
 800f318:	24017fb4 	.word	0x24017fb4

0800f31c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f322:	f000 f967 	bl	800f5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f326:	4b15      	ldr	r3, [pc, #84]	; (800f37c <prvCheckForValidListAndQueue+0x60>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d120      	bne.n	800f370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f32e:	4814      	ldr	r0, [pc, #80]	; (800f380 <prvCheckForValidListAndQueue+0x64>)
 800f330:	f7fd fc20 	bl	800cb74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f334:	4813      	ldr	r0, [pc, #76]	; (800f384 <prvCheckForValidListAndQueue+0x68>)
 800f336:	f7fd fc1d 	bl	800cb74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f33a:	4b13      	ldr	r3, [pc, #76]	; (800f388 <prvCheckForValidListAndQueue+0x6c>)
 800f33c:	4a10      	ldr	r2, [pc, #64]	; (800f380 <prvCheckForValidListAndQueue+0x64>)
 800f33e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f340:	4b12      	ldr	r3, [pc, #72]	; (800f38c <prvCheckForValidListAndQueue+0x70>)
 800f342:	4a10      	ldr	r2, [pc, #64]	; (800f384 <prvCheckForValidListAndQueue+0x68>)
 800f344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f346:	2300      	movs	r3, #0
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	4b11      	ldr	r3, [pc, #68]	; (800f390 <prvCheckForValidListAndQueue+0x74>)
 800f34c:	4a11      	ldr	r2, [pc, #68]	; (800f394 <prvCheckForValidListAndQueue+0x78>)
 800f34e:	2110      	movs	r1, #16
 800f350:	200a      	movs	r0, #10
 800f352:	f7fd fd2b 	bl	800cdac <xQueueGenericCreateStatic>
 800f356:	4603      	mov	r3, r0
 800f358:	4a08      	ldr	r2, [pc, #32]	; (800f37c <prvCheckForValidListAndQueue+0x60>)
 800f35a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f35c:	4b07      	ldr	r3, [pc, #28]	; (800f37c <prvCheckForValidListAndQueue+0x60>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d005      	beq.n	800f370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f364:	4b05      	ldr	r3, [pc, #20]	; (800f37c <prvCheckForValidListAndQueue+0x60>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	490b      	ldr	r1, [pc, #44]	; (800f398 <prvCheckForValidListAndQueue+0x7c>)
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fe fc78 	bl	800dc60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f370:	f000 f970 	bl	800f654 <vPortExitCritical>
}
 800f374:	bf00      	nop
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	24017fb8 	.word	0x24017fb8
 800f380:	24017f88 	.word	0x24017f88
 800f384:	24017f9c 	.word	0x24017f9c
 800f388:	24017fb0 	.word	0x24017fb0
 800f38c:	24017fb4 	.word	0x24017fb4
 800f390:	24018064 	.word	0x24018064
 800f394:	24017fc4 	.word	0x24017fc4
 800f398:	08011028 	.word	0x08011028

0800f39c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f39c:	b480      	push	{r7}
 800f39e:	b085      	sub	sp, #20
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	3b04      	subs	r3, #4
 800f3ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3b04      	subs	r3, #4
 800f3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	f023 0201 	bic.w	r2, r3, #1
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	3b04      	subs	r3, #4
 800f3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f3cc:	4a0c      	ldr	r2, [pc, #48]	; (800f400 <pxPortInitialiseStack+0x64>)
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3b14      	subs	r3, #20
 800f3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3b04      	subs	r3, #4
 800f3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f06f 0202 	mvn.w	r2, #2
 800f3ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	3b20      	subs	r3, #32
 800f3f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3714      	adds	r7, #20
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr
 800f400:	0800f405 	.word	0x0800f405

0800f404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f404:	b480      	push	{r7}
 800f406:	b085      	sub	sp, #20
 800f408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f40e:	4b12      	ldr	r3, [pc, #72]	; (800f458 <prvTaskExitError+0x54>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f416:	d00a      	beq.n	800f42e <prvTaskExitError+0x2a>
	__asm volatile
 800f418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41c:	f383 8811 	msr	BASEPRI, r3
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	f3bf 8f4f 	dsb	sy
 800f428:	60fb      	str	r3, [r7, #12]
}
 800f42a:	bf00      	nop
 800f42c:	e7fe      	b.n	800f42c <prvTaskExitError+0x28>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	60bb      	str	r3, [r7, #8]
}
 800f440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f442:	bf00      	nop
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d0fc      	beq.n	800f444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f44a:	bf00      	nop
 800f44c:	bf00      	nop
 800f44e:	3714      	adds	r7, #20
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr
 800f458:	24000014 	.word	0x24000014
 800f45c:	00000000 	.word	0x00000000

0800f460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f460:	4b07      	ldr	r3, [pc, #28]	; (800f480 <pxCurrentTCBConst2>)
 800f462:	6819      	ldr	r1, [r3, #0]
 800f464:	6808      	ldr	r0, [r1, #0]
 800f466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46a:	f380 8809 	msr	PSP, r0
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f04f 0000 	mov.w	r0, #0
 800f476:	f380 8811 	msr	BASEPRI, r0
 800f47a:	4770      	bx	lr
 800f47c:	f3af 8000 	nop.w

0800f480 <pxCurrentTCBConst2>:
 800f480:	24017a88 	.word	0x24017a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f484:	bf00      	nop
 800f486:	bf00      	nop

0800f488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f488:	4808      	ldr	r0, [pc, #32]	; (800f4ac <prvPortStartFirstTask+0x24>)
 800f48a:	6800      	ldr	r0, [r0, #0]
 800f48c:	6800      	ldr	r0, [r0, #0]
 800f48e:	f380 8808 	msr	MSP, r0
 800f492:	f04f 0000 	mov.w	r0, #0
 800f496:	f380 8814 	msr	CONTROL, r0
 800f49a:	b662      	cpsie	i
 800f49c:	b661      	cpsie	f
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	df00      	svc	0
 800f4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f4aa:	bf00      	nop
 800f4ac:	e000ed08 	.word	0xe000ed08

0800f4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f4b6:	4b46      	ldr	r3, [pc, #280]	; (800f5d0 <xPortStartScheduler+0x120>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4a46      	ldr	r2, [pc, #280]	; (800f5d4 <xPortStartScheduler+0x124>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d10a      	bne.n	800f4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800f4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c4:	f383 8811 	msr	BASEPRI, r3
 800f4c8:	f3bf 8f6f 	isb	sy
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	613b      	str	r3, [r7, #16]
}
 800f4d2:	bf00      	nop
 800f4d4:	e7fe      	b.n	800f4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f4d6:	4b3e      	ldr	r3, [pc, #248]	; (800f5d0 <xPortStartScheduler+0x120>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a3f      	ldr	r2, [pc, #252]	; (800f5d8 <xPortStartScheduler+0x128>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d10a      	bne.n	800f4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800f4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e4:	f383 8811 	msr	BASEPRI, r3
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	60fb      	str	r3, [r7, #12]
}
 800f4f2:	bf00      	nop
 800f4f4:	e7fe      	b.n	800f4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f4f6:	4b39      	ldr	r3, [pc, #228]	; (800f5dc <xPortStartScheduler+0x12c>)
 800f4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	22ff      	movs	r2, #255	; 0xff
 800f506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f510:	78fb      	ldrb	r3, [r7, #3]
 800f512:	b2db      	uxtb	r3, r3
 800f514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	4b31      	ldr	r3, [pc, #196]	; (800f5e0 <xPortStartScheduler+0x130>)
 800f51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f51e:	4b31      	ldr	r3, [pc, #196]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f520:	2207      	movs	r2, #7
 800f522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f524:	e009      	b.n	800f53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f526:	4b2f      	ldr	r3, [pc, #188]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	3b01      	subs	r3, #1
 800f52c:	4a2d      	ldr	r2, [pc, #180]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f530:	78fb      	ldrb	r3, [r7, #3]
 800f532:	b2db      	uxtb	r3, r3
 800f534:	005b      	lsls	r3, r3, #1
 800f536:	b2db      	uxtb	r3, r3
 800f538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f53a:	78fb      	ldrb	r3, [r7, #3]
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f542:	2b80      	cmp	r3, #128	; 0x80
 800f544:	d0ef      	beq.n	800f526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f546:	4b27      	ldr	r3, [pc, #156]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f1c3 0307 	rsb	r3, r3, #7
 800f54e:	2b04      	cmp	r3, #4
 800f550:	d00a      	beq.n	800f568 <xPortStartScheduler+0xb8>
	__asm volatile
 800f552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f556:	f383 8811 	msr	BASEPRI, r3
 800f55a:	f3bf 8f6f 	isb	sy
 800f55e:	f3bf 8f4f 	dsb	sy
 800f562:	60bb      	str	r3, [r7, #8]
}
 800f564:	bf00      	nop
 800f566:	e7fe      	b.n	800f566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f568:	4b1e      	ldr	r3, [pc, #120]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	021b      	lsls	r3, r3, #8
 800f56e:	4a1d      	ldr	r2, [pc, #116]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f572:	4b1c      	ldr	r3, [pc, #112]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f57a:	4a1a      	ldr	r2, [pc, #104]	; (800f5e4 <xPortStartScheduler+0x134>)
 800f57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	b2da      	uxtb	r2, r3
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f586:	4b18      	ldr	r3, [pc, #96]	; (800f5e8 <xPortStartScheduler+0x138>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a17      	ldr	r2, [pc, #92]	; (800f5e8 <xPortStartScheduler+0x138>)
 800f58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f592:	4b15      	ldr	r3, [pc, #84]	; (800f5e8 <xPortStartScheduler+0x138>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a14      	ldr	r2, [pc, #80]	; (800f5e8 <xPortStartScheduler+0x138>)
 800f598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f59e:	f000 f8dd 	bl	800f75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f5a2:	4b12      	ldr	r3, [pc, #72]	; (800f5ec <xPortStartScheduler+0x13c>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f5a8:	f000 f8fc 	bl	800f7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f5ac:	4b10      	ldr	r3, [pc, #64]	; (800f5f0 <xPortStartScheduler+0x140>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a0f      	ldr	r2, [pc, #60]	; (800f5f0 <xPortStartScheduler+0x140>)
 800f5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f5b8:	f7ff ff66 	bl	800f488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f5bc:	f7fe ff56 	bl	800e46c <vTaskSwitchContext>
	prvTaskExitError();
 800f5c0:	f7ff ff20 	bl	800f404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3718      	adds	r7, #24
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	e000ed00 	.word	0xe000ed00
 800f5d4:	410fc271 	.word	0x410fc271
 800f5d8:	410fc270 	.word	0x410fc270
 800f5dc:	e000e400 	.word	0xe000e400
 800f5e0:	240180b4 	.word	0x240180b4
 800f5e4:	240180b8 	.word	0x240180b8
 800f5e8:	e000ed20 	.word	0xe000ed20
 800f5ec:	24000014 	.word	0x24000014
 800f5f0:	e000ef34 	.word	0xe000ef34

0800f5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800f5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	607b      	str	r3, [r7, #4]
}
 800f60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f60e:	4b0f      	ldr	r3, [pc, #60]	; (800f64c <vPortEnterCritical+0x58>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	3301      	adds	r3, #1
 800f614:	4a0d      	ldr	r2, [pc, #52]	; (800f64c <vPortEnterCritical+0x58>)
 800f616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f618:	4b0c      	ldr	r3, [pc, #48]	; (800f64c <vPortEnterCritical+0x58>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d10f      	bne.n	800f640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f620:	4b0b      	ldr	r3, [pc, #44]	; (800f650 <vPortEnterCritical+0x5c>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00a      	beq.n	800f640 <vPortEnterCritical+0x4c>
	__asm volatile
 800f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62e:	f383 8811 	msr	BASEPRI, r3
 800f632:	f3bf 8f6f 	isb	sy
 800f636:	f3bf 8f4f 	dsb	sy
 800f63a:	603b      	str	r3, [r7, #0]
}
 800f63c:	bf00      	nop
 800f63e:	e7fe      	b.n	800f63e <vPortEnterCritical+0x4a>
	}
}
 800f640:	bf00      	nop
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	24000014 	.word	0x24000014
 800f650:	e000ed04 	.word	0xe000ed04

0800f654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f65a:	4b12      	ldr	r3, [pc, #72]	; (800f6a4 <vPortExitCritical+0x50>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10a      	bne.n	800f678 <vPortExitCritical+0x24>
	__asm volatile
 800f662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f666:	f383 8811 	msr	BASEPRI, r3
 800f66a:	f3bf 8f6f 	isb	sy
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	607b      	str	r3, [r7, #4]
}
 800f674:	bf00      	nop
 800f676:	e7fe      	b.n	800f676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f678:	4b0a      	ldr	r3, [pc, #40]	; (800f6a4 <vPortExitCritical+0x50>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	4a09      	ldr	r2, [pc, #36]	; (800f6a4 <vPortExitCritical+0x50>)
 800f680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f682:	4b08      	ldr	r3, [pc, #32]	; (800f6a4 <vPortExitCritical+0x50>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d105      	bne.n	800f696 <vPortExitCritical+0x42>
 800f68a:	2300      	movs	r3, #0
 800f68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	f383 8811 	msr	BASEPRI, r3
}
 800f694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f696:	bf00      	nop
 800f698:	370c      	adds	r7, #12
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	24000014 	.word	0x24000014
	...

0800f6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f6b0:	f3ef 8009 	mrs	r0, PSP
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	4b15      	ldr	r3, [pc, #84]	; (800f710 <pxCurrentTCBConst>)
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	f01e 0f10 	tst.w	lr, #16
 800f6c0:	bf08      	it	eq
 800f6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ca:	6010      	str	r0, [r2, #0]
 800f6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f6d4:	f380 8811 	msr	BASEPRI, r0
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	f7fe fec4 	bl	800e46c <vTaskSwitchContext>
 800f6e4:	f04f 0000 	mov.w	r0, #0
 800f6e8:	f380 8811 	msr	BASEPRI, r0
 800f6ec:	bc09      	pop	{r0, r3}
 800f6ee:	6819      	ldr	r1, [r3, #0]
 800f6f0:	6808      	ldr	r0, [r1, #0]
 800f6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f6:	f01e 0f10 	tst.w	lr, #16
 800f6fa:	bf08      	it	eq
 800f6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f700:	f380 8809 	msr	PSP, r0
 800f704:	f3bf 8f6f 	isb	sy
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	f3af 8000 	nop.w

0800f710 <pxCurrentTCBConst>:
 800f710:	24017a88 	.word	0x24017a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f714:	bf00      	nop
 800f716:	bf00      	nop

0800f718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
	__asm volatile
 800f71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	607b      	str	r3, [r7, #4]
}
 800f730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f732:	f7fe fde1 	bl	800e2f8 <xTaskIncrementTick>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d003      	beq.n	800f744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f73c:	4b06      	ldr	r3, [pc, #24]	; (800f758 <xPortSysTickHandler+0x40>)
 800f73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f742:	601a      	str	r2, [r3, #0]
 800f744:	2300      	movs	r3, #0
 800f746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	f383 8811 	msr	BASEPRI, r3
}
 800f74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f750:	bf00      	nop
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	e000ed04 	.word	0xe000ed04

0800f75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f75c:	b480      	push	{r7}
 800f75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f760:	4b0b      	ldr	r3, [pc, #44]	; (800f790 <vPortSetupTimerInterrupt+0x34>)
 800f762:	2200      	movs	r2, #0
 800f764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f766:	4b0b      	ldr	r3, [pc, #44]	; (800f794 <vPortSetupTimerInterrupt+0x38>)
 800f768:	2200      	movs	r2, #0
 800f76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f76c:	4b0a      	ldr	r3, [pc, #40]	; (800f798 <vPortSetupTimerInterrupt+0x3c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a0a      	ldr	r2, [pc, #40]	; (800f79c <vPortSetupTimerInterrupt+0x40>)
 800f772:	fba2 2303 	umull	r2, r3, r2, r3
 800f776:	099b      	lsrs	r3, r3, #6
 800f778:	4a09      	ldr	r2, [pc, #36]	; (800f7a0 <vPortSetupTimerInterrupt+0x44>)
 800f77a:	3b01      	subs	r3, #1
 800f77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f77e:	4b04      	ldr	r3, [pc, #16]	; (800f790 <vPortSetupTimerInterrupt+0x34>)
 800f780:	2207      	movs	r2, #7
 800f782:	601a      	str	r2, [r3, #0]
}
 800f784:	bf00      	nop
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	e000e010 	.word	0xe000e010
 800f794:	e000e018 	.word	0xe000e018
 800f798:	24000004 	.word	0x24000004
 800f79c:	10624dd3 	.word	0x10624dd3
 800f7a0:	e000e014 	.word	0xe000e014

0800f7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f7b4 <vPortEnableVFP+0x10>
 800f7a8:	6801      	ldr	r1, [r0, #0]
 800f7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f7ae:	6001      	str	r1, [r0, #0]
 800f7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f7b2:	bf00      	nop
 800f7b4:	e000ed88 	.word	0xe000ed88

0800f7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f7be:	f3ef 8305 	mrs	r3, IPSR
 800f7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b0f      	cmp	r3, #15
 800f7c8:	d914      	bls.n	800f7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f7ca:	4a17      	ldr	r2, [pc, #92]	; (800f828 <vPortValidateInterruptPriority+0x70>)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f7d4:	4b15      	ldr	r3, [pc, #84]	; (800f82c <vPortValidateInterruptPriority+0x74>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	7afa      	ldrb	r2, [r7, #11]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d20a      	bcs.n	800f7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e2:	f383 8811 	msr	BASEPRI, r3
 800f7e6:	f3bf 8f6f 	isb	sy
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	607b      	str	r3, [r7, #4]
}
 800f7f0:	bf00      	nop
 800f7f2:	e7fe      	b.n	800f7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f7f4:	4b0e      	ldr	r3, [pc, #56]	; (800f830 <vPortValidateInterruptPriority+0x78>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f7fc:	4b0d      	ldr	r3, [pc, #52]	; (800f834 <vPortValidateInterruptPriority+0x7c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	429a      	cmp	r2, r3
 800f802:	d90a      	bls.n	800f81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f808:	f383 8811 	msr	BASEPRI, r3
 800f80c:	f3bf 8f6f 	isb	sy
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	603b      	str	r3, [r7, #0]
}
 800f816:	bf00      	nop
 800f818:	e7fe      	b.n	800f818 <vPortValidateInterruptPriority+0x60>
	}
 800f81a:	bf00      	nop
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	e000e3f0 	.word	0xe000e3f0
 800f82c:	240180b4 	.word	0x240180b4
 800f830:	e000ed0c 	.word	0xe000ed0c
 800f834:	240180b8 	.word	0x240180b8

0800f838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b08a      	sub	sp, #40	; 0x28
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f840:	2300      	movs	r3, #0
 800f842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f844:	f7fe fc9c 	bl	800e180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f848:	4b5b      	ldr	r3, [pc, #364]	; (800f9b8 <pvPortMalloc+0x180>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d101      	bne.n	800f854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f850:	f000 f920 	bl	800fa94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f854:	4b59      	ldr	r3, [pc, #356]	; (800f9bc <pvPortMalloc+0x184>)
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4013      	ands	r3, r2
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f040 8093 	bne.w	800f988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d01d      	beq.n	800f8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f868:	2208      	movs	r2, #8
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4413      	add	r3, r2
 800f86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f003 0307 	and.w	r3, r3, #7
 800f876:	2b00      	cmp	r3, #0
 800f878:	d014      	beq.n	800f8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f023 0307 	bic.w	r3, r3, #7
 800f880:	3308      	adds	r3, #8
 800f882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f003 0307 	and.w	r3, r3, #7
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00a      	beq.n	800f8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	617b      	str	r3, [r7, #20]
}
 800f8a0:	bf00      	nop
 800f8a2:	e7fe      	b.n	800f8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d06e      	beq.n	800f988 <pvPortMalloc+0x150>
 800f8aa:	4b45      	ldr	r3, [pc, #276]	; (800f9c0 <pvPortMalloc+0x188>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d869      	bhi.n	800f988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f8b4:	4b43      	ldr	r3, [pc, #268]	; (800f9c4 <pvPortMalloc+0x18c>)
 800f8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f8b8:	4b42      	ldr	r3, [pc, #264]	; (800f9c4 <pvPortMalloc+0x18c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8be:	e004      	b.n	800f8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d903      	bls.n	800f8dc <pvPortMalloc+0xa4>
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d1f1      	bne.n	800f8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f8dc:	4b36      	ldr	r3, [pc, #216]	; (800f9b8 <pvPortMalloc+0x180>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d050      	beq.n	800f988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f8e6:	6a3b      	ldr	r3, [r7, #32]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2208      	movs	r2, #8
 800f8ec:	4413      	add	r3, r2
 800f8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	6a3b      	ldr	r3, [r7, #32]
 800f8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	1ad2      	subs	r2, r2, r3
 800f900:	2308      	movs	r3, #8
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	429a      	cmp	r2, r3
 800f906:	d91f      	bls.n	800f948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4413      	add	r3, r2
 800f90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	f003 0307 	and.w	r3, r3, #7
 800f916:	2b00      	cmp	r3, #0
 800f918:	d00a      	beq.n	800f930 <pvPortMalloc+0xf8>
	__asm volatile
 800f91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	613b      	str	r3, [r7, #16]
}
 800f92c:	bf00      	nop
 800f92e:	e7fe      	b.n	800f92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f932:	685a      	ldr	r2, [r3, #4]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	1ad2      	subs	r2, r2, r3
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f942:	69b8      	ldr	r0, [r7, #24]
 800f944:	f000 f908 	bl	800fb58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f948:	4b1d      	ldr	r3, [pc, #116]	; (800f9c0 <pvPortMalloc+0x188>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	4a1b      	ldr	r2, [pc, #108]	; (800f9c0 <pvPortMalloc+0x188>)
 800f954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f956:	4b1a      	ldr	r3, [pc, #104]	; (800f9c0 <pvPortMalloc+0x188>)
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	4b1b      	ldr	r3, [pc, #108]	; (800f9c8 <pvPortMalloc+0x190>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d203      	bcs.n	800f96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f962:	4b17      	ldr	r3, [pc, #92]	; (800f9c0 <pvPortMalloc+0x188>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a18      	ldr	r2, [pc, #96]	; (800f9c8 <pvPortMalloc+0x190>)
 800f968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	685a      	ldr	r2, [r3, #4]
 800f96e:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <pvPortMalloc+0x184>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	431a      	orrs	r2, r3
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	2200      	movs	r2, #0
 800f97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f97e:	4b13      	ldr	r3, [pc, #76]	; (800f9cc <pvPortMalloc+0x194>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	4a11      	ldr	r2, [pc, #68]	; (800f9cc <pvPortMalloc+0x194>)
 800f986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f988:	f7fe fc08 	bl	800e19c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	f003 0307 	and.w	r3, r3, #7
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00a      	beq.n	800f9ac <pvPortMalloc+0x174>
	__asm volatile
 800f996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99a:	f383 8811 	msr	BASEPRI, r3
 800f99e:	f3bf 8f6f 	isb	sy
 800f9a2:	f3bf 8f4f 	dsb	sy
 800f9a6:	60fb      	str	r3, [r7, #12]
}
 800f9a8:	bf00      	nop
 800f9aa:	e7fe      	b.n	800f9aa <pvPortMalloc+0x172>
	return pvReturn;
 800f9ac:	69fb      	ldr	r3, [r7, #28]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3728      	adds	r7, #40	; 0x28
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	2401bcc4 	.word	0x2401bcc4
 800f9bc:	2401bcd8 	.word	0x2401bcd8
 800f9c0:	2401bcc8 	.word	0x2401bcc8
 800f9c4:	2401bcbc 	.word	0x2401bcbc
 800f9c8:	2401bccc 	.word	0x2401bccc
 800f9cc:	2401bcd0 	.word	0x2401bcd0

0800f9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d04d      	beq.n	800fa7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f9e2:	2308      	movs	r3, #8
 800f9e4:	425b      	negs	r3, r3
 800f9e6:	697a      	ldr	r2, [r7, #20]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	685a      	ldr	r2, [r3, #4]
 800f9f4:	4b24      	ldr	r3, [pc, #144]	; (800fa88 <vPortFree+0xb8>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4013      	ands	r3, r2
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10a      	bne.n	800fa14 <vPortFree+0x44>
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	60fb      	str	r3, [r7, #12]
}
 800fa10:	bf00      	nop
 800fa12:	e7fe      	b.n	800fa12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00a      	beq.n	800fa32 <vPortFree+0x62>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	60bb      	str	r3, [r7, #8]
}
 800fa2e:	bf00      	nop
 800fa30:	e7fe      	b.n	800fa30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	4b14      	ldr	r3, [pc, #80]	; (800fa88 <vPortFree+0xb8>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4013      	ands	r3, r2
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01e      	beq.n	800fa7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d11a      	bne.n	800fa7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	4b0e      	ldr	r3, [pc, #56]	; (800fa88 <vPortFree+0xb8>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	43db      	mvns	r3, r3
 800fa52:	401a      	ands	r2, r3
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa58:	f7fe fb92 	bl	800e180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	685a      	ldr	r2, [r3, #4]
 800fa60:	4b0a      	ldr	r3, [pc, #40]	; (800fa8c <vPortFree+0xbc>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4413      	add	r3, r2
 800fa66:	4a09      	ldr	r2, [pc, #36]	; (800fa8c <vPortFree+0xbc>)
 800fa68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa6a:	6938      	ldr	r0, [r7, #16]
 800fa6c:	f000 f874 	bl	800fb58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa70:	4b07      	ldr	r3, [pc, #28]	; (800fa90 <vPortFree+0xc0>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3301      	adds	r3, #1
 800fa76:	4a06      	ldr	r2, [pc, #24]	; (800fa90 <vPortFree+0xc0>)
 800fa78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fa7a:	f7fe fb8f 	bl	800e19c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fa7e:	bf00      	nop
 800fa80:	3718      	adds	r7, #24
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
 800fa86:	bf00      	nop
 800fa88:	2401bcd8 	.word	0x2401bcd8
 800fa8c:	2401bcc8 	.word	0x2401bcc8
 800fa90:	2401bcd4 	.word	0x2401bcd4

0800fa94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fa9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800faa0:	4b27      	ldr	r3, [pc, #156]	; (800fb40 <prvHeapInit+0xac>)
 800faa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f003 0307 	and.w	r3, r3, #7
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00c      	beq.n	800fac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	3307      	adds	r3, #7
 800fab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f023 0307 	bic.w	r3, r3, #7
 800faba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	4a1f      	ldr	r2, [pc, #124]	; (800fb40 <prvHeapInit+0xac>)
 800fac4:	4413      	add	r3, r2
 800fac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800facc:	4a1d      	ldr	r2, [pc, #116]	; (800fb44 <prvHeapInit+0xb0>)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fad2:	4b1c      	ldr	r3, [pc, #112]	; (800fb44 <prvHeapInit+0xb0>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	4413      	add	r3, r2
 800fade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fae0:	2208      	movs	r2, #8
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	1a9b      	subs	r3, r3, r2
 800fae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f023 0307 	bic.w	r3, r3, #7
 800faee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	4a15      	ldr	r2, [pc, #84]	; (800fb48 <prvHeapInit+0xb4>)
 800faf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800faf6:	4b14      	ldr	r3, [pc, #80]	; (800fb48 <prvHeapInit+0xb4>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2200      	movs	r2, #0
 800fafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fafe:	4b12      	ldr	r3, [pc, #72]	; (800fb48 <prvHeapInit+0xb4>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	2200      	movs	r2, #0
 800fb04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	1ad2      	subs	r2, r2, r3
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb14:	4b0c      	ldr	r3, [pc, #48]	; (800fb48 <prvHeapInit+0xb4>)
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	4a0a      	ldr	r2, [pc, #40]	; (800fb4c <prvHeapInit+0xb8>)
 800fb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	4a09      	ldr	r2, [pc, #36]	; (800fb50 <prvHeapInit+0xbc>)
 800fb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb2c:	4b09      	ldr	r3, [pc, #36]	; (800fb54 <prvHeapInit+0xc0>)
 800fb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fb32:	601a      	str	r2, [r3, #0]
}
 800fb34:	bf00      	nop
 800fb36:	3714      	adds	r7, #20
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr
 800fb40:	240180bc 	.word	0x240180bc
 800fb44:	2401bcbc 	.word	0x2401bcbc
 800fb48:	2401bcc4 	.word	0x2401bcc4
 800fb4c:	2401bccc 	.word	0x2401bccc
 800fb50:	2401bcc8 	.word	0x2401bcc8
 800fb54:	2401bcd8 	.word	0x2401bcd8

0800fb58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb60:	4b28      	ldr	r3, [pc, #160]	; (800fc04 <prvInsertBlockIntoFreeList+0xac>)
 800fb62:	60fb      	str	r3, [r7, #12]
 800fb64:	e002      	b.n	800fb6c <prvInsertBlockIntoFreeList+0x14>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	60fb      	str	r3, [r7, #12]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d8f7      	bhi.n	800fb66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	68ba      	ldr	r2, [r7, #8]
 800fb80:	4413      	add	r3, r2
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d108      	bne.n	800fb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	685a      	ldr	r2, [r3, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	441a      	add	r2, r3
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	441a      	add	r2, r3
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d118      	bne.n	800fbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	4b15      	ldr	r3, [pc, #84]	; (800fc08 <prvInsertBlockIntoFreeList+0xb0>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d00d      	beq.n	800fbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	685a      	ldr	r2, [r3, #4]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	441a      	add	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	601a      	str	r2, [r3, #0]
 800fbd4:	e008      	b.n	800fbe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fbd6:	4b0c      	ldr	r3, [pc, #48]	; (800fc08 <prvInsertBlockIntoFreeList+0xb0>)
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	601a      	str	r2, [r3, #0]
 800fbde:	e003      	b.n	800fbe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d002      	beq.n	800fbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbf6:	bf00      	nop
 800fbf8:	3714      	adds	r7, #20
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	2401bcbc 	.word	0x2401bcbc
 800fc08:	2401bcc4 	.word	0x2401bcc4

0800fc0c <arm_max_f32>:
 800fc0c:	f101 3cff 	add.w	ip, r1, #4294967295
 800fc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc12:	4607      	mov	r7, r0
 800fc14:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800fc18:	ecf7 7a01 	vldmia	r7!, {s15}
 800fc1c:	d05c      	beq.n	800fcd8 <arm_max_f32+0xcc>
 800fc1e:	2400      	movs	r4, #0
 800fc20:	3014      	adds	r0, #20
 800fc22:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800fc26:	4625      	mov	r5, r4
 800fc28:	ed10 7a04 	vldr	s14, [r0, #-16]
 800fc2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc34:	d502      	bpl.n	800fc3c <arm_max_f32+0x30>
 800fc36:	eef0 7a47 	vmov.f32	s15, s14
 800fc3a:	1c65      	adds	r5, r4, #1
 800fc3c:	ed10 7a03 	vldr	s14, [r0, #-12]
 800fc40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc48:	d502      	bpl.n	800fc50 <arm_max_f32+0x44>
 800fc4a:	eef0 7a47 	vmov.f32	s15, s14
 800fc4e:	1ca5      	adds	r5, r4, #2
 800fc50:	ed10 7a02 	vldr	s14, [r0, #-8]
 800fc54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	d502      	bpl.n	800fc64 <arm_max_f32+0x58>
 800fc5e:	eef0 7a47 	vmov.f32	s15, s14
 800fc62:	1ce5      	adds	r5, r4, #3
 800fc64:	ed10 7a01 	vldr	s14, [r0, #-4]
 800fc68:	3404      	adds	r4, #4
 800fc6a:	3010      	adds	r0, #16
 800fc6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc74:	d502      	bpl.n	800fc7c <arm_max_f32+0x70>
 800fc76:	eef0 7a47 	vmov.f32	s15, s14
 800fc7a:	4625      	mov	r5, r4
 800fc7c:	42a6      	cmp	r6, r4
 800fc7e:	d1d3      	bne.n	800fc28 <arm_max_f32+0x1c>
 800fc80:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800fc84:	f01c 0003 	ands.w	r0, ip, #3
 800fc88:	d01e      	beq.n	800fcc8 <arm_max_f32+0xbc>
 800fc8a:	ed97 7a00 	vldr	s14, [r7]
 800fc8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc96:	dc1b      	bgt.n	800fcd0 <arm_max_f32+0xc4>
 800fc98:	3801      	subs	r0, #1
 800fc9a:	d015      	beq.n	800fcc8 <arm_max_f32+0xbc>
 800fc9c:	ed97 7a01 	vldr	s14, [r7, #4]
 800fca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca8:	d502      	bpl.n	800fcb0 <arm_max_f32+0xa4>
 800fcaa:	eef0 7a47 	vmov.f32	s15, s14
 800fcae:	1a0d      	subs	r5, r1, r0
 800fcb0:	2801      	cmp	r0, #1
 800fcb2:	d009      	beq.n	800fcc8 <arm_max_f32+0xbc>
 800fcb4:	ed97 7a02 	vldr	s14, [r7, #8]
 800fcb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc0:	dd02      	ble.n	800fcc8 <arm_max_f32+0xbc>
 800fcc2:	eef0 7a47 	vmov.f32	s15, s14
 800fcc6:	4665      	mov	r5, ip
 800fcc8:	edc2 7a00 	vstr	s15, [r2]
 800fccc:	601d      	str	r5, [r3, #0]
 800fcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcd0:	eef0 7a47 	vmov.f32	s15, s14
 800fcd4:	1a0d      	subs	r5, r1, r0
 800fcd6:	e7df      	b.n	800fc98 <arm_max_f32+0x8c>
 800fcd8:	4675      	mov	r5, lr
 800fcda:	e7d3      	b.n	800fc84 <arm_max_f32+0x78>

0800fcdc <arm_rfft_32_fast_init_f32>:
 800fcdc:	b180      	cbz	r0, 800fd00 <arm_rfft_32_fast_init_f32+0x24>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2220      	movs	r2, #32
 800fce2:	2010      	movs	r0, #16
 800fce4:	4908      	ldr	r1, [pc, #32]	; (800fd08 <arm_rfft_32_fast_init_f32+0x2c>)
 800fce6:	b430      	push	{r4, r5}
 800fce8:	2514      	movs	r5, #20
 800fcea:	4c08      	ldr	r4, [pc, #32]	; (800fd0c <arm_rfft_32_fast_init_f32+0x30>)
 800fcec:	821a      	strh	r2, [r3, #16]
 800fcee:	4a08      	ldr	r2, [pc, #32]	; (800fd10 <arm_rfft_32_fast_init_f32+0x34>)
 800fcf0:	8018      	strh	r0, [r3, #0]
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	819d      	strh	r5, [r3, #12]
 800fcf6:	615a      	str	r2, [r3, #20]
 800fcf8:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fcfc:	bc30      	pop	{r4, r5}
 800fcfe:	4770      	bx	lr
 800fd00:	f04f 30ff 	mov.w	r0, #4294967295
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	08016a38 	.word	0x08016a38
 800fd0c:	08012100 	.word	0x08012100
 800fd10:	0801f7b8 	.word	0x0801f7b8

0800fd14 <arm_rfft_64_fast_init_f32>:
 800fd14:	b180      	cbz	r0, 800fd38 <arm_rfft_64_fast_init_f32+0x24>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2240      	movs	r2, #64	; 0x40
 800fd1a:	2020      	movs	r0, #32
 800fd1c:	4908      	ldr	r1, [pc, #32]	; (800fd40 <arm_rfft_64_fast_init_f32+0x2c>)
 800fd1e:	b430      	push	{r4, r5}
 800fd20:	2530      	movs	r5, #48	; 0x30
 800fd22:	4c08      	ldr	r4, [pc, #32]	; (800fd44 <arm_rfft_64_fast_init_f32+0x30>)
 800fd24:	821a      	strh	r2, [r3, #16]
 800fd26:	4a08      	ldr	r2, [pc, #32]	; (800fd48 <arm_rfft_64_fast_init_f32+0x34>)
 800fd28:	8018      	strh	r0, [r3, #0]
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	819d      	strh	r5, [r3, #12]
 800fd2e:	615a      	str	r2, [r3, #20]
 800fd30:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fd34:	bc30      	pop	{r4, r5}
 800fd36:	4770      	bx	lr
 800fd38:	f04f 30ff 	mov.w	r0, #4294967295
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop
 800fd40:	0801b2b8 	.word	0x0801b2b8
 800fd44:	08014258 	.word	0x08014258
 800fd48:	08024038 	.word	0x08024038

0800fd4c <arm_rfft_256_fast_init_f32>:
 800fd4c:	b188      	cbz	r0, 800fd72 <arm_rfft_256_fast_init_f32+0x26>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd54:	2080      	movs	r0, #128	; 0x80
 800fd56:	4908      	ldr	r1, [pc, #32]	; (800fd78 <arm_rfft_256_fast_init_f32+0x2c>)
 800fd58:	b430      	push	{r4, r5}
 800fd5a:	25d0      	movs	r5, #208	; 0xd0
 800fd5c:	4c07      	ldr	r4, [pc, #28]	; (800fd7c <arm_rfft_256_fast_init_f32+0x30>)
 800fd5e:	821a      	strh	r2, [r3, #16]
 800fd60:	4a07      	ldr	r2, [pc, #28]	; (800fd80 <arm_rfft_256_fast_init_f32+0x34>)
 800fd62:	8018      	strh	r0, [r3, #0]
 800fd64:	2000      	movs	r0, #0
 800fd66:	819d      	strh	r5, [r3, #12]
 800fd68:	615a      	str	r2, [r3, #20]
 800fd6a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fd6e:	bc30      	pop	{r4, r5}
 800fd70:	4770      	bx	lr
 800fd72:	f04f 30ff 	mov.w	r0, #4294967295
 800fd76:	4770      	bx	lr
 800fd78:	08016638 	.word	0x08016638
 800fd7c:	08011f60 	.word	0x08011f60
 800fd80:	0801f3b8 	.word	0x0801f3b8

0800fd84 <arm_rfft_512_fast_init_f32>:
 800fd84:	b198      	cbz	r0, 800fdae <arm_rfft_512_fast_init_f32+0x2a>
 800fd86:	4603      	mov	r3, r0
 800fd88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fd90:	4908      	ldr	r1, [pc, #32]	; (800fdb4 <arm_rfft_512_fast_init_f32+0x30>)
 800fd92:	b430      	push	{r4, r5}
 800fd94:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800fd98:	4c07      	ldr	r4, [pc, #28]	; (800fdb8 <arm_rfft_512_fast_init_f32+0x34>)
 800fd9a:	821a      	strh	r2, [r3, #16]
 800fd9c:	4a07      	ldr	r2, [pc, #28]	; (800fdbc <arm_rfft_512_fast_init_f32+0x38>)
 800fd9e:	8018      	strh	r0, [r3, #0]
 800fda0:	2000      	movs	r0, #0
 800fda2:	819d      	strh	r5, [r3, #12]
 800fda4:	615a      	str	r2, [r3, #20]
 800fda6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fdaa:	bc30      	pop	{r4, r5}
 800fdac:	4770      	bx	lr
 800fdae:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb2:	4770      	bx	lr
 800fdb4:	0801aab8 	.word	0x0801aab8
 800fdb8:	08013ee8 	.word	0x08013ee8
 800fdbc:	08023838 	.word	0x08023838

0800fdc0 <arm_rfft_1024_fast_init_f32>:
 800fdc0:	b198      	cbz	r0, 800fdea <arm_rfft_1024_fast_init_f32+0x2a>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fdc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fdcc:	4908      	ldr	r1, [pc, #32]	; (800fdf0 <arm_rfft_1024_fast_init_f32+0x30>)
 800fdce:	b430      	push	{r4, r5}
 800fdd0:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800fdd4:	4c07      	ldr	r4, [pc, #28]	; (800fdf4 <arm_rfft_1024_fast_init_f32+0x34>)
 800fdd6:	821a      	strh	r2, [r3, #16]
 800fdd8:	4a07      	ldr	r2, [pc, #28]	; (800fdf8 <arm_rfft_1024_fast_init_f32+0x38>)
 800fdda:	8018      	strh	r0, [r3, #0]
 800fddc:	2000      	movs	r0, #0
 800fdde:	819d      	strh	r5, [r3, #12]
 800fde0:	615a      	str	r2, [r3, #20]
 800fde2:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fde6:	bc30      	pop	{r4, r5}
 800fde8:	4770      	bx	lr
 800fdea:	f04f 30ff 	mov.w	r0, #4294967295
 800fdee:	4770      	bx	lr
 800fdf0:	0801b3b8 	.word	0x0801b3b8
 800fdf4:	080142b8 	.word	0x080142b8
 800fdf8:	0801c3b8 	.word	0x0801c3b8

0800fdfc <arm_rfft_2048_fast_init_f32>:
 800fdfc:	b198      	cbz	r0, 800fe26 <arm_rfft_2048_fast_init_f32+0x2a>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800fe08:	4908      	ldr	r1, [pc, #32]	; (800fe2c <arm_rfft_2048_fast_init_f32+0x30>)
 800fe0a:	b430      	push	{r4, r5}
 800fe0c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800fe10:	4c07      	ldr	r4, [pc, #28]	; (800fe30 <arm_rfft_2048_fast_init_f32+0x34>)
 800fe12:	821a      	strh	r2, [r3, #16]
 800fe14:	4a07      	ldr	r2, [pc, #28]	; (800fe34 <arm_rfft_2048_fast_init_f32+0x38>)
 800fe16:	8018      	strh	r0, [r3, #0]
 800fe18:	2000      	movs	r0, #0
 800fe1a:	819d      	strh	r5, [r3, #12]
 800fe1c:	615a      	str	r2, [r3, #20]
 800fe1e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fe22:	bc30      	pop	{r4, r5}
 800fe24:	4770      	bx	lr
 800fe26:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2a:	4770      	bx	lr
 800fe2c:	08014638 	.word	0x08014638
 800fe30:	08011150 	.word	0x08011150
 800fe34:	0801d3b8 	.word	0x0801d3b8

0800fe38 <arm_rfft_4096_fast_init_f32>:
 800fe38:	b198      	cbz	r0, 800fe62 <arm_rfft_4096_fast_init_f32+0x2a>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fe44:	4908      	ldr	r1, [pc, #32]	; (800fe68 <arm_rfft_4096_fast_init_f32+0x30>)
 800fe46:	b430      	push	{r4, r5}
 800fe48:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800fe4c:	4c07      	ldr	r4, [pc, #28]	; (800fe6c <arm_rfft_4096_fast_init_f32+0x34>)
 800fe4e:	821a      	strh	r2, [r3, #16]
 800fe50:	4a07      	ldr	r2, [pc, #28]	; (800fe70 <arm_rfft_4096_fast_init_f32+0x38>)
 800fe52:	8018      	strh	r0, [r3, #0]
 800fe54:	2000      	movs	r0, #0
 800fe56:	819d      	strh	r5, [r3, #12]
 800fe58:	615a      	str	r2, [r3, #20]
 800fe5a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fe5e:	bc30      	pop	{r4, r5}
 800fe60:	4770      	bx	lr
 800fe62:	f04f 30ff 	mov.w	r0, #4294967295
 800fe66:	4770      	bx	lr
 800fe68:	08016ab8 	.word	0x08016ab8
 800fe6c:	08012128 	.word	0x08012128
 800fe70:	0801f838 	.word	0x0801f838

0800fe74 <arm_rfft_fast_init_f32>:
 800fe74:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fe78:	d01f      	beq.n	800feba <arm_rfft_fast_init_f32+0x46>
 800fe7a:	d90b      	bls.n	800fe94 <arm_rfft_fast_init_f32+0x20>
 800fe7c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800fe80:	d019      	beq.n	800feb6 <arm_rfft_fast_init_f32+0x42>
 800fe82:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800fe86:	d012      	beq.n	800feae <arm_rfft_fast_init_f32+0x3a>
 800fe88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fe8c:	d00d      	beq.n	800feaa <arm_rfft_fast_init_f32+0x36>
 800fe8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe92:	4770      	bx	lr
 800fe94:	2940      	cmp	r1, #64	; 0x40
 800fe96:	d00c      	beq.n	800feb2 <arm_rfft_fast_init_f32+0x3e>
 800fe98:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fe9c:	d003      	beq.n	800fea6 <arm_rfft_fast_init_f32+0x32>
 800fe9e:	2920      	cmp	r1, #32
 800fea0:	d1f5      	bne.n	800fe8e <arm_rfft_fast_init_f32+0x1a>
 800fea2:	4b07      	ldr	r3, [pc, #28]	; (800fec0 <arm_rfft_fast_init_f32+0x4c>)
 800fea4:	4718      	bx	r3
 800fea6:	4b07      	ldr	r3, [pc, #28]	; (800fec4 <arm_rfft_fast_init_f32+0x50>)
 800fea8:	4718      	bx	r3
 800feaa:	4b07      	ldr	r3, [pc, #28]	; (800fec8 <arm_rfft_fast_init_f32+0x54>)
 800feac:	4718      	bx	r3
 800feae:	4b07      	ldr	r3, [pc, #28]	; (800fecc <arm_rfft_fast_init_f32+0x58>)
 800feb0:	4718      	bx	r3
 800feb2:	4b07      	ldr	r3, [pc, #28]	; (800fed0 <arm_rfft_fast_init_f32+0x5c>)
 800feb4:	e7f6      	b.n	800fea4 <arm_rfft_fast_init_f32+0x30>
 800feb6:	4b07      	ldr	r3, [pc, #28]	; (800fed4 <arm_rfft_fast_init_f32+0x60>)
 800feb8:	e7f4      	b.n	800fea4 <arm_rfft_fast_init_f32+0x30>
 800feba:	4b07      	ldr	r3, [pc, #28]	; (800fed8 <arm_rfft_fast_init_f32+0x64>)
 800febc:	e7f2      	b.n	800fea4 <arm_rfft_fast_init_f32+0x30>
 800febe:	bf00      	nop
 800fec0:	0800fcdd 	.word	0x0800fcdd
 800fec4:	0800fd4d 	.word	0x0800fd4d
 800fec8:	0800fdc1 	.word	0x0800fdc1
 800fecc:	0800fe39 	.word	0x0800fe39
 800fed0:	0800fd15 	.word	0x0800fd15
 800fed4:	0800fdfd 	.word	0x0800fdfd
 800fed8:	0800fd85 	.word	0x0800fd85

0800fedc <stage_rfft_f32>:
 800fedc:	b470      	push	{r4, r5, r6}
 800fede:	edd1 7a00 	vldr	s15, [r1]
 800fee2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fee6:	ed91 7a01 	vldr	s14, [r1, #4]
 800feea:	f101 0510 	add.w	r5, r1, #16
 800feee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fef2:	8806      	ldrh	r6, [r0, #0]
 800fef4:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fef8:	6943      	ldr	r3, [r0, #20]
 800fefa:	1e70      	subs	r0, r6, #1
 800fefc:	eeb0 4a46 	vmov.f32	s8, s12
 800ff00:	f102 0410 	add.w	r4, r2, #16
 800ff04:	3310      	adds	r3, #16
 800ff06:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ff0a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ff0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff12:	3908      	subs	r1, #8
 800ff14:	ee26 7a86 	vmul.f32	s14, s13, s12
 800ff18:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ff1c:	ed82 7a00 	vstr	s14, [r2]
 800ff20:	edc2 7a01 	vstr	s15, [r2, #4]
 800ff24:	ed15 6a02 	vldr	s12, [r5, #-8]
 800ff28:	3801      	subs	r0, #1
 800ff2a:	ed91 7a02 	vldr	s14, [r1, #8]
 800ff2e:	f105 0508 	add.w	r5, r5, #8
 800ff32:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ff36:	f1a1 0108 	sub.w	r1, r1, #8
 800ff3a:	ee77 5a46 	vsub.f32	s11, s14, s12
 800ff3e:	edd1 4a05 	vldr	s9, [r1, #20]
 800ff42:	ed55 7a03 	vldr	s15, [r5, #-12]
 800ff46:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ff4a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800ff4e:	f104 0408 	add.w	r4, r4, #8
 800ff52:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ff56:	f103 0308 	add.w	r3, r3, #8
 800ff5a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ff5e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ff62:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ff66:	ee37 7a23 	vadd.f32	s14, s14, s7
 800ff6a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ff6e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ff72:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ff76:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ff7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ff7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ff82:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ff86:	ed04 7a04 	vstr	s14, [r4, #-16]
 800ff8a:	ed44 7a03 	vstr	s15, [r4, #-12]
 800ff8e:	d1c9      	bne.n	800ff24 <stage_rfft_f32+0x48>
 800ff90:	bc70      	pop	{r4, r5, r6}
 800ff92:	4770      	bx	lr

0800ff94 <merge_rfft_f32>:
 800ff94:	b410      	push	{r4}
 800ff96:	edd1 7a00 	vldr	s15, [r1]
 800ff9a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800ff9e:	edd1 6a01 	vldr	s13, [r1, #4]
 800ffa2:	8804      	ldrh	r4, [r0, #0]
 800ffa4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ffa8:	6940      	ldr	r0, [r0, #20]
 800ffaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ffae:	3c01      	subs	r4, #1
 800ffb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ffb4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ffb8:	ed82 7a00 	vstr	s14, [r2]
 800ffbc:	edc2 7a01 	vstr	s15, [r2, #4]
 800ffc0:	b3dc      	cbz	r4, 801003a <merge_rfft_f32+0xa6>
 800ffc2:	00e3      	lsls	r3, r4, #3
 800ffc4:	3010      	adds	r0, #16
 800ffc6:	3210      	adds	r2, #16
 800ffc8:	3b08      	subs	r3, #8
 800ffca:	440b      	add	r3, r1
 800ffcc:	3110      	adds	r1, #16
 800ffce:	ed11 6a02 	vldr	s12, [r1, #-8]
 800ffd2:	3c01      	subs	r4, #1
 800ffd4:	ed93 7a02 	vldr	s14, [r3, #8]
 800ffd8:	f101 0108 	add.w	r1, r1, #8
 800ffdc:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ffe0:	f1a3 0308 	sub.w	r3, r3, #8
 800ffe4:	ee76 5a47 	vsub.f32	s11, s12, s14
 800ffe8:	edd3 4a05 	vldr	s9, [r3, #20]
 800ffec:	ed51 7a03 	vldr	s15, [r1, #-12]
 800fff0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fff4:	ed10 6a01 	vldr	s12, [r0, #-4]
 800fff8:	f102 0208 	add.w	r2, r2, #8
 800fffc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8010000:	f100 0008 	add.w	r0, r0, #8
 8010004:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8010008:	ee66 5a25 	vmul.f32	s11, s12, s11
 801000c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8010010:	ee37 7a63 	vsub.f32	s14, s14, s7
 8010014:	ee66 6a85 	vmul.f32	s13, s13, s10
 8010018:	ee26 6a05 	vmul.f32	s12, s12, s10
 801001c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010020:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010024:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010028:	ee27 7a04 	vmul.f32	s14, s14, s8
 801002c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010030:	ed02 7a04 	vstr	s14, [r2, #-16]
 8010034:	ed42 7a03 	vstr	s15, [r2, #-12]
 8010038:	d1c9      	bne.n	800ffce <merge_rfft_f32+0x3a>
 801003a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801003e:	4770      	bx	lr

08010040 <arm_rfft_fast_f32>:
 8010040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010044:	8a05      	ldrh	r5, [r0, #16]
 8010046:	4604      	mov	r4, r0
 8010048:	4617      	mov	r7, r2
 801004a:	461e      	mov	r6, r3
 801004c:	086d      	lsrs	r5, r5, #1
 801004e:	8005      	strh	r5, [r0, #0]
 8010050:	b14b      	cbz	r3, 8010066 <arm_rfft_fast_f32+0x26>
 8010052:	f7ff ff9f 	bl	800ff94 <merge_rfft_f32>
 8010056:	4632      	mov	r2, r6
 8010058:	4639      	mov	r1, r7
 801005a:	4620      	mov	r0, r4
 801005c:	2301      	movs	r3, #1
 801005e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010062:	f000 bb35 	b.w	80106d0 <arm_cfft_f32>
 8010066:	4688      	mov	r8, r1
 8010068:	461a      	mov	r2, r3
 801006a:	2301      	movs	r3, #1
 801006c:	f000 fb30 	bl	80106d0 <arm_cfft_f32>
 8010070:	463a      	mov	r2, r7
 8010072:	4641      	mov	r1, r8
 8010074:	4620      	mov	r0, r4
 8010076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801007a:	f7ff bf2f 	b.w	800fedc <stage_rfft_f32>
 801007e:	bf00      	nop

08010080 <arm_cfft_radix8by2_f32>:
 8010080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010084:	4607      	mov	r7, r0
 8010086:	4608      	mov	r0, r1
 8010088:	ed2d 8b06 	vpush	{d8-d10}
 801008c:	f8b7 c000 	ldrh.w	ip, [r7]
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8010096:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 801009a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801009e:	f000 80ac 	beq.w	80101fa <arm_cfft_radix8by2_f32+0x17a>
 80100a2:	008c      	lsls	r4, r1, #2
 80100a4:	f100 0310 	add.w	r3, r0, #16
 80100a8:	3210      	adds	r2, #16
 80100aa:	f108 0610 	add.w	r6, r8, #16
 80100ae:	3410      	adds	r4, #16
 80100b0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80100b4:	1905      	adds	r5, r0, r4
 80100b6:	4444      	add	r4, r8
 80100b8:	ed16 7a04 	vldr	s14, [r6, #-16]
 80100bc:	3310      	adds	r3, #16
 80100be:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 80100c2:	3510      	adds	r5, #16
 80100c4:	ed56 0a03 	vldr	s1, [r6, #-12]
 80100c8:	3210      	adds	r2, #16
 80100ca:	ee74 9a87 	vadd.f32	s19, s9, s14
 80100ce:	ed56 7a02 	vldr	s15, [r6, #-8]
 80100d2:	ed56 2a01 	vldr	s5, [r6, #-4]
 80100d6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80100da:	ed54 5a04 	vldr	s11, [r4, #-16]
 80100de:	3610      	adds	r6, #16
 80100e0:	ed14 5a03 	vldr	s10, [r4, #-12]
 80100e4:	3410      	adds	r4, #16
 80100e6:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 80100ea:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80100ee:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 80100f2:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 80100f6:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 80100fa:	ee36 9aa5 	vadd.f32	s18, s13, s11
 80100fe:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 8010102:	ee33 8a83 	vadd.f32	s16, s7, s6
 8010106:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 801010a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 801010e:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8010112:	ee34 0a06 	vadd.f32	s0, s8, s12
 8010116:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 801011a:	ee77 aa20 	vadd.f32	s21, s14, s1
 801011e:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 8010122:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8010126:	ee72 9a22 	vadd.f32	s19, s4, s5
 801012a:	ee71 8a05 	vadd.f32	s17, s2, s10
 801012e:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 8010132:	ee37 7a60 	vsub.f32	s14, s14, s1
 8010136:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 801013a:	ee35 5a41 	vsub.f32	s10, s10, s2
 801013e:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 8010142:	ee36 6a44 	vsub.f32	s12, s12, s8
 8010146:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 801014a:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 801014e:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8010152:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 8010156:	ee72 7a62 	vsub.f32	s15, s4, s5
 801015a:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 801015e:	ee73 2a63 	vsub.f32	s5, s6, s7
 8010162:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8010166:	4563      	cmp	r3, ip
 8010168:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 801016c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8010170:	ee27 2a26 	vmul.f32	s4, s14, s13
 8010174:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8010178:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801017c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010180:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010184:	ee65 6a26 	vmul.f32	s13, s10, s13
 8010188:	ee25 5a04 	vmul.f32	s10, s10, s8
 801018c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010190:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010194:	ee33 4a02 	vadd.f32	s8, s6, s4
 8010198:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801019c:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 80101a0:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 80101a4:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 80101a8:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 80101ac:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80101b0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80101b4:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80101b8:	ee27 4a87 	vmul.f32	s8, s15, s14
 80101bc:	ee61 5a87 	vmul.f32	s11, s3, s14
 80101c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101c4:	ee22 5a87 	vmul.f32	s10, s5, s14
 80101c8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80101cc:	ee26 6a26 	vmul.f32	s12, s12, s13
 80101d0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80101d4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80101d8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80101dc:	ee35 6a46 	vsub.f32	s12, s10, s12
 80101e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80101e4:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 80101e8:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 80101ec:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 80101f0:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 80101f4:	f47f af60 	bne.w	80100b8 <arm_cfft_radix8by2_f32+0x38>
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	b28c      	uxth	r4, r1
 80101fc:	2302      	movs	r3, #2
 80101fe:	4621      	mov	r1, r4
 8010200:	f000 fb04 	bl	801080c <arm_radix8_butterfly_f32>
 8010204:	4621      	mov	r1, r4
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	4640      	mov	r0, r8
 801020a:	2302      	movs	r3, #2
 801020c:	ecbd 8b06 	vpop	{d8-d10}
 8010210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010214:	f000 bafa 	b.w	801080c <arm_radix8_butterfly_f32>

08010218 <arm_cfft_radix8by4_f32>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	ed2d 8b04 	vpush	{d8-d9}
 8010220:	8804      	ldrh	r4, [r0, #0]
 8010222:	b08d      	sub	sp, #52	; 0x34
 8010224:	6842      	ldr	r2, [r0, #4]
 8010226:	460d      	mov	r5, r1
 8010228:	0864      	lsrs	r4, r4, #1
 801022a:	edd1 7a00 	vldr	s15, [r1]
 801022e:	edd1 5a01 	vldr	s11, [r1, #4]
 8010232:	00a3      	lsls	r3, r4, #2
 8010234:	18ce      	adds	r6, r1, r3
 8010236:	18f7      	adds	r7, r6, r3
 8010238:	ed96 7a00 	vldr	s14, [r6]
 801023c:	ed96 4a01 	vldr	s8, [r6, #4]
 8010240:	ed97 6a00 	vldr	s12, [r7]
 8010244:	edd7 4a01 	vldr	s9, [r7, #4]
 8010248:	ee77 6a86 	vadd.f32	s13, s15, s12
 801024c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010250:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8010254:	ee77 2a26 	vadd.f32	s5, s14, s13
 8010258:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801025c:	ee74 3a27 	vadd.f32	s7, s8, s15
 8010260:	ee76 4a44 	vsub.f32	s9, s12, s8
 8010264:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010268:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801026c:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8010270:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010274:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010278:	0860      	lsrs	r0, r4, #1
 801027a:	f102 0408 	add.w	r4, r2, #8
 801027e:	9405      	str	r4, [sp, #20]
 8010280:	f102 0410 	add.w	r4, r2, #16
 8010284:	9009      	str	r0, [sp, #36]	; 0x24
 8010286:	f1a0 0902 	sub.w	r9, r0, #2
 801028a:	9403      	str	r4, [sp, #12]
 801028c:	18fc      	adds	r4, r7, r3
 801028e:	f102 0018 	add.w	r0, r2, #24
 8010292:	ed94 5a00 	vldr	s10, [r4]
 8010296:	ed94 3a01 	vldr	s6, [r4, #4]
 801029a:	ee72 2a85 	vadd.f32	s5, s5, s10
 801029e:	9004      	str	r0, [sp, #16]
 80102a0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80102a4:	4620      	mov	r0, r4
 80102a6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80102aa:	9408      	str	r4, [sp, #32]
 80102ac:	ee12 ca90 	vmov	ip, s5
 80102b0:	ee74 5ac3 	vsub.f32	s11, s9, s6
 80102b4:	ee77 7a83 	vadd.f32	s15, s15, s6
 80102b8:	f845 cb08 	str.w	ip, [r5], #8
 80102bc:	ee13 ca90 	vmov	ip, s7
 80102c0:	ed96 2a01 	vldr	s4, [r6, #4]
 80102c4:	ee74 4a05 	vadd.f32	s9, s8, s10
 80102c8:	edd4 2a01 	vldr	s5, [r4, #4]
 80102cc:	ee37 7a45 	vsub.f32	s14, s14, s10
 80102d0:	ee36 6a02 	vadd.f32	s12, s12, s4
 80102d4:	9500      	str	r5, [sp, #0]
 80102d6:	460d      	mov	r5, r1
 80102d8:	ee36 6a22 	vadd.f32	s12, s12, s5
 80102dc:	ed81 6a01 	vstr	s12, [r1, #4]
 80102e0:	4631      	mov	r1, r6
 80102e2:	f841 cb08 	str.w	ip, [r1], #8
 80102e6:	ee16 ca90 	vmov	ip, s13
 80102ea:	9106      	str	r1, [sp, #24]
 80102ec:	4639      	mov	r1, r7
 80102ee:	edc6 4a01 	vstr	s9, [r6, #4]
 80102f2:	f841 cb08 	str.w	ip, [r1], #8
 80102f6:	9102      	str	r1, [sp, #8]
 80102f8:	ee17 1a90 	vmov	r1, s15
 80102fc:	edc7 5a01 	vstr	s11, [r7, #4]
 8010300:	f840 1b08 	str.w	r1, [r0], #8
 8010304:	ea5f 0159 	movs.w	r1, r9, lsr #1
 8010308:	9001      	str	r0, [sp, #4]
 801030a:	ed84 7a01 	vstr	s14, [r4, #4]
 801030e:	9107      	str	r1, [sp, #28]
 8010310:	f000 8135 	beq.w	801057e <arm_cfft_radix8by4_f32+0x366>
 8010314:	3b0c      	subs	r3, #12
 8010316:	f102 0920 	add.w	r9, r2, #32
 801031a:	f102 0830 	add.w	r8, r2, #48	; 0x30
 801031e:	4622      	mov	r2, r4
 8010320:	468b      	mov	fp, r1
 8010322:	f105 0e10 	add.w	lr, r5, #16
 8010326:	4423      	add	r3, r4
 8010328:	f1a6 0c0c 	sub.w	ip, r6, #12
 801032c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8010330:	f106 0010 	add.w	r0, r6, #16
 8010334:	f1a7 010c 	sub.w	r1, r7, #12
 8010338:	f107 0510 	add.w	r5, r7, #16
 801033c:	3c0c      	subs	r4, #12
 801033e:	3210      	adds	r2, #16
 8010340:	ed15 7a02 	vldr	s14, [r5, #-8]
 8010344:	f1bb 0b01 	subs.w	fp, fp, #1
 8010348:	ed5e 7a02 	vldr	s15, [lr, #-8]
 801034c:	f1ac 0c08 	sub.w	ip, ip, #8
 8010350:	ed50 6a02 	vldr	s13, [r0, #-8]
 8010354:	f10e 0e08 	add.w	lr, lr, #8
 8010358:	ee77 1a87 	vadd.f32	s3, s15, s14
 801035c:	ed52 4a02 	vldr	s9, [r2, #-8]
 8010360:	ed55 5a01 	vldr	s11, [r5, #-4]
 8010364:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010368:	ed1e 7a03 	vldr	s14, [lr, #-12]
 801036c:	f10a 0a08 	add.w	sl, sl, #8
 8010370:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8010374:	ed10 3a01 	vldr	s6, [r0, #-4]
 8010378:	ee37 4a25 	vadd.f32	s8, s14, s11
 801037c:	ed52 3a01 	vldr	s7, [r2, #-4]
 8010380:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010384:	f100 0008 	add.w	r0, r0, #8
 8010388:	ee36 6a24 	vadd.f32	s12, s12, s9
 801038c:	f1a1 0108 	sub.w	r1, r1, #8
 8010390:	ee73 2a27 	vadd.f32	s5, s6, s15
 8010394:	f109 0910 	add.w	r9, r9, #16
 8010398:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801039c:	f105 0508 	add.w	r5, r5, #8
 80103a0:	ed0e 6a04 	vstr	s12, [lr, #-16]
 80103a4:	ee37 5a66 	vsub.f32	s10, s14, s13
 80103a8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80103ac:	ee71 1ae6 	vsub.f32	s3, s3, s13
 80103b0:	ed12 6a01 	vldr	s12, [r2, #-4]
 80103b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80103b8:	ee74 5a25 	vadd.f32	s11, s8, s11
 80103bc:	f1a4 0408 	sub.w	r4, r4, #8
 80103c0:	ee34 4a43 	vsub.f32	s8, s8, s6
 80103c4:	f108 0818 	add.w	r8, r8, #24
 80103c8:	ee32 0ae3 	vsub.f32	s0, s5, s7
 80103cc:	f102 0208 	add.w	r2, r2, #8
 80103d0:	ee75 5a86 	vadd.f32	s11, s11, s12
 80103d4:	f1a3 0308 	sub.w	r3, r3, #8
 80103d8:	ee34 6a63 	vsub.f32	s12, s8, s7
 80103dc:	ee77 3aa3 	vadd.f32	s7, s15, s7
 80103e0:	ed4e 5a03 	vstr	s11, [lr, #-12]
 80103e4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80103e8:	ed94 4a04 	vldr	s8, [r4, #16]
 80103ec:	ee71 1ae4 	vsub.f32	s3, s3, s9
 80103f0:	ed9c 3a04 	vldr	s6, [ip, #16]
 80103f4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80103f8:	edd1 7a04 	vldr	s15, [r1, #16]
 80103fc:	ee73 6a04 	vadd.f32	s13, s6, s8
 8010400:	ed93 8a04 	vldr	s16, [r3, #16]
 8010404:	edd4 5a03 	vldr	s11, [r4, #12]
 8010408:	ee33 3a44 	vsub.f32	s6, s6, s8
 801040c:	ed9c 2a03 	vldr	s4, [ip, #12]
 8010410:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8010414:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8010418:	ed91 1a03 	vldr	s2, [r1, #12]
 801041c:	ee32 4a25 	vadd.f32	s8, s4, s11
 8010420:	edd3 2a03 	vldr	s5, [r3, #12]
 8010424:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010428:	ee70 0a88 	vadd.f32	s1, s1, s16
 801042c:	ee73 4a41 	vsub.f32	s9, s6, s2
 8010430:	ee32 2a65 	vsub.f32	s4, s4, s11
 8010434:	edcc 0a04 	vstr	s1, [ip, #16]
 8010438:	ee74 0a41 	vsub.f32	s1, s8, s2
 801043c:	edd1 6a03 	vldr	s13, [r1, #12]
 8010440:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8010444:	ed93 9a03 	vldr	s18, [r3, #12]
 8010448:	ee78 5a82 	vadd.f32	s11, s17, s4
 801044c:	ee34 4a26 	vadd.f32	s8, s8, s13
 8010450:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8010454:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8010458:	ee34 4a09 	vadd.f32	s8, s8, s18
 801045c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8010460:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8010464:	ed8c 4a03 	vstr	s8, [ip, #12]
 8010468:	ee38 2ac2 	vsub.f32	s4, s17, s4
 801046c:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8010470:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8010474:	ee60 2a01 	vmul.f32	s5, s0, s2
 8010478:	ee64 6a81 	vmul.f32	s13, s9, s2
 801047c:	ee20 8a04 	vmul.f32	s16, s0, s8
 8010480:	ee64 4a84 	vmul.f32	s9, s9, s8
 8010484:	ee25 0a01 	vmul.f32	s0, s10, s2
 8010488:	ee25 5a04 	vmul.f32	s10, s10, s8
 801048c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8010490:	ee65 5a81 	vmul.f32	s11, s11, s2
 8010494:	ee35 5a62 	vsub.f32	s10, s10, s5
 8010498:	ee36 4ac4 	vsub.f32	s8, s13, s8
 801049c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80104a0:	ee38 1a00 	vadd.f32	s2, s16, s0
 80104a4:	ed00 5a03 	vstr	s10, [r0, #-12]
 80104a8:	ed00 1a04 	vstr	s2, [r0, #-16]
 80104ac:	ed81 4a04 	vstr	s8, [r1, #16]
 80104b0:	edc1 5a03 	vstr	s11, [r1, #12]
 80104b4:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 80104b8:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 80104bc:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 80104c0:	ee66 2a25 	vmul.f32	s5, s12, s11
 80104c4:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80104c8:	ee21 4a85 	vmul.f32	s8, s3, s10
 80104cc:	ee60 7a85 	vmul.f32	s15, s1, s10
 80104d0:	ee61 1aa5 	vmul.f32	s3, s3, s11
 80104d4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80104d8:	ee60 5aa5 	vmul.f32	s11, s1, s11
 80104dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80104e0:	ee34 5a22 	vadd.f32	s10, s8, s5
 80104e4:	ee36 6a61 	vsub.f32	s12, s12, s3
 80104e8:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80104ec:	ed05 5a04 	vstr	s10, [r5, #-16]
 80104f0:	ed05 6a03 	vstr	s12, [r5, #-12]
 80104f4:	edc4 5a04 	vstr	s11, [r4, #16]
 80104f8:	edc4 6a03 	vstr	s13, [r4, #12]
 80104fc:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 8010500:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 8010504:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8010508:	ee67 5a27 	vmul.f32	s11, s14, s15
 801050c:	ee63 6a27 	vmul.f32	s13, s6, s15
 8010510:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8010514:	ee27 7a22 	vmul.f32	s14, s14, s5
 8010518:	ee62 7a27 	vmul.f32	s15, s4, s15
 801051c:	ee23 3a22 	vmul.f32	s6, s6, s5
 8010520:	ee22 2a22 	vmul.f32	s4, s4, s5
 8010524:	ee36 6a25 	vadd.f32	s12, s12, s11
 8010528:	ee37 7a63 	vsub.f32	s14, s14, s7
 801052c:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8010530:	ee77 7a83 	vadd.f32	s15, s15, s6
 8010534:	ed02 6a04 	vstr	s12, [r2, #-16]
 8010538:	ed02 7a03 	vstr	s14, [r2, #-12]
 801053c:	ed83 2a04 	vstr	s4, [r3, #16]
 8010540:	edc3 7a03 	vstr	s15, [r3, #12]
 8010544:	f47f aefc 	bne.w	8010340 <arm_cfft_radix8by4_f32+0x128>
 8010548:	9907      	ldr	r1, [sp, #28]
 801054a:	9803      	ldr	r0, [sp, #12]
 801054c:	00cb      	lsls	r3, r1, #3
 801054e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010552:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010556:	9103      	str	r1, [sp, #12]
 8010558:	9900      	ldr	r1, [sp, #0]
 801055a:	4419      	add	r1, r3
 801055c:	9100      	str	r1, [sp, #0]
 801055e:	9905      	ldr	r1, [sp, #20]
 8010560:	4419      	add	r1, r3
 8010562:	9105      	str	r1, [sp, #20]
 8010564:	9906      	ldr	r1, [sp, #24]
 8010566:	4419      	add	r1, r3
 8010568:	9106      	str	r1, [sp, #24]
 801056a:	9902      	ldr	r1, [sp, #8]
 801056c:	4419      	add	r1, r3
 801056e:	9102      	str	r1, [sp, #8]
 8010570:	9901      	ldr	r1, [sp, #4]
 8010572:	4419      	add	r1, r3
 8010574:	9b04      	ldr	r3, [sp, #16]
 8010576:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801057a:	9101      	str	r1, [sp, #4]
 801057c:	9304      	str	r3, [sp, #16]
 801057e:	9b00      	ldr	r3, [sp, #0]
 8010580:	9902      	ldr	r1, [sp, #8]
 8010582:	ed93 7a00 	vldr	s14, [r3]
 8010586:	edd1 7a00 	vldr	s15, [r1]
 801058a:	9a06      	ldr	r2, [sp, #24]
 801058c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010590:	9d01      	ldr	r5, [sp, #4]
 8010592:	edd2 6a00 	vldr	s13, [r2]
 8010596:	ee37 7a67 	vsub.f32	s14, s14, s15
 801059a:	9b02      	ldr	r3, [sp, #8]
 801059c:	ee76 3a86 	vadd.f32	s7, s13, s12
 80105a0:	ed95 3a00 	vldr	s6, [r5]
 80105a4:	ed93 5a01 	vldr	s10, [r3, #4]
 80105a8:	ee36 6a66 	vsub.f32	s12, s12, s13
 80105ac:	9b00      	ldr	r3, [sp, #0]
 80105ae:	ee73 3a83 	vadd.f32	s7, s7, s6
 80105b2:	edd5 2a01 	vldr	s5, [r5, #4]
 80105b6:	ed93 4a01 	vldr	s8, [r3, #4]
 80105ba:	ee36 6a43 	vsub.f32	s12, s12, s6
 80105be:	9b00      	ldr	r3, [sp, #0]
 80105c0:	ee74 5a05 	vadd.f32	s11, s8, s10
 80105c4:	edd2 7a01 	vldr	s15, [r2, #4]
 80105c8:	edc3 3a00 	vstr	s7, [r3]
 80105cc:	ee34 4a45 	vsub.f32	s8, s8, s10
 80105d0:	edd2 3a01 	vldr	s7, [r2, #4]
 80105d4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80105d8:	ed95 2a01 	vldr	s4, [r5, #4]
 80105dc:	ee75 3aa3 	vadd.f32	s7, s11, s7
 80105e0:	9d05      	ldr	r5, [sp, #20]
 80105e2:	ee34 5a66 	vsub.f32	s10, s8, s13
 80105e6:	9b00      	ldr	r3, [sp, #0]
 80105e8:	ee74 4ae2 	vsub.f32	s9, s9, s5
 80105ec:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80105f0:	ee73 3a82 	vadd.f32	s7, s7, s4
 80105f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80105f6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80105fa:	4621      	mov	r1, r4
 80105fc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010600:	edc3 3a01 	vstr	s7, [r3, #4]
 8010604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010608:	edd5 3a00 	vldr	s7, [r5]
 801060c:	ee76 6a84 	vadd.f32	s13, s13, s8
 8010610:	ed95 7a01 	vldr	s14, [r5, #4]
 8010614:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8010618:	ee24 4aa3 	vmul.f32	s8, s9, s7
 801061c:	2304      	movs	r3, #4
 801061e:	ee64 4a87 	vmul.f32	s9, s9, s14
 8010622:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010626:	ee25 5a23 	vmul.f32	s10, s10, s7
 801062a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801062e:	ee34 7a07 	vadd.f32	s14, s8, s14
 8010632:	ee35 5a64 	vsub.f32	s10, s10, s9
 8010636:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801063a:	ed82 7a00 	vstr	s14, [r2]
 801063e:	ed82 5a01 	vstr	s10, [r2, #4]
 8010642:	9a03      	ldr	r2, [sp, #12]
 8010644:	edd2 4a01 	vldr	s9, [r2, #4]
 8010648:	ed92 7a00 	vldr	s14, [r2]
 801064c:	9a02      	ldr	r2, [sp, #8]
 801064e:	ee26 5a07 	vmul.f32	s10, s12, s14
 8010652:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010656:	ee25 7a87 	vmul.f32	s14, s11, s14
 801065a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801065e:	ee37 6a46 	vsub.f32	s12, s14, s12
 8010662:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010666:	edc2 5a00 	vstr	s11, [r2]
 801066a:	ed82 6a01 	vstr	s12, [r2, #4]
 801066e:	9a04      	ldr	r2, [sp, #16]
 8010670:	9d01      	ldr	r5, [sp, #4]
 8010672:	edd2 5a01 	vldr	s11, [r2, #4]
 8010676:	ed92 7a00 	vldr	s14, [r2]
 801067a:	ee27 6a87 	vmul.f32	s12, s15, s14
 801067e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010682:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010686:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801068a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801068e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010692:	edc5 7a01 	vstr	s15, [r5, #4]
 8010696:	edc5 6a00 	vstr	s13, [r5]
 801069a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801069c:	686a      	ldr	r2, [r5, #4]
 801069e:	f000 f8b5 	bl	801080c <arm_radix8_butterfly_f32>
 80106a2:	4630      	mov	r0, r6
 80106a4:	4621      	mov	r1, r4
 80106a6:	686a      	ldr	r2, [r5, #4]
 80106a8:	2304      	movs	r3, #4
 80106aa:	f000 f8af 	bl	801080c <arm_radix8_butterfly_f32>
 80106ae:	4638      	mov	r0, r7
 80106b0:	4621      	mov	r1, r4
 80106b2:	686a      	ldr	r2, [r5, #4]
 80106b4:	2304      	movs	r3, #4
 80106b6:	f000 f8a9 	bl	801080c <arm_radix8_butterfly_f32>
 80106ba:	4621      	mov	r1, r4
 80106bc:	686a      	ldr	r2, [r5, #4]
 80106be:	2304      	movs	r3, #4
 80106c0:	9808      	ldr	r0, [sp, #32]
 80106c2:	b00d      	add	sp, #52	; 0x34
 80106c4:	ecbd 8b04 	vpop	{d8-d9}
 80106c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106cc:	f000 b89e 	b.w	801080c <arm_radix8_butterfly_f32>

080106d0 <arm_cfft_f32>:
 80106d0:	2a01      	cmp	r2, #1
 80106d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d6:	4606      	mov	r6, r0
 80106d8:	4617      	mov	r7, r2
 80106da:	460c      	mov	r4, r1
 80106dc:	4698      	mov	r8, r3
 80106de:	8805      	ldrh	r5, [r0, #0]
 80106e0:	d055      	beq.n	801078e <arm_cfft_f32+0xbe>
 80106e2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80106e6:	d061      	beq.n	80107ac <arm_cfft_f32+0xdc>
 80106e8:	d916      	bls.n	8010718 <arm_cfft_f32+0x48>
 80106ea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80106ee:	d01a      	beq.n	8010726 <arm_cfft_f32+0x56>
 80106f0:	d946      	bls.n	8010780 <arm_cfft_f32+0xb0>
 80106f2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80106f6:	d059      	beq.n	80107ac <arm_cfft_f32+0xdc>
 80106f8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80106fc:	d105      	bne.n	801070a <arm_cfft_f32+0x3a>
 80106fe:	2301      	movs	r3, #1
 8010700:	6872      	ldr	r2, [r6, #4]
 8010702:	4629      	mov	r1, r5
 8010704:	4620      	mov	r0, r4
 8010706:	f000 f881 	bl	801080c <arm_radix8_butterfly_f32>
 801070a:	f1b8 0f00 	cmp.w	r8, #0
 801070e:	d111      	bne.n	8010734 <arm_cfft_f32+0x64>
 8010710:	2f01      	cmp	r7, #1
 8010712:	d016      	beq.n	8010742 <arm_cfft_f32+0x72>
 8010714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010718:	2d20      	cmp	r5, #32
 801071a:	d047      	beq.n	80107ac <arm_cfft_f32+0xdc>
 801071c:	d934      	bls.n	8010788 <arm_cfft_f32+0xb8>
 801071e:	2d40      	cmp	r5, #64	; 0x40
 8010720:	d0ed      	beq.n	80106fe <arm_cfft_f32+0x2e>
 8010722:	2d80      	cmp	r5, #128	; 0x80
 8010724:	d1f1      	bne.n	801070a <arm_cfft_f32+0x3a>
 8010726:	4621      	mov	r1, r4
 8010728:	4630      	mov	r0, r6
 801072a:	f7ff fca9 	bl	8010080 <arm_cfft_radix8by2_f32>
 801072e:	f1b8 0f00 	cmp.w	r8, #0
 8010732:	d0ed      	beq.n	8010710 <arm_cfft_f32+0x40>
 8010734:	68b2      	ldr	r2, [r6, #8]
 8010736:	4620      	mov	r0, r4
 8010738:	89b1      	ldrh	r1, [r6, #12]
 801073a:	f000 f83f 	bl	80107bc <arm_bitreversal_32>
 801073e:	2f01      	cmp	r7, #1
 8010740:	d1e8      	bne.n	8010714 <arm_cfft_f32+0x44>
 8010742:	ee07 5a90 	vmov	s15, r5
 8010746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801074a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801074e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010752:	2d00      	cmp	r5, #0
 8010754:	d0de      	beq.n	8010714 <arm_cfft_f32+0x44>
 8010756:	f104 0108 	add.w	r1, r4, #8
 801075a:	2300      	movs	r3, #0
 801075c:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010760:	3301      	adds	r3, #1
 8010762:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010766:	3108      	adds	r1, #8
 8010768:	429d      	cmp	r5, r3
 801076a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801076e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010772:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010776:	ed41 7a03 	vstr	s15, [r1, #-12]
 801077a:	d1ef      	bne.n	801075c <arm_cfft_f32+0x8c>
 801077c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010780:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010784:	d0bb      	beq.n	80106fe <arm_cfft_f32+0x2e>
 8010786:	e7c0      	b.n	801070a <arm_cfft_f32+0x3a>
 8010788:	2d10      	cmp	r5, #16
 801078a:	d0cc      	beq.n	8010726 <arm_cfft_f32+0x56>
 801078c:	e7bd      	b.n	801070a <arm_cfft_f32+0x3a>
 801078e:	b195      	cbz	r5, 80107b6 <arm_cfft_f32+0xe6>
 8010790:	f101 030c 	add.w	r3, r1, #12
 8010794:	2200      	movs	r2, #0
 8010796:	ed53 7a02 	vldr	s15, [r3, #-8]
 801079a:	3201      	adds	r2, #1
 801079c:	3308      	adds	r3, #8
 801079e:	eef1 7a67 	vneg.f32	s15, s15
 80107a2:	4295      	cmp	r5, r2
 80107a4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80107a8:	d1f5      	bne.n	8010796 <arm_cfft_f32+0xc6>
 80107aa:	e79a      	b.n	80106e2 <arm_cfft_f32+0x12>
 80107ac:	4621      	mov	r1, r4
 80107ae:	4630      	mov	r0, r6
 80107b0:	f7ff fd32 	bl	8010218 <arm_cfft_radix8by4_f32>
 80107b4:	e7a9      	b.n	801070a <arm_cfft_f32+0x3a>
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d0ac      	beq.n	8010714 <arm_cfft_f32+0x44>
 80107ba:	e7bb      	b.n	8010734 <arm_cfft_f32+0x64>

080107bc <arm_bitreversal_32>:
 80107bc:	b321      	cbz	r1, 8010808 <arm_bitreversal_32+0x4c>
 80107be:	f102 0c02 	add.w	ip, r2, #2
 80107c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c6:	4690      	mov	r8, r2
 80107c8:	2500      	movs	r5, #0
 80107ca:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 80107ce:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 80107d2:	3502      	adds	r5, #2
 80107d4:	08a4      	lsrs	r4, r4, #2
 80107d6:	089b      	lsrs	r3, r3, #2
 80107d8:	428d      	cmp	r5, r1
 80107da:	ea4f 0784 	mov.w	r7, r4, lsl #2
 80107de:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 80107e2:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80107e6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80107ea:	f107 0704 	add.w	r7, r7, #4
 80107ee:	f106 0604 	add.w	r6, r6, #4
 80107f2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80107f6:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 80107fa:	59c4      	ldr	r4, [r0, r7]
 80107fc:	5983      	ldr	r3, [r0, r6]
 80107fe:	51c3      	str	r3, [r0, r7]
 8010800:	5184      	str	r4, [r0, r6]
 8010802:	d3e2      	bcc.n	80107ca <arm_bitreversal_32+0xe>
 8010804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop

0801080c <arm_radix8_butterfly_f32>:
 801080c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010810:	ed2d 8b10 	vpush	{d8-d15}
 8010814:	b095      	sub	sp, #84	; 0x54
 8010816:	468a      	mov	sl, r1
 8010818:	468b      	mov	fp, r1
 801081a:	eddf 8abb 	vldr	s17, [pc, #748]	; 8010b08 <arm_radix8_butterfly_f32+0x2fc>
 801081e:	9012      	str	r0, [sp, #72]	; 0x48
 8010820:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8010824:	4603      	mov	r3, r0
 8010826:	3304      	adds	r3, #4
 8010828:	9313      	str	r3, [sp, #76]	; 0x4c
 801082a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801082e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010834:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8010838:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801083c:	920f      	str	r2, [sp, #60]	; 0x3c
 801083e:	9303      	str	r3, [sp, #12]
 8010840:	0153      	lsls	r3, r2, #5
 8010842:	0114      	lsls	r4, r2, #4
 8010844:	eba9 0002 	sub.w	r0, r9, r2
 8010848:	18ce      	adds	r6, r1, r3
 801084a:	9302      	str	r3, [sp, #8]
 801084c:	0097      	lsls	r7, r2, #2
 801084e:	4613      	mov	r3, r2
 8010850:	eb06 0509 	add.w	r5, r6, r9
 8010854:	9004      	str	r0, [sp, #16]
 8010856:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 801085a:	1bd2      	subs	r2, r2, r7
 801085c:	eb05 0109 	add.w	r1, r5, r9
 8010860:	441f      	add	r7, r3
 8010862:	9405      	str	r4, [sp, #20]
 8010864:	f109 0004 	add.w	r0, r9, #4
 8010868:	9101      	str	r1, [sp, #4]
 801086a:	1d21      	adds	r1, r4, #4
 801086c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801086e:	f04f 0e00 	mov.w	lr, #0
 8010872:	9c01      	ldr	r4, [sp, #4]
 8010874:	4418      	add	r0, r3
 8010876:	4419      	add	r1, r3
 8010878:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801087c:	9b02      	ldr	r3, [sp, #8]
 801087e:	00fc      	lsls	r4, r7, #3
 8010880:	18d7      	adds	r7, r2, r3
 8010882:	9b04      	ldr	r3, [sp, #16]
 8010884:	9406      	str	r4, [sp, #24]
 8010886:	00db      	lsls	r3, r3, #3
 8010888:	9c01      	ldr	r4, [sp, #4]
 801088a:	9307      	str	r3, [sp, #28]
 801088c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8010890:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010894:	9304      	str	r3, [sp, #16]
 8010896:	9b03      	ldr	r3, [sp, #12]
 8010898:	edd6 6a00 	vldr	s13, [r6]
 801089c:	44de      	add	lr, fp
 801089e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80108a2:	ed94 7a00 	vldr	s14, [r4]
 80108a6:	45f2      	cmp	sl, lr
 80108a8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80108ac:	ee37 2aa6 	vadd.f32	s4, s15, s13
 80108b0:	edd5 2a00 	vldr	s5, [r5]
 80108b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80108b8:	edd7 3a00 	vldr	s7, [r7]
 80108bc:	ed11 5a01 	vldr	s10, [r1, #-4]
 80108c0:	ee36 3a22 	vadd.f32	s6, s12, s5
 80108c4:	edd2 6a00 	vldr	s13, [r2]
 80108c8:	ee75 5a07 	vadd.f32	s11, s10, s14
 80108cc:	ee36 4aa3 	vadd.f32	s8, s13, s7
 80108d0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80108d4:	ee72 4a25 	vadd.f32	s9, s4, s11
 80108d8:	ee73 3a04 	vadd.f32	s7, s6, s8
 80108dc:	ee35 5a47 	vsub.f32	s10, s10, s14
 80108e0:	ee36 7a62 	vsub.f32	s14, s12, s5
 80108e4:	ee32 2a65 	vsub.f32	s4, s4, s11
 80108e8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 80108ec:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80108f0:	ee37 6a66 	vsub.f32	s12, s14, s13
 80108f4:	ed4c 5a01 	vstr	s11, [ip, #-4]
 80108f8:	ee33 3a44 	vsub.f32	s6, s6, s8
 80108fc:	edc6 4a00 	vstr	s9, [r6]
 8010900:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010904:	ed97 4a01 	vldr	s8, [r7, #4]
 8010908:	ee66 6a28 	vmul.f32	s13, s12, s17
 801090c:	edd0 5a00 	vldr	s11, [r0]
 8010910:	ed95 6a01 	vldr	s12, [r5, #4]
 8010914:	ee27 7a28 	vmul.f32	s14, s14, s17
 8010918:	edd2 3a01 	vldr	s7, [r2, #4]
 801091c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8010920:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8010924:	ed96 1a01 	vldr	s2, [r6, #4]
 8010928:	ee33 0ac4 	vsub.f32	s0, s7, s8
 801092c:	edd4 0a01 	vldr	s1, [r4, #4]
 8010930:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010934:	eddc 6a00 	vldr	s13, [ip]
 8010938:	ee75 5a86 	vadd.f32	s11, s11, s12
 801093c:	ed91 6a00 	vldr	s12, [r1]
 8010940:	ee73 3a84 	vadd.f32	s7, s7, s8
 8010944:	ee74 1a80 	vadd.f32	s3, s9, s0
 8010948:	ee36 4a81 	vadd.f32	s8, s13, s2
 801094c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010950:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8010954:	ee36 1a20 	vadd.f32	s2, s12, s1
 8010958:	ee61 1aa8 	vmul.f32	s3, s3, s17
 801095c:	ee36 6a60 	vsub.f32	s12, s12, s1
 8010960:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8010964:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8010968:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801096c:	ee74 3a01 	vadd.f32	s7, s8, s2
 8010970:	ee34 4a41 	vsub.f32	s8, s8, s2
 8010974:	ee36 1a21 	vadd.f32	s2, s12, s3
 8010978:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801097c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8010980:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8010984:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8010988:	ed8c 0a00 	vstr	s0, [ip]
 801098c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010990:	449c      	add	ip, r3
 8010992:	ee75 4a07 	vadd.f32	s9, s10, s14
 8010996:	edc6 3a01 	vstr	s7, [r6, #4]
 801099a:	ee35 7a47 	vsub.f32	s14, s10, s14
 801099e:	441e      	add	r6, r3
 80109a0:	ee32 5a25 	vadd.f32	s10, s4, s11
 80109a4:	ee72 5a65 	vsub.f32	s11, s4, s11
 80109a8:	ee72 3a81 	vadd.f32	s7, s5, s2
 80109ac:	ed01 5a01 	vstr	s10, [r1, #-4]
 80109b0:	ee34 2a43 	vsub.f32	s4, s8, s6
 80109b4:	edc4 5a00 	vstr	s11, [r4]
 80109b8:	ee37 5a86 	vadd.f32	s10, s15, s12
 80109bc:	ee71 5ae4 	vsub.f32	s11, s3, s9
 80109c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80109c4:	ed81 2a00 	vstr	s4, [r1]
 80109c8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 80109cc:	4419      	add	r1, r3
 80109ce:	ee33 4a04 	vadd.f32	s8, s6, s8
 80109d2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 80109d6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 80109da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80109de:	ed84 4a01 	vstr	s8, [r4, #4]
 80109e2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80109e6:	441c      	add	r4, r3
 80109e8:	edc7 2a00 	vstr	s5, [r7]
 80109ec:	ed85 5a00 	vstr	s10, [r5]
 80109f0:	edc2 7a00 	vstr	s15, [r2]
 80109f4:	edc0 5a00 	vstr	s11, [r0]
 80109f8:	4418      	add	r0, r3
 80109fa:	edc7 4a01 	vstr	s9, [r7, #4]
 80109fe:	441f      	add	r7, r3
 8010a00:	ed85 6a01 	vstr	s12, [r5, #4]
 8010a04:	441d      	add	r5, r3
 8010a06:	ed82 7a01 	vstr	s14, [r2, #4]
 8010a0a:	441a      	add	r2, r3
 8010a0c:	f63f af44 	bhi.w	8010898 <arm_radix8_butterfly_f32+0x8c>
 8010a10:	469c      	mov	ip, r3
 8010a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a14:	2b07      	cmp	r3, #7
 8010a16:	f240 81b6 	bls.w	8010d86 <arm_radix8_butterfly_f32+0x57a>
 8010a1a:	9a02      	ldr	r2, [sp, #8]
 8010a1c:	f109 0608 	add.w	r6, r9, #8
 8010a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a22:	f108 0408 	add.w	r4, r8, #8
 8010a26:	3208      	adds	r2, #8
 8010a28:	9f06      	ldr	r7, [sp, #24]
 8010a2a:	9d04      	ldr	r5, [sp, #16]
 8010a2c:	189a      	adds	r2, r3, r2
 8010a2e:	3708      	adds	r7, #8
 8010a30:	3508      	adds	r5, #8
 8010a32:	9807      	ldr	r0, [sp, #28]
 8010a34:	920c      	str	r2, [sp, #48]	; 0x30
 8010a36:	199a      	adds	r2, r3, r6
 8010a38:	9905      	ldr	r1, [sp, #20]
 8010a3a:	3008      	adds	r0, #8
 8010a3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a3e:	19da      	adds	r2, r3, r7
 8010a40:	310c      	adds	r1, #12
 8010a42:	920a      	str	r2, [sp, #40]	; 0x28
 8010a44:	195a      	adds	r2, r3, r5
 8010a46:	9209      	str	r2, [sp, #36]	; 0x24
 8010a48:	191a      	adds	r2, r3, r4
 8010a4a:	9208      	str	r2, [sp, #32]
 8010a4c:	181a      	adds	r2, r3, r0
 8010a4e:	9207      	str	r2, [sp, #28]
 8010a50:	185a      	adds	r2, r3, r1
 8010a52:	330c      	adds	r3, #12
 8010a54:	9205      	str	r2, [sp, #20]
 8010a56:	9306      	str	r3, [sp, #24]
 8010a58:	2301      	movs	r3, #1
 8010a5a:	9304      	str	r3, [sp, #16]
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8010a60:	4663      	mov	r3, ip
 8010a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010a66:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010a6a:	440a      	add	r2, r1
 8010a6c:	9f06      	ldr	r7, [sp, #24]
 8010a6e:	9e07      	ldr	r6, [sp, #28]
 8010a70:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8010a74:	920d      	str	r2, [sp, #52]	; 0x34
 8010a76:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 8010a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010a7c:	9d08      	ldr	r5, [sp, #32]
 8010a7e:	4442      	add	r2, r8
 8010a80:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010a82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a84:	eb02 0108 	add.w	r1, r2, r8
 8010a88:	ed92 ea00 	vldr	s28, [r2]
 8010a8c:	eb01 0208 	add.w	r2, r1, r8
 8010a90:	edd1 da00 	vldr	s27, [r1]
 8010a94:	eb02 0108 	add.w	r1, r2, r8
 8010a98:	ed92 da00 	vldr	s26, [r2]
 8010a9c:	eb01 0208 	add.w	r2, r1, r8
 8010aa0:	edd1 ca00 	vldr	s25, [r1]
 8010aa4:	eb02 0108 	add.w	r1, r2, r8
 8010aa8:	ed92 ca00 	vldr	s24, [r2]
 8010aac:	eb01 0208 	add.w	r2, r1, r8
 8010ab0:	edd1 ba00 	vldr	s23, [r1]
 8010ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ab6:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8010aba:	ed92 ba00 	vldr	s22, [r2]
 8010abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ac0:	eb0e 0908 	add.w	r9, lr, r8
 8010ac4:	910e      	str	r1, [sp, #56]	; 0x38
 8010ac6:	9201      	str	r2, [sp, #4]
 8010ac8:	eb09 0208 	add.w	r2, r9, r8
 8010acc:	ed99 aa01 	vldr	s20, [r9, #4]
 8010ad0:	edde aa01 	vldr	s21, [lr, #4]
 8010ad4:	eb02 0908 	add.w	r9, r2, r8
 8010ad8:	edd2 9a01 	vldr	s19, [r2, #4]
 8010adc:	f8dd e010 	ldr.w	lr, [sp, #16]
 8010ae0:	eb09 0208 	add.w	r2, r9, r8
 8010ae4:	ed99 9a01 	vldr	s18, [r9, #4]
 8010ae8:	eb02 0908 	add.w	r9, r2, r8
 8010aec:	ed92 8a01 	vldr	s16, [r2, #4]
 8010af0:	9a01      	ldr	r2, [sp, #4]
 8010af2:	edd9 7a01 	vldr	s15, [r9, #4]
 8010af6:	44c8      	add	r8, r9
 8010af8:	edcd 7a02 	vstr	s15, [sp, #8]
 8010afc:	edd8 7a01 	vldr	s15, [r8, #4]
 8010b00:	edcd 7a03 	vstr	s15, [sp, #12]
 8010b04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010b06:	e001      	b.n	8010b0c <arm_radix8_butterfly_f32+0x300>
 8010b08:	3f3504f3 	.word	0x3f3504f3
 8010b0c:	ed92 7a00 	vldr	s14, [r2]
 8010b10:	44de      	add	lr, fp
 8010b12:	ed17 1a01 	vldr	s2, [r7, #-4]
 8010b16:	ed90 5a00 	vldr	s10, [r0]
 8010b1a:	45f2      	cmp	sl, lr
 8010b1c:	ed1c fa01 	vldr	s30, [ip, #-4]
 8010b20:	ee31 3a07 	vadd.f32	s6, s2, s14
 8010b24:	edd6 5a00 	vldr	s11, [r6]
 8010b28:	ee31 1a47 	vsub.f32	s2, s2, s14
 8010b2c:	edd4 7a00 	vldr	s15, [r4]
 8010b30:	ed95 7a00 	vldr	s14, [r5]
 8010b34:	ed91 4a00 	vldr	s8, [r1]
 8010b38:	ee3f 6a27 	vadd.f32	s12, s30, s15
 8010b3c:	ee77 6a25 	vadd.f32	s13, s14, s11
 8010b40:	edd7 ea00 	vldr	s29, [r7]
 8010b44:	ee74 fa05 	vadd.f32	s31, s8, s10
 8010b48:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010b4c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8010b50:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8010b54:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010b58:	ee33 3a46 	vsub.f32	s6, s6, s12
 8010b5c:	ee31 6a85 	vadd.f32	s12, s3, s10
 8010b60:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8010b64:	ee34 fa07 	vadd.f32	s30, s8, s14
 8010b68:	ed07 6a01 	vstr	s12, [r7, #-4]
 8010b6c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010b70:	edd5 3a01 	vldr	s7, [r5, #4]
 8010b74:	ee7f fae6 	vsub.f32	s31, s31, s13
 8010b78:	ed90 7a01 	vldr	s14, [r0, #4]
 8010b7c:	ee2f fa28 	vmul.f32	s30, s30, s17
 8010b80:	edd1 5a01 	vldr	s11, [r1, #4]
 8010b84:	ee24 4a28 	vmul.f32	s8, s8, s17
 8010b88:	ed96 6a01 	vldr	s12, [r6, #4]
 8010b8c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8010b90:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8010b94:	edd2 6a01 	vldr	s13, [r2, #4]
 8010b98:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8010b9c:	edd4 4a01 	vldr	s9, [r4, #4]
 8010ba0:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010ba4:	ed9c 7a00 	vldr	s14, [ip]
 8010ba8:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8010bac:	ee33 6a86 	vadd.f32	s12, s7, s12
 8010bb0:	ee37 facf 	vsub.f32	s30, s15, s30
 8010bb4:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8010bb8:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8010bbc:	ee7e eae6 	vsub.f32	s29, s29, s13
 8010bc0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8010bc4:	ee77 6a24 	vadd.f32	s13, s14, s9
 8010bc8:	ee75 0a86 	vadd.f32	s1, s11, s12
 8010bcc:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010bd0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010bd4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010bd8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8010bdc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010be0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8010be4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8010be8:	ee77 4a22 	vadd.f32	s9, s14, s5
 8010bec:	ee7e eae7 	vsub.f32	s29, s29, s15
 8010bf0:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010bf4:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010bf8:	ee31 7a44 	vsub.f32	s14, s2, s8
 8010bfc:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010c00:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010c04:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010c08:	ee33 3aef 	vsub.f32	s6, s7, s31
 8010c0c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8010c10:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8010c14:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8010c18:	ee72 5a25 	vadd.f32	s11, s4, s11
 8010c1c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010c20:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8010c24:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c2c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8010c30:	ee2c fa85 	vmul.f32	s30, s25, s10
 8010c34:	ee69 ea01 	vmul.f32	s29, s18, s2
 8010c38:	ee29 5a05 	vmul.f32	s10, s18, s10
 8010c3c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8010c40:	ee6d faa1 	vmul.f32	s31, s27, s3
 8010c44:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010c48:	ee6a 1a21 	vmul.f32	s3, s20, s3
 8010c4c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8010c50:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8010c54:	edc7 0a00 	vstr	s1, [r7]
 8010c58:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8010c5c:	441f      	add	r7, r3
 8010c5e:	ee2a faa3 	vmul.f32	s30, s21, s7
 8010c62:	ee31 5a45 	vsub.f32	s10, s2, s10
 8010c66:	ee6e 3a23 	vmul.f32	s7, s28, s7
 8010c6a:	edc2 ea00 	vstr	s29, [r2]
 8010c6e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8010c72:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010c76:	ed82 5a01 	vstr	s10, [r2, #4]
 8010c7a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 8010c7e:	edcd 3a01 	vstr	s7, [sp, #4]
 8010c82:	ed9d 5a03 	vldr	s10, [sp, #12]
 8010c86:	ee6b ea86 	vmul.f32	s29, s23, s12
 8010c8a:	eddd 3a02 	vldr	s7, [sp, #8]
 8010c8e:	ee6b fa24 	vmul.f32	s31, s22, s9
 8010c92:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8010c96:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010c9a:	ed8c 3a00 	vstr	s6, [ip]
 8010c9e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8010ca2:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010ca6:	eddd 3a01 	vldr	s7, [sp, #4]
 8010caa:	ee25 5a25 	vmul.f32	s10, s10, s11
 8010cae:	441a      	add	r2, r3
 8010cb0:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8010cb4:	449c      	add	ip, r3
 8010cb6:	ee68 1a04 	vmul.f32	s3, s16, s8
 8010cba:	ee70 0a8f 	vadd.f32	s1, s1, s30
 8010cbe:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8010cc2:	ee29 faa7 	vmul.f32	s30, s19, s15
 8010cc6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 8010cca:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 8010cce:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8010cd2:	ee68 2a22 	vmul.f32	s5, s16, s5
 8010cd6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8010cda:	ee29 7a87 	vmul.f32	s14, s19, s14
 8010cde:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8010ce2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8010ce6:	ee7e ea81 	vadd.f32	s29, s29, s2
 8010cea:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010cee:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8010cf2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010cf6:	edc4 ea00 	vstr	s29, [r4]
 8010cfa:	ee30 0a21 	vadd.f32	s0, s0, s3
 8010cfe:	ed84 6a01 	vstr	s12, [r4, #4]
 8010d02:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010d06:	edc1 0a00 	vstr	s1, [r1]
 8010d0a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 8010d0e:	edc1 3a01 	vstr	s7, [r1, #4]
 8010d12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010d16:	ed86 5a00 	vstr	s10, [r6]
 8010d1a:	edc6 4a01 	vstr	s9, [r6, #4]
 8010d1e:	4419      	add	r1, r3
 8010d20:	ed80 0a00 	vstr	s0, [r0]
 8010d24:	441c      	add	r4, r3
 8010d26:	edc0 2a01 	vstr	s5, [r0, #4]
 8010d2a:	441e      	add	r6, r3
 8010d2c:	ed85 3a00 	vstr	s6, [r5]
 8010d30:	4418      	add	r0, r3
 8010d32:	ed85 7a01 	vstr	s14, [r5, #4]
 8010d36:	441d      	add	r5, r3
 8010d38:	f63f aee8 	bhi.w	8010b0c <arm_radix8_butterfly_f32+0x300>
 8010d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d3e:	9a04      	ldr	r2, [sp, #16]
 8010d40:	3108      	adds	r1, #8
 8010d42:	3201      	adds	r2, #1
 8010d44:	910c      	str	r1, [sp, #48]	; 0x30
 8010d46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d48:	9204      	str	r2, [sp, #16]
 8010d4a:	3108      	adds	r1, #8
 8010d4c:	910b      	str	r1, [sp, #44]	; 0x2c
 8010d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d50:	3108      	adds	r1, #8
 8010d52:	910a      	str	r1, [sp, #40]	; 0x28
 8010d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d56:	3108      	adds	r1, #8
 8010d58:	9109      	str	r1, [sp, #36]	; 0x24
 8010d5a:	9908      	ldr	r1, [sp, #32]
 8010d5c:	3108      	adds	r1, #8
 8010d5e:	9108      	str	r1, [sp, #32]
 8010d60:	9907      	ldr	r1, [sp, #28]
 8010d62:	3108      	adds	r1, #8
 8010d64:	9107      	str	r1, [sp, #28]
 8010d66:	9906      	ldr	r1, [sp, #24]
 8010d68:	3108      	adds	r1, #8
 8010d6a:	9106      	str	r1, [sp, #24]
 8010d6c:	9905      	ldr	r1, [sp, #20]
 8010d6e:	3108      	adds	r1, #8
 8010d70:	9105      	str	r1, [sp, #20]
 8010d72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010d74:	4291      	cmp	r1, r2
 8010d76:	f47f ae74 	bne.w	8010a62 <arm_radix8_butterfly_f32+0x256>
 8010d7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d7c:	468b      	mov	fp, r1
 8010d7e:	00db      	lsls	r3, r3, #3
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	9310      	str	r3, [sp, #64]	; 0x40
 8010d84:	e551      	b.n	801082a <arm_radix8_butterfly_f32+0x1e>
 8010d86:	b015      	add	sp, #84	; 0x54
 8010d88:	ecbd 8b10 	vpop	{d8-d15}
 8010d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d90 <__errno>:
 8010d90:	4b01      	ldr	r3, [pc, #4]	; (8010d98 <__errno+0x8>)
 8010d92:	6818      	ldr	r0, [r3, #0]
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop
 8010d98:	24000018 	.word	0x24000018

08010d9c <__libc_init_array>:
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	4d0d      	ldr	r5, [pc, #52]	; (8010dd4 <__libc_init_array+0x38>)
 8010da0:	4c0d      	ldr	r4, [pc, #52]	; (8010dd8 <__libc_init_array+0x3c>)
 8010da2:	1b64      	subs	r4, r4, r5
 8010da4:	10a4      	asrs	r4, r4, #2
 8010da6:	2600      	movs	r6, #0
 8010da8:	42a6      	cmp	r6, r4
 8010daa:	d109      	bne.n	8010dc0 <__libc_init_array+0x24>
 8010dac:	4d0b      	ldr	r5, [pc, #44]	; (8010ddc <__libc_init_array+0x40>)
 8010dae:	4c0c      	ldr	r4, [pc, #48]	; (8010de0 <__libc_init_array+0x44>)
 8010db0:	f000 f8e0 	bl	8010f74 <_init>
 8010db4:	1b64      	subs	r4, r4, r5
 8010db6:	10a4      	asrs	r4, r4, #2
 8010db8:	2600      	movs	r6, #0
 8010dba:	42a6      	cmp	r6, r4
 8010dbc:	d105      	bne.n	8010dca <__libc_init_array+0x2e>
 8010dbe:	bd70      	pop	{r4, r5, r6, pc}
 8010dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dc4:	4798      	blx	r3
 8010dc6:	3601      	adds	r6, #1
 8010dc8:	e7ee      	b.n	8010da8 <__libc_init_array+0xc>
 8010dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dce:	4798      	blx	r3
 8010dd0:	3601      	adds	r6, #1
 8010dd2:	e7f2      	b.n	8010dba <__libc_init_array+0x1e>
 8010dd4:	08024260 	.word	0x08024260
 8010dd8:	08024260 	.word	0x08024260
 8010ddc:	08024260 	.word	0x08024260
 8010de0:	08024264 	.word	0x08024264

08010de4 <memcpy>:
 8010de4:	440a      	add	r2, r1
 8010de6:	4291      	cmp	r1, r2
 8010de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8010dec:	d100      	bne.n	8010df0 <memcpy+0xc>
 8010dee:	4770      	bx	lr
 8010df0:	b510      	push	{r4, lr}
 8010df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dfa:	4291      	cmp	r1, r2
 8010dfc:	d1f9      	bne.n	8010df2 <memcpy+0xe>
 8010dfe:	bd10      	pop	{r4, pc}

08010e00 <memset>:
 8010e00:	4402      	add	r2, r0
 8010e02:	4603      	mov	r3, r0
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d100      	bne.n	8010e0a <memset+0xa>
 8010e08:	4770      	bx	lr
 8010e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8010e0e:	e7f9      	b.n	8010e04 <memset+0x4>

08010e10 <logf>:
 8010e10:	ee10 3a10 	vmov	r3, s0
 8010e14:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010e18:	b410      	push	{r4}
 8010e1a:	d055      	beq.n	8010ec8 <logf+0xb8>
 8010e1c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8010e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8010e24:	d31a      	bcc.n	8010e5c <logf+0x4c>
 8010e26:	005a      	lsls	r2, r3, #1
 8010e28:	d104      	bne.n	8010e34 <logf+0x24>
 8010e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e2e:	2001      	movs	r0, #1
 8010e30:	f000 b880 	b.w	8010f34 <__math_divzerof>
 8010e34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010e38:	d043      	beq.n	8010ec2 <logf+0xb2>
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	db02      	blt.n	8010e44 <logf+0x34>
 8010e3e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8010e42:	d303      	bcc.n	8010e4c <logf+0x3c>
 8010e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e48:	f000 b884 	b.w	8010f54 <__math_invalidf>
 8010e4c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8010ed0 <logf+0xc0>
 8010e50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010e54:	ee10 3a10 	vmov	r3, s0
 8010e58:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8010e5c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8010e60:	491c      	ldr	r1, [pc, #112]	; (8010ed4 <logf+0xc4>)
 8010e62:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8010e66:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8010e6a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8010e6e:	0dd4      	lsrs	r4, r2, #23
 8010e70:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8010e74:	05e4      	lsls	r4, r4, #23
 8010e76:	ed90 6b00 	vldr	d6, [r0]
 8010e7a:	1b1b      	subs	r3, r3, r4
 8010e7c:	ee07 3a90 	vmov	s15, r3
 8010e80:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8010e84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010e88:	15d2      	asrs	r2, r2, #23
 8010e8a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010e8e:	ed90 6b02 	vldr	d6, [r0, #8]
 8010e92:	ee20 4b00 	vmul.f64	d4, d0, d0
 8010e96:	ee07 2a90 	vmov	s15, r2
 8010e9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010e9e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010ea2:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8010ea6:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8010eaa:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010eae:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8010eb2:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010eb6:	eea5 7b04 	vfma.f64	d7, d5, d4
 8010eba:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010ebe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ec6:	4770      	bx	lr
 8010ec8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010ed8 <logf+0xc8>
 8010ecc:	e7f9      	b.n	8010ec2 <logf+0xb2>
 8010ece:	bf00      	nop
 8010ed0:	4b000000 	.word	0x4b000000
 8010ed4:	08024138 	.word	0x08024138
 8010ed8:	00000000 	.word	0x00000000

08010edc <sqrtf>:
 8010edc:	b508      	push	{r3, lr}
 8010ede:	ed2d 8b02 	vpush	{d8}
 8010ee2:	eeb0 8a40 	vmov.f32	s16, s0
 8010ee6:	f000 f817 	bl	8010f18 <__ieee754_sqrtf>
 8010eea:	eeb4 8a48 	vcmp.f32	s16, s16
 8010eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef2:	d60c      	bvs.n	8010f0e <sqrtf+0x32>
 8010ef4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010f14 <sqrtf+0x38>
 8010ef8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f00:	d505      	bpl.n	8010f0e <sqrtf+0x32>
 8010f02:	f7ff ff45 	bl	8010d90 <__errno>
 8010f06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010f0a:	2321      	movs	r3, #33	; 0x21
 8010f0c:	6003      	str	r3, [r0, #0]
 8010f0e:	ecbd 8b02 	vpop	{d8}
 8010f12:	bd08      	pop	{r3, pc}
 8010f14:	00000000 	.word	0x00000000

08010f18 <__ieee754_sqrtf>:
 8010f18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010f1c:	4770      	bx	lr

08010f1e <with_errnof>:
 8010f1e:	b513      	push	{r0, r1, r4, lr}
 8010f20:	4604      	mov	r4, r0
 8010f22:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010f26:	f7ff ff33 	bl	8010d90 <__errno>
 8010f2a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010f2e:	6004      	str	r4, [r0, #0]
 8010f30:	b002      	add	sp, #8
 8010f32:	bd10      	pop	{r4, pc}

08010f34 <__math_divzerof>:
 8010f34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010f38:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8010f42:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010f50 <__math_divzerof+0x1c>
 8010f46:	2022      	movs	r0, #34	; 0x22
 8010f48:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010f4c:	f7ff bfe7 	b.w	8010f1e <with_errnof>
 8010f50:	00000000 	.word	0x00000000

08010f54 <__math_invalidf>:
 8010f54:	eef0 7a40 	vmov.f32	s15, s0
 8010f58:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010f5c:	eef4 7a67 	vcmp.f32	s15, s15
 8010f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f64:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8010f68:	d602      	bvs.n	8010f70 <__math_invalidf+0x1c>
 8010f6a:	2021      	movs	r0, #33	; 0x21
 8010f6c:	f7ff bfd7 	b.w	8010f1e <with_errnof>
 8010f70:	4770      	bx	lr
	...

08010f74 <_init>:
 8010f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f76:	bf00      	nop
 8010f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f7a:	bc08      	pop	{r3}
 8010f7c:	469e      	mov	lr, r3
 8010f7e:	4770      	bx	lr

08010f80 <_fini>:
 8010f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f82:	bf00      	nop
 8010f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f86:	bc08      	pop	{r3}
 8010f88:	469e      	mov	lr, r3
 8010f8a:	4770      	bx	lr
